{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"d6cd47ba4ab178269d9e7be773e521a3f74a738b","modified":1526560901168},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1526560901192},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1526560901192},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1526560901192},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1526560901193},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1526560901193},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1526560901193},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1526560901193},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1526560901194},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1526560901194},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1526560901194},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1526560901194},{"_id":"themes/next/README.md","hash":"898213e66d34a46c3cf8446bf693bd50db0d3269","modified":1526560901194},{"_id":"themes/next/_config.yml","hash":"db1f1dda7442a2a5542e2deb6507815df68c2cf2","modified":1528524676236},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1526560901195},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1526560901195},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1526560901210},{"_id":"source/categories/index.md","hash":"4ce908603fb8425473a170946f3f4fc0c1cbed9d","modified":1526560901175},{"_id":"source/_posts/58CityHouseSearch-JS.md","hash":"7882f969b33a8e6d3fc119f924693ed80ddfbbcd","modified":1526564031066},{"_id":"source/_posts/58CityHouseSearch_move_to_aspnetcore.md","hash":"52e9af746e17670ad19f1eebeb54f1f901c1768b","modified":1526560901169},{"_id":"source/_posts/ASP.NET-Core-Middleware.md","hash":"1d4fbac848b9d1581eb982a11e2d3aff0635a1db","modified":1526564052025},{"_id":"source/_posts/Bytes -To-String.md","hash":"39b1f93a7959d0c6cded75d23421a9fca6256421","modified":1526564057510},{"_id":"source/_posts/C#-58CityHouse-Crawler.md","hash":"51d8733898f7dc81fcd491ee7bc447eb200bd5e4","modified":1526564063634},{"_id":"source/_posts/C#-Join.md","hash":"ea018460d368188e727a77c07418361c48fb3094","modified":1526564076859},{"_id":"source/_posts/C#-LINQ优点总结(转载).md","hash":"2dfdb7c2cb517ed82da1e156fa6fa7d0de756318","modified":1526564087232},{"_id":"source/_posts/C#-类字段与类属性.md","hash":"e534ff5dfb884beceaa09e4ed4050a4e87467636","modified":1526564090502},{"_id":"source/_posts/C#.NET托管堆和垃圾回收(续).md","hash":"ed0806a916c832a229b424f576aea9b0a799311c","modified":1526564135968},{"_id":"source/_posts/C#.NET托管堆和垃圾回收.md","hash":"732b32191cc300a49f97cdf407b446ec3fff51b3","modified":1526564115664},{"_id":"source/_posts/C#为匿名类型定义局部函数.md","hash":"91eed72a9588be83a36364f99c4b0b247199c409","modified":1526564133125},{"_id":"source/_posts/C#技巧避免修改绑定变量.md","hash":"be92ebf472474aef113ce2e6515523ab29c8ce24","modified":1526564130029},{"_id":"source/_posts/C#避免在函数或者操作中抛出异常.md","hash":"197d005238b556f3f8d85daabc9637f4154f9405","modified":1526564153422},{"_id":"source/_posts/CLR-GC-Handle-Table.md","hash":"6a084a3a3618d0ac03a4034ad41d867ea639258c","modified":1526564164007},{"_id":"source/_posts/Can't_install_Preview2_on_fresh_VS2015_Update3_Installation.md","hash":"bc1d6e6f6413f2ac06a23c0d184c7e10c4342f6e","modified":1526564158304},{"_id":"source/_posts/CodeSmith-MySQL.md","hash":"f57fe6d06ff8e17cfe899c8084549b657488a430","modified":1526564170187},{"_id":"source/_posts/CodeSmith连接MySQL报错“找不到请求的 .Net Framework Data Provider。可能没有安装。”解决方法.md","hash":"b7096cbc3db4eb23d3fd00a1104010cb76f50253","modified":1526564175271},{"_id":"source/_posts/Jexus支持HTTPS协议.md","hash":"cb67605bf24f24e59281fa64da6035f666b8f167","modified":1526564236906},{"_id":"source/_posts/asp.net core启动方式.md","hash":"a1d30522eb09e46bb4abba124a594397ad634887","modified":1526564043763},{"_id":"source/_posts/auto_rebase_git_repository.md","hash":"ef9a875c1cdf2ee0cd15ec281aed399d78f40410","modified":1526560901173},{"_id":"source/_posts/how_to_make_crawler_base_netcore.md","hash":"29fde4f9e4866684f8bc3aeb6a25f56cf0adf203","modified":1526560901173},{"_id":"source/_posts/ipproy_for_crawler.md","hash":"f0478d09ab7c55adc40aa31318dcb403682e9701","modified":1526564185214},{"_id":"source/_posts/javascript_requirejs_rf_code.md","hash":"4c4b9ccf35123bdefa9effe4a12c91f3ebe98f61","modified":1526564193845},{"_id":"source/_posts/jenkins-dotnetcore.md","hash":"63f5db9211fb8f6ed56b3fc59c38832e00f64934","modified":1526564217264},{"_id":"source/_posts/linux-shell.md","hash":"2639ee192834e4df84699ca48ffedaaab5d77d55","modified":1526564454164},{"_id":"source/_posts/memorandum.md","hash":"b4b47710411523ee39f282b02679f5637e20749e","modified":1526564364386},{"_id":"source/_posts/mono-webreques-https-exception.md","hash":"32fba0594799a1c9c388a826c2c87cde6382140e","modified":1526564231137},{"_id":"source/_posts/some_script.md","hash":"cc7078e10a41e8eac4f2ad9ced7297e5f286e9fa","modified":1526564246833},{"_id":"source/_posts/the_first_aspnetcore.md","hash":"03d07ec389fa8c745ca0fa09f8e73c2b7ac01e41","modified":1526564256384},{"_id":"source/_posts/visualstudio_shortcut_key.md","hash":"1ebe10eca84f4c1b0401a2f4a31f038bcd9b1036","modified":1526560901174},{"_id":"source/_posts/visualstudiocode_for_php_debug.md","hash":"7d45f37fbc5bde1010f01dd43cc1083112d58796","modified":1526914311290},{"_id":"source/_posts/webchat_JS_SDK.md","hash":"554ee9cc633bb4bd4035d2f661af91ce5414e5d9","modified":1526561567979},{"_id":"source/tags/index.md","hash":"458cb13c75ec0d716e65de4367c6937b3f3de31d","modified":1526560901175},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1526560901192},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1526560901193},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1526560901193},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1526560901193},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1526560901195},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1526560901195},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1526560901195},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1526560901195},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1526560901196},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1526560901196},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1526560901196},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1526560901196},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1526560901196},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1526560901196},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1526560901197},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1526560901197},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1526560901197},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1526560901197},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1526560901197},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1526560901197},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1526560901198},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1526560901208},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1526560901209},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1526560901209},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1526560901209},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1526560901209},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1526560901209},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1526560901209},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1526560901210},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1526560901210},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1526560901261},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1526560901261},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1526560901262},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526560901229},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1526560901198},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1526560901198},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1526560901198},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1526560901198},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1526560901198},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1526560901199},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1526560901199},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1526560901199},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1526560901199},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1526560901199},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1526560901199},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1526560901200},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1526560901200},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1526560901200},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1526560901200},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1526560901202},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1526560901202},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1526560901203},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1526560901206},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1526560901206},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1526560901207},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1526560901207},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1526560901207},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1526560901207},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1526560901207},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1526560901210},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1526560901211},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1526560901211},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1526560901211},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1526560901211},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1526560901211},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1526560901211},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1526560901211},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1526560901212},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1526560901229},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1526560901230},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1526560901230},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1526560901230},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1526560901230},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1526560901230},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1526560901230},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1526560901231},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1526560901231},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1526560901231},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1526560901231},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1526560901231},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1526560901231},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1526560901231},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1526560901232},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1526560901232},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1526560901232},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1526560901232},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1526560901232},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526560901202},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526560901202},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526560901224},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526560901224},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526560901224},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526560901229},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526560901229},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1526560901200},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1526560901200},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1526560901201},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1526560901201},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1526560901201},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1526560901201},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1526560901201},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1526560901201},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1526560901202},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1526560901202},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1526560901202},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1526560901203},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1526560901203},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1526560901203},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1526560901203},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1526560901203},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1526560901204},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1526560901204},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1526560901204},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1526560901204},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1526560901204},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1526560901204},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1526560901204},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1526560901205},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1526560901205},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1526560901205},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1526560901205},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1526560901205},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1526560901205},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1526560901206},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1526560901206},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1526560901206},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1526560901206},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1526560901206},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1526560901208},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1526560901208},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1526560901208},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1526560901208},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1526560901223},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1526560901223},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1526560901224},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1526560901224},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1526560901228},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1526560901228},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1526560901229},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1526560901229},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1526560901232},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1526560901233},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1526560901233},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1526560901233},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1526560901233},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1526560901233},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1526560901233},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1526560901233},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1526560901234},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1526560901234},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1526560901234},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1526560901237},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1526560901239},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1526560901239},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1526560901242},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1526560901242},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1526560901242},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1526560901243},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1526560901243},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1526560901243},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1526560901244},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1526560901244},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1526560901244},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1526560901248},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1526560901249},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1526560901249},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1526560901249},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1526560901250},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1526560901250},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1526560901250},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1526560901250},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1526560901251},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1526560901251},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1526560901251},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1526560901251},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1526560901251},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1526560901251},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1526560901252},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1526560901252},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1526560901252},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1526560901252},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1526560901252},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1526560901252},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1526560901253},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1526560901253},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1526560901253},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1526560901253},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1526560901253},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1526560901254},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1526560901254},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1526560901258},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1526560901258},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1526560901260},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1526560901261},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1526560901261},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1526560901249},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1526560901207},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1526560901208},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1526560901212},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1526560901212},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1526560901212},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1526560901212},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1526560901212},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1526560901215},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1526560901219},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1526560901222},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1526560901222},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1526560901222},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1526560901222},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1526560901223},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1526560901223},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1526560901223},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1526560901225},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1526560901225},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1526560901225},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1526560901225},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1526560901225},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1526560901226},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1526560901226},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1526560901226},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1526560901227},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1526560901227},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1526560901227},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1526560901227},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1526560901227},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1526560901228},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1526560901228},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1526560901228},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1526560901228},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1526560901228},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1526560901228},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1526560901234},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1526560901236},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1526560901236},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1526560901237},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1526560901240},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1526560901240},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1526560901240},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1526560901240},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1526560901240},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1526560901240},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1526560901241},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1526560901242},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1526560901242},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1526560901243},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1526560901243},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1526560901244},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1526560901244},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1526560901245},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1526560901257},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1526560901258},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1526560901236},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1526560901248},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1526560901248},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1526560901260},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1526560901213},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1526560901213},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1526560901213},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1526560901213},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1526560901213},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1526560901214},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1526560901214},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1526560901214},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1526560901214},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1526560901214},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1526560901214},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1526560901214},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1526560901215},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1526560901215},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1526560901215},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1526560901215},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1526560901215},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1526560901215},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1526560901216},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1526560901216},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1526560901216},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1526560901216},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1526560901216},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1526560901216},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1526560901217},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1526560901217},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1526560901217},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1526560901217},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1526560901217},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1526560901217},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1526560901217},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1526560901218},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1526560901218},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1526560901218},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1526560901218},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1526560901218},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1526560901218},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1526560901218},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1526560901218},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1526560901219},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1526560901219},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1526560901219},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1526560901219},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1526560901219},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1526560901220},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1526560901220},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1526560901220},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1526560901220},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1526560901220},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1526560901220},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1526560901221},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1526560901221},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1526560901221},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1526560901221},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1526560901221},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1526560901221},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1526560901221},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1526560901222},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1526560901226},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1526560901226},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1526560901227},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1526560901234},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1526560901235},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1526560901235},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1526560901235},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1526560901235},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1526560901241},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1526560901241},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1526560901241},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1526560901241},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1526560901241},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1526560901241},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1526560901245},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1526560901246},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1526560901247},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1526560901239},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1526560901257},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1526560901247},{"_id":"public/404.html","hash":"edcb2d46252a380bd3984f89d0e8aa6bbda08a5e","modified":1526564423505},{"_id":"public/categories/index.html","hash":"f2c254fadb9af9b5245e909cda47e35c362d1fec","modified":1526564423505},{"_id":"public/tags/index.html","hash":"83c61469ef03f1befd4f9e265d8325b168b740de","modified":1526564423506},{"_id":"public/archives/page/4/index.html","hash":"b5d8c4dc710423c7552b11dd7c26f56e12a9f107","modified":1526564423506},{"_id":"public/archives/2016/11/index.html","hash":"7b9d049022548f627d7007175379d166dc2c1516","modified":1526564423506},{"_id":"public/archives/2016/12/index.html","hash":"91af495c1541f86267b5193e68c2f1470eb63428","modified":1526564423506},{"_id":"public/archives/2017/index.html","hash":"49a25116317513c82f28c9e509a68d7ec9693342","modified":1526564491604},{"_id":"public/archives/2017/03/index.html","hash":"f407a91130f18c36ce308b5174f1a9e94300f324","modified":1526564491605},{"_id":"public/archives/2018/index.html","hash":"4714e2ae6573b4ab76d7b1b75d4fa56a362a8e83","modified":1526564491605},{"_id":"public/archives/2018/05/index.html","hash":"6c7bb5117da19b3448a0ed5d8db1502062dfb7de","modified":1526564491605},{"_id":"public/categories/JavaScript/index.html","hash":"5ec723b1b3d9da41c040543e21472aeca52f7578","modified":1526564423506},{"_id":"public/categories/asp-net-core/index.html","hash":"5d121e2c53db00fe73ee3aa73ad8eaad6d0d6c90","modified":1526564423506},{"_id":"public/categories/CodeSmith/index.html","hash":"7dceae82f3e382196876a9b3d062d9303416c91f","modified":1526564423506},{"_id":"public/categories/MySQL/index.html","hash":"3d39411a5168149bbdb3f8513644f9c1e628e76c","modified":1526564423506},{"_id":"public/categories/jexus/index.html","hash":"cf69c13bc9475c5025ec3522bcca67f88ab433c1","modified":1526564423506},{"_id":"public/categories/git/index.html","hash":"a93d9f7921683a09a6629a93a3c1a01919419965","modified":1526564423506},{"_id":"public/categories/ipproxy/index.html","hash":"b020391968e725f6404d3982090ef12c69813498","modified":1526564423506},{"_id":"public/categories/javascript/index.html","hash":"a3bc399bed08ef3ef42d466986434fec9f5cad6b","modified":1526564423507},{"_id":"public/categories/linux/index.html","hash":"285a230015f48ba89eee910fea2db44c583ddbaa","modified":1526564491605},{"_id":"public/categories/memorandum/index.html","hash":"1944e4701269dc52c3f34919d96b82d03e4db634","modified":1526564423507},{"_id":"public/categories/sctripts/index.html","hash":"9a650f005fa5e0c8f0c4f5ca2adcfd0366829b50","modified":1526564423507},{"_id":"public/categories/Visual-Studio/index.html","hash":"6c886f1149337e9c0794a44600c64758c10fc4c7","modified":1526564423507},{"_id":"public/tags/asp-net-core/index.html","hash":"080fe550088df7fdd1e2e5dcbca1bfed23516a28","modified":1526564423507},{"_id":"public/tags/58City/index.html","hash":"f32ca17b2186d401d5910cb2cb8aa16c7fe252a0","modified":1526564423507},{"_id":"public/tags/dotnet-core/page/2/index.html","hash":"e64be75a41313f88d5cf84fe482504826e956259","modified":1526564423507},{"_id":"public/tags/shell/index.html","hash":"bd7ef0d2b8638c1a1471670df3e951cc430481eb","modified":1526564423507},{"_id":"public/tags/git/index.html","hash":"07976509f29bb3e493380eb1cba1761d6bc9ca43","modified":1526564423507},{"_id":"public/tags/crawler/index.html","hash":"dcf72250e75381697830af8263ada29b50cc9ad8","modified":1526564423507},{"_id":"public/tags/Java/index.html","hash":"07949951034f0f67dc2874d2ba075d0afb56a708","modified":1526564423507},{"_id":"public/tags/开源/index.html","hash":"afea2df03cb86f756c28b30bfc789ca995422aaa","modified":1526564423507},{"_id":"public/tags/javascript/index.html","hash":"f83f5e90e2f31b1fc09623c1a06e7c3d175c3a81","modified":1526564423507},{"_id":"public/tags/requirejs/index.html","hash":"10a48ede54fbe41a0fa351c1b7b35c06bc3773b4","modified":1526564423507},{"_id":"public/tags/Jenkins/index.html","hash":"6cf664c1e493fff418f39c9f335ec9b667a058d5","modified":1526564423507},{"_id":"public/tags/docker/index.html","hash":"545a06ac7926a215268661a32b4f6685de30d347","modified":1526564423507},{"_id":"public/tags/linux/index.html","hash":"7000b39bb13b9c750dffc96e2f3f0fa6da8bc975","modified":1526564491605},{"_id":"public/tags/Shell/index.html","hash":"519fc313b896dccf0916c5b24933b91b2d8fad16","modified":1526564491605},{"_id":"public/tags/memorandum/index.html","hash":"d296345034d53ef0d5e5adcf4d2096ba0f51bde3","modified":1526564423508},{"_id":"public/tags/sctripts/index.html","hash":"fcfd3003a205e573fbcf301d5e99bfc282f942a0","modified":1526564423508},{"_id":"public/tags/Visual-Studio/index.html","hash":"f1a8af0020d7070c5e1d68df7049701d9fe5e362","modified":1526564423508},{"_id":"public/tags/PHP/index.html","hash":"fe9b862d26e6af3a839ca94b11f7398594b11d28","modified":1526564423508},{"_id":"public/tags/Debug/index.html","hash":"5c4e2c6c6d3388aa29c035cf6e45c7922a0a716f","modified":1526564423508},{"_id":"public/tags/net/index.html","hash":"2fefeafc4f9e995032fd306cae2885f2923c8303","modified":1526564423508},{"_id":"public/2018/05/17/linux-shell/index.html","hash":"8af3f356cb6259271b5f70628334f1c61d3b73ae","modified":1526564423508},{"_id":"public/2018/05/08/jenkins-dotnetcore/index.html","hash":"27edf87e631bd5797f0144a529a172441e777fc3","modified":1526564491605},{"_id":"public/2017/03/17/visualstudiocode_for_php_debug/index.html","hash":"03c3b898003c13132f314f78475be0365a89f2fa","modified":1526564491605},{"_id":"public/2016/12/04/how_to_make_crawler_base_netcore/index.html","hash":"30b00b9412bbd3b19976be62b2481308ec950959","modified":1526564423508},{"_id":"public/2016/11/25/auto_rebase_git_repository/index.html","hash":"33d711c6630a771e2cb7b1f1552a6a58c27817fe","modified":1526564423508},{"_id":"public/2016/11/01/webchat_JS_SDK/index.html","hash":"cb7f92aff08e60cea063738e6ca4b1f8a8633f3f","modified":1526564423508},{"_id":"public/2016/10/22/javascript_requirejs_rf_code/index.html","hash":"7c214f3bbc653eac3082682a9a5640d4eb0ed9a9","modified":1526564423508},{"_id":"public/2016/10/14/visualstudio_shortcut_key/index.html","hash":"75740fce0fd43b289ba8f8cd00229749cada491b","modified":1526564423508},{"_id":"public/2016/10/04/C#.NET托管堆和垃圾回收(续)/index.html","hash":"4640344c02e8807b836c76f4cd909ec4c449cf5f","modified":1526564423508},{"_id":"public/2016/10/04/C#.NET托管堆和垃圾回收/index.html","hash":"4cdba3b90befeecb9cb3f1e8243b89c5ae773282","modified":1526564423508},{"_id":"public/2016/10/04/C#为匿名类型定义局部函数/index.html","hash":"94daaedb704e6d6bf47d0231a4096e3101360af1","modified":1526564423509},{"_id":"public/2016/10/04/C#技巧避免修改绑定变量/index.html","hash":"c5bf03dd5385f1f11a4dbc3febdf5f0db317241e","modified":1526564423509},{"_id":"public/2016/10/04/C#避免在函数或者操作中抛出异常/index.html","hash":"45c540bf249baa5168b64ba247171854e9123958","modified":1526564423509},{"_id":"public/2016/10/04/CLR-GC-Handle-Table/index.html","hash":"460a4549a96dc65938b7a884ca68fe2d2c608498","modified":1526564423509},{"_id":"public/2016/10/04/Can't_install_Preview2_on_fresh_VS2015_Update3_Installation/index.html","hash":"06eb41a4b464872eea28d969a3ed75c2765accab","modified":1526564423509},{"_id":"public/2016/10/04/CodeSmith-MySQL/index.html","hash":"dec2e54a4b7163e687fdfa8852d1717b02593101","modified":1526564423509},{"_id":"public/2016/10/04/58CityHouseSearch_move_to_aspnetcore/index.html","hash":"8af7c5a90a52c9a24298175b0021a542f5939fdd","modified":1526564423509},{"_id":"public/2016/10/04/Jexus支持HTTPS协议/index.html","hash":"b5f280fbdb447b342b92d2b52fb912ba0a850117","modified":1526564423509},{"_id":"public/2016/10/04/asp.net core启动方式/index.html","hash":"3c529f251ae9480b427678c68bb616edcbf5b5cf","modified":1526564423509},{"_id":"public/2016/10/04/58CityHouseSearch-JS/index.html","hash":"3fa0be0566d914067214dc97cacfff70fbb4d6d9","modified":1526564423509},{"_id":"public/2016/10/04/ASP.NET-Core-Middleware/index.html","hash":"c12ce641c9e82ce5e6e5c3253a971b5ee758ef49","modified":1526564423509},{"_id":"public/2016/10/04/ipproy_for_crawler/index.html","hash":"63c7576abc899bbbd51941ea5951011a2ac9a717","modified":1526564423509},{"_id":"public/2016/10/04/Bytes -To-String/index.html","hash":"d385e9d703b08ee45c32d3b0272ee23c4348e7a5","modified":1526564423509},{"_id":"public/2016/10/04/C#-58CityHouse-Crawler/index.html","hash":"3a004e7313b7b908b0c1ac6c85bb633deae9454d","modified":1526564423509},{"_id":"public/2016/10/04/C#-Join/index.html","hash":"7b78160e5cbe7b8a6aa9c98d1eed3ff811fb4308","modified":1526564423509},{"_id":"public/2016/10/04/memorandum/index.html","hash":"3985ff01b9da484db94f55be0d5de62be7bbee91","modified":1526564423509},{"_id":"public/2016/10/04/mono-webreques-https-exception/index.html","hash":"b03e98e3b655463804f521199a98452ed8545603","modified":1526564423509},{"_id":"public/2016/10/04/some_script/index.html","hash":"ca96f350e2c2eb66997f8afd0789ab9729f5c76d","modified":1526564423509},{"_id":"public/2016/10/04/the_first_aspnetcore/index.html","hash":"d197ec5b1aaf070327bfc497cb50261fd24d6809","modified":1526564423510},{"_id":"public/2016/10/04/C#-LINQ优点总结(转载)/index.html","hash":"7510976ee9b36688f9370d2d7741c116cb835320","modified":1526564423510},{"_id":"public/2016/10/04/C#-类字段与类属性/index.html","hash":"dbb59d4cfdec6cad0460a7788103cf085ed28b5e","modified":1526564423510},{"_id":"public/2016/10/04/CodeSmith连接MySQL报错“找不到请求的 .Net Framework Data Provider。可能没有安装。”解决方法/index.html","hash":"48eb0eab668fffcf49d57973212bdf19d9e6ccde","modified":1526564423510},{"_id":"public/archives/index.html","hash":"237bd8d3b5180328a42dfe3d6fd88fcb82cf9231","modified":1526564491605},{"_id":"public/archives/page/2/index.html","hash":"06dbc2089e3412d35eb5aac52f50d2b775a4efdc","modified":1526564423510},{"_id":"public/archives/page/3/index.html","hash":"db023550be9fbff36acce6c69fef7313331cbfbd","modified":1526564423510},{"_id":"public/archives/2016/index.html","hash":"29a08b4730e51db06c49ff93706508e4abce570a","modified":1526564423510},{"_id":"public/archives/2016/page/2/index.html","hash":"2e60b676da42fae109f3f6cf80fd8197a463a5a9","modified":1526564423510},{"_id":"public/archives/2016/page/3/index.html","hash":"18f6c986c9658b9ad15825bff9baa96faf8ead5d","modified":1526564423510},{"_id":"public/archives/2016/10/index.html","hash":"2758bb35792e3971c88e5e8fa5486460e02d4a0f","modified":1526564423510},{"_id":"public/archives/2016/10/page/2/index.html","hash":"198515f3e853cc848c8152dc0f94f1ea3dfe9cdd","modified":1526564423510},{"_id":"public/archives/2016/10/page/3/index.html","hash":"aab6c9557195817e22bef6071c6f70cd6b71c2c1","modified":1526564423510},{"_id":"public/categories/dotnet-core/index.html","hash":"e58118d464dbf1be6c969f4aa413c24c4d3cbeb7","modified":1526564423510},{"_id":"public/categories/dotnet/index.html","hash":"909126b09e7168d06e68ee48b370f471526224d8","modified":1526564423510},{"_id":"public/index.html","hash":"08e8fa425c14aaabfffe46343feed1af170e18b5","modified":1526564491605},{"_id":"public/page/2/index.html","hash":"630095b99ca2b2ff12f7b242f02591f9026bbaca","modified":1526564423510},{"_id":"public/page/3/index.html","hash":"c8a93c90c0afe5341a7f064cfd874b7c5f990d0a","modified":1526564423511},{"_id":"public/page/4/index.html","hash":"590e12a3d982ca91a3d3fa6da516973d2e3d52f4","modified":1526564423511},{"_id":"public/tags/dotnet-core/index.html","hash":"77434cccba54c9d066f75c947d1aa8684fe1fbff","modified":1526564423511},{"_id":"public/tags/dotnet/index.html","hash":"2cc1da77ea84020cb18f6999a8ed945658b196f3","modified":1526564423511},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1526564423521},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1526564423521},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1526564423522},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1526564423522},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1526564423522},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1526564423522},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1526564423522},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1526564423522},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1526564423522},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1526564423522},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1526564423522},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1526564423522},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1526564423523},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1526564423523},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1526564423523},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1526564423523},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1526564423523},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1526564423523},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1526564423523},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1526564423523},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1526564423523},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1526564423523},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1526564423523},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1526564423523},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1526564423523},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1526564423523},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1526564423523},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1526564423523},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1526564423523},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1526564423523},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1526564423523},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1526564423523},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1526564423524},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1526564423957},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1526564423962},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1526564423977},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1526564423977},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1526564423977},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1526564423977},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1526564423977},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1526564423977},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1526564423977},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1526564423977},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1526564423977},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1526564423977},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1526564423977},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1526564423977},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1526564423977},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1526564423977},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1526564423977},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1526564423977},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1526564423977},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1526564423977},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1526564423978},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1526564423978},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1526564423978},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1526564423978},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1526564423978},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1526564423978},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1526564423978},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1526564423978},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1526564423978},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1526564423978},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1526564423978},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1526564423978},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1526564423978},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1526564423978},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1526564423978},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1526564423978},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1526564423978},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1526564423978},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1526564423978},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1526564423978},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1526564423978},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1526564423978},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1526564423978},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1526564423978},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1526564423979},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1526564423979},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1526564423979},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1526564423979},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1526564423979},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1526564423979},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1526564423979},{"_id":"public/css/main.css","hash":"7f274c2b53a9e4134bcf75dc3a00ca15c4f9825d","modified":1526564423979},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1526564423979},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1526564423979},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1526564423979},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1526564423979},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1526564423979},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1526564423979},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1526564423979},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1526564423979},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1526564423979},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1526564423980},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1526564423980},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1526564423980},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1526564423980},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1526564423980},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1526564423980},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1526564423980},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1526564423980},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1526564423980},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1526564423980},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1526564423980},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1526564423980},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1526564423980},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1526564423981},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1526564423994},{"_id":"public/2017/03/25/linux-shell/index.html","hash":"7eafb3f6f15d285a639058ac9fc1338efdb2e0a4","modified":1526564491607},{"_id":"source/_posts/hexo-docker.md","hash":"f8cba490a4058a5e9d8f451eb5be1e955ecbd511","modified":1527636632498},{"_id":"source/_posts/house-python.md","hash":"5705618041a5069c7f77bf0eb3a70623003bb149","modified":1527034540804},{"_id":"source/_posts/logstash-grok.md","hash":"60144ecd5bf88594116f79df26641193acd2c57d","modified":1526789068060},{"_id":"source/_posts/qcloud-move.md","hash":"d7e932adebcb75d4a298ed6c5054a46d1c0f620a","modified":1526978753163},{"_id":"source/_posts/start-dotnetcore-mvc.md","hash":"8c230c84c757c3eebda87292beb85d8442dcc804","modified":1527642721784},{"_id":"source/_posts/start-dotnetcore.md","hash":"d50fcda78bbba5095073366c6c8d5f420cb5e019","modified":1527636650868},{"_id":"source/_posts/xdebug-macos.md","hash":"9c041923e5bbabef6d9e6507ccac52de672d4b25","modified":1527041463004}],"Category":[{"name":"JavaScript","_id":"cjhal1fvj0005p6310wafhucp"},{"name":"asp.net core","_id":"cjhal1fvo000ap631p9qqavm4"},{"name":"dotnet core","_id":"cjhal1fvy000fp6313m3f2h14"},{"name":"dotnet","_id":"cjhal1fw2000np631hgicgn1o"},{"name":"CodeSmith","_id":"cjhal1fwi001tp63126e2m82e"},{"name":"MySQL","_id":"cjhal1fwn0022p631is183sep"},{"name":"jexus","_id":"cjhal1fwq0029p631na6kzzi0"},{"name":"git","_id":"cjhal1fws002gp631s44z1lxz"},{"name":"ipproxy","_id":"cjhal1fwv002pp631qs7e6gyw"},{"name":"javascript","_id":"cjhal1fwy002yp631x7z5ptev"},{"name":"linux","_id":"cjhal1fwz0032p6318ijial5z"},{"name":"memorandum","_id":"cjhal1fx00038p631oxveyc53"},{"name":"sctripts","_id":"cjhal1fx1003ep631re7u9bln"},{"name":"Visual Studio","_id":"cjhal1fx3003lp631ms9d8ona"},{"name":"docker","_id":"cji704sl50002el0r681ne79k"},{"name":"ELK","_id":"cji704slf0006el0r8a4fh69v"},{"name":"其他","_id":"cji704slh000bel0rop0a28sh"},{"name":"PHP","_id":"cji704slj000eel0rrjku0whh"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2018-05-17T12:41:41.168Z","updated":"2018-05-17T12:41:41.168Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cjhal1fty0000p631zup53f5d","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>"},{"title":"categories","date":"2018-05-17T08:47:34.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-05-17 16:47:34\ntype: \"categories\"\n---\n","updated":"2018-05-17T12:41:41.175Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjhal1fvd0001p631voz62a7n","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-05-17T08:46:45.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-05-17 16:46:45\ntype: \"tags\"\n---\n","updated":"2018-05-17T12:41:41.175Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjhal1fvh0003p6312v375gxr","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"post","title":"58同城高德搜房项目JS相关知识","date":"2016-10-03T16:00:00.000Z","_content":"# 58同城高德搜房项目JS相关知识\n\n在线地址：[58同城品牌公寓高德搜房](http://codelover.link:8080/)\n\nGithub地址：[https://github.com/liguobao/58HouseSearch](https://github.com/liguobao/58HouseSearch)\n\n知乎专栏(点赞用的)：[高德API+Python解决租房问题(.NET版)](https://zhuanlan.zhihu.com/p/21960329)\n\n经过了一个星期的修补补，以及小伙伴风险的代码，整个项目基本处于基本稳定运行的状态。\n\n同时加入了一下新功能：\n\n1. IP定位：调用高德地图IP定位功能实现\n2. 移动地图中心定位：调用高德地图移动地图定位实现\n3. 定位城市名转58同城城市名以获得准确58同城城市域名：抓取58同城城市分类信息\n4. 优化数据源、去除广告数据：小伙伴奉献代码\n\n今天主要简单讲解一下其中使用的一些高德地图API接口。\n\n## 高德地图JavaScript API 主体为map对象，基本所有的操作都是通过map对象来实现的。\n\nmap对象实例化是通过 Amap类来做的。如以下代码：\n\n```javascript\nmap = new AMap.Map(\"container\", {\n        resizeEnable: true,\n        zoomEnable: true,\n        center: [121.297428, 31.1345],//经纬度，此处为上海\n        zoom: 11\n    });\n\n```\n\n## IP定位\n调用Map.CitySearch()获得当前IP所在城市，直接将地图显示成当前城市。代码如下：\n\n```JavaScript\nfunction showCityInfo(map) {\n    //实例化城市查询类\n    var citysearch = new AMap.CitySearch();\n    //自动获取用户IP，返回当前城市\n    citysearch.getLocalCity(function (status, result) {\n        if (status === 'complete' && result.info === 'OK') {\n            if (result && result.city && result.bounds) {\n                var cityinfo = result.city;//获得XX市\n                var citybounds = result.bounds;//用于设置地图显示位置的实例\n                cityName = cityinfo.substring(0, cityinfo.length - 1);//去掉市这个字\n                ConvertCityCNNameToShortCut();//城市名转换成58同城城市域名字母，如上海->sh,苏州->su,\n                                              //下面会有实现代码\n\n                document.getElementById('IPLocation').innerHTML = '您当前所在城市：' + cityName;\n                //地图显示当前城市\n                map.setBounds(citybounds);\n            }\n        } else {\n            document.getElementById('IPLocation').innerHTML = result.info;\n        }\n    });\n}\n\n```\n\n## 移动地图自动中心定位\n\n之前有一版是让用户输入城市名，然后直接定位到输入的城市的。\n这个功能卡在了设置地图显示位置上，如果是使用高德地图提供的搜索控件的话，又存在输入结果之后搜索结果可能是多个的问题。而且这点我只是要取到用户想要定位的城市而已，感觉没必要做得太复杂。\n昨晚在看高德地图API的时候发现，有一个移动地图获得地图中心所在位置的样例，马上眼前一亮了。这个功能比我想要的还要好...果断上。\n\n```JavaScript\nfunction MapMoveToLocationCity()\n{\n    map.on('moveend', getCity);\n    function getCity() {\n        map.getCity(function (data) {\n            if (data['province'] && typeof data['province'] === 'string') {\n\n                var cityinfo = (data['city'] || data['province']);\n                cityName = cityinfo.substring(0, cityinfo.length - 1);\n                ConvertCityCNNameToShortCut();//城市名转58同城地区域名\n\n                document.getElementById('IPLocation').innerHTML = '地图中心所在城市：' + cityName;\n\n            }\n        });\n    }\n}\n```\n\n整个代码的意思是，给map绑定一下移动时间，移动完了之后，调用getCity的方法获取当前地图中心所在城市信息。\n\n这个时候要注意，城市名可能在city对象里面，也可能在province里面。\n\n原因很简单：普通城市等级就是城市，我国还存在一个和省份一个等级的城市：直辖市。因此直辖市的城市名是在province里面的。\n\n## 城市名匹配58同城地区域名\n\n这个是上个版本(两三天前)的一个bug引出来的新功能。\n\n上个版本是让用户输入城市名，然后提取城市名的中文拼音首字母作为58同城地区域名。如上海 =sh，广州=gz，北京=bj，成都=cd。\n\n这个功能使用的是网上别人写的一个JS库，通过汉字匹配实现的。转换出来的数据没什么问题，不过我国汉字实在奥妙。\n\n广州=gz，赣州=gz；\n遂宁=sn；绥宁=sn；\n惠州=hz，杭州=hz。\n\n这样一来，上面这个做法就没法玩了。\n\n想了下怎么解决这个问题，灵机一动。反正是在爬58的数据，这个城市名和城市域名数据58同城肯定有啊，然后找到了这个。\n[58同城城市分类导航](http://www.58.com/changecity.aspx?PGTID=0d100000-0007-a77b-4c4b-a28f725b8f5a&ClickID=1)\n\n![123](http://7xread.com1.z0.glb.clouddn.com/c01c293a-d5cc-4f58-80dc-13aa05d47b01)\n\n很明显，我要的所有城市名和城市域名都是里面了。\n\n晚上和衣衣说了下，衣衣一大早就把处理好的json数据给我了。\n\n于是来了下面一段代码：\n\n```JavaScript\n\n//加载json文件\n$.getJSON(\"DomainJS/city.json\", function (data)\n{\n      allCityInfo = data;\n});\n\n\nfunction ConvertCityCNNameToShortCut()\n{\n    var filterarray = $.grep(allCityInfo, function (obj) {\n        return obj.cityName == cityName;\n    });//找到当前城市名对应的json对象\n    //获取json对象的地区域名\n    cityNameCNPY = filterarray instanceof Array ? \n    filterarray[0].shortCut : filterarray != null ? filterarray.shortCut : \"\";\n}\n\n```\n\n## 高德地图自动补全功能\n\n```html\n  <div class=\"control-input\">\n       <input id=\"work-location\" type=\"text\" style=\"width:60%\">\n  </div>\n```\n\n```JavaScript\n var auto = new AMap.Autocomplete({\n        input: \"work-location\"\n    });\n\n    AMap.event.addListener(auto, \"select\", workLocationSelected);\n```\n\n看方法前面也知道，其实这就是把ID为work-location的input初始化为地图插件，然后给Amap增加了一个监听事件。\n当其中选中某一个数据的时候，触发workLocationSelected函数。效果如下：\n\n![2233](http://7xread.com1.z0.glb.clouddn.com/fe425992-e7c4-4cae-800e-319eff3b17e8)\n\n在这里locationSelected是定位到所选位置，代码如下：\n\n```js\nfunction workLocationSelected(e) {\n    workAddress = e.poi.name;\n    loadWorkLocation();\n}\n\nfunction loadWorkLocation() {\n    delWorkLocation();\n    var geocoder = new AMap.Geocoder({\n        city: cityName,\n        radius: 1000\n    });\n\n    geocoder.getLocation(workAddress, function (status, result) {\n        if (status === \"complete\" && result.info === 'OK') {\n            var geocode = result.geocodes[0];\n            x = geocode.location.getLng();\n            y = geocode.location.getLat();\n            loadWorkMarker(x, y);\n            loadWorkRange(x, y, 60, \"#3f67a5\", vehicle);\n            map.setZoomAndCenter(12, [x, y]);\n        }\n    })\n}\n\n```\n\n至于导航功能代码我没怎么动，没去研究就不献丑了...\n\n最后来个效果图。\n\n### 北京\n\n![123](http://7xread.com1.z0.glb.clouddn.com/e7900aba-5a56-417c-9dd9-63527583e84b)\n\n### 成都\n\n![333](http://7xread.com1.z0.glb.clouddn.com/c9947d97-1b76-42bf-82b3-aca817e84e13)\n\n### 苏州\n\n![233](http://7xread.com1.z0.glb.clouddn.com/941809ae-aa37-4a3b-89c7-10646cc7e3e7)\n\n### 深圳\n\n![233](http://7xread.com1.z0.glb.clouddn.com/86712397-27ec-4b37-bbf8-81191e530ef6)\n","source":"_posts/58CityHouseSearch-JS.md","raw":"---\nlayout: post\ntitle: 58同城高德搜房项目JS相关知识\ncategory: JavaScript\ndate: 2016-10-04\ntags:\n- asp.net core\n- 58City\n---\n# 58同城高德搜房项目JS相关知识\n\n在线地址：[58同城品牌公寓高德搜房](http://codelover.link:8080/)\n\nGithub地址：[https://github.com/liguobao/58HouseSearch](https://github.com/liguobao/58HouseSearch)\n\n知乎专栏(点赞用的)：[高德API+Python解决租房问题(.NET版)](https://zhuanlan.zhihu.com/p/21960329)\n\n经过了一个星期的修补补，以及小伙伴风险的代码，整个项目基本处于基本稳定运行的状态。\n\n同时加入了一下新功能：\n\n1. IP定位：调用高德地图IP定位功能实现\n2. 移动地图中心定位：调用高德地图移动地图定位实现\n3. 定位城市名转58同城城市名以获得准确58同城城市域名：抓取58同城城市分类信息\n4. 优化数据源、去除广告数据：小伙伴奉献代码\n\n今天主要简单讲解一下其中使用的一些高德地图API接口。\n\n## 高德地图JavaScript API 主体为map对象，基本所有的操作都是通过map对象来实现的。\n\nmap对象实例化是通过 Amap类来做的。如以下代码：\n\n```javascript\nmap = new AMap.Map(\"container\", {\n        resizeEnable: true,\n        zoomEnable: true,\n        center: [121.297428, 31.1345],//经纬度，此处为上海\n        zoom: 11\n    });\n\n```\n\n## IP定位\n调用Map.CitySearch()获得当前IP所在城市，直接将地图显示成当前城市。代码如下：\n\n```JavaScript\nfunction showCityInfo(map) {\n    //实例化城市查询类\n    var citysearch = new AMap.CitySearch();\n    //自动获取用户IP，返回当前城市\n    citysearch.getLocalCity(function (status, result) {\n        if (status === 'complete' && result.info === 'OK') {\n            if (result && result.city && result.bounds) {\n                var cityinfo = result.city;//获得XX市\n                var citybounds = result.bounds;//用于设置地图显示位置的实例\n                cityName = cityinfo.substring(0, cityinfo.length - 1);//去掉市这个字\n                ConvertCityCNNameToShortCut();//城市名转换成58同城城市域名字母，如上海->sh,苏州->su,\n                                              //下面会有实现代码\n\n                document.getElementById('IPLocation').innerHTML = '您当前所在城市：' + cityName;\n                //地图显示当前城市\n                map.setBounds(citybounds);\n            }\n        } else {\n            document.getElementById('IPLocation').innerHTML = result.info;\n        }\n    });\n}\n\n```\n\n## 移动地图自动中心定位\n\n之前有一版是让用户输入城市名，然后直接定位到输入的城市的。\n这个功能卡在了设置地图显示位置上，如果是使用高德地图提供的搜索控件的话，又存在输入结果之后搜索结果可能是多个的问题。而且这点我只是要取到用户想要定位的城市而已，感觉没必要做得太复杂。\n昨晚在看高德地图API的时候发现，有一个移动地图获得地图中心所在位置的样例，马上眼前一亮了。这个功能比我想要的还要好...果断上。\n\n```JavaScript\nfunction MapMoveToLocationCity()\n{\n    map.on('moveend', getCity);\n    function getCity() {\n        map.getCity(function (data) {\n            if (data['province'] && typeof data['province'] === 'string') {\n\n                var cityinfo = (data['city'] || data['province']);\n                cityName = cityinfo.substring(0, cityinfo.length - 1);\n                ConvertCityCNNameToShortCut();//城市名转58同城地区域名\n\n                document.getElementById('IPLocation').innerHTML = '地图中心所在城市：' + cityName;\n\n            }\n        });\n    }\n}\n```\n\n整个代码的意思是，给map绑定一下移动时间，移动完了之后，调用getCity的方法获取当前地图中心所在城市信息。\n\n这个时候要注意，城市名可能在city对象里面，也可能在province里面。\n\n原因很简单：普通城市等级就是城市，我国还存在一个和省份一个等级的城市：直辖市。因此直辖市的城市名是在province里面的。\n\n## 城市名匹配58同城地区域名\n\n这个是上个版本(两三天前)的一个bug引出来的新功能。\n\n上个版本是让用户输入城市名，然后提取城市名的中文拼音首字母作为58同城地区域名。如上海 =sh，广州=gz，北京=bj，成都=cd。\n\n这个功能使用的是网上别人写的一个JS库，通过汉字匹配实现的。转换出来的数据没什么问题，不过我国汉字实在奥妙。\n\n广州=gz，赣州=gz；\n遂宁=sn；绥宁=sn；\n惠州=hz，杭州=hz。\n\n这样一来，上面这个做法就没法玩了。\n\n想了下怎么解决这个问题，灵机一动。反正是在爬58的数据，这个城市名和城市域名数据58同城肯定有啊，然后找到了这个。\n[58同城城市分类导航](http://www.58.com/changecity.aspx?PGTID=0d100000-0007-a77b-4c4b-a28f725b8f5a&ClickID=1)\n\n![123](http://7xread.com1.z0.glb.clouddn.com/c01c293a-d5cc-4f58-80dc-13aa05d47b01)\n\n很明显，我要的所有城市名和城市域名都是里面了。\n\n晚上和衣衣说了下，衣衣一大早就把处理好的json数据给我了。\n\n于是来了下面一段代码：\n\n```JavaScript\n\n//加载json文件\n$.getJSON(\"DomainJS/city.json\", function (data)\n{\n      allCityInfo = data;\n});\n\n\nfunction ConvertCityCNNameToShortCut()\n{\n    var filterarray = $.grep(allCityInfo, function (obj) {\n        return obj.cityName == cityName;\n    });//找到当前城市名对应的json对象\n    //获取json对象的地区域名\n    cityNameCNPY = filterarray instanceof Array ? \n    filterarray[0].shortCut : filterarray != null ? filterarray.shortCut : \"\";\n}\n\n```\n\n## 高德地图自动补全功能\n\n```html\n  <div class=\"control-input\">\n       <input id=\"work-location\" type=\"text\" style=\"width:60%\">\n  </div>\n```\n\n```JavaScript\n var auto = new AMap.Autocomplete({\n        input: \"work-location\"\n    });\n\n    AMap.event.addListener(auto, \"select\", workLocationSelected);\n```\n\n看方法前面也知道，其实这就是把ID为work-location的input初始化为地图插件，然后给Amap增加了一个监听事件。\n当其中选中某一个数据的时候，触发workLocationSelected函数。效果如下：\n\n![2233](http://7xread.com1.z0.glb.clouddn.com/fe425992-e7c4-4cae-800e-319eff3b17e8)\n\n在这里locationSelected是定位到所选位置，代码如下：\n\n```js\nfunction workLocationSelected(e) {\n    workAddress = e.poi.name;\n    loadWorkLocation();\n}\n\nfunction loadWorkLocation() {\n    delWorkLocation();\n    var geocoder = new AMap.Geocoder({\n        city: cityName,\n        radius: 1000\n    });\n\n    geocoder.getLocation(workAddress, function (status, result) {\n        if (status === \"complete\" && result.info === 'OK') {\n            var geocode = result.geocodes[0];\n            x = geocode.location.getLng();\n            y = geocode.location.getLat();\n            loadWorkMarker(x, y);\n            loadWorkRange(x, y, 60, \"#3f67a5\", vehicle);\n            map.setZoomAndCenter(12, [x, y]);\n        }\n    })\n}\n\n```\n\n至于导航功能代码我没怎么动，没去研究就不献丑了...\n\n最后来个效果图。\n\n### 北京\n\n![123](http://7xread.com1.z0.glb.clouddn.com/e7900aba-5a56-417c-9dd9-63527583e84b)\n\n### 成都\n\n![333](http://7xread.com1.z0.glb.clouddn.com/c9947d97-1b76-42bf-82b3-aca817e84e13)\n\n### 苏州\n\n![233](http://7xread.com1.z0.glb.clouddn.com/941809ae-aa37-4a3b-89c7-10646cc7e3e7)\n\n### 深圳\n\n![233](http://7xread.com1.z0.glb.clouddn.com/86712397-27ec-4b37-bbf8-81191e530ef6)\n","slug":"58CityHouseSearch-JS","published":1,"updated":"2018-05-17T13:33:51.066Z","comments":1,"photos":[],"link":"","_id":"cjhal1fve0002p631kiz8ix2e","content":"<h1 id=\"58同城高德搜房项目JS相关知识\"><a href=\"#58同城高德搜房项目JS相关知识\" class=\"headerlink\" title=\"58同城高德搜房项目JS相关知识\"></a>58同城高德搜房项目JS相关知识</h1><p>在线地址：<a href=\"http://codelover.link:8080/\">58同城品牌公寓高德搜房</a></p>\n<p>Github地址：<a href=\"https://github.com/liguobao/58HouseSearch\" target=\"_blank\" rel=\"noopener\">https://github.com/liguobao/58HouseSearch</a></p>\n<p>知乎专栏(点赞用的)：<a href=\"https://zhuanlan.zhihu.com/p/21960329\" target=\"_blank\" rel=\"noopener\">高德API+Python解决租房问题(.NET版)</a></p>\n<p>经过了一个星期的修补补，以及小伙伴风险的代码，整个项目基本处于基本稳定运行的状态。</p>\n<p>同时加入了一下新功能：</p>\n<ol>\n<li>IP定位：调用高德地图IP定位功能实现</li>\n<li>移动地图中心定位：调用高德地图移动地图定位实现</li>\n<li>定位城市名转58同城城市名以获得准确58同城城市域名：抓取58同城城市分类信息</li>\n<li>优化数据源、去除广告数据：小伙伴奉献代码</li>\n</ol>\n<p>今天主要简单讲解一下其中使用的一些高德地图API接口。</p>\n<h2 id=\"高德地图JavaScript-API-主体为map对象，基本所有的操作都是通过map对象来实现的。\"><a href=\"#高德地图JavaScript-API-主体为map对象，基本所有的操作都是通过map对象来实现的。\" class=\"headerlink\" title=\"高德地图JavaScript API 主体为map对象，基本所有的操作都是通过map对象来实现的。\"></a>高德地图JavaScript API 主体为map对象，基本所有的操作都是通过map对象来实现的。</h2><p>map对象实例化是通过 Amap类来做的。如以下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map = <span class=\"keyword\">new</span> AMap.Map(<span class=\"string\">\"container\"</span>, &#123;</span><br><span class=\"line\">        resizeEnable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        zoomEnable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        center: [<span class=\"number\">121.297428</span>, <span class=\"number\">31.1345</span>],<span class=\"comment\">//经纬度，此处为上海</span></span><br><span class=\"line\">        zoom: <span class=\"number\">11</span></span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"IP定位\"><a href=\"#IP定位\" class=\"headerlink\" title=\"IP定位\"></a>IP定位</h2><p>调用Map.CitySearch()获得当前IP所在城市，直接将地图显示成当前城市。代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showCityInfo</span>(<span class=\"params\">map</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实例化城市查询类</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> citysearch = <span class=\"keyword\">new</span> AMap.CitySearch();</span><br><span class=\"line\">    <span class=\"comment\">//自动获取用户IP，返回当前城市</span></span><br><span class=\"line\">    citysearch.getLocalCity(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status, result</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (status === <span class=\"string\">'complete'</span> &amp;&amp; result.info === <span class=\"string\">'OK'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result &amp;&amp; result.city &amp;&amp; result.bounds) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> cityinfo = result.city;<span class=\"comment\">//获得XX市</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> citybounds = result.bounds;<span class=\"comment\">//用于设置地图显示位置的实例</span></span><br><span class=\"line\">                cityName = cityinfo.substring(<span class=\"number\">0</span>, cityinfo.length - <span class=\"number\">1</span>);<span class=\"comment\">//去掉市这个字</span></span><br><span class=\"line\">                ConvertCityCNNameToShortCut();<span class=\"comment\">//城市名转换成58同城城市域名字母，如上海-&gt;sh,苏州-&gt;su,</span></span><br><span class=\"line\">                                              <span class=\"comment\">//下面会有实现代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'IPLocation'</span>).innerHTML = <span class=\"string\">'您当前所在城市：'</span> + cityName;</span><br><span class=\"line\">                <span class=\"comment\">//地图显示当前城市</span></span><br><span class=\"line\">                map.setBounds(citybounds);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'IPLocation'</span>).innerHTML = result.info;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"移动地图自动中心定位\"><a href=\"#移动地图自动中心定位\" class=\"headerlink\" title=\"移动地图自动中心定位\"></a>移动地图自动中心定位</h2><p>之前有一版是让用户输入城市名，然后直接定位到输入的城市的。<br>这个功能卡在了设置地图显示位置上，如果是使用高德地图提供的搜索控件的话，又存在输入结果之后搜索结果可能是多个的问题。而且这点我只是要取到用户想要定位的城市而已，感觉没必要做得太复杂。<br>昨晚在看高德地图API的时候发现，有一个移动地图获得地图中心所在位置的样例，马上眼前一亮了。这个功能比我想要的还要好…果断上。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MapMoveToLocationCity</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    map.on(<span class=\"string\">'moveend'</span>, getCity);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCity</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        map.getCity(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (data[<span class=\"string\">'province'</span>] &amp;&amp; <span class=\"keyword\">typeof</span> data[<span class=\"string\">'province'</span>] === <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">var</span> cityinfo = (data[<span class=\"string\">'city'</span>] || data[<span class=\"string\">'province'</span>]);</span><br><span class=\"line\">                cityName = cityinfo.substring(<span class=\"number\">0</span>, cityinfo.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">                ConvertCityCNNameToShortCut();<span class=\"comment\">//城市名转58同城地区域名</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'IPLocation'</span>).innerHTML = <span class=\"string\">'地图中心所在城市：'</span> + cityName;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>整个代码的意思是，给map绑定一下移动时间，移动完了之后，调用getCity的方法获取当前地图中心所在城市信息。</p>\n<p>这个时候要注意，城市名可能在city对象里面，也可能在province里面。</p>\n<p>原因很简单：普通城市等级就是城市，我国还存在一个和省份一个等级的城市：直辖市。因此直辖市的城市名是在province里面的。</p>\n<h2 id=\"城市名匹配58同城地区域名\"><a href=\"#城市名匹配58同城地区域名\" class=\"headerlink\" title=\"城市名匹配58同城地区域名\"></a>城市名匹配58同城地区域名</h2><p>这个是上个版本(两三天前)的一个bug引出来的新功能。</p>\n<p>上个版本是让用户输入城市名，然后提取城市名的中文拼音首字母作为58同城地区域名。如上海 =sh，广州=gz，北京=bj，成都=cd。</p>\n<p>这个功能使用的是网上别人写的一个JS库，通过汉字匹配实现的。转换出来的数据没什么问题，不过我国汉字实在奥妙。</p>\n<p>广州=gz，赣州=gz；<br>遂宁=sn；绥宁=sn；<br>惠州=hz，杭州=hz。</p>\n<p>这样一来，上面这个做法就没法玩了。</p>\n<p>想了下怎么解决这个问题，灵机一动。反正是在爬58的数据，这个城市名和城市域名数据58同城肯定有啊，然后找到了这个。<br><a href=\"http://www.58.com/changecity.aspx?PGTID=0d100000-0007-a77b-4c4b-a28f725b8f5a&amp;ClickID=1\" target=\"_blank\" rel=\"noopener\">58同城城市分类导航</a></p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/c01c293a-d5cc-4f58-80dc-13aa05d47b01\" alt=\"123\"></p>\n<p>很明显，我要的所有城市名和城市域名都是里面了。</p>\n<p>晚上和衣衣说了下，衣衣一大早就把处理好的json数据给我了。</p>\n<p>于是来了下面一段代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//加载json文件</span></span><br><span class=\"line\">$.getJSON(<span class=\"string\">\"DomainJS/city.json\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">      allCityInfo = data;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ConvertCityCNNameToShortCut</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> filterarray = $.grep(allCityInfo, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj.cityName == cityName;</span><br><span class=\"line\">    &#125;);<span class=\"comment\">//找到当前城市名对应的json对象</span></span><br><span class=\"line\">    <span class=\"comment\">//获取json对象的地区域名</span></span><br><span class=\"line\">    cityNameCNPY = filterarray <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span> ? </span><br><span class=\"line\">    filterarray[<span class=\"number\">0</span>].shortCut : filterarray != <span class=\"literal\">null</span> ? filterarray.shortCut : <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"高德地图自动补全功能\"><a href=\"#高德地图自动补全功能\" class=\"headerlink\" title=\"高德地图自动补全功能\"></a>高德地图自动补全功能</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"control-input\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"work-location\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:60%\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> auto = <span class=\"keyword\">new</span> AMap.Autocomplete(&#123;</span><br><span class=\"line\">       input: <span class=\"string\">\"work-location\"</span></span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">   AMap.event.addListener(auto, <span class=\"string\">\"select\"</span>, workLocationSelected);</span><br></pre></td></tr></table></figure>\n<p>看方法前面也知道，其实这就是把ID为work-location的input初始化为地图插件，然后给Amap增加了一个监听事件。<br>当其中选中某一个数据的时候，触发workLocationSelected函数。效果如下：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/fe425992-e7c4-4cae-800e-319eff3b17e8\" alt=\"2233\"></p>\n<p>在这里locationSelected是定位到所选位置，代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">workLocationSelected</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    workAddress = e.poi.name;</span><br><span class=\"line\">    loadWorkLocation();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadWorkLocation</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    delWorkLocation();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> geocoder = <span class=\"keyword\">new</span> AMap.Geocoder(&#123;</span><br><span class=\"line\">        city: cityName,</span><br><span class=\"line\">        radius: <span class=\"number\">1000</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    geocoder.getLocation(workAddress, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status, result</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (status === <span class=\"string\">\"complete\"</span> &amp;&amp; result.info === <span class=\"string\">'OK'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> geocode = result.geocodes[<span class=\"number\">0</span>];</span><br><span class=\"line\">            x = geocode.location.getLng();</span><br><span class=\"line\">            y = geocode.location.getLat();</span><br><span class=\"line\">            loadWorkMarker(x, y);</span><br><span class=\"line\">            loadWorkRange(x, y, <span class=\"number\">60</span>, <span class=\"string\">\"#3f67a5\"</span>, vehicle);</span><br><span class=\"line\">            map.setZoomAndCenter(<span class=\"number\">12</span>, [x, y]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至于导航功能代码我没怎么动，没去研究就不献丑了…</p>\n<p>最后来个效果图。</p>\n<h3 id=\"北京\"><a href=\"#北京\" class=\"headerlink\" title=\"北京\"></a>北京</h3><p><img src=\"http://7xread.com1.z0.glb.clouddn.com/e7900aba-5a56-417c-9dd9-63527583e84b\" alt=\"123\"></p>\n<h3 id=\"成都\"><a href=\"#成都\" class=\"headerlink\" title=\"成都\"></a>成都</h3><p><img src=\"http://7xread.com1.z0.glb.clouddn.com/c9947d97-1b76-42bf-82b3-aca817e84e13\" alt=\"333\"></p>\n<h3 id=\"苏州\"><a href=\"#苏州\" class=\"headerlink\" title=\"苏州\"></a>苏州</h3><p><img src=\"http://7xread.com1.z0.glb.clouddn.com/941809ae-aa37-4a3b-89c7-10646cc7e3e7\" alt=\"233\"></p>\n<h3 id=\"深圳\"><a href=\"#深圳\" class=\"headerlink\" title=\"深圳\"></a>深圳</h3><p><img src=\"http://7xread.com1.z0.glb.clouddn.com/86712397-27ec-4b37-bbf8-81191e530ef6\" alt=\"233\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"58同城高德搜房项目JS相关知识\"><a href=\"#58同城高德搜房项目JS相关知识\" class=\"headerlink\" title=\"58同城高德搜房项目JS相关知识\"></a>58同城高德搜房项目JS相关知识</h1><p>在线地址：<a href=\"http://codelover.link:8080/\">58同城品牌公寓高德搜房</a></p>\n<p>Github地址：<a href=\"https://github.com/liguobao/58HouseSearch\" target=\"_blank\" rel=\"noopener\">https://github.com/liguobao/58HouseSearch</a></p>\n<p>知乎专栏(点赞用的)：<a href=\"https://zhuanlan.zhihu.com/p/21960329\" target=\"_blank\" rel=\"noopener\">高德API+Python解决租房问题(.NET版)</a></p>\n<p>经过了一个星期的修补补，以及小伙伴风险的代码，整个项目基本处于基本稳定运行的状态。</p>\n<p>同时加入了一下新功能：</p>\n<ol>\n<li>IP定位：调用高德地图IP定位功能实现</li>\n<li>移动地图中心定位：调用高德地图移动地图定位实现</li>\n<li>定位城市名转58同城城市名以获得准确58同城城市域名：抓取58同城城市分类信息</li>\n<li>优化数据源、去除广告数据：小伙伴奉献代码</li>\n</ol>\n<p>今天主要简单讲解一下其中使用的一些高德地图API接口。</p>\n<h2 id=\"高德地图JavaScript-API-主体为map对象，基本所有的操作都是通过map对象来实现的。\"><a href=\"#高德地图JavaScript-API-主体为map对象，基本所有的操作都是通过map对象来实现的。\" class=\"headerlink\" title=\"高德地图JavaScript API 主体为map对象，基本所有的操作都是通过map对象来实现的。\"></a>高德地图JavaScript API 主体为map对象，基本所有的操作都是通过map对象来实现的。</h2><p>map对象实例化是通过 Amap类来做的。如以下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map = <span class=\"keyword\">new</span> AMap.Map(<span class=\"string\">\"container\"</span>, &#123;</span><br><span class=\"line\">        resizeEnable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        zoomEnable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        center: [<span class=\"number\">121.297428</span>, <span class=\"number\">31.1345</span>],<span class=\"comment\">//经纬度，此处为上海</span></span><br><span class=\"line\">        zoom: <span class=\"number\">11</span></span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"IP定位\"><a href=\"#IP定位\" class=\"headerlink\" title=\"IP定位\"></a>IP定位</h2><p>调用Map.CitySearch()获得当前IP所在城市，直接将地图显示成当前城市。代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showCityInfo</span>(<span class=\"params\">map</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实例化城市查询类</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> citysearch = <span class=\"keyword\">new</span> AMap.CitySearch();</span><br><span class=\"line\">    <span class=\"comment\">//自动获取用户IP，返回当前城市</span></span><br><span class=\"line\">    citysearch.getLocalCity(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status, result</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (status === <span class=\"string\">'complete'</span> &amp;&amp; result.info === <span class=\"string\">'OK'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result &amp;&amp; result.city &amp;&amp; result.bounds) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> cityinfo = result.city;<span class=\"comment\">//获得XX市</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> citybounds = result.bounds;<span class=\"comment\">//用于设置地图显示位置的实例</span></span><br><span class=\"line\">                cityName = cityinfo.substring(<span class=\"number\">0</span>, cityinfo.length - <span class=\"number\">1</span>);<span class=\"comment\">//去掉市这个字</span></span><br><span class=\"line\">                ConvertCityCNNameToShortCut();<span class=\"comment\">//城市名转换成58同城城市域名字母，如上海-&gt;sh,苏州-&gt;su,</span></span><br><span class=\"line\">                                              <span class=\"comment\">//下面会有实现代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'IPLocation'</span>).innerHTML = <span class=\"string\">'您当前所在城市：'</span> + cityName;</span><br><span class=\"line\">                <span class=\"comment\">//地图显示当前城市</span></span><br><span class=\"line\">                map.setBounds(citybounds);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'IPLocation'</span>).innerHTML = result.info;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"移动地图自动中心定位\"><a href=\"#移动地图自动中心定位\" class=\"headerlink\" title=\"移动地图自动中心定位\"></a>移动地图自动中心定位</h2><p>之前有一版是让用户输入城市名，然后直接定位到输入的城市的。<br>这个功能卡在了设置地图显示位置上，如果是使用高德地图提供的搜索控件的话，又存在输入结果之后搜索结果可能是多个的问题。而且这点我只是要取到用户想要定位的城市而已，感觉没必要做得太复杂。<br>昨晚在看高德地图API的时候发现，有一个移动地图获得地图中心所在位置的样例，马上眼前一亮了。这个功能比我想要的还要好…果断上。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MapMoveToLocationCity</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    map.on(<span class=\"string\">'moveend'</span>, getCity);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCity</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        map.getCity(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (data[<span class=\"string\">'province'</span>] &amp;&amp; <span class=\"keyword\">typeof</span> data[<span class=\"string\">'province'</span>] === <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">var</span> cityinfo = (data[<span class=\"string\">'city'</span>] || data[<span class=\"string\">'province'</span>]);</span><br><span class=\"line\">                cityName = cityinfo.substring(<span class=\"number\">0</span>, cityinfo.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">                ConvertCityCNNameToShortCut();<span class=\"comment\">//城市名转58同城地区域名</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'IPLocation'</span>).innerHTML = <span class=\"string\">'地图中心所在城市：'</span> + cityName;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>整个代码的意思是，给map绑定一下移动时间，移动完了之后，调用getCity的方法获取当前地图中心所在城市信息。</p>\n<p>这个时候要注意，城市名可能在city对象里面，也可能在province里面。</p>\n<p>原因很简单：普通城市等级就是城市，我国还存在一个和省份一个等级的城市：直辖市。因此直辖市的城市名是在province里面的。</p>\n<h2 id=\"城市名匹配58同城地区域名\"><a href=\"#城市名匹配58同城地区域名\" class=\"headerlink\" title=\"城市名匹配58同城地区域名\"></a>城市名匹配58同城地区域名</h2><p>这个是上个版本(两三天前)的一个bug引出来的新功能。</p>\n<p>上个版本是让用户输入城市名，然后提取城市名的中文拼音首字母作为58同城地区域名。如上海 =sh，广州=gz，北京=bj，成都=cd。</p>\n<p>这个功能使用的是网上别人写的一个JS库，通过汉字匹配实现的。转换出来的数据没什么问题，不过我国汉字实在奥妙。</p>\n<p>广州=gz，赣州=gz；<br>遂宁=sn；绥宁=sn；<br>惠州=hz，杭州=hz。</p>\n<p>这样一来，上面这个做法就没法玩了。</p>\n<p>想了下怎么解决这个问题，灵机一动。反正是在爬58的数据，这个城市名和城市域名数据58同城肯定有啊，然后找到了这个。<br><a href=\"http://www.58.com/changecity.aspx?PGTID=0d100000-0007-a77b-4c4b-a28f725b8f5a&amp;ClickID=1\" target=\"_blank\" rel=\"noopener\">58同城城市分类导航</a></p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/c01c293a-d5cc-4f58-80dc-13aa05d47b01\" alt=\"123\"></p>\n<p>很明显，我要的所有城市名和城市域名都是里面了。</p>\n<p>晚上和衣衣说了下，衣衣一大早就把处理好的json数据给我了。</p>\n<p>于是来了下面一段代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//加载json文件</span></span><br><span class=\"line\">$.getJSON(<span class=\"string\">\"DomainJS/city.json\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">      allCityInfo = data;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ConvertCityCNNameToShortCut</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> filterarray = $.grep(allCityInfo, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj.cityName == cityName;</span><br><span class=\"line\">    &#125;);<span class=\"comment\">//找到当前城市名对应的json对象</span></span><br><span class=\"line\">    <span class=\"comment\">//获取json对象的地区域名</span></span><br><span class=\"line\">    cityNameCNPY = filterarray <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span> ? </span><br><span class=\"line\">    filterarray[<span class=\"number\">0</span>].shortCut : filterarray != <span class=\"literal\">null</span> ? filterarray.shortCut : <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"高德地图自动补全功能\"><a href=\"#高德地图自动补全功能\" class=\"headerlink\" title=\"高德地图自动补全功能\"></a>高德地图自动补全功能</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"control-input\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"work-location\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:60%\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> auto = <span class=\"keyword\">new</span> AMap.Autocomplete(&#123;</span><br><span class=\"line\">       input: <span class=\"string\">\"work-location\"</span></span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">   AMap.event.addListener(auto, <span class=\"string\">\"select\"</span>, workLocationSelected);</span><br></pre></td></tr></table></figure>\n<p>看方法前面也知道，其实这就是把ID为work-location的input初始化为地图插件，然后给Amap增加了一个监听事件。<br>当其中选中某一个数据的时候，触发workLocationSelected函数。效果如下：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/fe425992-e7c4-4cae-800e-319eff3b17e8\" alt=\"2233\"></p>\n<p>在这里locationSelected是定位到所选位置，代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">workLocationSelected</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    workAddress = e.poi.name;</span><br><span class=\"line\">    loadWorkLocation();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadWorkLocation</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    delWorkLocation();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> geocoder = <span class=\"keyword\">new</span> AMap.Geocoder(&#123;</span><br><span class=\"line\">        city: cityName,</span><br><span class=\"line\">        radius: <span class=\"number\">1000</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    geocoder.getLocation(workAddress, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status, result</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (status === <span class=\"string\">\"complete\"</span> &amp;&amp; result.info === <span class=\"string\">'OK'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> geocode = result.geocodes[<span class=\"number\">0</span>];</span><br><span class=\"line\">            x = geocode.location.getLng();</span><br><span class=\"line\">            y = geocode.location.getLat();</span><br><span class=\"line\">            loadWorkMarker(x, y);</span><br><span class=\"line\">            loadWorkRange(x, y, <span class=\"number\">60</span>, <span class=\"string\">\"#3f67a5\"</span>, vehicle);</span><br><span class=\"line\">            map.setZoomAndCenter(<span class=\"number\">12</span>, [x, y]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至于导航功能代码我没怎么动，没去研究就不献丑了…</p>\n<p>最后来个效果图。</p>\n<h3 id=\"北京\"><a href=\"#北京\" class=\"headerlink\" title=\"北京\"></a>北京</h3><p><img src=\"http://7xread.com1.z0.glb.clouddn.com/e7900aba-5a56-417c-9dd9-63527583e84b\" alt=\"123\"></p>\n<h3 id=\"成都\"><a href=\"#成都\" class=\"headerlink\" title=\"成都\"></a>成都</h3><p><img src=\"http://7xread.com1.z0.glb.clouddn.com/c9947d97-1b76-42bf-82b3-aca817e84e13\" alt=\"333\"></p>\n<h3 id=\"苏州\"><a href=\"#苏州\" class=\"headerlink\" title=\"苏州\"></a>苏州</h3><p><img src=\"http://7xread.com1.z0.glb.clouddn.com/941809ae-aa37-4a3b-89c7-10646cc7e3e7\" alt=\"233\"></p>\n<h3 id=\"深圳\"><a href=\"#深圳\" class=\"headerlink\" title=\"深圳\"></a>深圳</h3><p><img src=\"http://7xread.com1.z0.glb.clouddn.com/86712397-27ec-4b37-bbf8-81191e530ef6\" alt=\"233\"></p>\n"},{"layout":"post","title":"58HouseSearch项目迁移到asp.net core","date":"2016-10-03T16:00:00.000Z","_content":"# 58HouseSearch项目迁移到asp.net core\n\n[58HouseSearch](https://github.com/liguobao/58HouseSearch)这个项目原本是基于ASP.NET MVC 4写的，开发环境是Windows+VS2015，发布平台是linux+mono+jexus，这样看来整个项目基本已经满足跨平台的需求。\n\n这样一来，本来我是没什么动力去做迁移的，好好的东西闲着没事干才迁移呢。\n\n不过，这不国庆了么？穷人不是在家穷游天下么？所以...真的有点闲着没事干了。\n\n## 迁移可行性探讨\n\n项目迁移前，我们还是先来讨论一下迁移可行性。为嘛要进行可行性探讨呢？原因是.NET CORE是一个跨平台的框架，和上一代的.NET存在不兼容。\n\n个人总结一下，迁移的主要的问题在于：代码不兼容、类库不兼容、严重依赖Windows API或者COM组件等。\n\n## 代码不兼容\n\n代码不兼容其实不算麻烦。毕竟代码是活的，你我也是活的，不就是一个改字罢了。花点时间慢慢改，总是能搞掂的。\n\n- 类库不兼容,要不就弃用，要不就找替代品。\n\n- 严重依赖Windows API或者COM组件\n\n    额？找替代品，找不到可用替代品的话。放弃吧，这个项目别考虑迁移了。\n\n    这个故事告诉我们，做跨平台项目的时候，少点用系统API或者组建。\n\n回到58HouseSearch项目上面。\n\n这个项目的代码基本都是我写的，所以重写代码没什么问题。\n依赖的类库有下面几个:\n\n- [AngleSharp](https://github.com/FlorianRappl/AngleSharp)\n\n- [Newtonsoft.Json](http://www.newtonsoft.com/json)\n\n- [log4net](http://logging.apache.org/log4net/)\n\nAngleSharp是用来解析HTML的类库，用linq的方式来操作HTML，用起来实在爽快。\n\n如果这货在.net core上不能跑，我应该立马放弃了。\n不过，这个实在给力...\n\n![AngleSharp支持平台](http://7xread.com1.z0.glb.clouddn.com/1a950803-3d38-4b16-9761-6c9cd806b0b9)\n\n\nNewtonsoft.Json\n\n在这个项目里面主要是用来记录PV数据的，非核心功能，可有可无。不过看了下nuget上的介绍，也是支持.net core的。\n\n剩下log4net...嗯，并不支持log4net。不过这个就更加是非核心内容了，直接丢了。\nPS:考虑后期加入Nlog替代log4net。\n\n至于依赖Windows API之类的，在这个项目里面基本没有，所以略过...\n\n\n### 准备工作\n\n- [Visual Studio Community 2015 with Update 3 – Free](https://www.visualstudio.com/downloads/)\n- [.NET Core SDK](https://www.microsoft.com/net/download)\n- [.NET Core](https://www.microsoft.com/net/download)\n- [.NET Core 1.0.1 - VS 2015 Tooling Preview 2](https://go.microsoft.com/fwlink/?LinkId=827546)\n\n友情提示：\n\n1. Visual Studio Community 2015 with Update 3 下载镜像来安装。\n\n错误操作如下：\n![错误操作](http://7xread.com1.z0.glb.clouddn.com/1e723e08-b3d5-4dab-b4a6-1de70799c4c8)\n\n正确打开方式：\n\n![正确的打开方式-1](http://7xread.com1.z0.glb.clouddn.com/706771d8-d3f2-4122-a61d-5e961887121a)\n\n![正确的打开方式-2](http://7xread.com1.z0.glb.clouddn.com/455ec5cc-b429-4563-a4fb-3a0c18608969)\n\n2. 安装.NET Core SDK和.NET Core之后再安装.NET Core 1.0.1 - VS 2015 Tooling Preview 2\n\n3. 安装.NET Core 1.0.1 - VS 2015 Tooling Preview 2 这货的可能会报错0x80072f8a未指定的错误\n\n解决方案见下图：\n\n![图片描述](http://7xread.com1.z0.glb.clouddn.com/47c517d1-4b48-4088-be4a-a0768413e768)\n\n详细见链接：[安装DotNetCore.1.0.1-VS2015Tools.Preview2.0.2出现0x80072f8a未指定的错误](http://www.cnblogs.com/JiaoWoWeiZai/p/5892255.html)\n\n上面都弄好之后，理论上在VS2O15-新建项目里面可以看到ASP.NET CORE的模板了。如下图：\n![ASP.NET CORE的模板](http://7xread.com1.z0.glb.clouddn.com/3364e7c9-a41e-47f2-8d08-60345e4efa35)\n\n### 项目迁移\n\n#### 新建空白ASP.NET CORE项目\n\n新建好了之后如下图：\n\n![空白ASP.NET CORE项目](http://7xread.com1.z0.glb.clouddn.com/e047d81d-56f1-4e51-9d72-7989e1fc6225)\n\n#### Nuget获取引用\n\nhttps://www.nuget.org/packages/AngleSharp/\n\nhttps://www.nuget.org/packages/Newtonsoft.Json\n\n#### 添加Controllers文件夹\n然后把之前项目的Controllers拷贝过来，改掉命名空间，去掉无用代码，添加相应引用。\n\n#### 添加Views文件夹\n本项目直接把之前项目的Views拷贝过来是完全没有问题的。\n\n#### 静态文件处理\nasp.net core MVC中的文件结构和asp.net mvc的文件结构略有不同。\n\nasp.net core MVC在view中“IMG/Little/PaleGreen.png”对应的文件对应于“项目路径/webroot/IMG/Little/PaleGreen.png”；\n\n而asp.net mvc中，对应路径为“项目/IMG/Little/PaleGreen.png”。\n\n因而，我们的所有静态文件都应该放到：webroot文件夹下。\n\n上面的都做完了之后，项目结构如下：\n\n![项目结构](http://7xread.com1.z0.glb.clouddn.com/2fee156b-2505-4953-bfe9-1d2521f13565)\n\n接下来就是改代码了。\n\n### 代码迁移\n\n#### Startup.cs添加MVC\n\n```C#\n    public class Startup\n    {\n        // This method gets called by the runtime. Use this method to add services to the container.\n        // For more information on how to configure your application, visit http://go.microsoft.com/fwlink/?LinkID=398940\n        public void ConfigureServices(IServiceCollection services)\n        {\n            //添加MVC框架\n            services.AddMvc();\n        }\n\n        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env,\n        ILoggerFactory loggerFactory)\n        {\n            loggerFactory.AddConsole();\n\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            //启用静态文件中间件\n            app.UseStaticFiles();\n            //启动MVC路由\n            app.UseMvcWithDefaultRoute();\n            //设置默认页面\n            app.UseMvc(routes =>\n            {\n                routes.MapRoute(\n                    name: \"default\",\n                    template: \"{controller=House}/{action=Index}/{id?}\"); \n            });\n        }\n    }\n\n```\n\n#### 改写GetHTMLByURL方法\n\n之前的方法：\n\n![old GetHTMLByURL](http://7xread.com1.z0.glb.clouddn.com/d005a100-e3e6-423b-b34c-3eae11b2ab63)\n\n.net core重写了HttpWebRequest，变成了WebRequest,所以上面的代码废了。\n\n重写如下：\n\n```C#\n        public static string GetHTMLByURL(string Url, string type = \"UTF-8\")\n        {\n            try\n            {\n                Url = Url.ToLower();\n\n                System.Net.WebRequest wReq = System.Net.WebRequest.Create(Url);\n                // Get the response instance.\n                System.Net.WebResponse wResp = wReq.GetResponseAsync().Result;\n                System.IO.Stream respStream = wResp.GetResponseStream();\n                using (System.IO.StreamReader reader = new System.IO.\n                StreamReader(respStream, Encoding.GetEncoding(type)))\n                {\n                    return reader.ReadToEnd();\n                }\n            }\n            catch (System.Exception ex)\n            {\n\n                return string.Empty;\n            }\n\n        }\n```\n\n#### 改写Controller代码\n\n嗯，换了命名空间，别的一句都没改直接拉过来了...略过。\n\n### 发布到ubuntu\n\n[Install for Ubuntu 14.04, 16.04 & Linux Mint 17](https://www.microsoft.com/net/core#ubuntu)\n\n第一步\n\n```sh\n//Ubuntu 14.04 / Linux Mint 17\nsudo sh -c 'echo \"deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet-release/ trusty main\" > /etc/apt/sources.list.d/dotnetdev.list'\nsudo apt-key adv --keyserver apt-mo.trafficmanager.net --recv-keys 417A0893\nsudo apt-get update\n\n\n//Ubuntu 16.04\nsudo sh -c 'echo \"deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet-release/ xenial main\" > /etc/apt/sources.list.d/dotnetdev.list'\nsudo apt-key adv --keyserver apt-mo.trafficmanager.net --recv-keys 417A0893\nsudo apt-get update\n\n```\n\n第二步\n\n```sh\nsudo apt-get install dotnet-dev-1.0.0-preview2-003131\n```\n\n安装好了之后，输入 dotnet -v 应该能看到版本信息，如下图：\n\n![dotnet -v ](http://7xread.com1.z0.glb.clouddn.com/6ebca12e-2be9-487e-b230-d22562a5aabe)\n\n这样的下，一句完成了ubuntu 运行asp.net core的环境搭建了。\n\n### project.json里面隐藏的坑\n\n#### dependencies\n\nNET Core 1.0.1 - VS 2015 Tooling Preview 2模板的asp.net core 版本和ubuntu 的asp.net core 版本不一致。\n\n根据微软爸给的教程，我们在ubuntu上安装的.NET Core 1.0.0，见上图。\n\n然而我们创建项目的模板是.NET Core 1.0.1，见下图:\n\n![.NET Core 1.0.1](http://7xread.com1.z0.glb.clouddn.com/a3192bdf-f548-4fad-868a-4865632acd29)\n\n怎么办？要不升级ubuntu的asp.net core，要不降级。\n\n由于没找到.NET Core 1.0.1 ubuntu的安装包，所以我选择了降级到.NET Core 1.0.0.\n\n其中需要把Microsoft.NETCore.App version 、Microsoft.AspNetCore.Server.Kestrel、Microsoft.AspNetCore.Mvc 这三个节点都改成“1.0.0”。如下：\n\n```json\n  \"dependencies\": {\n    \"Microsoft.NETCore.App\": {\n      \"version\": \"1.0.1\",\n      \"type\": \"platform\"\n    },\n    \"Microsoft.AspNetCore.Diagnostics\": \"1.0.0\",\n    \"Microsoft.AspNetCore.Server.IISIntegration\": \"1.0.0\",\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.1\",\n    \"Microsoft.Extensions.Logging.Console\": \"1.0.0\",\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.1\",\n    \"Microsoft.AspNetCore.StaticFiles\": \"1.0.0\",\n    \"Newtonsoft.Json\": \"9.0.1\",\n    \"AngleSharp\": \"0.9.8.1\"\n  },\n\n```\n\n#### publishOptions\n\n发布输出包括Views文件夹\n\n```sh\n  \"publishOptions\": {\n    \"include\": [\n      \"wwwroot\",\n      \"web.config\",\n      \"Views\"\n    ]\n  },\n```\n\n#### runtimes\n\nruntimes 配置为模板运行平台。\n详细见链接：[https://docs.nuget.org/ndocs/schema/project.json](https://docs.nuget.org/ndocs/schema/project.json)\n\n```json\n  \"runtimes\": { \"ubuntu.14.04-x64\": {} }\n```\n\n上面都弄好之后，跑一下看,如下图：\n\n```sh\ndotnet restore\n\ndotnet run\n```\n\n来个请求看看：\n\n![请求log](http://7xread.com1.z0.glb.clouddn.com/b1191226-c33b-45c7-98cc-f62bb3ea73b4)\n\n\n### jexus转发/反向代理\n\n[ASP.NET Core \"完整发布,自带运行时\" 到jexus](http://www.cnblogs.com/gaobing/p/5663012.html)\n\n","source":"_posts/58CityHouseSearch_move_to_aspnetcore.md","raw":"---\nlayout: post\ntitle: 58HouseSearch项目迁移到asp.net core\ncategory: asp.net core\ndate: 2016-10-04\ntags:\n- asp.net core\n- 58City\n- \n---\n# 58HouseSearch项目迁移到asp.net core\n\n[58HouseSearch](https://github.com/liguobao/58HouseSearch)这个项目原本是基于ASP.NET MVC 4写的，开发环境是Windows+VS2015，发布平台是linux+mono+jexus，这样看来整个项目基本已经满足跨平台的需求。\n\n这样一来，本来我是没什么动力去做迁移的，好好的东西闲着没事干才迁移呢。\n\n不过，这不国庆了么？穷人不是在家穷游天下么？所以...真的有点闲着没事干了。\n\n## 迁移可行性探讨\n\n项目迁移前，我们还是先来讨论一下迁移可行性。为嘛要进行可行性探讨呢？原因是.NET CORE是一个跨平台的框架，和上一代的.NET存在不兼容。\n\n个人总结一下，迁移的主要的问题在于：代码不兼容、类库不兼容、严重依赖Windows API或者COM组件等。\n\n## 代码不兼容\n\n代码不兼容其实不算麻烦。毕竟代码是活的，你我也是活的，不就是一个改字罢了。花点时间慢慢改，总是能搞掂的。\n\n- 类库不兼容,要不就弃用，要不就找替代品。\n\n- 严重依赖Windows API或者COM组件\n\n    额？找替代品，找不到可用替代品的话。放弃吧，这个项目别考虑迁移了。\n\n    这个故事告诉我们，做跨平台项目的时候，少点用系统API或者组建。\n\n回到58HouseSearch项目上面。\n\n这个项目的代码基本都是我写的，所以重写代码没什么问题。\n依赖的类库有下面几个:\n\n- [AngleSharp](https://github.com/FlorianRappl/AngleSharp)\n\n- [Newtonsoft.Json](http://www.newtonsoft.com/json)\n\n- [log4net](http://logging.apache.org/log4net/)\n\nAngleSharp是用来解析HTML的类库，用linq的方式来操作HTML，用起来实在爽快。\n\n如果这货在.net core上不能跑，我应该立马放弃了。\n不过，这个实在给力...\n\n![AngleSharp支持平台](http://7xread.com1.z0.glb.clouddn.com/1a950803-3d38-4b16-9761-6c9cd806b0b9)\n\n\nNewtonsoft.Json\n\n在这个项目里面主要是用来记录PV数据的，非核心功能，可有可无。不过看了下nuget上的介绍，也是支持.net core的。\n\n剩下log4net...嗯，并不支持log4net。不过这个就更加是非核心内容了，直接丢了。\nPS:考虑后期加入Nlog替代log4net。\n\n至于依赖Windows API之类的，在这个项目里面基本没有，所以略过...\n\n\n### 准备工作\n\n- [Visual Studio Community 2015 with Update 3 – Free](https://www.visualstudio.com/downloads/)\n- [.NET Core SDK](https://www.microsoft.com/net/download)\n- [.NET Core](https://www.microsoft.com/net/download)\n- [.NET Core 1.0.1 - VS 2015 Tooling Preview 2](https://go.microsoft.com/fwlink/?LinkId=827546)\n\n友情提示：\n\n1. Visual Studio Community 2015 with Update 3 下载镜像来安装。\n\n错误操作如下：\n![错误操作](http://7xread.com1.z0.glb.clouddn.com/1e723e08-b3d5-4dab-b4a6-1de70799c4c8)\n\n正确打开方式：\n\n![正确的打开方式-1](http://7xread.com1.z0.glb.clouddn.com/706771d8-d3f2-4122-a61d-5e961887121a)\n\n![正确的打开方式-2](http://7xread.com1.z0.glb.clouddn.com/455ec5cc-b429-4563-a4fb-3a0c18608969)\n\n2. 安装.NET Core SDK和.NET Core之后再安装.NET Core 1.0.1 - VS 2015 Tooling Preview 2\n\n3. 安装.NET Core 1.0.1 - VS 2015 Tooling Preview 2 这货的可能会报错0x80072f8a未指定的错误\n\n解决方案见下图：\n\n![图片描述](http://7xread.com1.z0.glb.clouddn.com/47c517d1-4b48-4088-be4a-a0768413e768)\n\n详细见链接：[安装DotNetCore.1.0.1-VS2015Tools.Preview2.0.2出现0x80072f8a未指定的错误](http://www.cnblogs.com/JiaoWoWeiZai/p/5892255.html)\n\n上面都弄好之后，理论上在VS2O15-新建项目里面可以看到ASP.NET CORE的模板了。如下图：\n![ASP.NET CORE的模板](http://7xread.com1.z0.glb.clouddn.com/3364e7c9-a41e-47f2-8d08-60345e4efa35)\n\n### 项目迁移\n\n#### 新建空白ASP.NET CORE项目\n\n新建好了之后如下图：\n\n![空白ASP.NET CORE项目](http://7xread.com1.z0.glb.clouddn.com/e047d81d-56f1-4e51-9d72-7989e1fc6225)\n\n#### Nuget获取引用\n\nhttps://www.nuget.org/packages/AngleSharp/\n\nhttps://www.nuget.org/packages/Newtonsoft.Json\n\n#### 添加Controllers文件夹\n然后把之前项目的Controllers拷贝过来，改掉命名空间，去掉无用代码，添加相应引用。\n\n#### 添加Views文件夹\n本项目直接把之前项目的Views拷贝过来是完全没有问题的。\n\n#### 静态文件处理\nasp.net core MVC中的文件结构和asp.net mvc的文件结构略有不同。\n\nasp.net core MVC在view中“IMG/Little/PaleGreen.png”对应的文件对应于“项目路径/webroot/IMG/Little/PaleGreen.png”；\n\n而asp.net mvc中，对应路径为“项目/IMG/Little/PaleGreen.png”。\n\n因而，我们的所有静态文件都应该放到：webroot文件夹下。\n\n上面的都做完了之后，项目结构如下：\n\n![项目结构](http://7xread.com1.z0.glb.clouddn.com/2fee156b-2505-4953-bfe9-1d2521f13565)\n\n接下来就是改代码了。\n\n### 代码迁移\n\n#### Startup.cs添加MVC\n\n```C#\n    public class Startup\n    {\n        // This method gets called by the runtime. Use this method to add services to the container.\n        // For more information on how to configure your application, visit http://go.microsoft.com/fwlink/?LinkID=398940\n        public void ConfigureServices(IServiceCollection services)\n        {\n            //添加MVC框架\n            services.AddMvc();\n        }\n\n        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env,\n        ILoggerFactory loggerFactory)\n        {\n            loggerFactory.AddConsole();\n\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            //启用静态文件中间件\n            app.UseStaticFiles();\n            //启动MVC路由\n            app.UseMvcWithDefaultRoute();\n            //设置默认页面\n            app.UseMvc(routes =>\n            {\n                routes.MapRoute(\n                    name: \"default\",\n                    template: \"{controller=House}/{action=Index}/{id?}\"); \n            });\n        }\n    }\n\n```\n\n#### 改写GetHTMLByURL方法\n\n之前的方法：\n\n![old GetHTMLByURL](http://7xread.com1.z0.glb.clouddn.com/d005a100-e3e6-423b-b34c-3eae11b2ab63)\n\n.net core重写了HttpWebRequest，变成了WebRequest,所以上面的代码废了。\n\n重写如下：\n\n```C#\n        public static string GetHTMLByURL(string Url, string type = \"UTF-8\")\n        {\n            try\n            {\n                Url = Url.ToLower();\n\n                System.Net.WebRequest wReq = System.Net.WebRequest.Create(Url);\n                // Get the response instance.\n                System.Net.WebResponse wResp = wReq.GetResponseAsync().Result;\n                System.IO.Stream respStream = wResp.GetResponseStream();\n                using (System.IO.StreamReader reader = new System.IO.\n                StreamReader(respStream, Encoding.GetEncoding(type)))\n                {\n                    return reader.ReadToEnd();\n                }\n            }\n            catch (System.Exception ex)\n            {\n\n                return string.Empty;\n            }\n\n        }\n```\n\n#### 改写Controller代码\n\n嗯，换了命名空间，别的一句都没改直接拉过来了...略过。\n\n### 发布到ubuntu\n\n[Install for Ubuntu 14.04, 16.04 & Linux Mint 17](https://www.microsoft.com/net/core#ubuntu)\n\n第一步\n\n```sh\n//Ubuntu 14.04 / Linux Mint 17\nsudo sh -c 'echo \"deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet-release/ trusty main\" > /etc/apt/sources.list.d/dotnetdev.list'\nsudo apt-key adv --keyserver apt-mo.trafficmanager.net --recv-keys 417A0893\nsudo apt-get update\n\n\n//Ubuntu 16.04\nsudo sh -c 'echo \"deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet-release/ xenial main\" > /etc/apt/sources.list.d/dotnetdev.list'\nsudo apt-key adv --keyserver apt-mo.trafficmanager.net --recv-keys 417A0893\nsudo apt-get update\n\n```\n\n第二步\n\n```sh\nsudo apt-get install dotnet-dev-1.0.0-preview2-003131\n```\n\n安装好了之后，输入 dotnet -v 应该能看到版本信息，如下图：\n\n![dotnet -v ](http://7xread.com1.z0.glb.clouddn.com/6ebca12e-2be9-487e-b230-d22562a5aabe)\n\n这样的下，一句完成了ubuntu 运行asp.net core的环境搭建了。\n\n### project.json里面隐藏的坑\n\n#### dependencies\n\nNET Core 1.0.1 - VS 2015 Tooling Preview 2模板的asp.net core 版本和ubuntu 的asp.net core 版本不一致。\n\n根据微软爸给的教程，我们在ubuntu上安装的.NET Core 1.0.0，见上图。\n\n然而我们创建项目的模板是.NET Core 1.0.1，见下图:\n\n![.NET Core 1.0.1](http://7xread.com1.z0.glb.clouddn.com/a3192bdf-f548-4fad-868a-4865632acd29)\n\n怎么办？要不升级ubuntu的asp.net core，要不降级。\n\n由于没找到.NET Core 1.0.1 ubuntu的安装包，所以我选择了降级到.NET Core 1.0.0.\n\n其中需要把Microsoft.NETCore.App version 、Microsoft.AspNetCore.Server.Kestrel、Microsoft.AspNetCore.Mvc 这三个节点都改成“1.0.0”。如下：\n\n```json\n  \"dependencies\": {\n    \"Microsoft.NETCore.App\": {\n      \"version\": \"1.0.1\",\n      \"type\": \"platform\"\n    },\n    \"Microsoft.AspNetCore.Diagnostics\": \"1.0.0\",\n    \"Microsoft.AspNetCore.Server.IISIntegration\": \"1.0.0\",\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.1\",\n    \"Microsoft.Extensions.Logging.Console\": \"1.0.0\",\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.1\",\n    \"Microsoft.AspNetCore.StaticFiles\": \"1.0.0\",\n    \"Newtonsoft.Json\": \"9.0.1\",\n    \"AngleSharp\": \"0.9.8.1\"\n  },\n\n```\n\n#### publishOptions\n\n发布输出包括Views文件夹\n\n```sh\n  \"publishOptions\": {\n    \"include\": [\n      \"wwwroot\",\n      \"web.config\",\n      \"Views\"\n    ]\n  },\n```\n\n#### runtimes\n\nruntimes 配置为模板运行平台。\n详细见链接：[https://docs.nuget.org/ndocs/schema/project.json](https://docs.nuget.org/ndocs/schema/project.json)\n\n```json\n  \"runtimes\": { \"ubuntu.14.04-x64\": {} }\n```\n\n上面都弄好之后，跑一下看,如下图：\n\n```sh\ndotnet restore\n\ndotnet run\n```\n\n来个请求看看：\n\n![请求log](http://7xread.com1.z0.glb.clouddn.com/b1191226-c33b-45c7-98cc-f62bb3ea73b4)\n\n\n### jexus转发/反向代理\n\n[ASP.NET Core \"完整发布,自带运行时\" 到jexus](http://www.cnblogs.com/gaobing/p/5663012.html)\n\n","slug":"58CityHouseSearch_move_to_aspnetcore","published":1,"updated":"2018-05-17T12:41:41.169Z","comments":1,"photos":[],"link":"","_id":"cjhal1fvh0004p631royy1bff","content":"<h1 id=\"58HouseSearch项目迁移到asp-net-core\"><a href=\"#58HouseSearch项目迁移到asp-net-core\" class=\"headerlink\" title=\"58HouseSearch项目迁移到asp.net core\"></a>58HouseSearch项目迁移到asp.net core</h1><p><a href=\"https://github.com/liguobao/58HouseSearch\" target=\"_blank\" rel=\"noopener\">58HouseSearch</a>这个项目原本是基于ASP.NET MVC 4写的，开发环境是Windows+VS2015，发布平台是linux+mono+jexus，这样看来整个项目基本已经满足跨平台的需求。</p>\n<p>这样一来，本来我是没什么动力去做迁移的，好好的东西闲着没事干才迁移呢。</p>\n<p>不过，这不国庆了么？穷人不是在家穷游天下么？所以…真的有点闲着没事干了。</p>\n<h2 id=\"迁移可行性探讨\"><a href=\"#迁移可行性探讨\" class=\"headerlink\" title=\"迁移可行性探讨\"></a>迁移可行性探讨</h2><p>项目迁移前，我们还是先来讨论一下迁移可行性。为嘛要进行可行性探讨呢？原因是.NET CORE是一个跨平台的框架，和上一代的.NET存在不兼容。</p>\n<p>个人总结一下，迁移的主要的问题在于：代码不兼容、类库不兼容、严重依赖Windows API或者COM组件等。</p>\n<h2 id=\"代码不兼容\"><a href=\"#代码不兼容\" class=\"headerlink\" title=\"代码不兼容\"></a>代码不兼容</h2><p>代码不兼容其实不算麻烦。毕竟代码是活的，你我也是活的，不就是一个改字罢了。花点时间慢慢改，总是能搞掂的。</p>\n<ul>\n<li><p>类库不兼容,要不就弃用，要不就找替代品。</p>\n</li>\n<li><p>严重依赖Windows API或者COM组件</p>\n<p>  额？找替代品，找不到可用替代品的话。放弃吧，这个项目别考虑迁移了。</p>\n<p>  这个故事告诉我们，做跨平台项目的时候，少点用系统API或者组建。</p>\n</li>\n</ul>\n<p>回到58HouseSearch项目上面。</p>\n<p>这个项目的代码基本都是我写的，所以重写代码没什么问题。<br>依赖的类库有下面几个:</p>\n<ul>\n<li><p><a href=\"https://github.com/FlorianRappl/AngleSharp\" target=\"_blank\" rel=\"noopener\">AngleSharp</a></p>\n</li>\n<li><p><a href=\"http://www.newtonsoft.com/json\" target=\"_blank\" rel=\"noopener\">Newtonsoft.Json</a></p>\n</li>\n<li><p><a href=\"http://logging.apache.org/log4net/\" target=\"_blank\" rel=\"noopener\">log4net</a></p>\n</li>\n</ul>\n<p>AngleSharp是用来解析HTML的类库，用linq的方式来操作HTML，用起来实在爽快。</p>\n<p>如果这货在.net core上不能跑，我应该立马放弃了。<br>不过，这个实在给力…</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/1a950803-3d38-4b16-9761-6c9cd806b0b9\" alt=\"AngleSharp支持平台\"></p>\n<p>Newtonsoft.Json</p>\n<p>在这个项目里面主要是用来记录PV数据的，非核心功能，可有可无。不过看了下nuget上的介绍，也是支持.net core的。</p>\n<p>剩下log4net…嗯，并不支持log4net。不过这个就更加是非核心内容了，直接丢了。<br>PS:考虑后期加入Nlog替代log4net。</p>\n<p>至于依赖Windows API之类的，在这个项目里面基本没有，所以略过…</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ul>\n<li><a href=\"https://www.visualstudio.com/downloads/\" target=\"_blank\" rel=\"noopener\">Visual Studio Community 2015 with Update 3 – Free</a></li>\n<li><a href=\"https://www.microsoft.com/net/download\" target=\"_blank\" rel=\"noopener\">.NET Core SDK</a></li>\n<li><a href=\"https://www.microsoft.com/net/download\" target=\"_blank\" rel=\"noopener\">.NET Core</a></li>\n<li><a href=\"https://go.microsoft.com/fwlink/?LinkId=827546\" target=\"_blank\" rel=\"noopener\">.NET Core 1.0.1 - VS 2015 Tooling Preview 2</a></li>\n</ul>\n<p>友情提示：</p>\n<ol>\n<li>Visual Studio Community 2015 with Update 3 下载镜像来安装。</li>\n</ol>\n<p>错误操作如下：<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/1e723e08-b3d5-4dab-b4a6-1de70799c4c8\" alt=\"错误操作\"></p>\n<p>正确打开方式：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/706771d8-d3f2-4122-a61d-5e961887121a\" alt=\"正确的打开方式-1\"></p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/455ec5cc-b429-4563-a4fb-3a0c18608969\" alt=\"正确的打开方式-2\"></p>\n<ol start=\"2\">\n<li><p>安装.NET Core SDK和.NET Core之后再安装.NET Core 1.0.1 - VS 2015 Tooling Preview 2</p>\n</li>\n<li><p>安装.NET Core 1.0.1 - VS 2015 Tooling Preview 2 这货的可能会报错0x80072f8a未指定的错误</p>\n</li>\n</ol>\n<p>解决方案见下图：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/47c517d1-4b48-4088-be4a-a0768413e768\" alt=\"图片描述\"></p>\n<p>详细见链接：<a href=\"http://www.cnblogs.com/JiaoWoWeiZai/p/5892255.html\" target=\"_blank\" rel=\"noopener\">安装DotNetCore.1.0.1-VS2015Tools.Preview2.0.2出现0x80072f8a未指定的错误</a></p>\n<p>上面都弄好之后，理论上在VS2O15-新建项目里面可以看到ASP.NET CORE的模板了。如下图：<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/3364e7c9-a41e-47f2-8d08-60345e4efa35\" alt=\"ASP.NET CORE的模板\"></p>\n<h3 id=\"项目迁移\"><a href=\"#项目迁移\" class=\"headerlink\" title=\"项目迁移\"></a>项目迁移</h3><h4 id=\"新建空白ASP-NET-CORE项目\"><a href=\"#新建空白ASP-NET-CORE项目\" class=\"headerlink\" title=\"新建空白ASP.NET CORE项目\"></a>新建空白ASP.NET CORE项目</h4><p>新建好了之后如下图：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/e047d81d-56f1-4e51-9d72-7989e1fc6225\" alt=\"空白ASP.NET CORE项目\"></p>\n<h4 id=\"Nuget获取引用\"><a href=\"#Nuget获取引用\" class=\"headerlink\" title=\"Nuget获取引用\"></a>Nuget获取引用</h4><p><a href=\"https://www.nuget.org/packages/AngleSharp/\" target=\"_blank\" rel=\"noopener\">https://www.nuget.org/packages/AngleSharp/</a></p>\n<p><a href=\"https://www.nuget.org/packages/Newtonsoft.Json\" target=\"_blank\" rel=\"noopener\">https://www.nuget.org/packages/Newtonsoft.Json</a></p>\n<h4 id=\"添加Controllers文件夹\"><a href=\"#添加Controllers文件夹\" class=\"headerlink\" title=\"添加Controllers文件夹\"></a>添加Controllers文件夹</h4><p>然后把之前项目的Controllers拷贝过来，改掉命名空间，去掉无用代码，添加相应引用。</p>\n<h4 id=\"添加Views文件夹\"><a href=\"#添加Views文件夹\" class=\"headerlink\" title=\"添加Views文件夹\"></a>添加Views文件夹</h4><p>本项目直接把之前项目的Views拷贝过来是完全没有问题的。</p>\n<h4 id=\"静态文件处理\"><a href=\"#静态文件处理\" class=\"headerlink\" title=\"静态文件处理\"></a>静态文件处理</h4><p>asp.net core MVC中的文件结构和asp.net mvc的文件结构略有不同。</p>\n<p>asp.net core MVC在view中“IMG/Little/PaleGreen.png”对应的文件对应于“项目路径/webroot/IMG/Little/PaleGreen.png”；</p>\n<p>而asp.net mvc中，对应路径为“项目/IMG/Little/PaleGreen.png”。</p>\n<p>因而，我们的所有静态文件都应该放到：webroot文件夹下。</p>\n<p>上面的都做完了之后，项目结构如下：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/2fee156b-2505-4953-bfe9-1d2521f13565\" alt=\"项目结构\"></p>\n<p>接下来就是改代码了。</p>\n<h3 id=\"代码迁移\"><a href=\"#代码迁移\" class=\"headerlink\" title=\"代码迁移\"></a>代码迁移</h3><h4 id=\"Startup-cs添加MVC\"><a href=\"#Startup-cs添加MVC\" class=\"headerlink\" title=\"Startup.cs添加MVC\"></a>Startup.cs添加MVC</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Startup</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    // This method gets called by the runtime. Use this method to add services to the container.</span><br><span class=\"line\">    // For more information on how to configure your application, visit http://go.microsoft.com/fwlink/?LinkID=398940</span><br><span class=\"line\">    public void ConfigureServices(IServiceCollection services)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //添加MVC框架</span><br><span class=\"line\">        services.AddMvc();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span><br><span class=\"line\">    public void Configure(IApplicationBuilder app, IHostingEnvironment env,</span><br><span class=\"line\">    ILoggerFactory loggerFactory)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        loggerFactory.AddConsole();</span><br><span class=\"line\"></span><br><span class=\"line\">        if (env.IsDevelopment())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            app.UseDeveloperExceptionPage();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //启用静态文件中间件</span><br><span class=\"line\">        app.UseStaticFiles();</span><br><span class=\"line\">        //启动MVC路由</span><br><span class=\"line\">        app.UseMvcWithDefaultRoute();</span><br><span class=\"line\">        //设置默认页面</span><br><span class=\"line\">        app.UseMvc(routes =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            routes.MapRoute(</span><br><span class=\"line\">                name: &quot;default&quot;,</span><br><span class=\"line\">                template: &quot;&#123;controller=House&#125;/&#123;action=Index&#125;/&#123;id?&#125;&quot;); </span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"改写GetHTMLByURL方法\"><a href=\"#改写GetHTMLByURL方法\" class=\"headerlink\" title=\"改写GetHTMLByURL方法\"></a>改写GetHTMLByURL方法</h4><p>之前的方法：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/d005a100-e3e6-423b-b34c-3eae11b2ab63\" alt=\"old GetHTMLByURL\"></p>\n<p>.net core重写了HttpWebRequest，变成了WebRequest,所以上面的代码废了。</p>\n<p>重写如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static string GetHTMLByURL(string Url, string type = &quot;UTF-8&quot;)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    try</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Url = Url.ToLower();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.Net.WebRequest wReq = System.Net.WebRequest.Create(Url);</span><br><span class=\"line\">        // Get the response instance.</span><br><span class=\"line\">        System.Net.WebResponse wResp = wReq.GetResponseAsync().Result;</span><br><span class=\"line\">        System.IO.Stream respStream = wResp.GetResponseStream();</span><br><span class=\"line\">        using (System.IO.StreamReader reader = new System.IO.</span><br><span class=\"line\">        StreamReader(respStream, Encoding.GetEncoding(type)))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return reader.ReadToEnd();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    catch (System.Exception ex)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        return string.Empty;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"改写Controller代码\"><a href=\"#改写Controller代码\" class=\"headerlink\" title=\"改写Controller代码\"></a>改写Controller代码</h4><p>嗯，换了命名空间，别的一句都没改直接拉过来了…略过。</p>\n<h3 id=\"发布到ubuntu\"><a href=\"#发布到ubuntu\" class=\"headerlink\" title=\"发布到ubuntu\"></a>发布到ubuntu</h3><p><a href=\"https://www.microsoft.com/net/core#ubuntu\" target=\"_blank\" rel=\"noopener\">Install for Ubuntu 14.04, 16.04 &amp; Linux Mint 17</a></p>\n<p>第一步</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Ubuntu 14.04 / Linux Mint 17</span><br><span class=\"line\">sudo sh -c <span class=\"string\">'echo \"deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet-release/ trusty main\" &gt; /etc/apt/sources.list.d/dotnetdev.list'</span></span><br><span class=\"line\">sudo apt-key adv --keyserver apt-mo.trafficmanager.net --recv-keys 417A0893</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//Ubuntu 16.04</span><br><span class=\"line\">sudo sh -c <span class=\"string\">'echo \"deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet-release/ xenial main\" &gt; /etc/apt/sources.list.d/dotnetdev.list'</span></span><br><span class=\"line\">sudo apt-key adv --keyserver apt-mo.trafficmanager.net --recv-keys 417A0893</span><br><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n<p>第二步</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install dotnet-dev-1.0.0-preview2-003131</span><br></pre></td></tr></table></figure>\n<p>安装好了之后，输入 dotnet -v 应该能看到版本信息，如下图：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/6ebca12e-2be9-487e-b230-d22562a5aabe\" alt=\"dotnet -v \"></p>\n<p>这样的下，一句完成了ubuntu 运行asp.net core的环境搭建了。</p>\n<h3 id=\"project-json里面隐藏的坑\"><a href=\"#project-json里面隐藏的坑\" class=\"headerlink\" title=\"project.json里面隐藏的坑\"></a>project.json里面隐藏的坑</h3><h4 id=\"dependencies\"><a href=\"#dependencies\" class=\"headerlink\" title=\"dependencies\"></a>dependencies</h4><p>NET Core 1.0.1 - VS 2015 Tooling Preview 2模板的asp.net core 版本和ubuntu 的asp.net core 版本不一致。</p>\n<p>根据微软爸给的教程，我们在ubuntu上安装的.NET Core 1.0.0，见上图。</p>\n<p>然而我们创建项目的模板是.NET Core 1.0.1，见下图:</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/a3192bdf-f548-4fad-868a-4865632acd29\" alt=\".NET Core 1.0.1\"></p>\n<p>怎么办？要不升级ubuntu的asp.net core，要不降级。</p>\n<p>由于没找到.NET Core 1.0.1 ubuntu的安装包，所以我选择了降级到.NET Core 1.0.0.</p>\n<p>其中需要把Microsoft.NETCore.App version 、Microsoft.AspNetCore.Server.Kestrel、Microsoft.AspNetCore.Mvc 这三个节点都改成“1.0.0”。如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"dependencies\": &#123;</span><br><span class=\"line\">  \"Microsoft.NETCore.App\": &#123;</span><br><span class=\"line\">    \"version\": \"1.0.1\",</span><br><span class=\"line\">    \"type\": \"platform\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"Microsoft.AspNetCore.Diagnostics\": \"1.0.0\",</span><br><span class=\"line\">  \"Microsoft.AspNetCore.Server.IISIntegration\": \"1.0.0\",</span><br><span class=\"line\">  \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.1\",</span><br><span class=\"line\">  \"Microsoft.Extensions.Logging.Console\": \"1.0.0\",</span><br><span class=\"line\">  \"Microsoft.AspNetCore.Mvc\": \"1.0.1\",</span><br><span class=\"line\">  \"Microsoft.AspNetCore.StaticFiles\": \"1.0.0\",</span><br><span class=\"line\">  \"Newtonsoft.Json\": \"9.0.1\",</span><br><span class=\"line\">  \"AngleSharp\": \"0.9.8.1\"</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h4 id=\"publishOptions\"><a href=\"#publishOptions\" class=\"headerlink\" title=\"publishOptions\"></a>publishOptions</h4><p>发布输出包括Views文件夹</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"publishOptions\"</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"include\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"wwwroot\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"web.config\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Views\"</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h4 id=\"runtimes\"><a href=\"#runtimes\" class=\"headerlink\" title=\"runtimes\"></a>runtimes</h4><p>runtimes 配置为模板运行平台。<br>详细见链接：<a href=\"https://docs.nuget.org/ndocs/schema/project.json\" target=\"_blank\" rel=\"noopener\">https://docs.nuget.org/ndocs/schema/project.json</a></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"runtimes\": &#123; \"ubuntu.14.04-x64\": &#123;&#125; &#125;</span><br></pre></td></tr></table></figure>\n<p>上面都弄好之后，跑一下看,如下图：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotnet restore</span><br><span class=\"line\"></span><br><span class=\"line\">dotnet run</span><br></pre></td></tr></table></figure>\n<p>来个请求看看：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/b1191226-c33b-45c7-98cc-f62bb3ea73b4\" alt=\"请求log\"></p>\n<h3 id=\"jexus转发-反向代理\"><a href=\"#jexus转发-反向代理\" class=\"headerlink\" title=\"jexus转发/反向代理\"></a>jexus转发/反向代理</h3><p><a href=\"http://www.cnblogs.com/gaobing/p/5663012.html\" target=\"_blank\" rel=\"noopener\">ASP.NET Core “完整发布,自带运行时” 到jexus</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"58HouseSearch项目迁移到asp-net-core\"><a href=\"#58HouseSearch项目迁移到asp-net-core\" class=\"headerlink\" title=\"58HouseSearch项目迁移到asp.net core\"></a>58HouseSearch项目迁移到asp.net core</h1><p><a href=\"https://github.com/liguobao/58HouseSearch\" target=\"_blank\" rel=\"noopener\">58HouseSearch</a>这个项目原本是基于ASP.NET MVC 4写的，开发环境是Windows+VS2015，发布平台是linux+mono+jexus，这样看来整个项目基本已经满足跨平台的需求。</p>\n<p>这样一来，本来我是没什么动力去做迁移的，好好的东西闲着没事干才迁移呢。</p>\n<p>不过，这不国庆了么？穷人不是在家穷游天下么？所以…真的有点闲着没事干了。</p>\n<h2 id=\"迁移可行性探讨\"><a href=\"#迁移可行性探讨\" class=\"headerlink\" title=\"迁移可行性探讨\"></a>迁移可行性探讨</h2><p>项目迁移前，我们还是先来讨论一下迁移可行性。为嘛要进行可行性探讨呢？原因是.NET CORE是一个跨平台的框架，和上一代的.NET存在不兼容。</p>\n<p>个人总结一下，迁移的主要的问题在于：代码不兼容、类库不兼容、严重依赖Windows API或者COM组件等。</p>\n<h2 id=\"代码不兼容\"><a href=\"#代码不兼容\" class=\"headerlink\" title=\"代码不兼容\"></a>代码不兼容</h2><p>代码不兼容其实不算麻烦。毕竟代码是活的，你我也是活的，不就是一个改字罢了。花点时间慢慢改，总是能搞掂的。</p>\n<ul>\n<li><p>类库不兼容,要不就弃用，要不就找替代品。</p>\n</li>\n<li><p>严重依赖Windows API或者COM组件</p>\n<p>  额？找替代品，找不到可用替代品的话。放弃吧，这个项目别考虑迁移了。</p>\n<p>  这个故事告诉我们，做跨平台项目的时候，少点用系统API或者组建。</p>\n</li>\n</ul>\n<p>回到58HouseSearch项目上面。</p>\n<p>这个项目的代码基本都是我写的，所以重写代码没什么问题。<br>依赖的类库有下面几个:</p>\n<ul>\n<li><p><a href=\"https://github.com/FlorianRappl/AngleSharp\" target=\"_blank\" rel=\"noopener\">AngleSharp</a></p>\n</li>\n<li><p><a href=\"http://www.newtonsoft.com/json\" target=\"_blank\" rel=\"noopener\">Newtonsoft.Json</a></p>\n</li>\n<li><p><a href=\"http://logging.apache.org/log4net/\" target=\"_blank\" rel=\"noopener\">log4net</a></p>\n</li>\n</ul>\n<p>AngleSharp是用来解析HTML的类库，用linq的方式来操作HTML，用起来实在爽快。</p>\n<p>如果这货在.net core上不能跑，我应该立马放弃了。<br>不过，这个实在给力…</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/1a950803-3d38-4b16-9761-6c9cd806b0b9\" alt=\"AngleSharp支持平台\"></p>\n<p>Newtonsoft.Json</p>\n<p>在这个项目里面主要是用来记录PV数据的，非核心功能，可有可无。不过看了下nuget上的介绍，也是支持.net core的。</p>\n<p>剩下log4net…嗯，并不支持log4net。不过这个就更加是非核心内容了，直接丢了。<br>PS:考虑后期加入Nlog替代log4net。</p>\n<p>至于依赖Windows API之类的，在这个项目里面基本没有，所以略过…</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ul>\n<li><a href=\"https://www.visualstudio.com/downloads/\" target=\"_blank\" rel=\"noopener\">Visual Studio Community 2015 with Update 3 – Free</a></li>\n<li><a href=\"https://www.microsoft.com/net/download\" target=\"_blank\" rel=\"noopener\">.NET Core SDK</a></li>\n<li><a href=\"https://www.microsoft.com/net/download\" target=\"_blank\" rel=\"noopener\">.NET Core</a></li>\n<li><a href=\"https://go.microsoft.com/fwlink/?LinkId=827546\" target=\"_blank\" rel=\"noopener\">.NET Core 1.0.1 - VS 2015 Tooling Preview 2</a></li>\n</ul>\n<p>友情提示：</p>\n<ol>\n<li>Visual Studio Community 2015 with Update 3 下载镜像来安装。</li>\n</ol>\n<p>错误操作如下：<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/1e723e08-b3d5-4dab-b4a6-1de70799c4c8\" alt=\"错误操作\"></p>\n<p>正确打开方式：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/706771d8-d3f2-4122-a61d-5e961887121a\" alt=\"正确的打开方式-1\"></p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/455ec5cc-b429-4563-a4fb-3a0c18608969\" alt=\"正确的打开方式-2\"></p>\n<ol start=\"2\">\n<li><p>安装.NET Core SDK和.NET Core之后再安装.NET Core 1.0.1 - VS 2015 Tooling Preview 2</p>\n</li>\n<li><p>安装.NET Core 1.0.1 - VS 2015 Tooling Preview 2 这货的可能会报错0x80072f8a未指定的错误</p>\n</li>\n</ol>\n<p>解决方案见下图：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/47c517d1-4b48-4088-be4a-a0768413e768\" alt=\"图片描述\"></p>\n<p>详细见链接：<a href=\"http://www.cnblogs.com/JiaoWoWeiZai/p/5892255.html\" target=\"_blank\" rel=\"noopener\">安装DotNetCore.1.0.1-VS2015Tools.Preview2.0.2出现0x80072f8a未指定的错误</a></p>\n<p>上面都弄好之后，理论上在VS2O15-新建项目里面可以看到ASP.NET CORE的模板了。如下图：<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/3364e7c9-a41e-47f2-8d08-60345e4efa35\" alt=\"ASP.NET CORE的模板\"></p>\n<h3 id=\"项目迁移\"><a href=\"#项目迁移\" class=\"headerlink\" title=\"项目迁移\"></a>项目迁移</h3><h4 id=\"新建空白ASP-NET-CORE项目\"><a href=\"#新建空白ASP-NET-CORE项目\" class=\"headerlink\" title=\"新建空白ASP.NET CORE项目\"></a>新建空白ASP.NET CORE项目</h4><p>新建好了之后如下图：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/e047d81d-56f1-4e51-9d72-7989e1fc6225\" alt=\"空白ASP.NET CORE项目\"></p>\n<h4 id=\"Nuget获取引用\"><a href=\"#Nuget获取引用\" class=\"headerlink\" title=\"Nuget获取引用\"></a>Nuget获取引用</h4><p><a href=\"https://www.nuget.org/packages/AngleSharp/\" target=\"_blank\" rel=\"noopener\">https://www.nuget.org/packages/AngleSharp/</a></p>\n<p><a href=\"https://www.nuget.org/packages/Newtonsoft.Json\" target=\"_blank\" rel=\"noopener\">https://www.nuget.org/packages/Newtonsoft.Json</a></p>\n<h4 id=\"添加Controllers文件夹\"><a href=\"#添加Controllers文件夹\" class=\"headerlink\" title=\"添加Controllers文件夹\"></a>添加Controllers文件夹</h4><p>然后把之前项目的Controllers拷贝过来，改掉命名空间，去掉无用代码，添加相应引用。</p>\n<h4 id=\"添加Views文件夹\"><a href=\"#添加Views文件夹\" class=\"headerlink\" title=\"添加Views文件夹\"></a>添加Views文件夹</h4><p>本项目直接把之前项目的Views拷贝过来是完全没有问题的。</p>\n<h4 id=\"静态文件处理\"><a href=\"#静态文件处理\" class=\"headerlink\" title=\"静态文件处理\"></a>静态文件处理</h4><p>asp.net core MVC中的文件结构和asp.net mvc的文件结构略有不同。</p>\n<p>asp.net core MVC在view中“IMG/Little/PaleGreen.png”对应的文件对应于“项目路径/webroot/IMG/Little/PaleGreen.png”；</p>\n<p>而asp.net mvc中，对应路径为“项目/IMG/Little/PaleGreen.png”。</p>\n<p>因而，我们的所有静态文件都应该放到：webroot文件夹下。</p>\n<p>上面的都做完了之后，项目结构如下：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/2fee156b-2505-4953-bfe9-1d2521f13565\" alt=\"项目结构\"></p>\n<p>接下来就是改代码了。</p>\n<h3 id=\"代码迁移\"><a href=\"#代码迁移\" class=\"headerlink\" title=\"代码迁移\"></a>代码迁移</h3><h4 id=\"Startup-cs添加MVC\"><a href=\"#Startup-cs添加MVC\" class=\"headerlink\" title=\"Startup.cs添加MVC\"></a>Startup.cs添加MVC</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Startup</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    // This method gets called by the runtime. Use this method to add services to the container.</span><br><span class=\"line\">    // For more information on how to configure your application, visit http://go.microsoft.com/fwlink/?LinkID=398940</span><br><span class=\"line\">    public void ConfigureServices(IServiceCollection services)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //添加MVC框架</span><br><span class=\"line\">        services.AddMvc();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span><br><span class=\"line\">    public void Configure(IApplicationBuilder app, IHostingEnvironment env,</span><br><span class=\"line\">    ILoggerFactory loggerFactory)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        loggerFactory.AddConsole();</span><br><span class=\"line\"></span><br><span class=\"line\">        if (env.IsDevelopment())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            app.UseDeveloperExceptionPage();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //启用静态文件中间件</span><br><span class=\"line\">        app.UseStaticFiles();</span><br><span class=\"line\">        //启动MVC路由</span><br><span class=\"line\">        app.UseMvcWithDefaultRoute();</span><br><span class=\"line\">        //设置默认页面</span><br><span class=\"line\">        app.UseMvc(routes =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            routes.MapRoute(</span><br><span class=\"line\">                name: &quot;default&quot;,</span><br><span class=\"line\">                template: &quot;&#123;controller=House&#125;/&#123;action=Index&#125;/&#123;id?&#125;&quot;); </span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"改写GetHTMLByURL方法\"><a href=\"#改写GetHTMLByURL方法\" class=\"headerlink\" title=\"改写GetHTMLByURL方法\"></a>改写GetHTMLByURL方法</h4><p>之前的方法：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/d005a100-e3e6-423b-b34c-3eae11b2ab63\" alt=\"old GetHTMLByURL\"></p>\n<p>.net core重写了HttpWebRequest，变成了WebRequest,所以上面的代码废了。</p>\n<p>重写如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static string GetHTMLByURL(string Url, string type = &quot;UTF-8&quot;)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    try</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Url = Url.ToLower();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.Net.WebRequest wReq = System.Net.WebRequest.Create(Url);</span><br><span class=\"line\">        // Get the response instance.</span><br><span class=\"line\">        System.Net.WebResponse wResp = wReq.GetResponseAsync().Result;</span><br><span class=\"line\">        System.IO.Stream respStream = wResp.GetResponseStream();</span><br><span class=\"line\">        using (System.IO.StreamReader reader = new System.IO.</span><br><span class=\"line\">        StreamReader(respStream, Encoding.GetEncoding(type)))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return reader.ReadToEnd();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    catch (System.Exception ex)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        return string.Empty;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"改写Controller代码\"><a href=\"#改写Controller代码\" class=\"headerlink\" title=\"改写Controller代码\"></a>改写Controller代码</h4><p>嗯，换了命名空间，别的一句都没改直接拉过来了…略过。</p>\n<h3 id=\"发布到ubuntu\"><a href=\"#发布到ubuntu\" class=\"headerlink\" title=\"发布到ubuntu\"></a>发布到ubuntu</h3><p><a href=\"https://www.microsoft.com/net/core#ubuntu\" target=\"_blank\" rel=\"noopener\">Install for Ubuntu 14.04, 16.04 &amp; Linux Mint 17</a></p>\n<p>第一步</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Ubuntu 14.04 / Linux Mint 17</span><br><span class=\"line\">sudo sh -c <span class=\"string\">'echo \"deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet-release/ trusty main\" &gt; /etc/apt/sources.list.d/dotnetdev.list'</span></span><br><span class=\"line\">sudo apt-key adv --keyserver apt-mo.trafficmanager.net --recv-keys 417A0893</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//Ubuntu 16.04</span><br><span class=\"line\">sudo sh -c <span class=\"string\">'echo \"deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet-release/ xenial main\" &gt; /etc/apt/sources.list.d/dotnetdev.list'</span></span><br><span class=\"line\">sudo apt-key adv --keyserver apt-mo.trafficmanager.net --recv-keys 417A0893</span><br><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n<p>第二步</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install dotnet-dev-1.0.0-preview2-003131</span><br></pre></td></tr></table></figure>\n<p>安装好了之后，输入 dotnet -v 应该能看到版本信息，如下图：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/6ebca12e-2be9-487e-b230-d22562a5aabe\" alt=\"dotnet -v \"></p>\n<p>这样的下，一句完成了ubuntu 运行asp.net core的环境搭建了。</p>\n<h3 id=\"project-json里面隐藏的坑\"><a href=\"#project-json里面隐藏的坑\" class=\"headerlink\" title=\"project.json里面隐藏的坑\"></a>project.json里面隐藏的坑</h3><h4 id=\"dependencies\"><a href=\"#dependencies\" class=\"headerlink\" title=\"dependencies\"></a>dependencies</h4><p>NET Core 1.0.1 - VS 2015 Tooling Preview 2模板的asp.net core 版本和ubuntu 的asp.net core 版本不一致。</p>\n<p>根据微软爸给的教程，我们在ubuntu上安装的.NET Core 1.0.0，见上图。</p>\n<p>然而我们创建项目的模板是.NET Core 1.0.1，见下图:</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/a3192bdf-f548-4fad-868a-4865632acd29\" alt=\".NET Core 1.0.1\"></p>\n<p>怎么办？要不升级ubuntu的asp.net core，要不降级。</p>\n<p>由于没找到.NET Core 1.0.1 ubuntu的安装包，所以我选择了降级到.NET Core 1.0.0.</p>\n<p>其中需要把Microsoft.NETCore.App version 、Microsoft.AspNetCore.Server.Kestrel、Microsoft.AspNetCore.Mvc 这三个节点都改成“1.0.0”。如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"dependencies\": &#123;</span><br><span class=\"line\">  \"Microsoft.NETCore.App\": &#123;</span><br><span class=\"line\">    \"version\": \"1.0.1\",</span><br><span class=\"line\">    \"type\": \"platform\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"Microsoft.AspNetCore.Diagnostics\": \"1.0.0\",</span><br><span class=\"line\">  \"Microsoft.AspNetCore.Server.IISIntegration\": \"1.0.0\",</span><br><span class=\"line\">  \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.1\",</span><br><span class=\"line\">  \"Microsoft.Extensions.Logging.Console\": \"1.0.0\",</span><br><span class=\"line\">  \"Microsoft.AspNetCore.Mvc\": \"1.0.1\",</span><br><span class=\"line\">  \"Microsoft.AspNetCore.StaticFiles\": \"1.0.0\",</span><br><span class=\"line\">  \"Newtonsoft.Json\": \"9.0.1\",</span><br><span class=\"line\">  \"AngleSharp\": \"0.9.8.1\"</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h4 id=\"publishOptions\"><a href=\"#publishOptions\" class=\"headerlink\" title=\"publishOptions\"></a>publishOptions</h4><p>发布输出包括Views文件夹</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"publishOptions\"</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"include\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"wwwroot\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"web.config\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Views\"</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h4 id=\"runtimes\"><a href=\"#runtimes\" class=\"headerlink\" title=\"runtimes\"></a>runtimes</h4><p>runtimes 配置为模板运行平台。<br>详细见链接：<a href=\"https://docs.nuget.org/ndocs/schema/project.json\" target=\"_blank\" rel=\"noopener\">https://docs.nuget.org/ndocs/schema/project.json</a></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"runtimes\": &#123; \"ubuntu.14.04-x64\": &#123;&#125; &#125;</span><br></pre></td></tr></table></figure>\n<p>上面都弄好之后，跑一下看,如下图：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotnet restore</span><br><span class=\"line\"></span><br><span class=\"line\">dotnet run</span><br></pre></td></tr></table></figure>\n<p>来个请求看看：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/b1191226-c33b-45c7-98cc-f62bb3ea73b4\" alt=\"请求log\"></p>\n<h3 id=\"jexus转发-反向代理\"><a href=\"#jexus转发-反向代理\" class=\"headerlink\" title=\"jexus转发/反向代理\"></a>jexus转发/反向代理</h3><p><a href=\"http://www.cnblogs.com/gaobing/p/5663012.html\" target=\"_blank\" rel=\"noopener\">ASP.NET Core “完整发布,自带运行时” 到jexus</a></p>\n"},{"layout":"post","title":"ASP.NET Core 的 Middleware","date":"2016-10-03T16:00:00.000Z","_content":"\n在ASP.NET 时代，一般来说我们很少会用到HttpModule/HttpHandler，然而有些场景我们使用HttpModule/HttpHandler倒方便快捷完成我们的需求。有兴趣了解HttpModule/HttpHandler以及使用场景的话，可以看下面这个链接的内容。\n\n[选择HttpHandler还是HttpModule？](http://www.cnblogs.com/fish-li/archive/2013/01/04/2844908.html)\n\n来到ASP.NET Core时代，类似功能的内容可能我们看得就要多得多了。因为在ASP.NET Core时代，微软将HttpModule“变更”之后，并为它授予了更灵活应用场景。\n\n# 这就是这个文章要介绍的主角：Middleware（中间件）。\n\n## Middleware\n\n为了使用跨平台，ASP.NET Core整个架构和代码都重写了一遍，所以 HttpModule 自然也就不存在了。但是相似的功能还是有的，它的名字叫： Middleware。和以前不同，在ASP.NET Core中我们将会经常看到 Middleware的存在，因为现在的每一个服务都是用Middleware的方式呈现在ASP.NET Core 管道中。不仅如此，meddleware比起之前的HttpModule也更弹性易用了。\n\n首先先来看看什么是middleware。\n\n```csharp\n\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env, \n                      ILoggerFactory loggerFactory)\n{\n    loggerFactory.AddConsole(Configuration.GetSection(\"Logging\"));\n    loggerFactory.AddDebug();\n\n    app.UseStaticFiles();\n\n    app.UseMvc(routes =>\n    {\n        routes.MapRoute(\"default\",\n        \"{controller=Home}/{action=Index}/{id?}\");\n    });\n}\n\n```\n\n看过ASP.NET Core项目的话，相信大家对Satarup.cs并不会陌生。在Starup.cs里面便有一个Configure()函数用于定义项目需要使用哪些middleware。\n\n上面的例子使用了两个middleware，一个是 UseStaticFiles，另一个是 UseMvc。这两个都是core自带的middleware，所以我们可以直接使用。UseStaticFiles 是为HTTP Request提供存取网站的文件，简单理解就是使得网站上的静态文件可访问，而UseMvc就是启用MVC routing机制。有了这两个middleware，我们的的网站就有了MVC routing和读取静态文件的功能。\n\n如果我们把UseMvc去掉，那么MVC routing也就不存在了，我们输入 http://website/[Controller]/[Action] 类似的地址也就无效了。\n\n### 和HttpModule的不同之处\n\n在使用HttpModule的时候，我们是在实现/重写接口，这个时候就要求我们在适当的地方做适当的事情。例如，要做 authorization 的话就最好在 HttpModule 定义好的 Authorization 事件 (AuthorizatRequest) 中完成这个功能。在 ASP.NET life cycle 的文件里我们可以查到 HttpModule  定义了那些事件，每一個事件都有哪些特別的功能。因此我们需要全面了解之后再来选择实现/重写我们需要的事件。而在Middleware中，完全没有这样的限制，也不存在这样的事件，我们可以自行设计实现我们的机制。\n\n## Middleware 流程\n\n[https://docs.asp.net/en/latest/fundamentals/middleware.html](https://docs.asp.net/en/latest/fundamentals/middleware.html) 这个文章中说明了基本的middleware概念。目前asp.net docs里面有不少的内容都是开源社区开发者贡献的\n\n在这个文章里面有一个简单的流程图说明了ASP.NET runtime中middleware的执行过程。\n\n![middleware执行过程](http://7xread.com1.z0.glb.clouddn.com/0b6d43ad-7d95-48ea-bbf3-ea7a93c4a366)\n\n在 middleware 里面一定要定义 Invoke()函数，因为这是让 engine 默认调用 middleware 的Incoke函数。Middleware 里面所需要做什么事情就放在 Invoke() 里面，同时 Invoke() 里面还需要调用下一个 middleware。因此执行内容就如上图所示。Middleware 之间除了必须传送 HttpContext之外，也可以自定义传入其他的参数，这比以前的HttpModule方便多了。\n\n\n所以当 HTTP request 进来之后，engine 便会呼叫第一个 middleware 的 Invoke()，同时把传入HttpContext，然后第一个 middleware 可以再接着呼叫第二个 middleware 的 Invoke()，同时再把 HttpContext 继续传入，一直到最后一个middleware 的 Invoke() 结束之后，整个 HttpContext 的內容可能在 middleware 里面新增或被改变了，最后再按照整個原先的 call stack 从最后一个 middleware 回到第一个 middleware，再通过  engine 回传到client 端，完成request.\n\n下来通过一个例子我们一起来了解一下Middleware。\n\n## 编写简单的 Middleware \n\n```csharp\npublic class SampleMiddleware\n{\n    private readonly RequestDelegate _next;\n\n    public SampleMiddleware(RequestDelegate next)\n    {\n        _next = next;\n    }\n\n    public async Task Invoke(HttpContext context)\n    {\n        if (string.IsNullOrEmpty(context.User.Identity.Name))\n        {\n            context.Response.Redirect(\"/NoName.html\");\n            return;\n        }\n        await _next.Invoke(context);\n    }\n}\n\n```\n\n\n这一个middleware的名字叫SampleMiddleware。它有一个构造函数以及Invoke函数，而Invoke()只接收一个参数HttpContext。\n\n_next是一个叫 RequestDelegate类型，换言之这就是一个delegate，用于代表下一个middleware是谁。所以在构造函数中要把下一个middleware delegate传入。看到这里或许会觉得奇怪，我们的middleware在执行过程中怎么会知道下一个middleware是谁？这一部分稍后解释。\n\n\n在 Invoke() 里面，在 await _next.Invoke() 之前都是当前middleware的逻辑代码，从上面流程图来看的话就是由左自右的方向． await _next.Invoke() 之后的代码是就是流程图上由右至右的方向，因此，透過这样简单的设计，开发者就能很明确地控制什么样逻辑要先做或后做了。\n\n在 SampleMiddleware 之中，这里只做了一個很简单的动作，如果 username 是空白的话，就将该连接重定向到到 NoName.html 然后中断 middleware 的执行。\n\n为了能让这个middleware作为 ApplicationBuilder来使用，我们另外需要写一个扩展方法。代码如下：\n\n```csharp\n\npublic static partial class MiddlewareExtensions\n{\n    public static IApplicationBuilder UseSampleMiddleware(\n    this IApplicationBuilder builder)\n    {\n        return builder.UseMiddleware<SampleMiddleware>();\n    }\n}\n```\n\n这给扩展方法建立了UseSampleMiddleware()，使得我们可以让ApplicationBuilder 去读 SampleMiddleware。\n\n这是回到Startup.cs中，在 Configure() 里面我们就可以把 SampleMiddleware 加入到我们的 pipeline中了。具体代码如下：\n\n```csharp\n\npublic void Configure(IApplicationBuilder app,IHostingEnvironment env, \n                      ILoggerFactory loggerFactory)\n{\n    loggerFactory.AddConsole(Configuration.GetSection(\"Logging\"));\n    loggerFactory.AddDebug();\n\n    app.UseStaticFiles();\n\n    app.UseSampleMiddleware();   // <-- SampleMiddleware\n\n    app.UseMvc(routes =>\n    {\n        routes.MapRoute(\"default\",\n        \"{controller=Home}/{action=Index}/{id?}\");\n    });\n}\n\n```\n\n把 SampleMiddleware 放在 UseStaticFiles 和 UseMvc 之间，也就是说在 http request 还沒进入到 MVC routing 之前，就会先检查 HttpContext 里面是不是有空白的 username。很显然username肯定是空白的，因为我并沒有加入任何使用者验证代码这里面，所以利用 dotnet run 來运行这个项目的时候，你就会看到 Http code 302 出現，它的意思就是 http redirect，也就是 SampleMiddleware 里面面所做的 redirect 发生作用了。\n\n![http redirect](http://7xread.com1.z0.glb.clouddn.com/1d7e4c87-9fff-4401-8933-36dcbf857199)\n\n## Middleware 的执行顺序很重要\n\n前面解释了 middleware 执行过程是一个接着一个的．不同的 middleware 对 HttpContext 的內容都可能有不同的处理或更改，因此执行舒服便格外重要。举个例子，如果将上面 Configure() 的代码变更如下:\n\n```csharp\n\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env,\n                       ILoggerFactory loggerFactory)\n{\n    loggerFactory.AddConsole(Configuration.GetSection(\"Logging\"));\n    loggerFactory.AddDebug();\n\n    app.UseSampleMiddleware();   // SampleMiddleware\n\n    app.UseStaticFiles();        // StaticFiles\n\n    app.UseMvc(routes =>\n    {\n        routes.MapRoute(\"default\",\"{controller=Home}/{action=Index}/{id?}\");\n    });\n}\n```\n\n我们把SampleMiddleware 放到StaticFiles 之前。这就导致在 SampleMiddleware 里重定向到 NoName.html会失败。\n\n为什么会失败呢? 因为我们的 ApplicationBuilder 执行到行到 SampleMiddleware 时候重定向到NoName.html，也就是做读取静态页面，而这个功能服务方是在下一个 middleware (StaticFiles) 才会提供的，因此 ApplicationBuilder 无法找到 NoName.html，所以在浏览器上也就看不到 NoName.html 的內容。\n\n### Middleware 这样的设计带来了很大的方便和弹性，同時我们自己也要小心 middleware 前后相依性的问题。\n\n## Middleware 背后原理\n\n现在 ASP.NET Core 已是开源项目了，所以最后说明一下 middleware 原理的基本概念．整個 ASP.NET fundamental 的部份用了许多的 function delegate , task, denepdency injection 的编写方法，所以要看 source code 之前，建议先对这三个东西先行了解，这样对理解 ASP.NET Core源码很有帮助．\n\n在前面的代码中，我们看到 RequestDelegate,  顾名思义就知道这是一个delegate（委托），它是用来代表 middleware 的 delegate. 它的 source code 在 [RequestDelegate.cs](https://github.com/aspnet/httpabstractions/blob/master/src/Microsoft.AspNet.Http.Abstractions/RequestDelegate.cs)\n\nIApplicationBuilder interface 是一個相当重要的接口，它定义了整個APP要用哪些服务和參數，当然也包含要使用那些 middleware，它的 souce code 在 [IApplicationBuilder.cs](https://github.com/aspnet/httpabstractions/blob/master/src/Microsoft.AspNet.Http.Abstractions/IApplicationBuilder.cs)。\n\n其中你可以看到 Use()，通过 Use() 的实例就可以把 middleware delegate 注册到 host engine 上。\n\n另外一个就是 UseMiddlewareExtensions ，前面的代码曾用了 builder.UseMiddleware<SampleMiddleware>(); 它会检查你写的 middleware 是不是合法的，比如有沒有 Invoke()，是不是只有一个Invoke()，Invoke() 的参数有沒有一个是 HttpContext type，所有的检查都通过之后便建立出该middleware instance 的 delegate。\n\n因此，当你的 ASP.NET Core APP刚启动的时候，在 Startup.cs 的 Configure() 就会把所有的 middleware delegate 建立起來，然后依序地放到內部的 stack 结构中。以上面的范例来说， stack 结构第一个元素是 StaticFiles,  然后是 SampleMiddleware 最后是 Mvc。接着每個 middleware 要被建立时是做 stack pop 的操作，所以 Mvc 的 _next 是 engine 里一些內部的 middleware 处理器，然後 pop 出 SampleMiddleware 时，就把 SampleMiddleware 的 _next 指向前面一個 pop 出來的 Mvc。依照着这样的逻辑一直到最前面的 middleware。所以在 host engine 在 Build() 之前这些动作都会完成，然后 host engine 才能执行Run()。有关 host engine 可參考 \n[WebHostBuilder.cs](https://github.com/aspnet/hosting/blob/master/src/Microsoft.AspNet.Hosting/WebHostBuilder.cs)\n\n\n全文完。\n\n本文整理于[https://dotblogs.com.tw/aspnetshare/2016/03/20/201603191](https://dotblogs.com.tw/aspnetshare/2016/03/20/201603191)并已征得作者同意。","source":"_posts/ASP.NET-Core-Middleware.md","raw":"---\nlayout: post\ntitle: ASP.NET Core 的 Middleware\ncategory: dotnet core\ndate: 2016-10-04\ntags:\n- dotnet core\n---\n\n在ASP.NET 时代，一般来说我们很少会用到HttpModule/HttpHandler，然而有些场景我们使用HttpModule/HttpHandler倒方便快捷完成我们的需求。有兴趣了解HttpModule/HttpHandler以及使用场景的话，可以看下面这个链接的内容。\n\n[选择HttpHandler还是HttpModule？](http://www.cnblogs.com/fish-li/archive/2013/01/04/2844908.html)\n\n来到ASP.NET Core时代，类似功能的内容可能我们看得就要多得多了。因为在ASP.NET Core时代，微软将HttpModule“变更”之后，并为它授予了更灵活应用场景。\n\n# 这就是这个文章要介绍的主角：Middleware（中间件）。\n\n## Middleware\n\n为了使用跨平台，ASP.NET Core整个架构和代码都重写了一遍，所以 HttpModule 自然也就不存在了。但是相似的功能还是有的，它的名字叫： Middleware。和以前不同，在ASP.NET Core中我们将会经常看到 Middleware的存在，因为现在的每一个服务都是用Middleware的方式呈现在ASP.NET Core 管道中。不仅如此，meddleware比起之前的HttpModule也更弹性易用了。\n\n首先先来看看什么是middleware。\n\n```csharp\n\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env, \n                      ILoggerFactory loggerFactory)\n{\n    loggerFactory.AddConsole(Configuration.GetSection(\"Logging\"));\n    loggerFactory.AddDebug();\n\n    app.UseStaticFiles();\n\n    app.UseMvc(routes =>\n    {\n        routes.MapRoute(\"default\",\n        \"{controller=Home}/{action=Index}/{id?}\");\n    });\n}\n\n```\n\n看过ASP.NET Core项目的话，相信大家对Satarup.cs并不会陌生。在Starup.cs里面便有一个Configure()函数用于定义项目需要使用哪些middleware。\n\n上面的例子使用了两个middleware，一个是 UseStaticFiles，另一个是 UseMvc。这两个都是core自带的middleware，所以我们可以直接使用。UseStaticFiles 是为HTTP Request提供存取网站的文件，简单理解就是使得网站上的静态文件可访问，而UseMvc就是启用MVC routing机制。有了这两个middleware，我们的的网站就有了MVC routing和读取静态文件的功能。\n\n如果我们把UseMvc去掉，那么MVC routing也就不存在了，我们输入 http://website/[Controller]/[Action] 类似的地址也就无效了。\n\n### 和HttpModule的不同之处\n\n在使用HttpModule的时候，我们是在实现/重写接口，这个时候就要求我们在适当的地方做适当的事情。例如，要做 authorization 的话就最好在 HttpModule 定义好的 Authorization 事件 (AuthorizatRequest) 中完成这个功能。在 ASP.NET life cycle 的文件里我们可以查到 HttpModule  定义了那些事件，每一個事件都有哪些特別的功能。因此我们需要全面了解之后再来选择实现/重写我们需要的事件。而在Middleware中，完全没有这样的限制，也不存在这样的事件，我们可以自行设计实现我们的机制。\n\n## Middleware 流程\n\n[https://docs.asp.net/en/latest/fundamentals/middleware.html](https://docs.asp.net/en/latest/fundamentals/middleware.html) 这个文章中说明了基本的middleware概念。目前asp.net docs里面有不少的内容都是开源社区开发者贡献的\n\n在这个文章里面有一个简单的流程图说明了ASP.NET runtime中middleware的执行过程。\n\n![middleware执行过程](http://7xread.com1.z0.glb.clouddn.com/0b6d43ad-7d95-48ea-bbf3-ea7a93c4a366)\n\n在 middleware 里面一定要定义 Invoke()函数，因为这是让 engine 默认调用 middleware 的Incoke函数。Middleware 里面所需要做什么事情就放在 Invoke() 里面，同时 Invoke() 里面还需要调用下一个 middleware。因此执行内容就如上图所示。Middleware 之间除了必须传送 HttpContext之外，也可以自定义传入其他的参数，这比以前的HttpModule方便多了。\n\n\n所以当 HTTP request 进来之后，engine 便会呼叫第一个 middleware 的 Invoke()，同时把传入HttpContext，然后第一个 middleware 可以再接着呼叫第二个 middleware 的 Invoke()，同时再把 HttpContext 继续传入，一直到最后一个middleware 的 Invoke() 结束之后，整个 HttpContext 的內容可能在 middleware 里面新增或被改变了，最后再按照整個原先的 call stack 从最后一个 middleware 回到第一个 middleware，再通过  engine 回传到client 端，完成request.\n\n下来通过一个例子我们一起来了解一下Middleware。\n\n## 编写简单的 Middleware \n\n```csharp\npublic class SampleMiddleware\n{\n    private readonly RequestDelegate _next;\n\n    public SampleMiddleware(RequestDelegate next)\n    {\n        _next = next;\n    }\n\n    public async Task Invoke(HttpContext context)\n    {\n        if (string.IsNullOrEmpty(context.User.Identity.Name))\n        {\n            context.Response.Redirect(\"/NoName.html\");\n            return;\n        }\n        await _next.Invoke(context);\n    }\n}\n\n```\n\n\n这一个middleware的名字叫SampleMiddleware。它有一个构造函数以及Invoke函数，而Invoke()只接收一个参数HttpContext。\n\n_next是一个叫 RequestDelegate类型，换言之这就是一个delegate，用于代表下一个middleware是谁。所以在构造函数中要把下一个middleware delegate传入。看到这里或许会觉得奇怪，我们的middleware在执行过程中怎么会知道下一个middleware是谁？这一部分稍后解释。\n\n\n在 Invoke() 里面，在 await _next.Invoke() 之前都是当前middleware的逻辑代码，从上面流程图来看的话就是由左自右的方向． await _next.Invoke() 之后的代码是就是流程图上由右至右的方向，因此，透過这样简单的设计，开发者就能很明确地控制什么样逻辑要先做或后做了。\n\n在 SampleMiddleware 之中，这里只做了一個很简单的动作，如果 username 是空白的话，就将该连接重定向到到 NoName.html 然后中断 middleware 的执行。\n\n为了能让这个middleware作为 ApplicationBuilder来使用，我们另外需要写一个扩展方法。代码如下：\n\n```csharp\n\npublic static partial class MiddlewareExtensions\n{\n    public static IApplicationBuilder UseSampleMiddleware(\n    this IApplicationBuilder builder)\n    {\n        return builder.UseMiddleware<SampleMiddleware>();\n    }\n}\n```\n\n这给扩展方法建立了UseSampleMiddleware()，使得我们可以让ApplicationBuilder 去读 SampleMiddleware。\n\n这是回到Startup.cs中，在 Configure() 里面我们就可以把 SampleMiddleware 加入到我们的 pipeline中了。具体代码如下：\n\n```csharp\n\npublic void Configure(IApplicationBuilder app,IHostingEnvironment env, \n                      ILoggerFactory loggerFactory)\n{\n    loggerFactory.AddConsole(Configuration.GetSection(\"Logging\"));\n    loggerFactory.AddDebug();\n\n    app.UseStaticFiles();\n\n    app.UseSampleMiddleware();   // <-- SampleMiddleware\n\n    app.UseMvc(routes =>\n    {\n        routes.MapRoute(\"default\",\n        \"{controller=Home}/{action=Index}/{id?}\");\n    });\n}\n\n```\n\n把 SampleMiddleware 放在 UseStaticFiles 和 UseMvc 之间，也就是说在 http request 还沒进入到 MVC routing 之前，就会先检查 HttpContext 里面是不是有空白的 username。很显然username肯定是空白的，因为我并沒有加入任何使用者验证代码这里面，所以利用 dotnet run 來运行这个项目的时候，你就会看到 Http code 302 出現，它的意思就是 http redirect，也就是 SampleMiddleware 里面面所做的 redirect 发生作用了。\n\n![http redirect](http://7xread.com1.z0.glb.clouddn.com/1d7e4c87-9fff-4401-8933-36dcbf857199)\n\n## Middleware 的执行顺序很重要\n\n前面解释了 middleware 执行过程是一个接着一个的．不同的 middleware 对 HttpContext 的內容都可能有不同的处理或更改，因此执行舒服便格外重要。举个例子，如果将上面 Configure() 的代码变更如下:\n\n```csharp\n\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env,\n                       ILoggerFactory loggerFactory)\n{\n    loggerFactory.AddConsole(Configuration.GetSection(\"Logging\"));\n    loggerFactory.AddDebug();\n\n    app.UseSampleMiddleware();   // SampleMiddleware\n\n    app.UseStaticFiles();        // StaticFiles\n\n    app.UseMvc(routes =>\n    {\n        routes.MapRoute(\"default\",\"{controller=Home}/{action=Index}/{id?}\");\n    });\n}\n```\n\n我们把SampleMiddleware 放到StaticFiles 之前。这就导致在 SampleMiddleware 里重定向到 NoName.html会失败。\n\n为什么会失败呢? 因为我们的 ApplicationBuilder 执行到行到 SampleMiddleware 时候重定向到NoName.html，也就是做读取静态页面，而这个功能服务方是在下一个 middleware (StaticFiles) 才会提供的，因此 ApplicationBuilder 无法找到 NoName.html，所以在浏览器上也就看不到 NoName.html 的內容。\n\n### Middleware 这样的设计带来了很大的方便和弹性，同時我们自己也要小心 middleware 前后相依性的问题。\n\n## Middleware 背后原理\n\n现在 ASP.NET Core 已是开源项目了，所以最后说明一下 middleware 原理的基本概念．整個 ASP.NET fundamental 的部份用了许多的 function delegate , task, denepdency injection 的编写方法，所以要看 source code 之前，建议先对这三个东西先行了解，这样对理解 ASP.NET Core源码很有帮助．\n\n在前面的代码中，我们看到 RequestDelegate,  顾名思义就知道这是一个delegate（委托），它是用来代表 middleware 的 delegate. 它的 source code 在 [RequestDelegate.cs](https://github.com/aspnet/httpabstractions/blob/master/src/Microsoft.AspNet.Http.Abstractions/RequestDelegate.cs)\n\nIApplicationBuilder interface 是一個相当重要的接口，它定义了整個APP要用哪些服务和參數，当然也包含要使用那些 middleware，它的 souce code 在 [IApplicationBuilder.cs](https://github.com/aspnet/httpabstractions/blob/master/src/Microsoft.AspNet.Http.Abstractions/IApplicationBuilder.cs)。\n\n其中你可以看到 Use()，通过 Use() 的实例就可以把 middleware delegate 注册到 host engine 上。\n\n另外一个就是 UseMiddlewareExtensions ，前面的代码曾用了 builder.UseMiddleware<SampleMiddleware>(); 它会检查你写的 middleware 是不是合法的，比如有沒有 Invoke()，是不是只有一个Invoke()，Invoke() 的参数有沒有一个是 HttpContext type，所有的检查都通过之后便建立出该middleware instance 的 delegate。\n\n因此，当你的 ASP.NET Core APP刚启动的时候，在 Startup.cs 的 Configure() 就会把所有的 middleware delegate 建立起來，然后依序地放到內部的 stack 结构中。以上面的范例来说， stack 结构第一个元素是 StaticFiles,  然后是 SampleMiddleware 最后是 Mvc。接着每個 middleware 要被建立时是做 stack pop 的操作，所以 Mvc 的 _next 是 engine 里一些內部的 middleware 处理器，然後 pop 出 SampleMiddleware 时，就把 SampleMiddleware 的 _next 指向前面一個 pop 出來的 Mvc。依照着这样的逻辑一直到最前面的 middleware。所以在 host engine 在 Build() 之前这些动作都会完成，然后 host engine 才能执行Run()。有关 host engine 可參考 \n[WebHostBuilder.cs](https://github.com/aspnet/hosting/blob/master/src/Microsoft.AspNet.Hosting/WebHostBuilder.cs)\n\n\n全文完。\n\n本文整理于[https://dotblogs.com.tw/aspnetshare/2016/03/20/201603191](https://dotblogs.com.tw/aspnetshare/2016/03/20/201603191)并已征得作者同意。","slug":"ASP.NET-Core-Middleware","published":1,"updated":"2018-05-17T13:34:12.025Z","comments":1,"photos":[],"link":"","_id":"cjhal1fvl0007p63131f85cqi","content":"<p>在ASP.NET 时代，一般来说我们很少会用到HttpModule/HttpHandler，然而有些场景我们使用HttpModule/HttpHandler倒方便快捷完成我们的需求。有兴趣了解HttpModule/HttpHandler以及使用场景的话，可以看下面这个链接的内容。</p>\n<p><a href=\"http://www.cnblogs.com/fish-li/archive/2013/01/04/2844908.html\" target=\"_blank\" rel=\"noopener\">选择HttpHandler还是HttpModule？</a></p>\n<p>来到ASP.NET Core时代，类似功能的内容可能我们看得就要多得多了。因为在ASP.NET Core时代，微软将HttpModule“变更”之后，并为它授予了更灵活应用场景。</p>\n<h1 id=\"这就是这个文章要介绍的主角：Middleware（中间件）。\"><a href=\"#这就是这个文章要介绍的主角：Middleware（中间件）。\" class=\"headerlink\" title=\"这就是这个文章要介绍的主角：Middleware（中间件）。\"></a>这就是这个文章要介绍的主角：Middleware（中间件）。</h1><h2 id=\"Middleware\"><a href=\"#Middleware\" class=\"headerlink\" title=\"Middleware\"></a>Middleware</h2><p>为了使用跨平台，ASP.NET Core整个架构和代码都重写了一遍，所以 HttpModule 自然也就不存在了。但是相似的功能还是有的，它的名字叫： Middleware。和以前不同，在ASP.NET Core中我们将会经常看到 Middleware的存在，因为现在的每一个服务都是用Middleware的方式呈现在ASP.NET Core 管道中。不仅如此，meddleware比起之前的HttpModule也更弹性易用了。</p>\n<p>首先先来看看什么是middleware。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                      ILoggerFactory loggerFactory</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    loggerFactory.AddConsole(Configuration.GetSection(<span class=\"string\">\"Logging\"</span>));</span><br><span class=\"line\">    loggerFactory.AddDebug();</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseStaticFiles();</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseMvc(routes =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        routes.MapRoute(<span class=\"string\">\"default\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看过ASP.NET Core项目的话，相信大家对Satarup.cs并不会陌生。在Starup.cs里面便有一个Configure()函数用于定义项目需要使用哪些middleware。</p>\n<p>上面的例子使用了两个middleware，一个是 UseStaticFiles，另一个是 UseMvc。这两个都是core自带的middleware，所以我们可以直接使用。UseStaticFiles 是为HTTP Request提供存取网站的文件，简单理解就是使得网站上的静态文件可访问，而UseMvc就是启用MVC routing机制。有了这两个middleware，我们的的网站就有了MVC routing和读取静态文件的功能。</p>\n<p>如果我们把UseMvc去掉，那么MVC routing也就不存在了，我们输入 <a href=\"http://website/[Controller]/[Action]\" target=\"_blank\" rel=\"noopener\">http://website/[Controller]/[Action]</a> 类似的地址也就无效了。</p>\n<h3 id=\"和HttpModule的不同之处\"><a href=\"#和HttpModule的不同之处\" class=\"headerlink\" title=\"和HttpModule的不同之处\"></a>和HttpModule的不同之处</h3><p>在使用HttpModule的时候，我们是在实现/重写接口，这个时候就要求我们在适当的地方做适当的事情。例如，要做 authorization 的话就最好在 HttpModule 定义好的 Authorization 事件 (AuthorizatRequest) 中完成这个功能。在 ASP.NET life cycle 的文件里我们可以查到 HttpModule  定义了那些事件，每一個事件都有哪些特別的功能。因此我们需要全面了解之后再来选择实现/重写我们需要的事件。而在Middleware中，完全没有这样的限制，也不存在这样的事件，我们可以自行设计实现我们的机制。</p>\n<h2 id=\"Middleware-流程\"><a href=\"#Middleware-流程\" class=\"headerlink\" title=\"Middleware 流程\"></a>Middleware 流程</h2><p><a href=\"https://docs.asp.net/en/latest/fundamentals/middleware.html\" target=\"_blank\" rel=\"noopener\">https://docs.asp.net/en/latest/fundamentals/middleware.html</a> 这个文章中说明了基本的middleware概念。目前asp.net docs里面有不少的内容都是开源社区开发者贡献的</p>\n<p>在这个文章里面有一个简单的流程图说明了ASP.NET runtime中middleware的执行过程。</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/0b6d43ad-7d95-48ea-bbf3-ea7a93c4a366\" alt=\"middleware执行过程\"></p>\n<p>在 middleware 里面一定要定义 Invoke()函数，因为这是让 engine 默认调用 middleware 的Incoke函数。Middleware 里面所需要做什么事情就放在 Invoke() 里面，同时 Invoke() 里面还需要调用下一个 middleware。因此执行内容就如上图所示。Middleware 之间除了必须传送 HttpContext之外，也可以自定义传入其他的参数，这比以前的HttpModule方便多了。</p>\n<p>所以当 HTTP request 进来之后，engine 便会呼叫第一个 middleware 的 Invoke()，同时把传入HttpContext，然后第一个 middleware 可以再接着呼叫第二个 middleware 的 Invoke()，同时再把 HttpContext 继续传入，一直到最后一个middleware 的 Invoke() 结束之后，整个 HttpContext 的內容可能在 middleware 里面新增或被改变了，最后再按照整個原先的 call stack 从最后一个 middleware 回到第一个 middleware，再通过  engine 回传到client 端，完成request.</p>\n<p>下来通过一个例子我们一起来了解一下Middleware。</p>\n<h2 id=\"编写简单的-Middleware\"><a href=\"#编写简单的-Middleware\" class=\"headerlink\" title=\"编写简单的 Middleware\"></a>编写简单的 Middleware</h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SampleMiddleware</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> RequestDelegate _next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SampleMiddleware</span>(<span class=\"params\">RequestDelegate next</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _next = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">Invoke</span>(<span class=\"params\">HttpContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(context.User.Identity.Name))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            context.Response.Redirect(<span class=\"string\">\"/NoName.html\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _next.Invoke(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这一个middleware的名字叫SampleMiddleware。它有一个构造函数以及Invoke函数，而Invoke()只接收一个参数HttpContext。</p>\n<p>_next是一个叫 RequestDelegate类型，换言之这就是一个delegate，用于代表下一个middleware是谁。所以在构造函数中要把下一个middleware delegate传入。看到这里或许会觉得奇怪，我们的middleware在执行过程中怎么会知道下一个middleware是谁？这一部分稍后解释。</p>\n<p>在 Invoke() 里面，在 await _next.Invoke() 之前都是当前middleware的逻辑代码，从上面流程图来看的话就是由左自右的方向． await _next.Invoke() 之后的代码是就是流程图上由右至右的方向，因此，透過这样简单的设计，开发者就能很明确地控制什么样逻辑要先做或后做了。</p>\n<p>在 SampleMiddleware 之中，这里只做了一個很简单的动作，如果 username 是空白的话，就将该连接重定向到到 NoName.html 然后中断 middleware 的执行。</p>\n<p>为了能让这个middleware作为 ApplicationBuilder来使用，我们另外需要写一个扩展方法。代码如下：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">MiddlewareExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IApplicationBuilder <span class=\"title\">UseSampleMiddleware</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"keyword\">this</span> IApplicationBuilder builder</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.UseMiddleware&lt;SampleMiddleware&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这给扩展方法建立了UseSampleMiddleware()，使得我们可以让ApplicationBuilder 去读 SampleMiddleware。</p>\n<p>这是回到Startup.cs中，在 Configure() 里面我们就可以把 SampleMiddleware 加入到我们的 pipeline中了。具体代码如下：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app,IHostingEnvironment env, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                      ILoggerFactory loggerFactory</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    loggerFactory.AddConsole(Configuration.GetSection(<span class=\"string\">\"Logging\"</span>));</span><br><span class=\"line\">    loggerFactory.AddDebug();</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseStaticFiles();</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseSampleMiddleware();   <span class=\"comment\">// &lt;-- SampleMiddleware</span></span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseMvc(routes =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        routes.MapRoute(<span class=\"string\">\"default\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>把 SampleMiddleware 放在 UseStaticFiles 和 UseMvc 之间，也就是说在 http request 还沒进入到 MVC routing 之前，就会先检查 HttpContext 里面是不是有空白的 username。很显然username肯定是空白的，因为我并沒有加入任何使用者验证代码这里面，所以利用 dotnet run 來运行这个项目的时候，你就会看到 Http code 302 出現，它的意思就是 http redirect，也就是 SampleMiddleware 里面面所做的 redirect 发生作用了。</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/1d7e4c87-9fff-4401-8933-36dcbf857199\" alt=\"http redirect\"></p>\n<h2 id=\"Middleware-的执行顺序很重要\"><a href=\"#Middleware-的执行顺序很重要\" class=\"headerlink\" title=\"Middleware 的执行顺序很重要\"></a>Middleware 的执行顺序很重要</h2><p>前面解释了 middleware 执行过程是一个接着一个的．不同的 middleware 对 HttpContext 的內容都可能有不同的处理或更改，因此执行舒服便格外重要。举个例子，如果将上面 Configure() 的代码变更如下:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                       ILoggerFactory loggerFactory</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    loggerFactory.AddConsole(Configuration.GetSection(<span class=\"string\">\"Logging\"</span>));</span><br><span class=\"line\">    loggerFactory.AddDebug();</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseSampleMiddleware();   <span class=\"comment\">// SampleMiddleware</span></span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseStaticFiles();        <span class=\"comment\">// StaticFiles</span></span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseMvc(routes =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        routes.MapRoute(<span class=\"string\">\"default\"</span>,<span class=\"string\">\"&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们把SampleMiddleware 放到StaticFiles 之前。这就导致在 SampleMiddleware 里重定向到 NoName.html会失败。</p>\n<p>为什么会失败呢? 因为我们的 ApplicationBuilder 执行到行到 SampleMiddleware 时候重定向到NoName.html，也就是做读取静态页面，而这个功能服务方是在下一个 middleware (StaticFiles) 才会提供的，因此 ApplicationBuilder 无法找到 NoName.html，所以在浏览器上也就看不到 NoName.html 的內容。</p>\n<h3 id=\"Middleware-这样的设计带来了很大的方便和弹性，同時我们自己也要小心-middleware-前后相依性的问题。\"><a href=\"#Middleware-这样的设计带来了很大的方便和弹性，同時我们自己也要小心-middleware-前后相依性的问题。\" class=\"headerlink\" title=\"Middleware 这样的设计带来了很大的方便和弹性，同時我们自己也要小心 middleware 前后相依性的问题。\"></a>Middleware 这样的设计带来了很大的方便和弹性，同時我们自己也要小心 middleware 前后相依性的问题。</h3><h2 id=\"Middleware-背后原理\"><a href=\"#Middleware-背后原理\" class=\"headerlink\" title=\"Middleware 背后原理\"></a>Middleware 背后原理</h2><p>现在 ASP.NET Core 已是开源项目了，所以最后说明一下 middleware 原理的基本概念．整個 ASP.NET fundamental 的部份用了许多的 function delegate , task, denepdency injection 的编写方法，所以要看 source code 之前，建议先对这三个东西先行了解，这样对理解 ASP.NET Core源码很有帮助．</p>\n<p>在前面的代码中，我们看到 RequestDelegate,  顾名思义就知道这是一个delegate（委托），它是用来代表 middleware 的 delegate. 它的 source code 在 <a href=\"https://github.com/aspnet/httpabstractions/blob/master/src/Microsoft.AspNet.Http.Abstractions/RequestDelegate.cs\" target=\"_blank\" rel=\"noopener\">RequestDelegate.cs</a></p>\n<p>IApplicationBuilder interface 是一個相当重要的接口，它定义了整個APP要用哪些服务和參數，当然也包含要使用那些 middleware，它的 souce code 在 <a href=\"https://github.com/aspnet/httpabstractions/blob/master/src/Microsoft.AspNet.Http.Abstractions/IApplicationBuilder.cs\" target=\"_blank\" rel=\"noopener\">IApplicationBuilder.cs</a>。</p>\n<p>其中你可以看到 Use()，通过 Use() 的实例就可以把 middleware delegate 注册到 host engine 上。</p>\n<p>另外一个就是 UseMiddlewareExtensions ，前面的代码曾用了 builder.UseMiddleware<samplemiddleware>(); 它会检查你写的 middleware 是不是合法的，比如有沒有 Invoke()，是不是只有一个Invoke()，Invoke() 的参数有沒有一个是 HttpContext type，所有的检查都通过之后便建立出该middleware instance 的 delegate。</samplemiddleware></p>\n<p>因此，当你的 ASP.NET Core APP刚启动的时候，在 Startup.cs 的 Configure() 就会把所有的 middleware delegate 建立起來，然后依序地放到內部的 stack 结构中。以上面的范例来说， stack 结构第一个元素是 StaticFiles,  然后是 SampleMiddleware 最后是 Mvc。接着每個 middleware 要被建立时是做 stack pop 的操作，所以 Mvc 的 _next 是 engine 里一些內部的 middleware 处理器，然後 pop 出 SampleMiddleware 时，就把 SampleMiddleware 的 _next 指向前面一個 pop 出來的 Mvc。依照着这样的逻辑一直到最前面的 middleware。所以在 host engine 在 Build() 之前这些动作都会完成，然后 host engine 才能执行Run()。有关 host engine 可參考<br><a href=\"https://github.com/aspnet/hosting/blob/master/src/Microsoft.AspNet.Hosting/WebHostBuilder.cs\" target=\"_blank\" rel=\"noopener\">WebHostBuilder.cs</a></p>\n<p>全文完。</p>\n<p>本文整理于<a href=\"https://dotblogs.com.tw/aspnetshare/2016/03/20/201603191\" target=\"_blank\" rel=\"noopener\">https://dotblogs.com.tw/aspnetshare/2016/03/20/201603191</a>并已征得作者同意。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在ASP.NET 时代，一般来说我们很少会用到HttpModule/HttpHandler，然而有些场景我们使用HttpModule/HttpHandler倒方便快捷完成我们的需求。有兴趣了解HttpModule/HttpHandler以及使用场景的话，可以看下面这个链接的内容。</p>\n<p><a href=\"http://www.cnblogs.com/fish-li/archive/2013/01/04/2844908.html\" target=\"_blank\" rel=\"noopener\">选择HttpHandler还是HttpModule？</a></p>\n<p>来到ASP.NET Core时代，类似功能的内容可能我们看得就要多得多了。因为在ASP.NET Core时代，微软将HttpModule“变更”之后，并为它授予了更灵活应用场景。</p>\n<h1 id=\"这就是这个文章要介绍的主角：Middleware（中间件）。\"><a href=\"#这就是这个文章要介绍的主角：Middleware（中间件）。\" class=\"headerlink\" title=\"这就是这个文章要介绍的主角：Middleware（中间件）。\"></a>这就是这个文章要介绍的主角：Middleware（中间件）。</h1><h2 id=\"Middleware\"><a href=\"#Middleware\" class=\"headerlink\" title=\"Middleware\"></a>Middleware</h2><p>为了使用跨平台，ASP.NET Core整个架构和代码都重写了一遍，所以 HttpModule 自然也就不存在了。但是相似的功能还是有的，它的名字叫： Middleware。和以前不同，在ASP.NET Core中我们将会经常看到 Middleware的存在，因为现在的每一个服务都是用Middleware的方式呈现在ASP.NET Core 管道中。不仅如此，meddleware比起之前的HttpModule也更弹性易用了。</p>\n<p>首先先来看看什么是middleware。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                      ILoggerFactory loggerFactory</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    loggerFactory.AddConsole(Configuration.GetSection(<span class=\"string\">\"Logging\"</span>));</span><br><span class=\"line\">    loggerFactory.AddDebug();</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseStaticFiles();</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseMvc(routes =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        routes.MapRoute(<span class=\"string\">\"default\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看过ASP.NET Core项目的话，相信大家对Satarup.cs并不会陌生。在Starup.cs里面便有一个Configure()函数用于定义项目需要使用哪些middleware。</p>\n<p>上面的例子使用了两个middleware，一个是 UseStaticFiles，另一个是 UseMvc。这两个都是core自带的middleware，所以我们可以直接使用。UseStaticFiles 是为HTTP Request提供存取网站的文件，简单理解就是使得网站上的静态文件可访问，而UseMvc就是启用MVC routing机制。有了这两个middleware，我们的的网站就有了MVC routing和读取静态文件的功能。</p>\n<p>如果我们把UseMvc去掉，那么MVC routing也就不存在了，我们输入 <a href=\"http://website/[Controller]/[Action]\" target=\"_blank\" rel=\"noopener\">http://website/[Controller]/[Action]</a> 类似的地址也就无效了。</p>\n<h3 id=\"和HttpModule的不同之处\"><a href=\"#和HttpModule的不同之处\" class=\"headerlink\" title=\"和HttpModule的不同之处\"></a>和HttpModule的不同之处</h3><p>在使用HttpModule的时候，我们是在实现/重写接口，这个时候就要求我们在适当的地方做适当的事情。例如，要做 authorization 的话就最好在 HttpModule 定义好的 Authorization 事件 (AuthorizatRequest) 中完成这个功能。在 ASP.NET life cycle 的文件里我们可以查到 HttpModule  定义了那些事件，每一個事件都有哪些特別的功能。因此我们需要全面了解之后再来选择实现/重写我们需要的事件。而在Middleware中，完全没有这样的限制，也不存在这样的事件，我们可以自行设计实现我们的机制。</p>\n<h2 id=\"Middleware-流程\"><a href=\"#Middleware-流程\" class=\"headerlink\" title=\"Middleware 流程\"></a>Middleware 流程</h2><p><a href=\"https://docs.asp.net/en/latest/fundamentals/middleware.html\" target=\"_blank\" rel=\"noopener\">https://docs.asp.net/en/latest/fundamentals/middleware.html</a> 这个文章中说明了基本的middleware概念。目前asp.net docs里面有不少的内容都是开源社区开发者贡献的</p>\n<p>在这个文章里面有一个简单的流程图说明了ASP.NET runtime中middleware的执行过程。</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/0b6d43ad-7d95-48ea-bbf3-ea7a93c4a366\" alt=\"middleware执行过程\"></p>\n<p>在 middleware 里面一定要定义 Invoke()函数，因为这是让 engine 默认调用 middleware 的Incoke函数。Middleware 里面所需要做什么事情就放在 Invoke() 里面，同时 Invoke() 里面还需要调用下一个 middleware。因此执行内容就如上图所示。Middleware 之间除了必须传送 HttpContext之外，也可以自定义传入其他的参数，这比以前的HttpModule方便多了。</p>\n<p>所以当 HTTP request 进来之后，engine 便会呼叫第一个 middleware 的 Invoke()，同时把传入HttpContext，然后第一个 middleware 可以再接着呼叫第二个 middleware 的 Invoke()，同时再把 HttpContext 继续传入，一直到最后一个middleware 的 Invoke() 结束之后，整个 HttpContext 的內容可能在 middleware 里面新增或被改变了，最后再按照整個原先的 call stack 从最后一个 middleware 回到第一个 middleware，再通过  engine 回传到client 端，完成request.</p>\n<p>下来通过一个例子我们一起来了解一下Middleware。</p>\n<h2 id=\"编写简单的-Middleware\"><a href=\"#编写简单的-Middleware\" class=\"headerlink\" title=\"编写简单的 Middleware\"></a>编写简单的 Middleware</h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SampleMiddleware</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> RequestDelegate _next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SampleMiddleware</span>(<span class=\"params\">RequestDelegate next</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _next = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">Invoke</span>(<span class=\"params\">HttpContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(context.User.Identity.Name))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            context.Response.Redirect(<span class=\"string\">\"/NoName.html\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _next.Invoke(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这一个middleware的名字叫SampleMiddleware。它有一个构造函数以及Invoke函数，而Invoke()只接收一个参数HttpContext。</p>\n<p>_next是一个叫 RequestDelegate类型，换言之这就是一个delegate，用于代表下一个middleware是谁。所以在构造函数中要把下一个middleware delegate传入。看到这里或许会觉得奇怪，我们的middleware在执行过程中怎么会知道下一个middleware是谁？这一部分稍后解释。</p>\n<p>在 Invoke() 里面，在 await _next.Invoke() 之前都是当前middleware的逻辑代码，从上面流程图来看的话就是由左自右的方向． await _next.Invoke() 之后的代码是就是流程图上由右至右的方向，因此，透過这样简单的设计，开发者就能很明确地控制什么样逻辑要先做或后做了。</p>\n<p>在 SampleMiddleware 之中，这里只做了一個很简单的动作，如果 username 是空白的话，就将该连接重定向到到 NoName.html 然后中断 middleware 的执行。</p>\n<p>为了能让这个middleware作为 ApplicationBuilder来使用，我们另外需要写一个扩展方法。代码如下：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">MiddlewareExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IApplicationBuilder <span class=\"title\">UseSampleMiddleware</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"keyword\">this</span> IApplicationBuilder builder</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.UseMiddleware&lt;SampleMiddleware&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这给扩展方法建立了UseSampleMiddleware()，使得我们可以让ApplicationBuilder 去读 SampleMiddleware。</p>\n<p>这是回到Startup.cs中，在 Configure() 里面我们就可以把 SampleMiddleware 加入到我们的 pipeline中了。具体代码如下：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app,IHostingEnvironment env, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                      ILoggerFactory loggerFactory</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    loggerFactory.AddConsole(Configuration.GetSection(<span class=\"string\">\"Logging\"</span>));</span><br><span class=\"line\">    loggerFactory.AddDebug();</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseStaticFiles();</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseSampleMiddleware();   <span class=\"comment\">// &lt;-- SampleMiddleware</span></span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseMvc(routes =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        routes.MapRoute(<span class=\"string\">\"default\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>把 SampleMiddleware 放在 UseStaticFiles 和 UseMvc 之间，也就是说在 http request 还沒进入到 MVC routing 之前，就会先检查 HttpContext 里面是不是有空白的 username。很显然username肯定是空白的，因为我并沒有加入任何使用者验证代码这里面，所以利用 dotnet run 來运行这个项目的时候，你就会看到 Http code 302 出現，它的意思就是 http redirect，也就是 SampleMiddleware 里面面所做的 redirect 发生作用了。</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/1d7e4c87-9fff-4401-8933-36dcbf857199\" alt=\"http redirect\"></p>\n<h2 id=\"Middleware-的执行顺序很重要\"><a href=\"#Middleware-的执行顺序很重要\" class=\"headerlink\" title=\"Middleware 的执行顺序很重要\"></a>Middleware 的执行顺序很重要</h2><p>前面解释了 middleware 执行过程是一个接着一个的．不同的 middleware 对 HttpContext 的內容都可能有不同的处理或更改，因此执行舒服便格外重要。举个例子，如果将上面 Configure() 的代码变更如下:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                       ILoggerFactory loggerFactory</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    loggerFactory.AddConsole(Configuration.GetSection(<span class=\"string\">\"Logging\"</span>));</span><br><span class=\"line\">    loggerFactory.AddDebug();</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseSampleMiddleware();   <span class=\"comment\">// SampleMiddleware</span></span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseStaticFiles();        <span class=\"comment\">// StaticFiles</span></span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseMvc(routes =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        routes.MapRoute(<span class=\"string\">\"default\"</span>,<span class=\"string\">\"&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们把SampleMiddleware 放到StaticFiles 之前。这就导致在 SampleMiddleware 里重定向到 NoName.html会失败。</p>\n<p>为什么会失败呢? 因为我们的 ApplicationBuilder 执行到行到 SampleMiddleware 时候重定向到NoName.html，也就是做读取静态页面，而这个功能服务方是在下一个 middleware (StaticFiles) 才会提供的，因此 ApplicationBuilder 无法找到 NoName.html，所以在浏览器上也就看不到 NoName.html 的內容。</p>\n<h3 id=\"Middleware-这样的设计带来了很大的方便和弹性，同時我们自己也要小心-middleware-前后相依性的问题。\"><a href=\"#Middleware-这样的设计带来了很大的方便和弹性，同時我们自己也要小心-middleware-前后相依性的问题。\" class=\"headerlink\" title=\"Middleware 这样的设计带来了很大的方便和弹性，同時我们自己也要小心 middleware 前后相依性的问题。\"></a>Middleware 这样的设计带来了很大的方便和弹性，同時我们自己也要小心 middleware 前后相依性的问题。</h3><h2 id=\"Middleware-背后原理\"><a href=\"#Middleware-背后原理\" class=\"headerlink\" title=\"Middleware 背后原理\"></a>Middleware 背后原理</h2><p>现在 ASP.NET Core 已是开源项目了，所以最后说明一下 middleware 原理的基本概念．整個 ASP.NET fundamental 的部份用了许多的 function delegate , task, denepdency injection 的编写方法，所以要看 source code 之前，建议先对这三个东西先行了解，这样对理解 ASP.NET Core源码很有帮助．</p>\n<p>在前面的代码中，我们看到 RequestDelegate,  顾名思义就知道这是一个delegate（委托），它是用来代表 middleware 的 delegate. 它的 source code 在 <a href=\"https://github.com/aspnet/httpabstractions/blob/master/src/Microsoft.AspNet.Http.Abstractions/RequestDelegate.cs\" target=\"_blank\" rel=\"noopener\">RequestDelegate.cs</a></p>\n<p>IApplicationBuilder interface 是一個相当重要的接口，它定义了整個APP要用哪些服务和參數，当然也包含要使用那些 middleware，它的 souce code 在 <a href=\"https://github.com/aspnet/httpabstractions/blob/master/src/Microsoft.AspNet.Http.Abstractions/IApplicationBuilder.cs\" target=\"_blank\" rel=\"noopener\">IApplicationBuilder.cs</a>。</p>\n<p>其中你可以看到 Use()，通过 Use() 的实例就可以把 middleware delegate 注册到 host engine 上。</p>\n<p>另外一个就是 UseMiddlewareExtensions ，前面的代码曾用了 builder.UseMiddleware<samplemiddleware>(); 它会检查你写的 middleware 是不是合法的，比如有沒有 Invoke()，是不是只有一个Invoke()，Invoke() 的参数有沒有一个是 HttpContext type，所有的检查都通过之后便建立出该middleware instance 的 delegate。</samplemiddleware></p>\n<p>因此，当你的 ASP.NET Core APP刚启动的时候，在 Startup.cs 的 Configure() 就会把所有的 middleware delegate 建立起來，然后依序地放到內部的 stack 结构中。以上面的范例来说， stack 结构第一个元素是 StaticFiles,  然后是 SampleMiddleware 最后是 Mvc。接着每個 middleware 要被建立时是做 stack pop 的操作，所以 Mvc 的 _next 是 engine 里一些內部的 middleware 处理器，然後 pop 出 SampleMiddleware 时，就把 SampleMiddleware 的 _next 指向前面一個 pop 出來的 Mvc。依照着这样的逻辑一直到最前面的 middleware。所以在 host engine 在 Build() 之前这些动作都会完成，然后 host engine 才能执行Run()。有关 host engine 可參考<br><a href=\"https://github.com/aspnet/hosting/blob/master/src/Microsoft.AspNet.Hosting/WebHostBuilder.cs\" target=\"_blank\" rel=\"noopener\">WebHostBuilder.cs</a></p>\n<p>全文完。</p>\n<p>本文整理于<a href=\"https://dotblogs.com.tw/aspnetshare/2016/03/20/201603191\" target=\"_blank\" rel=\"noopener\">https://dotblogs.com.tw/aspnetshare/2016/03/20/201603191</a>并已征得作者同意。</p>\n"},{"layout":"post","title":"byte to string","date":"2016-10-03T16:00:00.000Z","_content":"\n有时候我们会遇到需要把数据加密之后再网络上传输的需求，这样的话一般使用AES256之类的算法，经过运算之后得到一个byte数组，接着转换成string，就扔出去了。对方拿到之后，用密钥解密之后便得到了对应的数据。\n\n在C#里面，Byte数组转String字符串我们一般用Convert.ToBase64()完成。\n\n代码如下：\n\n```csharp\n    public string BytesToString(byte[] buff)\n    {\n       return Convert.ToBase64String(buff);\n    }\n\n    public byte[] StringToBytes(string input)\n    {\n        return Encoding.UTF8.GetBytes(input);\n    }\n```\n\n 一般来说这样也没撒问题了，不过，如果这个数据是通过URL的方式给出去的，这时候就要考虑一下特殊字符编码问题了。+、空格、%之类的特殊字符可能会导致切断URL传参的数据，导致得到的数据不一致。这样的话，解密也做不下去了。\n\n 相关资料：\n\n1. [关于URL编码](http://www.ruanyifeng.com/blog/2010/02/url_encoding.html)\n2. [URL编码----url参数中有+、空格、=、%、&、#等特殊符号的问题解决](http://blog.csdn.net/luo_deng/article/details/12186535)\n \n \n 不过也好在，C#提供了一个HttpUtility.UrlEncode(input)和HttpUtility.UrlEncode(input)这两个函数，让我们直接把上面的特殊字符转换成URL可识别的转义字符。\n 数据出去之后先Encode一下，回来之后Decode一下，好像问题都解决了吧。\n\n\n然而我们都忘了一件事情，URL到了浏览器之后，自然会对URL里面的东西Decode一次。\n我实现的时候，在后台验证的时候又Decode一次,这就出问题了。\n\n问题在哪呢？一个encode的字符被decode两次，内容已经被改掉了...\n这就导致解密的时候直接挂了....\n\n\n\n这样看来，\nConvert.ToBase64String()这个不够靠谱，出来的数据可能会有特殊字符的问题。\n怎么解决呢？那天晚上和老大/CTO都在看这个bug。一下子都没撒好办法....\n\n后来CTO想了一下，说byte不就是最大不久255么？直接转16进制字符就是嘛。\n于是有了下面的代码：\n\n```csharp\n\t/// <summary>\n\t/// byte数组转string\n\t/// </summary>\n\t/// <param name=\"bytes\"></param>\n\t/// <returns></returns>\n\tprivate static string BytesToString(byte[] bytes)\n\t{\n\t    if (bytes == null)\n\t        return string.Empty;\n\t   return string.Join(string.Empty, \n\t   bytes.Select(b => string.Format(\"{0:x2}\", b)).ToArray());\n\t}\n\t\n\t/// <summary>\n\t/// string转byte数组\n\t/// </summary>\n\t/// <param name=\"str\"></param>\n\t/// <returns></returns>\n\tprivate static byte[] StringToBytes(string str)\n\t{\n\t    if (string.IsNullOrEmpty(str))\n\t        return null;\n\t    byte[] bytes = new byte[str.Length / 2];\n\t    for (int i = 0; i < str.Length; i += 2)\n\t    {\n\t        bytes[i / 2] = Convert.ToByte(\"0x\" + str[i] + str[i + 1], 16);\n\t    }\n\t    return bytes;\n\t}\n```\n问题解决。\n","source":"_posts/Bytes -To-String.md","raw":"---\nlayout: post\ntitle: byte to string\ncategory: dotnet\ndate: 2016-10-04\ntags:\n- dotnet core\n---\n\n有时候我们会遇到需要把数据加密之后再网络上传输的需求，这样的话一般使用AES256之类的算法，经过运算之后得到一个byte数组，接着转换成string，就扔出去了。对方拿到之后，用密钥解密之后便得到了对应的数据。\n\n在C#里面，Byte数组转String字符串我们一般用Convert.ToBase64()完成。\n\n代码如下：\n\n```csharp\n    public string BytesToString(byte[] buff)\n    {\n       return Convert.ToBase64String(buff);\n    }\n\n    public byte[] StringToBytes(string input)\n    {\n        return Encoding.UTF8.GetBytes(input);\n    }\n```\n\n 一般来说这样也没撒问题了，不过，如果这个数据是通过URL的方式给出去的，这时候就要考虑一下特殊字符编码问题了。+、空格、%之类的特殊字符可能会导致切断URL传参的数据，导致得到的数据不一致。这样的话，解密也做不下去了。\n\n 相关资料：\n\n1. [关于URL编码](http://www.ruanyifeng.com/blog/2010/02/url_encoding.html)\n2. [URL编码----url参数中有+、空格、=、%、&、#等特殊符号的问题解决](http://blog.csdn.net/luo_deng/article/details/12186535)\n \n \n 不过也好在，C#提供了一个HttpUtility.UrlEncode(input)和HttpUtility.UrlEncode(input)这两个函数，让我们直接把上面的特殊字符转换成URL可识别的转义字符。\n 数据出去之后先Encode一下，回来之后Decode一下，好像问题都解决了吧。\n\n\n然而我们都忘了一件事情，URL到了浏览器之后，自然会对URL里面的东西Decode一次。\n我实现的时候，在后台验证的时候又Decode一次,这就出问题了。\n\n问题在哪呢？一个encode的字符被decode两次，内容已经被改掉了...\n这就导致解密的时候直接挂了....\n\n\n\n这样看来，\nConvert.ToBase64String()这个不够靠谱，出来的数据可能会有特殊字符的问题。\n怎么解决呢？那天晚上和老大/CTO都在看这个bug。一下子都没撒好办法....\n\n后来CTO想了一下，说byte不就是最大不久255么？直接转16进制字符就是嘛。\n于是有了下面的代码：\n\n```csharp\n\t/// <summary>\n\t/// byte数组转string\n\t/// </summary>\n\t/// <param name=\"bytes\"></param>\n\t/// <returns></returns>\n\tprivate static string BytesToString(byte[] bytes)\n\t{\n\t    if (bytes == null)\n\t        return string.Empty;\n\t   return string.Join(string.Empty, \n\t   bytes.Select(b => string.Format(\"{0:x2}\", b)).ToArray());\n\t}\n\t\n\t/// <summary>\n\t/// string转byte数组\n\t/// </summary>\n\t/// <param name=\"str\"></param>\n\t/// <returns></returns>\n\tprivate static byte[] StringToBytes(string str)\n\t{\n\t    if (string.IsNullOrEmpty(str))\n\t        return null;\n\t    byte[] bytes = new byte[str.Length / 2];\n\t    for (int i = 0; i < str.Length; i += 2)\n\t    {\n\t        bytes[i / 2] = Convert.ToByte(\"0x\" + str[i] + str[i + 1], 16);\n\t    }\n\t    return bytes;\n\t}\n```\n问题解决。\n","slug":"Bytes -To-String","published":1,"updated":"2018-05-17T13:34:17.510Z","comments":1,"photos":[],"link":"","_id":"cjhal1fvn0008p631cyow3m24","content":"<p>有时候我们会遇到需要把数据加密之后再网络上传输的需求，这样的话一般使用AES256之类的算法，经过运算之后得到一个byte数组，接着转换成string，就扔出去了。对方拿到之后，用密钥解密之后便得到了对应的数据。</p>\n<p>在C#里面，Byte数组转String字符串我们一般用Convert.ToBase64()完成。</p>\n<p>代码如下：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">BytesToString</span>(<span class=\"params\"><span class=\"keyword\">byte</span>[] buff</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> Convert.ToBase64String(buff);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">byte</span>[] <span class=\"title\">StringToBytes</span>(<span class=\"params\"><span class=\"keyword\">string</span> input</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Encoding.UTF8.GetBytes(input);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 一般来说这样也没撒问题了，不过，如果这个数据是通过URL的方式给出去的，这时候就要考虑一下特殊字符编码问题了。+、空格、%之类的特殊字符可能会导致切断URL传参的数据，导致得到的数据不一致。这样的话，解密也做不下去了。</p>\n<p> 相关资料：</p>\n<ol>\n<li><a href=\"http://www.ruanyifeng.com/blog/2010/02/url_encoding.html\" target=\"_blank\" rel=\"noopener\">关于URL编码</a></li>\n<li><a href=\"http://blog.csdn.net/luo_deng/article/details/12186535\" target=\"_blank\" rel=\"noopener\">URL编码—-url参数中有+、空格、=、%、&amp;、#等特殊符号的问题解决</a></li>\n</ol>\n<p> 不过也好在，C#提供了一个HttpUtility.UrlEncode(input)和HttpUtility.UrlEncode(input)这两个函数，让我们直接把上面的特殊字符转换成URL可识别的转义字符。<br> 数据出去之后先Encode一下，回来之后Decode一下，好像问题都解决了吧。</p>\n<p>然而我们都忘了一件事情，URL到了浏览器之后，自然会对URL里面的东西Decode一次。<br>我实现的时候，在后台验证的时候又Decode一次,这就出问题了。</p>\n<p>问题在哪呢？一个encode的字符被decode两次，内容已经被改掉了…<br>这就导致解密的时候直接挂了….</p>\n<p>这样看来，<br>Convert.ToBase64String()这个不够靠谱，出来的数据可能会有特殊字符的问题。<br>怎么解决呢？那天晚上和老大/CTO都在看这个bug。一下子都没撒好办法….</p>\n<p>后来CTO想了一下，说byte不就是最大不久255么？直接转16进制字符就是嘛。<br>于是有了下面的代码：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> byte数组转string</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"bytes\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">BytesToString</span>(<span class=\"params\"><span class=\"keyword\">byte</span>[] bytes</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bytes == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>.Join(<span class=\"keyword\">string</span>.Empty, </span><br><span class=\"line\">   bytes.Select(b =&gt; <span class=\"keyword\">string</span>.Format(<span class=\"string\">\"&#123;0:x2&#125;\"</span>, b)).ToArray());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> string转byte数组</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"str\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] <span class=\"title\">StringToBytes</span>(<span class=\"params\"><span class=\"keyword\">string</span> str</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(str))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[str.Length / <span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; str.Length; i += <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        bytes[i / <span class=\"number\">2</span>] = Convert.ToByte(<span class=\"string\">\"0x\"</span> + str[i] + str[i + <span class=\"number\">1</span>], <span class=\"number\">16</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bytes;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>问题解决。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>有时候我们会遇到需要把数据加密之后再网络上传输的需求，这样的话一般使用AES256之类的算法，经过运算之后得到一个byte数组，接着转换成string，就扔出去了。对方拿到之后，用密钥解密之后便得到了对应的数据。</p>\n<p>在C#里面，Byte数组转String字符串我们一般用Convert.ToBase64()完成。</p>\n<p>代码如下：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">BytesToString</span>(<span class=\"params\"><span class=\"keyword\">byte</span>[] buff</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> Convert.ToBase64String(buff);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">byte</span>[] <span class=\"title\">StringToBytes</span>(<span class=\"params\"><span class=\"keyword\">string</span> input</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Encoding.UTF8.GetBytes(input);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 一般来说这样也没撒问题了，不过，如果这个数据是通过URL的方式给出去的，这时候就要考虑一下特殊字符编码问题了。+、空格、%之类的特殊字符可能会导致切断URL传参的数据，导致得到的数据不一致。这样的话，解密也做不下去了。</p>\n<p> 相关资料：</p>\n<ol>\n<li><a href=\"http://www.ruanyifeng.com/blog/2010/02/url_encoding.html\" target=\"_blank\" rel=\"noopener\">关于URL编码</a></li>\n<li><a href=\"http://blog.csdn.net/luo_deng/article/details/12186535\" target=\"_blank\" rel=\"noopener\">URL编码—-url参数中有+、空格、=、%、&amp;、#等特殊符号的问题解决</a></li>\n</ol>\n<p> 不过也好在，C#提供了一个HttpUtility.UrlEncode(input)和HttpUtility.UrlEncode(input)这两个函数，让我们直接把上面的特殊字符转换成URL可识别的转义字符。<br> 数据出去之后先Encode一下，回来之后Decode一下，好像问题都解决了吧。</p>\n<p>然而我们都忘了一件事情，URL到了浏览器之后，自然会对URL里面的东西Decode一次。<br>我实现的时候，在后台验证的时候又Decode一次,这就出问题了。</p>\n<p>问题在哪呢？一个encode的字符被decode两次，内容已经被改掉了…<br>这就导致解密的时候直接挂了….</p>\n<p>这样看来，<br>Convert.ToBase64String()这个不够靠谱，出来的数据可能会有特殊字符的问题。<br>怎么解决呢？那天晚上和老大/CTO都在看这个bug。一下子都没撒好办法….</p>\n<p>后来CTO想了一下，说byte不就是最大不久255么？直接转16进制字符就是嘛。<br>于是有了下面的代码：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> byte数组转string</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"bytes\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">BytesToString</span>(<span class=\"params\"><span class=\"keyword\">byte</span>[] bytes</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bytes == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>.Join(<span class=\"keyword\">string</span>.Empty, </span><br><span class=\"line\">   bytes.Select(b =&gt; <span class=\"keyword\">string</span>.Format(<span class=\"string\">\"&#123;0:x2&#125;\"</span>, b)).ToArray());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> string转byte数组</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"str\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] <span class=\"title\">StringToBytes</span>(<span class=\"params\"><span class=\"keyword\">string</span> str</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(str))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[str.Length / <span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; str.Length; i += <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        bytes[i / <span class=\"number\">2</span>] = Convert.ToByte(<span class=\"string\">\"0x\"</span> + str[i] + str[i + <span class=\"number\">1</span>], <span class=\"number\">16</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bytes;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>问题解决。</p>\n"},{"layout":"post","title":"C#-58同城品牌公寓爬虫","date":"2016-10-03T16:00:00.000Z","_content":"周末闲着无事刷知乎发现一个爬虫教程（[高德API+Python解决租房问题](https://zhuanlan.zhihu.com/p/21883516)\n），正中最近想要换地方住的痛点。然后大早上懒觉都没睡就屁颠屁颠开始研究这个教程了。这样教程在实验楼网站里面有手把手步骤，有兴趣自取（[实验楼：高德API+Python解决租房问题](https://www.shiyanlou.com/courses/599)）。\n\n整体项目主要分成两步：\n\n第一步:python爬取数据，生成数据文件;\n\n第二部：导入数据文件，在地图上显示房源，设定上班地点后自动计算出行路线和路程时间。\n\n研究了一下这个教程之后发现这货做得实在有点粗糙，只能当教程用，完全没有通用实际价值。\n\n而且这里面还有个更大的问题：教程是基于北京的数据来做的，而我在上海...\n\n虽然说改改python数据源，改改导航页面JS完事。不过是在难用...\n\n于是，开始自己动手了。先看原有的python代码。\n\n```python\n\n#-*- coding:utf-8 -*-\nfrom bs4 import BeautifulSoup\nfrom urlparse import urljoin\nimport requests\nimport csv\n\nurl = \"http://bj.58.com/pinpaigongyu/pn/{page}/?minprice=2000_4000\"\n\n#已完成的页数序号，初时为0\npage = 0\n\ncsv_file = open(\"rent.csv\",\"wb\") \ncsv_writer = csv.writer(csv_file, delimiter=',')\n\nwhile True:\n    page += 1\n    print \"fetch: \", url.format(page=page)\n    response = requests.get(url.format(page=page))\n    html = BeautifulSoup(response.text)\n    house_list = html.select(\".list > li\")\n\n    # 循环在读不到新的房源时结束\n    if not house_list:\n        break\n\n    for house in house_list:\n        house_title = house.select(\"h2\")[0].string.encode(\"utf8\")\n        house_url = urljoin(url, house.select(\"a\")[0][\"href\"])\n        house_info_list = house_title.split()\n\n        # 如果第二列是公寓名则取第一列作为地址\n        if \"公寓\" in house_info_list[1] or \"青年社区\" in house_info_list[1]:\n            house_location = house_info_list[0]\n        else:\n            house_location = house_info_list[1]\n\n        house_money = house.select(\".money\")[0].select(\"b\")[0].string.encode(\"utf8\")\n        csv_writer.writerow([house_title, house_location, house_money, house_url])\n\ncsv_file.close()\n\n```\n整个代码基本思路就是，爬取http://bj.58.com/pinpaigongyu/pn/{page}/?minprice=2000_4000页面数据，然后扔到创建的csv文件里面作为下一步的数据源。\n通过研究http://bj.58.com/pinpaigongyu/pn/{page}/?minprice=2000_4000这个页面的数据，我们可以很容易发现，在页面中，每条数据都是一个li标签。\n\n\n如下图：\n\n![](http://7xread.com1.z0.glb.clouddn.com/685849af-2ccc-4454-a26e-e2a1c3001378)\n\n![](http://7xread.com1.z0.glb.clouddn.com/909df442-b1d9-4073-84d0-99a5b3cc9022)\n\n#### li结构如下：\n\n```html\n<li logr=\"\" class=\"\">\n  <a href=\"/pinpaigongyu/26851774057013x.shtml\"\n  target=\"_blank\" onclick=\"clickLog('from=fcpc_list_gy_sh_tupian')\" \n  tongji_label=\"listclick\">\n    <div class=\"img\">\n     <img lazy_src=\"\" alt=\"\" src=\"\">\n    </div>\n        <div class=\"des\">\n            <h2>【合租】菊园新区 柳湖景庭 3室次卧</h2>\n            <p class=\"room\">\n            3室1厅1卫&nbsp; &nbsp; 13m²&nbsp;&nbsp; 3/6层&nbsp; </p>\n            <p class=\"dist\"></p>\n            <p class=\"spec\">\n            <span class=\"spec1\">公共阳台</span>\n            <span class=\"spec2\">公共卫生间</span>\n            <span class=\"spec3\">离地铁近</span>\n            <span class=\"spec4\">厨房</span>\n            </p>\n        </div>\n        <div class=\"money\">\n            <span><b>1100</b>元/月 </span>\n         <p>租房月付</p>\n        </div>\n  </a>\n</li>\n```\n\n照着python的思路，是把所有的li标签的数据提取出来的。\n\n我自己研究的时候又看了下，其实数据都在一个属性为tongji_label=\"listclick\"的a标签里面。\n\n一般来说，字符匹配用正则表达式完事，奈何正则水平实在不佳。我还是选择直接上HtmlAgilityPack算了。\n关于HtmlAgilityPack的介绍还是看官网算了。[HtmlAgilityPack](http://htmlagilitypack.codeplex.com/)\n\nHtmlAgilityPack是.NET一个比较强大的HTML处理类库了，基本可以让你像JS来操作HTML标签。\n安装这货很简单，直接在Nuget PM包管理工具里面输入下面命令就完事了。\n\n```csharp\nInstall-Package HtmlAgilityPack\n\n```\n\n有需要使用教程可以看这个：[Html Agility Pack基础类介绍及运用](http://www.cnblogs.com/ITmuse/archive/2010/05/29/1747199.html)\n\n下面直接贴controller源码算了。\n\n```csharp\n /// </summary>\n /// <param name=\"costFrom\">价格区间起始值</param>\n /// <param name=\"costTo\">价格区间终止值</param>\n /// <param name=\"cnName\">城市拼音首字母</param>\n /// <returns></returns>\n public ActionResult Get58CityRoomData(int costFrom, int costTo, string cnName)\n        {\n            if (costTo<=0 || costTo < costFrom)\n            {\n                return Json(new { IsSuccess = false, Error = \"输入数据有误，请重新输入。\" });\n            }\n\n            if (string.IsNullOrEmpty(cnName))\n            {\n                return Json(new { IsSuccess = false, \n                Error = \"城市定位失败，建议清除浏览器缓存后重新进入。\" });\n            }\n\n            try\n            {\n                var lstHouse = new List<HouseInfo>();\n\n                string tempURL = \"http://\" + \n                cnName + \".58.com/pinpaigongyu//pn/{0}/?minprice=\"\n                + costFrom + \"_\" + costTo;\n\n                Uri uri = new Uri(tempURL);\n\n                var htmlResult = HTTPHelper.GetHTMLByURL(string.Format(tempURL, 1));\n\n                HtmlDocument htmlDoc = new HtmlDocument();\n                htmlDoc.LoadHtml(htmlResult);\n\n                var countNodes = htmlDoc.DocumentNode.\n                SelectSingleNode(\".//span[contains(@class,'list')]\");\n                int pageCount = 10;\n\n                if (countNodes != null && countNodes.HasChildNodes)\n                {\n                    pageCount = Convert.ToInt32(countNodes.ChildNodes[0].InnerText) / 20;\n\n                    if(pageCount==0)\n                    {\n                        return Json(new { IsSuccess = false, \n                        Error =string.Format(\"没有找到价格区间为{0} - {1}的房子。\",\n                        costFrom,costTo)});\n                    }\n                }\n                for (int pageIndex = 1; pageIndex <= pageCount; pageIndex++)\n                {\n                    htmlResult = HTTPHelper.GetHTMLByURL(string.Format(tempURL, pageIndex));\n                    htmlDoc.LoadHtml(htmlResult);\n                    var roomList = htmlDoc.DocumentNode\n                    .SelectNodes(\".//a[contains(@tongji_label,'listclick')]\");\n                    foreach (var room in roomList)\n                    {\n                        var houseTitle = room.SelectSingleNode(\".//h2\").InnerHtml;\n                        var houseURL = uri.Host + room.Attributes[\"href\"].Value;\n                        var house_info_list = houseTitle.Split(' ');\n                        var house_location = string.Empty;\n                        if (house_info_list[1].Contains(\"公寓\") \n                        || house_info_list[1].Contains(\"青年社区\"))\n                        {\n                            house_location = house_info_list[0];\n                        }\n                        else\n                        {\n                            house_location = house_info_list[1];\n                        }\n                        var momey = room.SelectSingleNode(\".//b\").InnerHtml;\n\n                        lstHouse.Add(new HouseInfo()\n                        {\n                            HouseTitle = houseTitle,\n                            HouseLocation = house_location,\n                            HouseURL = houseURL,\n                            Money = momey,\n                        });\n                    }\n                }\n\n                return Json(new { IsSuccess = true, HouseInfos = lstHouse });\n            }\n            catch (Exception ex)\n            {\n                return Json(new { IsSuccess = false,\n                Error = \"获取数据异常。\" + ex.ToString() });\n            }\n        }\n```\n\n下面解释一下核心代码。\n\n片段一：获取总数。\n\n在观察58同城页面的时候，无意发现其实第一个加载的页面中有一个数据总条数，隐藏在页面里面的。\n\n```html\n <span class=\"listsum\"><em>1813</em>条结果</span>\n```\n\n这样一来，总页面就很清晰了。页面=总数/每页20条。然后我们根据已知的数据规则去循环请求页面，也就能拿到所有的搜索数据了。\n\n核心代码，获取总条数。\n\n```\nvar countNodes = htmlDoc.DocumentNode.\nSelectSingleNode(\".//span[contains(@class,'list')]\");\nint pageCount = 10;\n\nif (countNodes != null && countNodes.HasChildNodes)\n{\n    pageCount = Convert.ToInt32(countNodes.ChildNodes[0].InnerText) / 20;\n\n    if(pageCount==0)\n    {\n        return Json(new { IsSuccess = false, \n        Error =string.Format(\"没有找到价格区间为{0} - {1}的房子。\",\n        costFrom,costTo)});\n    }\n}\n\n```\n\n在HTMLDoc里面找到一个span的class包含list的节点，获取它子节点（即em）的内容，强制转换成数字，也就是我们要找的总条数了。总条数除以20就得到了页数，下面就是开始循环请求页面了。\n\n在最上面我们分析过公寓数据分布，数据是li里面套a标签，我们需要的地理位置、房间名称、价格都在a标签里面。\n\n这样一来，我们这要获得到页面所有带有属性为tongji_label=\"listclick\"的a标签数据，也就得到了我们所有需要的数据。\n\n看一下a标签的数据组成：\n\n```html\n\n <a href=\"/pinpaigongyu/26851774057013x.shtml\"\n  target=\"_blank\" onclick=\"clickLog('from=fcpc_list_gy_sh_tupian')\" \n  tongji_label=\"listclick\">\n    <div class=\"img\">\n     <img lazy_src=\"\" alt=\"\" src=\"\">\n    </div>\n        <div class=\"des\">\n            <h2>【合租】菊园新区 柳湖景庭 3室次卧</h2>\n            <p class=\"room\">\n            3室1厅1卫&nbsp; &nbsp; 13m²&nbsp;&nbsp; 3/6层&nbsp; </p>\n            <p class=\"dist\"></p>\n            <p class=\"spec\">\n            <span class=\"spec1\">公共阳台</span>\n            <span class=\"spec2\">公共卫生间</span>\n            <span class=\"spec3\">离地铁近</span>\n            <span class=\"spec4\">厨房</span>\n            </p>\n        </div>\n        <div class=\"money\">\n            <span><b>1100</b>元/月 </span>\n         <p>租房月付</p>\n        </div>\n  </a>\n```\n\n我们要的房间信息在一个h2的标签里面，公寓租金价钱在class=\"money\"的div标签里面。\n\n于是有了一下代码：\n\n```csharp\n\n for (int pageIndex = 1; pageIndex <= pageCount; pageIndex++)\n{\n    htmlResult = HTTPHelper.GetHTMLByURL(string.Format(tempURL, pageIndex));\n    htmlDoc.LoadHtml(htmlResult);\n    //找到所有的带有属性为tongji_label=\"listclick\"的a标签数据\n    var roomList = htmlDoc.DocumentNode.SelectNodes(\".//a[contains(@tongji_label,'listclick')]\");\n    foreach (var room in roomList)\n    {\n        //获取其中为h2的房间数据，然后用空格分割成数组\n        var houseTitle = room.SelectSingleNode(\".//h2\").InnerHtml;\n        var houseURL = uri.Host + room.Attributes[\"href\"].Value;\n        var house_info_list = houseTitle.Split(' ');\n        var house_location = string.Empty;\n        //分割出来的数组，第二个包含公寓或青年社区，则取第一个数据为所在地区，否则取第二个数据\n        //【合租】菊园新区 柳湖景庭 3室次卧 \n        // 所在地区为：菊园新区\n        if (house_info_list[1].Contains(\"公寓\") || house_info_list[1].Contains(\"青年社区\"))\n        {\n            house_location = house_info_list[0];\n        }\n        else\n        {\n            house_location = house_info_list[1];\n        }\n        //获取标签为b的数据，价格就在里面了\n        var momey = room.SelectSingleNode(\".//b\").InnerHtml;\n\n        lstHouse.Add(new HouseInfo()\n        {\n            HouseTitle = houseTitle,\n            HouseLocation = house_location,\n            HouseURL = houseURL,\n            Money = momey,\n        });\n    }\n}\n\n```\n\n后端来说，基本就这些内容了。\n\n还有一些前端高德地图接口调用下次再讲吧，要陪女票玩游戏去了...\n\n^-^\n\n\n以上源码地址：[https://github.com/liguobao/58HouseSearch](https://github.com/liguobao/58HouseSearch)\n\n在线地址：[58公寓高德搜房(全国版)：https://woyaozufang.live](https://woyaozufang.live)\n","source":"_posts/C#-58CityHouse-Crawler.md","raw":"---\nlayout: post\ntitle: C#-58同城品牌公寓爬虫\ncategory: dotnet core\ndate: 2016-10-04\ntags:\n- dotnet core\n---\n周末闲着无事刷知乎发现一个爬虫教程（[高德API+Python解决租房问题](https://zhuanlan.zhihu.com/p/21883516)\n），正中最近想要换地方住的痛点。然后大早上懒觉都没睡就屁颠屁颠开始研究这个教程了。这样教程在实验楼网站里面有手把手步骤，有兴趣自取（[实验楼：高德API+Python解决租房问题](https://www.shiyanlou.com/courses/599)）。\n\n整体项目主要分成两步：\n\n第一步:python爬取数据，生成数据文件;\n\n第二部：导入数据文件，在地图上显示房源，设定上班地点后自动计算出行路线和路程时间。\n\n研究了一下这个教程之后发现这货做得实在有点粗糙，只能当教程用，完全没有通用实际价值。\n\n而且这里面还有个更大的问题：教程是基于北京的数据来做的，而我在上海...\n\n虽然说改改python数据源，改改导航页面JS完事。不过是在难用...\n\n于是，开始自己动手了。先看原有的python代码。\n\n```python\n\n#-*- coding:utf-8 -*-\nfrom bs4 import BeautifulSoup\nfrom urlparse import urljoin\nimport requests\nimport csv\n\nurl = \"http://bj.58.com/pinpaigongyu/pn/{page}/?minprice=2000_4000\"\n\n#已完成的页数序号，初时为0\npage = 0\n\ncsv_file = open(\"rent.csv\",\"wb\") \ncsv_writer = csv.writer(csv_file, delimiter=',')\n\nwhile True:\n    page += 1\n    print \"fetch: \", url.format(page=page)\n    response = requests.get(url.format(page=page))\n    html = BeautifulSoup(response.text)\n    house_list = html.select(\".list > li\")\n\n    # 循环在读不到新的房源时结束\n    if not house_list:\n        break\n\n    for house in house_list:\n        house_title = house.select(\"h2\")[0].string.encode(\"utf8\")\n        house_url = urljoin(url, house.select(\"a\")[0][\"href\"])\n        house_info_list = house_title.split()\n\n        # 如果第二列是公寓名则取第一列作为地址\n        if \"公寓\" in house_info_list[1] or \"青年社区\" in house_info_list[1]:\n            house_location = house_info_list[0]\n        else:\n            house_location = house_info_list[1]\n\n        house_money = house.select(\".money\")[0].select(\"b\")[0].string.encode(\"utf8\")\n        csv_writer.writerow([house_title, house_location, house_money, house_url])\n\ncsv_file.close()\n\n```\n整个代码基本思路就是，爬取http://bj.58.com/pinpaigongyu/pn/{page}/?minprice=2000_4000页面数据，然后扔到创建的csv文件里面作为下一步的数据源。\n通过研究http://bj.58.com/pinpaigongyu/pn/{page}/?minprice=2000_4000这个页面的数据，我们可以很容易发现，在页面中，每条数据都是一个li标签。\n\n\n如下图：\n\n![](http://7xread.com1.z0.glb.clouddn.com/685849af-2ccc-4454-a26e-e2a1c3001378)\n\n![](http://7xread.com1.z0.glb.clouddn.com/909df442-b1d9-4073-84d0-99a5b3cc9022)\n\n#### li结构如下：\n\n```html\n<li logr=\"\" class=\"\">\n  <a href=\"/pinpaigongyu/26851774057013x.shtml\"\n  target=\"_blank\" onclick=\"clickLog('from=fcpc_list_gy_sh_tupian')\" \n  tongji_label=\"listclick\">\n    <div class=\"img\">\n     <img lazy_src=\"\" alt=\"\" src=\"\">\n    </div>\n        <div class=\"des\">\n            <h2>【合租】菊园新区 柳湖景庭 3室次卧</h2>\n            <p class=\"room\">\n            3室1厅1卫&nbsp; &nbsp; 13m²&nbsp;&nbsp; 3/6层&nbsp; </p>\n            <p class=\"dist\"></p>\n            <p class=\"spec\">\n            <span class=\"spec1\">公共阳台</span>\n            <span class=\"spec2\">公共卫生间</span>\n            <span class=\"spec3\">离地铁近</span>\n            <span class=\"spec4\">厨房</span>\n            </p>\n        </div>\n        <div class=\"money\">\n            <span><b>1100</b>元/月 </span>\n         <p>租房月付</p>\n        </div>\n  </a>\n</li>\n```\n\n照着python的思路，是把所有的li标签的数据提取出来的。\n\n我自己研究的时候又看了下，其实数据都在一个属性为tongji_label=\"listclick\"的a标签里面。\n\n一般来说，字符匹配用正则表达式完事，奈何正则水平实在不佳。我还是选择直接上HtmlAgilityPack算了。\n关于HtmlAgilityPack的介绍还是看官网算了。[HtmlAgilityPack](http://htmlagilitypack.codeplex.com/)\n\nHtmlAgilityPack是.NET一个比较强大的HTML处理类库了，基本可以让你像JS来操作HTML标签。\n安装这货很简单，直接在Nuget PM包管理工具里面输入下面命令就完事了。\n\n```csharp\nInstall-Package HtmlAgilityPack\n\n```\n\n有需要使用教程可以看这个：[Html Agility Pack基础类介绍及运用](http://www.cnblogs.com/ITmuse/archive/2010/05/29/1747199.html)\n\n下面直接贴controller源码算了。\n\n```csharp\n /// </summary>\n /// <param name=\"costFrom\">价格区间起始值</param>\n /// <param name=\"costTo\">价格区间终止值</param>\n /// <param name=\"cnName\">城市拼音首字母</param>\n /// <returns></returns>\n public ActionResult Get58CityRoomData(int costFrom, int costTo, string cnName)\n        {\n            if (costTo<=0 || costTo < costFrom)\n            {\n                return Json(new { IsSuccess = false, Error = \"输入数据有误，请重新输入。\" });\n            }\n\n            if (string.IsNullOrEmpty(cnName))\n            {\n                return Json(new { IsSuccess = false, \n                Error = \"城市定位失败，建议清除浏览器缓存后重新进入。\" });\n            }\n\n            try\n            {\n                var lstHouse = new List<HouseInfo>();\n\n                string tempURL = \"http://\" + \n                cnName + \".58.com/pinpaigongyu//pn/{0}/?minprice=\"\n                + costFrom + \"_\" + costTo;\n\n                Uri uri = new Uri(tempURL);\n\n                var htmlResult = HTTPHelper.GetHTMLByURL(string.Format(tempURL, 1));\n\n                HtmlDocument htmlDoc = new HtmlDocument();\n                htmlDoc.LoadHtml(htmlResult);\n\n                var countNodes = htmlDoc.DocumentNode.\n                SelectSingleNode(\".//span[contains(@class,'list')]\");\n                int pageCount = 10;\n\n                if (countNodes != null && countNodes.HasChildNodes)\n                {\n                    pageCount = Convert.ToInt32(countNodes.ChildNodes[0].InnerText) / 20;\n\n                    if(pageCount==0)\n                    {\n                        return Json(new { IsSuccess = false, \n                        Error =string.Format(\"没有找到价格区间为{0} - {1}的房子。\",\n                        costFrom,costTo)});\n                    }\n                }\n                for (int pageIndex = 1; pageIndex <= pageCount; pageIndex++)\n                {\n                    htmlResult = HTTPHelper.GetHTMLByURL(string.Format(tempURL, pageIndex));\n                    htmlDoc.LoadHtml(htmlResult);\n                    var roomList = htmlDoc.DocumentNode\n                    .SelectNodes(\".//a[contains(@tongji_label,'listclick')]\");\n                    foreach (var room in roomList)\n                    {\n                        var houseTitle = room.SelectSingleNode(\".//h2\").InnerHtml;\n                        var houseURL = uri.Host + room.Attributes[\"href\"].Value;\n                        var house_info_list = houseTitle.Split(' ');\n                        var house_location = string.Empty;\n                        if (house_info_list[1].Contains(\"公寓\") \n                        || house_info_list[1].Contains(\"青年社区\"))\n                        {\n                            house_location = house_info_list[0];\n                        }\n                        else\n                        {\n                            house_location = house_info_list[1];\n                        }\n                        var momey = room.SelectSingleNode(\".//b\").InnerHtml;\n\n                        lstHouse.Add(new HouseInfo()\n                        {\n                            HouseTitle = houseTitle,\n                            HouseLocation = house_location,\n                            HouseURL = houseURL,\n                            Money = momey,\n                        });\n                    }\n                }\n\n                return Json(new { IsSuccess = true, HouseInfos = lstHouse });\n            }\n            catch (Exception ex)\n            {\n                return Json(new { IsSuccess = false,\n                Error = \"获取数据异常。\" + ex.ToString() });\n            }\n        }\n```\n\n下面解释一下核心代码。\n\n片段一：获取总数。\n\n在观察58同城页面的时候，无意发现其实第一个加载的页面中有一个数据总条数，隐藏在页面里面的。\n\n```html\n <span class=\"listsum\"><em>1813</em>条结果</span>\n```\n\n这样一来，总页面就很清晰了。页面=总数/每页20条。然后我们根据已知的数据规则去循环请求页面，也就能拿到所有的搜索数据了。\n\n核心代码，获取总条数。\n\n```\nvar countNodes = htmlDoc.DocumentNode.\nSelectSingleNode(\".//span[contains(@class,'list')]\");\nint pageCount = 10;\n\nif (countNodes != null && countNodes.HasChildNodes)\n{\n    pageCount = Convert.ToInt32(countNodes.ChildNodes[0].InnerText) / 20;\n\n    if(pageCount==0)\n    {\n        return Json(new { IsSuccess = false, \n        Error =string.Format(\"没有找到价格区间为{0} - {1}的房子。\",\n        costFrom,costTo)});\n    }\n}\n\n```\n\n在HTMLDoc里面找到一个span的class包含list的节点，获取它子节点（即em）的内容，强制转换成数字，也就是我们要找的总条数了。总条数除以20就得到了页数，下面就是开始循环请求页面了。\n\n在最上面我们分析过公寓数据分布，数据是li里面套a标签，我们需要的地理位置、房间名称、价格都在a标签里面。\n\n这样一来，我们这要获得到页面所有带有属性为tongji_label=\"listclick\"的a标签数据，也就得到了我们所有需要的数据。\n\n看一下a标签的数据组成：\n\n```html\n\n <a href=\"/pinpaigongyu/26851774057013x.shtml\"\n  target=\"_blank\" onclick=\"clickLog('from=fcpc_list_gy_sh_tupian')\" \n  tongji_label=\"listclick\">\n    <div class=\"img\">\n     <img lazy_src=\"\" alt=\"\" src=\"\">\n    </div>\n        <div class=\"des\">\n            <h2>【合租】菊园新区 柳湖景庭 3室次卧</h2>\n            <p class=\"room\">\n            3室1厅1卫&nbsp; &nbsp; 13m²&nbsp;&nbsp; 3/6层&nbsp; </p>\n            <p class=\"dist\"></p>\n            <p class=\"spec\">\n            <span class=\"spec1\">公共阳台</span>\n            <span class=\"spec2\">公共卫生间</span>\n            <span class=\"spec3\">离地铁近</span>\n            <span class=\"spec4\">厨房</span>\n            </p>\n        </div>\n        <div class=\"money\">\n            <span><b>1100</b>元/月 </span>\n         <p>租房月付</p>\n        </div>\n  </a>\n```\n\n我们要的房间信息在一个h2的标签里面，公寓租金价钱在class=\"money\"的div标签里面。\n\n于是有了一下代码：\n\n```csharp\n\n for (int pageIndex = 1; pageIndex <= pageCount; pageIndex++)\n{\n    htmlResult = HTTPHelper.GetHTMLByURL(string.Format(tempURL, pageIndex));\n    htmlDoc.LoadHtml(htmlResult);\n    //找到所有的带有属性为tongji_label=\"listclick\"的a标签数据\n    var roomList = htmlDoc.DocumentNode.SelectNodes(\".//a[contains(@tongji_label,'listclick')]\");\n    foreach (var room in roomList)\n    {\n        //获取其中为h2的房间数据，然后用空格分割成数组\n        var houseTitle = room.SelectSingleNode(\".//h2\").InnerHtml;\n        var houseURL = uri.Host + room.Attributes[\"href\"].Value;\n        var house_info_list = houseTitle.Split(' ');\n        var house_location = string.Empty;\n        //分割出来的数组，第二个包含公寓或青年社区，则取第一个数据为所在地区，否则取第二个数据\n        //【合租】菊园新区 柳湖景庭 3室次卧 \n        // 所在地区为：菊园新区\n        if (house_info_list[1].Contains(\"公寓\") || house_info_list[1].Contains(\"青年社区\"))\n        {\n            house_location = house_info_list[0];\n        }\n        else\n        {\n            house_location = house_info_list[1];\n        }\n        //获取标签为b的数据，价格就在里面了\n        var momey = room.SelectSingleNode(\".//b\").InnerHtml;\n\n        lstHouse.Add(new HouseInfo()\n        {\n            HouseTitle = houseTitle,\n            HouseLocation = house_location,\n            HouseURL = houseURL,\n            Money = momey,\n        });\n    }\n}\n\n```\n\n后端来说，基本就这些内容了。\n\n还有一些前端高德地图接口调用下次再讲吧，要陪女票玩游戏去了...\n\n^-^\n\n\n以上源码地址：[https://github.com/liguobao/58HouseSearch](https://github.com/liguobao/58HouseSearch)\n\n在线地址：[58公寓高德搜房(全国版)：https://woyaozufang.live](https://woyaozufang.live)\n","slug":"C#-58CityHouse-Crawler","published":1,"updated":"2018-05-17T13:34:23.634Z","comments":1,"photos":[],"link":"","_id":"cjhal1fvo0009p631d3wzzohd","content":"<p>周末闲着无事刷知乎发现一个爬虫教程（<a href=\"https://zhuanlan.zhihu.com/p/21883516\" target=\"_blank\" rel=\"noopener\">高德API+Python解决租房问题</a><br>），正中最近想要换地方住的痛点。然后大早上懒觉都没睡就屁颠屁颠开始研究这个教程了。这样教程在实验楼网站里面有手把手步骤，有兴趣自取（<a href=\"https://www.shiyanlou.com/courses/599\" target=\"_blank\" rel=\"noopener\">实验楼：高德API+Python解决租房问题</a>）。</p>\n<p>整体项目主要分成两步：</p>\n<p>第一步:python爬取数据，生成数据文件;</p>\n<p>第二部：导入数据文件，在地图上显示房源，设定上班地点后自动计算出行路线和路程时间。</p>\n<p>研究了一下这个教程之后发现这货做得实在有点粗糙，只能当教程用，完全没有通用实际价值。</p>\n<p>而且这里面还有个更大的问题：教程是基于北京的数据来做的，而我在上海…</p>\n<p>虽然说改改python数据源，改改导航页面JS完事。不过是在难用…</p>\n<p>于是，开始自己动手了。先看原有的python代码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#-*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"><span class=\"keyword\">from</span> urlparse <span class=\"keyword\">import</span> urljoin</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> csv</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">\"http://bj.58.com/pinpaigongyu/pn/&#123;page&#125;/?minprice=2000_4000\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#已完成的页数序号，初时为0</span></span><br><span class=\"line\">page = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">csv_file = open(<span class=\"string\">\"rent.csv\"</span>,<span class=\"string\">\"wb\"</span>) </span><br><span class=\"line\">csv_writer = csv.writer(csv_file, delimiter=<span class=\"string\">','</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    page += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"fetch: \"</span>, url.format(page=page)</span><br><span class=\"line\">    response = requests.get(url.format(page=page))</span><br><span class=\"line\">    html = BeautifulSoup(response.text)</span><br><span class=\"line\">    house_list = html.select(<span class=\"string\">\".list &gt; li\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 循环在读不到新的房源时结束</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> house_list:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> house <span class=\"keyword\">in</span> house_list:</span><br><span class=\"line\">        house_title = house.select(<span class=\"string\">\"h2\"</span>)[<span class=\"number\">0</span>].string.encode(<span class=\"string\">\"utf8\"</span>)</span><br><span class=\"line\">        house_url = urljoin(url, house.select(<span class=\"string\">\"a\"</span>)[<span class=\"number\">0</span>][<span class=\"string\">\"href\"</span>])</span><br><span class=\"line\">        house_info_list = house_title.split()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 如果第二列是公寓名则取第一列作为地址</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">\"公寓\"</span> <span class=\"keyword\">in</span> house_info_list[<span class=\"number\">1</span>] <span class=\"keyword\">or</span> <span class=\"string\">\"青年社区\"</span> <span class=\"keyword\">in</span> house_info_list[<span class=\"number\">1</span>]:</span><br><span class=\"line\">            house_location = house_info_list[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            house_location = house_info_list[<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        house_money = house.select(<span class=\"string\">\".money\"</span>)[<span class=\"number\">0</span>].select(<span class=\"string\">\"b\"</span>)[<span class=\"number\">0</span>].string.encode(<span class=\"string\">\"utf8\"</span>)</span><br><span class=\"line\">        csv_writer.writerow([house_title, house_location, house_money, house_url])</span><br><span class=\"line\"></span><br><span class=\"line\">csv_file.close()</span><br></pre></td></tr></table></figure>\n<p>整个代码基本思路就是，爬取<a href=\"http://bj.58.com/pinpaigongyu/pn/{page}/?minprice=2000_4000页面数据，然后扔到创建的csv文件里面作为下一步的数据源。\" target=\"_blank\" rel=\"noopener\">http://bj.58.com/pinpaigongyu/pn/{page}/?minprice=2000_4000页面数据，然后扔到创建的csv文件里面作为下一步的数据源。</a><br>通过研究<a href=\"http://bj.58.com/pinpaigongyu/pn/{page}/?minprice=2000_4000这个页面的数据，我们可以很容易发现，在页面中，每条数据都是一个li标签。\" target=\"_blank\" rel=\"noopener\">http://bj.58.com/pinpaigongyu/pn/{page}/?minprice=2000_4000这个页面的数据，我们可以很容易发现，在页面中，每条数据都是一个li标签。</a></p>\n<p>如下图：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/685849af-2ccc-4454-a26e-e2a1c3001378\" alt=\"\"></p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/909df442-b1d9-4073-84d0-99a5b3cc9022\" alt=\"\"></p>\n<h4 id=\"li结构如下：\"><a href=\"#li结构如下：\" class=\"headerlink\" title=\"li结构如下：\"></a>li结构如下：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">logr</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/pinpaigongyu/26851774057013x.shtml\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"clickLog('from=fcpc_list_gy_sh_tupian')\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">tongji_label</span>=<span class=\"string\">\"listclick\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">lazy_src</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"des\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>【合租】菊园新区 柳湖景庭 3室次卧<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"room\"</span>&gt;</span></span><br><span class=\"line\">            3室1厅1卫&amp;nbsp; &amp;nbsp; 13m²&amp;nbsp;&amp;nbsp; 3/6层&amp;nbsp; <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dist\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec1\"</span>&gt;</span>公共阳台<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec2\"</span>&gt;</span>公共卫生间<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec3\"</span>&gt;</span>离地铁近<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec4\"</span>&gt;</span>厨房<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"money\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>1100<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span>元/月 <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>租房月付<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>照着python的思路，是把所有的li标签的数据提取出来的。</p>\n<p>我自己研究的时候又看了下，其实数据都在一个属性为tongji_label=”listclick”的a标签里面。</p>\n<p>一般来说，字符匹配用正则表达式完事，奈何正则水平实在不佳。我还是选择直接上HtmlAgilityPack算了。<br>关于HtmlAgilityPack的介绍还是看官网算了。<a href=\"http://htmlagilitypack.codeplex.com/\" target=\"_blank\" rel=\"noopener\">HtmlAgilityPack</a></p>\n<p>HtmlAgilityPack是.NET一个比较强大的HTML处理类库了，基本可以让你像JS来操作HTML标签。<br>安装这货很简单，直接在Nuget PM包管理工具里面输入下面命令就完事了。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Install-Package HtmlAgilityPack</span><br></pre></td></tr></table></figure>\n<p>有需要使用教程可以看这个：<a href=\"http://www.cnblogs.com/ITmuse/archive/2010/05/29/1747199.html\" target=\"_blank\" rel=\"noopener\">Html Agility Pack基础类介绍及运用</a></p>\n<p>下面直接贴controller源码算了。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"costFrom\"&gt;</span>价格区间起始值<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"costTo\"&gt;</span>价格区间终止值<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"cnName\"&gt;</span>城市拼音首字母<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">Get58CityRoomData</span>(<span class=\"params\"><span class=\"keyword\">int</span> costFrom, <span class=\"keyword\">int</span> costTo, <span class=\"keyword\">string</span> cnName</span>)</span></span><br><span class=\"line\"><span class=\"function\">       </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (costTo&lt;=<span class=\"number\">0</span> || costTo &lt; costFrom)</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123; IsSuccess = <span class=\"literal\">false</span>, Error = <span class=\"string\">\"输入数据有误，请重新输入。\"</span> &#125;);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(cnName))</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123; IsSuccess = <span class=\"literal\">false</span>, </span><br><span class=\"line\">               Error = <span class=\"string\">\"城市定位失败，建议清除浏览器缓存后重新进入。\"</span> &#125;);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">try</span></span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"keyword\">var</span> lstHouse = <span class=\"keyword\">new</span> List&lt;HouseInfo&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">string</span> tempURL = <span class=\"string\">\"http://\"</span> + </span><br><span class=\"line\">               cnName + <span class=\"string\">\".58.com/pinpaigongyu//pn/&#123;0&#125;/?minprice=\"</span></span><br><span class=\"line\">               + costFrom + <span class=\"string\">\"_\"</span> + costTo;</span><br><span class=\"line\"></span><br><span class=\"line\">               Uri uri = <span class=\"keyword\">new</span> Uri(tempURL);</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">var</span> htmlResult = HTTPHelper.GetHTMLByURL(<span class=\"keyword\">string</span>.Format(tempURL, <span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">               HtmlDocument htmlDoc = <span class=\"keyword\">new</span> HtmlDocument();</span><br><span class=\"line\">               htmlDoc.LoadHtml(htmlResult);</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">var</span> countNodes = htmlDoc.DocumentNode.</span><br><span class=\"line\">               SelectSingleNode(<span class=\"string\">\".//span[contains(@class,'list')]\"</span>);</span><br><span class=\"line\">               <span class=\"keyword\">int</span> pageCount = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (countNodes != <span class=\"literal\">null</span> &amp;&amp; countNodes.HasChildNodes)</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   pageCount = Convert.ToInt32(countNodes.ChildNodes[<span class=\"number\">0</span>].InnerText) / <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                   <span class=\"keyword\">if</span>(pageCount==<span class=\"number\">0</span>)</span><br><span class=\"line\">                   &#123;</span><br><span class=\"line\">                       <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123; IsSuccess = <span class=\"literal\">false</span>, </span><br><span class=\"line\">                       Error =<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"没有找到价格区间为&#123;0&#125; - &#123;1&#125;的房子。\"</span>,</span><br><span class=\"line\">                       costFrom,costTo)&#125;);</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> pageIndex = <span class=\"number\">1</span>; pageIndex &lt;= pageCount; pageIndex++)</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   htmlResult = HTTPHelper.GetHTMLByURL(<span class=\"keyword\">string</span>.Format(tempURL, pageIndex));</span><br><span class=\"line\">                   htmlDoc.LoadHtml(htmlResult);</span><br><span class=\"line\">                   <span class=\"keyword\">var</span> roomList = htmlDoc.DocumentNode</span><br><span class=\"line\">                   .SelectNodes(<span class=\"string\">\".//a[contains(@tongji_label,'listclick')]\"</span>);</span><br><span class=\"line\">                   <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> room <span class=\"keyword\">in</span> roomList)</span><br><span class=\"line\">                   &#123;</span><br><span class=\"line\">                       <span class=\"keyword\">var</span> houseTitle = room.SelectSingleNode(<span class=\"string\">\".//h2\"</span>).InnerHtml;</span><br><span class=\"line\">                       <span class=\"keyword\">var</span> houseURL = uri.Host + room.Attributes[<span class=\"string\">\"href\"</span>].Value;</span><br><span class=\"line\">                       <span class=\"keyword\">var</span> house_info_list = houseTitle.Split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">                       <span class=\"keyword\">var</span> house_location = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">                       <span class=\"keyword\">if</span> (house_info_list[<span class=\"number\">1</span>].Contains(<span class=\"string\">\"公寓\"</span>) </span><br><span class=\"line\">                       || house_info_list[<span class=\"number\">1</span>].Contains(<span class=\"string\">\"青年社区\"</span>))</span><br><span class=\"line\">                       &#123;</span><br><span class=\"line\">                           house_location = house_info_list[<span class=\"number\">0</span>];</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                       <span class=\"keyword\">else</span></span><br><span class=\"line\">                       &#123;</span><br><span class=\"line\">                           house_location = house_info_list[<span class=\"number\">1</span>];</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                       <span class=\"keyword\">var</span> momey = room.SelectSingleNode(<span class=\"string\">\".//b\"</span>).InnerHtml;</span><br><span class=\"line\"></span><br><span class=\"line\">                       lstHouse.Add(<span class=\"keyword\">new</span> HouseInfo()</span><br><span class=\"line\">                       &#123;</span><br><span class=\"line\">                           HouseTitle = houseTitle,</span><br><span class=\"line\">                           HouseLocation = house_location,</span><br><span class=\"line\">                           HouseURL = houseURL,</span><br><span class=\"line\">                           Money = momey,</span><br><span class=\"line\">                       &#125;);</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123; IsSuccess = <span class=\"literal\">true</span>, HouseInfos = lstHouse &#125;);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">catch</span> (Exception ex)</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123; IsSuccess = <span class=\"literal\">false</span>,</span><br><span class=\"line\">               Error = <span class=\"string\">\"获取数据异常。\"</span> + ex.ToString() &#125;);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n<p>下面解释一下核心代码。</p>\n<p>片段一：获取总数。</p>\n<p>在观察58同城页面的时候，无意发现其实第一个加载的页面中有一个数据总条数，隐藏在页面里面的。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"listsum\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>1813<span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span>条结果<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这样一来，总页面就很清晰了。页面=总数/每页20条。然后我们根据已知的数据规则去循环请求页面，也就能拿到所有的搜索数据了。</p>\n<p>核心代码，获取总条数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var countNodes = htmlDoc.DocumentNode.</span><br><span class=\"line\">SelectSingleNode(&quot;.//span[contains(@class,&apos;list&apos;)]&quot;);</span><br><span class=\"line\">int pageCount = 10;</span><br><span class=\"line\"></span><br><span class=\"line\">if (countNodes != null &amp;&amp; countNodes.HasChildNodes)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    pageCount = Convert.ToInt32(countNodes.ChildNodes[0].InnerText) / 20;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(pageCount==0)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return Json(new &#123; IsSuccess = false, </span><br><span class=\"line\">        Error =string.Format(&quot;没有找到价格区间为&#123;0&#125; - &#123;1&#125;的房子。&quot;,</span><br><span class=\"line\">        costFrom,costTo)&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在HTMLDoc里面找到一个span的class包含list的节点，获取它子节点（即em）的内容，强制转换成数字，也就是我们要找的总条数了。总条数除以20就得到了页数，下面就是开始循环请求页面了。</p>\n<p>在最上面我们分析过公寓数据分布，数据是li里面套a标签，我们需要的地理位置、房间名称、价格都在a标签里面。</p>\n<p>这样一来，我们这要获得到页面所有带有属性为tongji_label=”listclick”的a标签数据，也就得到了我们所有需要的数据。</p>\n<p>看一下a标签的数据组成：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/pinpaigongyu/26851774057013x.shtml\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"clickLog('from=fcpc_list_gy_sh_tupian')\"</span> </span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">tongji_label</span>=<span class=\"string\">\"listclick\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">lazy_src</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"des\"</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>【合租】菊园新区 柳湖景庭 3室次卧<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"room\"</span>&gt;</span></span><br><span class=\"line\">           3室1厅1卫&amp;nbsp; &amp;nbsp; 13m²&amp;nbsp;&amp;nbsp; 3/6层&amp;nbsp; <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dist\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec\"</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec1\"</span>&gt;</span>公共阳台<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec2\"</span>&gt;</span>公共卫生间<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec3\"</span>&gt;</span>离地铁近<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec4\"</span>&gt;</span>厨房<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"money\"</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>1100<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span>元/月 <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>租房月付<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们要的房间信息在一个h2的标签里面，公寓租金价钱在class=”money”的div标签里面。</p>\n<p>于是有了一下代码：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> pageIndex = <span class=\"number\">1</span>; pageIndex &lt;= pageCount; pageIndex++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    htmlResult = HTTPHelper.GetHTMLByURL(<span class=\"keyword\">string</span>.Format(tempURL, pageIndex));</span><br><span class=\"line\">    htmlDoc.LoadHtml(htmlResult);</span><br><span class=\"line\">    <span class=\"comment\">//找到所有的带有属性为tongji_label=\"listclick\"的a标签数据</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> roomList = htmlDoc.DocumentNode.SelectNodes(<span class=\"string\">\".//a[contains(@tongji_label,'listclick')]\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> room <span class=\"keyword\">in</span> roomList)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取其中为h2的房间数据，然后用空格分割成数组</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> houseTitle = room.SelectSingleNode(<span class=\"string\">\".//h2\"</span>).InnerHtml;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> houseURL = uri.Host + room.Attributes[<span class=\"string\">\"href\"</span>].Value;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> house_info_list = houseTitle.Split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> house_location = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">        <span class=\"comment\">//分割出来的数组，第二个包含公寓或青年社区，则取第一个数据为所在地区，否则取第二个数据</span></span><br><span class=\"line\">        <span class=\"comment\">//【合租】菊园新区 柳湖景庭 3室次卧 </span></span><br><span class=\"line\">        <span class=\"comment\">// 所在地区为：菊园新区</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (house_info_list[<span class=\"number\">1</span>].Contains(<span class=\"string\">\"公寓\"</span>) || house_info_list[<span class=\"number\">1</span>].Contains(<span class=\"string\">\"青年社区\"</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            house_location = house_info_list[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            house_location = house_info_list[<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//获取标签为b的数据，价格就在里面了</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> momey = room.SelectSingleNode(<span class=\"string\">\".//b\"</span>).InnerHtml;</span><br><span class=\"line\"></span><br><span class=\"line\">        lstHouse.Add(<span class=\"keyword\">new</span> HouseInfo()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            HouseTitle = houseTitle,</span><br><span class=\"line\">            HouseLocation = house_location,</span><br><span class=\"line\">            HouseURL = houseURL,</span><br><span class=\"line\">            Money = momey,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>后端来说，基本就这些内容了。</p>\n<p>还有一些前端高德地图接口调用下次再讲吧，要陪女票玩游戏去了…</p>\n<p>^-^</p>\n<p>以上源码地址：<a href=\"https://github.com/liguobao/58HouseSearch\" target=\"_blank\" rel=\"noopener\">https://github.com/liguobao/58HouseSearch</a></p>\n<p>在线地址：<a href=\"https://woyaozufang.live\" target=\"_blank\" rel=\"noopener\">58公寓高德搜房(全国版)：https://woyaozufang.live</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>周末闲着无事刷知乎发现一个爬虫教程（<a href=\"https://zhuanlan.zhihu.com/p/21883516\" target=\"_blank\" rel=\"noopener\">高德API+Python解决租房问题</a><br>），正中最近想要换地方住的痛点。然后大早上懒觉都没睡就屁颠屁颠开始研究这个教程了。这样教程在实验楼网站里面有手把手步骤，有兴趣自取（<a href=\"https://www.shiyanlou.com/courses/599\" target=\"_blank\" rel=\"noopener\">实验楼：高德API+Python解决租房问题</a>）。</p>\n<p>整体项目主要分成两步：</p>\n<p>第一步:python爬取数据，生成数据文件;</p>\n<p>第二部：导入数据文件，在地图上显示房源，设定上班地点后自动计算出行路线和路程时间。</p>\n<p>研究了一下这个教程之后发现这货做得实在有点粗糙，只能当教程用，完全没有通用实际价值。</p>\n<p>而且这里面还有个更大的问题：教程是基于北京的数据来做的，而我在上海…</p>\n<p>虽然说改改python数据源，改改导航页面JS完事。不过是在难用…</p>\n<p>于是，开始自己动手了。先看原有的python代码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#-*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"><span class=\"keyword\">from</span> urlparse <span class=\"keyword\">import</span> urljoin</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> csv</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">\"http://bj.58.com/pinpaigongyu/pn/&#123;page&#125;/?minprice=2000_4000\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#已完成的页数序号，初时为0</span></span><br><span class=\"line\">page = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">csv_file = open(<span class=\"string\">\"rent.csv\"</span>,<span class=\"string\">\"wb\"</span>) </span><br><span class=\"line\">csv_writer = csv.writer(csv_file, delimiter=<span class=\"string\">','</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    page += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"fetch: \"</span>, url.format(page=page)</span><br><span class=\"line\">    response = requests.get(url.format(page=page))</span><br><span class=\"line\">    html = BeautifulSoup(response.text)</span><br><span class=\"line\">    house_list = html.select(<span class=\"string\">\".list &gt; li\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 循环在读不到新的房源时结束</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> house_list:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> house <span class=\"keyword\">in</span> house_list:</span><br><span class=\"line\">        house_title = house.select(<span class=\"string\">\"h2\"</span>)[<span class=\"number\">0</span>].string.encode(<span class=\"string\">\"utf8\"</span>)</span><br><span class=\"line\">        house_url = urljoin(url, house.select(<span class=\"string\">\"a\"</span>)[<span class=\"number\">0</span>][<span class=\"string\">\"href\"</span>])</span><br><span class=\"line\">        house_info_list = house_title.split()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 如果第二列是公寓名则取第一列作为地址</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">\"公寓\"</span> <span class=\"keyword\">in</span> house_info_list[<span class=\"number\">1</span>] <span class=\"keyword\">or</span> <span class=\"string\">\"青年社区\"</span> <span class=\"keyword\">in</span> house_info_list[<span class=\"number\">1</span>]:</span><br><span class=\"line\">            house_location = house_info_list[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            house_location = house_info_list[<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        house_money = house.select(<span class=\"string\">\".money\"</span>)[<span class=\"number\">0</span>].select(<span class=\"string\">\"b\"</span>)[<span class=\"number\">0</span>].string.encode(<span class=\"string\">\"utf8\"</span>)</span><br><span class=\"line\">        csv_writer.writerow([house_title, house_location, house_money, house_url])</span><br><span class=\"line\"></span><br><span class=\"line\">csv_file.close()</span><br></pre></td></tr></table></figure>\n<p>整个代码基本思路就是，爬取<a href=\"http://bj.58.com/pinpaigongyu/pn/{page}/?minprice=2000_4000页面数据，然后扔到创建的csv文件里面作为下一步的数据源。\" target=\"_blank\" rel=\"noopener\">http://bj.58.com/pinpaigongyu/pn/{page}/?minprice=2000_4000页面数据，然后扔到创建的csv文件里面作为下一步的数据源。</a><br>通过研究<a href=\"http://bj.58.com/pinpaigongyu/pn/{page}/?minprice=2000_4000这个页面的数据，我们可以很容易发现，在页面中，每条数据都是一个li标签。\" target=\"_blank\" rel=\"noopener\">http://bj.58.com/pinpaigongyu/pn/{page}/?minprice=2000_4000这个页面的数据，我们可以很容易发现，在页面中，每条数据都是一个li标签。</a></p>\n<p>如下图：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/685849af-2ccc-4454-a26e-e2a1c3001378\" alt=\"\"></p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/909df442-b1d9-4073-84d0-99a5b3cc9022\" alt=\"\"></p>\n<h4 id=\"li结构如下：\"><a href=\"#li结构如下：\" class=\"headerlink\" title=\"li结构如下：\"></a>li结构如下：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">logr</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/pinpaigongyu/26851774057013x.shtml\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"clickLog('from=fcpc_list_gy_sh_tupian')\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">tongji_label</span>=<span class=\"string\">\"listclick\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">lazy_src</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"des\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>【合租】菊园新区 柳湖景庭 3室次卧<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"room\"</span>&gt;</span></span><br><span class=\"line\">            3室1厅1卫&amp;nbsp; &amp;nbsp; 13m²&amp;nbsp;&amp;nbsp; 3/6层&amp;nbsp; <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dist\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec1\"</span>&gt;</span>公共阳台<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec2\"</span>&gt;</span>公共卫生间<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec3\"</span>&gt;</span>离地铁近<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec4\"</span>&gt;</span>厨房<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"money\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>1100<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span>元/月 <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>租房月付<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>照着python的思路，是把所有的li标签的数据提取出来的。</p>\n<p>我自己研究的时候又看了下，其实数据都在一个属性为tongji_label=”listclick”的a标签里面。</p>\n<p>一般来说，字符匹配用正则表达式完事，奈何正则水平实在不佳。我还是选择直接上HtmlAgilityPack算了。<br>关于HtmlAgilityPack的介绍还是看官网算了。<a href=\"http://htmlagilitypack.codeplex.com/\" target=\"_blank\" rel=\"noopener\">HtmlAgilityPack</a></p>\n<p>HtmlAgilityPack是.NET一个比较强大的HTML处理类库了，基本可以让你像JS来操作HTML标签。<br>安装这货很简单，直接在Nuget PM包管理工具里面输入下面命令就完事了。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Install-Package HtmlAgilityPack</span><br></pre></td></tr></table></figure>\n<p>有需要使用教程可以看这个：<a href=\"http://www.cnblogs.com/ITmuse/archive/2010/05/29/1747199.html\" target=\"_blank\" rel=\"noopener\">Html Agility Pack基础类介绍及运用</a></p>\n<p>下面直接贴controller源码算了。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"costFrom\"&gt;</span>价格区间起始值<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"costTo\"&gt;</span>价格区间终止值<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"cnName\"&gt;</span>城市拼音首字母<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">Get58CityRoomData</span>(<span class=\"params\"><span class=\"keyword\">int</span> costFrom, <span class=\"keyword\">int</span> costTo, <span class=\"keyword\">string</span> cnName</span>)</span></span><br><span class=\"line\"><span class=\"function\">       </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (costTo&lt;=<span class=\"number\">0</span> || costTo &lt; costFrom)</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123; IsSuccess = <span class=\"literal\">false</span>, Error = <span class=\"string\">\"输入数据有误，请重新输入。\"</span> &#125;);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(cnName))</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123; IsSuccess = <span class=\"literal\">false</span>, </span><br><span class=\"line\">               Error = <span class=\"string\">\"城市定位失败，建议清除浏览器缓存后重新进入。\"</span> &#125;);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">try</span></span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"keyword\">var</span> lstHouse = <span class=\"keyword\">new</span> List&lt;HouseInfo&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">string</span> tempURL = <span class=\"string\">\"http://\"</span> + </span><br><span class=\"line\">               cnName + <span class=\"string\">\".58.com/pinpaigongyu//pn/&#123;0&#125;/?minprice=\"</span></span><br><span class=\"line\">               + costFrom + <span class=\"string\">\"_\"</span> + costTo;</span><br><span class=\"line\"></span><br><span class=\"line\">               Uri uri = <span class=\"keyword\">new</span> Uri(tempURL);</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">var</span> htmlResult = HTTPHelper.GetHTMLByURL(<span class=\"keyword\">string</span>.Format(tempURL, <span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">               HtmlDocument htmlDoc = <span class=\"keyword\">new</span> HtmlDocument();</span><br><span class=\"line\">               htmlDoc.LoadHtml(htmlResult);</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">var</span> countNodes = htmlDoc.DocumentNode.</span><br><span class=\"line\">               SelectSingleNode(<span class=\"string\">\".//span[contains(@class,'list')]\"</span>);</span><br><span class=\"line\">               <span class=\"keyword\">int</span> pageCount = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (countNodes != <span class=\"literal\">null</span> &amp;&amp; countNodes.HasChildNodes)</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   pageCount = Convert.ToInt32(countNodes.ChildNodes[<span class=\"number\">0</span>].InnerText) / <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                   <span class=\"keyword\">if</span>(pageCount==<span class=\"number\">0</span>)</span><br><span class=\"line\">                   &#123;</span><br><span class=\"line\">                       <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123; IsSuccess = <span class=\"literal\">false</span>, </span><br><span class=\"line\">                       Error =<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"没有找到价格区间为&#123;0&#125; - &#123;1&#125;的房子。\"</span>,</span><br><span class=\"line\">                       costFrom,costTo)&#125;);</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> pageIndex = <span class=\"number\">1</span>; pageIndex &lt;= pageCount; pageIndex++)</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   htmlResult = HTTPHelper.GetHTMLByURL(<span class=\"keyword\">string</span>.Format(tempURL, pageIndex));</span><br><span class=\"line\">                   htmlDoc.LoadHtml(htmlResult);</span><br><span class=\"line\">                   <span class=\"keyword\">var</span> roomList = htmlDoc.DocumentNode</span><br><span class=\"line\">                   .SelectNodes(<span class=\"string\">\".//a[contains(@tongji_label,'listclick')]\"</span>);</span><br><span class=\"line\">                   <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> room <span class=\"keyword\">in</span> roomList)</span><br><span class=\"line\">                   &#123;</span><br><span class=\"line\">                       <span class=\"keyword\">var</span> houseTitle = room.SelectSingleNode(<span class=\"string\">\".//h2\"</span>).InnerHtml;</span><br><span class=\"line\">                       <span class=\"keyword\">var</span> houseURL = uri.Host + room.Attributes[<span class=\"string\">\"href\"</span>].Value;</span><br><span class=\"line\">                       <span class=\"keyword\">var</span> house_info_list = houseTitle.Split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">                       <span class=\"keyword\">var</span> house_location = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">                       <span class=\"keyword\">if</span> (house_info_list[<span class=\"number\">1</span>].Contains(<span class=\"string\">\"公寓\"</span>) </span><br><span class=\"line\">                       || house_info_list[<span class=\"number\">1</span>].Contains(<span class=\"string\">\"青年社区\"</span>))</span><br><span class=\"line\">                       &#123;</span><br><span class=\"line\">                           house_location = house_info_list[<span class=\"number\">0</span>];</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                       <span class=\"keyword\">else</span></span><br><span class=\"line\">                       &#123;</span><br><span class=\"line\">                           house_location = house_info_list[<span class=\"number\">1</span>];</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                       <span class=\"keyword\">var</span> momey = room.SelectSingleNode(<span class=\"string\">\".//b\"</span>).InnerHtml;</span><br><span class=\"line\"></span><br><span class=\"line\">                       lstHouse.Add(<span class=\"keyword\">new</span> HouseInfo()</span><br><span class=\"line\">                       &#123;</span><br><span class=\"line\">                           HouseTitle = houseTitle,</span><br><span class=\"line\">                           HouseLocation = house_location,</span><br><span class=\"line\">                           HouseURL = houseURL,</span><br><span class=\"line\">                           Money = momey,</span><br><span class=\"line\">                       &#125;);</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123; IsSuccess = <span class=\"literal\">true</span>, HouseInfos = lstHouse &#125;);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">catch</span> (Exception ex)</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123; IsSuccess = <span class=\"literal\">false</span>,</span><br><span class=\"line\">               Error = <span class=\"string\">\"获取数据异常。\"</span> + ex.ToString() &#125;);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n<p>下面解释一下核心代码。</p>\n<p>片段一：获取总数。</p>\n<p>在观察58同城页面的时候，无意发现其实第一个加载的页面中有一个数据总条数，隐藏在页面里面的。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"listsum\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>1813<span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span>条结果<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这样一来，总页面就很清晰了。页面=总数/每页20条。然后我们根据已知的数据规则去循环请求页面，也就能拿到所有的搜索数据了。</p>\n<p>核心代码，获取总条数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var countNodes = htmlDoc.DocumentNode.</span><br><span class=\"line\">SelectSingleNode(&quot;.//span[contains(@class,&apos;list&apos;)]&quot;);</span><br><span class=\"line\">int pageCount = 10;</span><br><span class=\"line\"></span><br><span class=\"line\">if (countNodes != null &amp;&amp; countNodes.HasChildNodes)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    pageCount = Convert.ToInt32(countNodes.ChildNodes[0].InnerText) / 20;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(pageCount==0)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return Json(new &#123; IsSuccess = false, </span><br><span class=\"line\">        Error =string.Format(&quot;没有找到价格区间为&#123;0&#125; - &#123;1&#125;的房子。&quot;,</span><br><span class=\"line\">        costFrom,costTo)&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在HTMLDoc里面找到一个span的class包含list的节点，获取它子节点（即em）的内容，强制转换成数字，也就是我们要找的总条数了。总条数除以20就得到了页数，下面就是开始循环请求页面了。</p>\n<p>在最上面我们分析过公寓数据分布，数据是li里面套a标签，我们需要的地理位置、房间名称、价格都在a标签里面。</p>\n<p>这样一来，我们这要获得到页面所有带有属性为tongji_label=”listclick”的a标签数据，也就得到了我们所有需要的数据。</p>\n<p>看一下a标签的数据组成：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/pinpaigongyu/26851774057013x.shtml\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"clickLog('from=fcpc_list_gy_sh_tupian')\"</span> </span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">tongji_label</span>=<span class=\"string\">\"listclick\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">lazy_src</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"des\"</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>【合租】菊园新区 柳湖景庭 3室次卧<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"room\"</span>&gt;</span></span><br><span class=\"line\">           3室1厅1卫&amp;nbsp; &amp;nbsp; 13m²&amp;nbsp;&amp;nbsp; 3/6层&amp;nbsp; <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dist\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec\"</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec1\"</span>&gt;</span>公共阳台<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec2\"</span>&gt;</span>公共卫生间<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec3\"</span>&gt;</span>离地铁近<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"spec4\"</span>&gt;</span>厨房<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"money\"</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>1100<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span>元/月 <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>租房月付<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们要的房间信息在一个h2的标签里面，公寓租金价钱在class=”money”的div标签里面。</p>\n<p>于是有了一下代码：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> pageIndex = <span class=\"number\">1</span>; pageIndex &lt;= pageCount; pageIndex++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    htmlResult = HTTPHelper.GetHTMLByURL(<span class=\"keyword\">string</span>.Format(tempURL, pageIndex));</span><br><span class=\"line\">    htmlDoc.LoadHtml(htmlResult);</span><br><span class=\"line\">    <span class=\"comment\">//找到所有的带有属性为tongji_label=\"listclick\"的a标签数据</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> roomList = htmlDoc.DocumentNode.SelectNodes(<span class=\"string\">\".//a[contains(@tongji_label,'listclick')]\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> room <span class=\"keyword\">in</span> roomList)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取其中为h2的房间数据，然后用空格分割成数组</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> houseTitle = room.SelectSingleNode(<span class=\"string\">\".//h2\"</span>).InnerHtml;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> houseURL = uri.Host + room.Attributes[<span class=\"string\">\"href\"</span>].Value;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> house_info_list = houseTitle.Split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> house_location = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">        <span class=\"comment\">//分割出来的数组，第二个包含公寓或青年社区，则取第一个数据为所在地区，否则取第二个数据</span></span><br><span class=\"line\">        <span class=\"comment\">//【合租】菊园新区 柳湖景庭 3室次卧 </span></span><br><span class=\"line\">        <span class=\"comment\">// 所在地区为：菊园新区</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (house_info_list[<span class=\"number\">1</span>].Contains(<span class=\"string\">\"公寓\"</span>) || house_info_list[<span class=\"number\">1</span>].Contains(<span class=\"string\">\"青年社区\"</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            house_location = house_info_list[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            house_location = house_info_list[<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//获取标签为b的数据，价格就在里面了</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> momey = room.SelectSingleNode(<span class=\"string\">\".//b\"</span>).InnerHtml;</span><br><span class=\"line\"></span><br><span class=\"line\">        lstHouse.Add(<span class=\"keyword\">new</span> HouseInfo()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            HouseTitle = houseTitle,</span><br><span class=\"line\">            HouseLocation = house_location,</span><br><span class=\"line\">            HouseURL = houseURL,</span><br><span class=\"line\">            Money = momey,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>后端来说，基本就这些内容了。</p>\n<p>还有一些前端高德地图接口调用下次再讲吧，要陪女票玩游戏去了…</p>\n<p>^-^</p>\n<p>以上源码地址：<a href=\"https://github.com/liguobao/58HouseSearch\" target=\"_blank\" rel=\"noopener\">https://github.com/liguobao/58HouseSearch</a></p>\n<p>在线地址：<a href=\"https://woyaozufang.live\" target=\"_blank\" rel=\"noopener\">58公寓高德搜房(全国版)：https://woyaozufang.live</a></p>\n"},{"layout":"post","title":"C# join用法","date":"2016-10-03T16:00:00.000Z","_content":"# Join\n\n 连接：内连接、外连接、左连接、右连接。\nSQL的Join这里就不多说了，\n今天主要是看一下LINQ的Join用法，以及Enumerable.Join()的用法。\n\nJoin用于连接数据，首先就是数据之间有联系咯。\n\n先说Enumerable.Join()。\n参数类型如下：\n\n```C#\n\t\t\tpublic static IEnumerable<TResult> Join<TOuter, TInner, TKey, TResult>\n\t\t\t(      \n\t\t\t         this IEnumerable<TOuter> outer,\n\t\t\t        IEnumerable<TInner> inner,\n\t\t\t        Func<TOuter, TKey> outerKeySelector,\n\t\t\t        Func<TInner, TKey> innerKeySelector,\n\t\t\t        Func<TOuter, TInner, TResult> resultSelector\n\t\t\t) \n```\n\n类型参数\nTOuter\n第一个序列中的元素的类型。\nTInner\n第二个序列中的元素的类型。\nTKey\n键选择器函数返回的键的类型。\nTResult\n结果元素的类型。\n参数\nouter\n类型：System.Collections.Generic.IEnumerable<TOuter>\n要联接的第一个序列。\ninner\n类型：System.Collections.Generic.IEnumerable<TInner>\n要与第一个序列联接的序列。\nouterKeySelector\n类型：System.Func<TOuter, TKey>\n用于从第一个序列的每个元素提取联接键的函数。\ninnerKeySelector\n类型：System.Func<TInner, TKey>\n用于从第二个序列的每个元素提取联接键的函数。\nresultSelector\n类型：System.Func<TOuter, TInner, TResult>\n用于从两个匹配元素创建结果元素的函数。\n返回值\n类型：System.Collections.Generic.IEnumerable<TResult>\nIEnumerable&lt;T&gt; that has elements of type TResult that are obtained by performing an inner join on two sequences.\" xml:space=\"preserve\">一个具有 TResult 类型元素的 IEnumerable<T>，这些元素是通过对两个序列执行内部联接得来的。\n使用说明\n在 Visual Basic 和 C# 中，可以在 IEnumerable<TOuter> 类型的任何对象上将此方法作为实例方法来调用。当使用实例方法语法调用此方法时，请省略第一个参数。有关详细信息，请参阅 扩展方法 (Visual Basic) 或 扩展方法（C# 编程指南）。\n \n先上一个MSDN的例子。\n       \n         public static void JoinEx1()         \n         {\n\t       Person magnus = new Person { Name = \"Hedlund, Magnus\" };\n\t       Pet barley = new Pet { Name = \"Barley\", Owner = terry };\n\t       Person terry = new Person { Name = \"Adams, Terry\" };\n\t       Person charlotte = new Person { Name = \"Weiss, \n\t       Charlotte\" };\n\t       Pet boots = new Pet { Name = \"Boots\", Owner = terry };\n\t       Pet whiskers = new Pet { Name = \"Whiskers\", \n\t       Owner = charlotte};\n\t       Pet daisy = new Pet { Name = \"Daisy\", Owner = magnus };\n\n        List<Person> people = new List<Person> \n        { magnus, terry, charlotte };\n        List<Pet> pets = new List<Pet> \n        { barley, boots, whiskers, daisy };\n\n        // Create a list of Person-Pet pairs where \n        // each element is an anonymous type that contains a\n        // Pet's name and the name of the Person that owns the Pet.\n        var query =\n            people.Join(\n                        pets,//需要Join的另一个数据源\n              person => person,//自己用来比较的key， lambda 表达式\n         pet => pet.Owner,//另一个数据源用来比较的key， lambda 表达式\n    (person, pet) =>new { OwnerName = person.Name, Pet = pet.Name } \n                   //想要取出来的数据，支持匿名对象， lambda 表达式);\n        foreach (var obj in query)\n        {\n          Console.WriteLine( \"{0} - {1}\",obj.OwnerName,obj.Pet);\n        }\n    }\n\n LINQ的Join\n同样是上面的数据，如果换成LINQ的Join，写法如下：\n            var query = from person in people // 第一个数据源\n                      join pet in pets            //第二个数据源\n                      on person equals pet.Owner  //Join条件\n                      select  new { OwnerName = person.Name, Pet = pet.Name };  \n                      //要到得到的数据。\n\n\n上面两种写法得到的结果都是内链接结果，至于左连接、右连接、外连接....\n等我下次有心情再更新吧，再不走家里的键盘又要坏了。 \n\n一些资料链接：\nhttps://msdn.microsoft.com/zh-cn/library/bb311040.aspx\nhttps://msdn.microsoft.com/zh-cn/library/bb534675%28v=vs.110%29.aspx?f=255&MSPPError=-2147217396\nhttp://www.cnblogs.com/Ivony/archive/2008/08/18/1270555.html\nhttp://www.cnblogs.com/Ivony/archive/2008/08/28/1278643.html\nhttp://www.cnblogs.com/Ivony/archive/2008/10/14/1309807.html ; \n\n\nLINQ GroupJoin 实现左连接\nvar queryGroup = from person in people // 第一个数据源\n                                join pet in pets //第二个数据源\n                                on person equals pet.Owner into ps //加了into,华丽变身GroupJoin\n                                select new { OwnerName = person.Name, Pet = ps }; //要到得到的数据。 ","source":"_posts/C#-Join.md","raw":"---\nlayout: post\ntitle: C# join用法\ncategory: dotnet\ndate: 2016-10-04\ntags:\n- dotnet core\n---\n# Join\n\n 连接：内连接、外连接、左连接、右连接。\nSQL的Join这里就不多说了，\n今天主要是看一下LINQ的Join用法，以及Enumerable.Join()的用法。\n\nJoin用于连接数据，首先就是数据之间有联系咯。\n\n先说Enumerable.Join()。\n参数类型如下：\n\n```C#\n\t\t\tpublic static IEnumerable<TResult> Join<TOuter, TInner, TKey, TResult>\n\t\t\t(      \n\t\t\t         this IEnumerable<TOuter> outer,\n\t\t\t        IEnumerable<TInner> inner,\n\t\t\t        Func<TOuter, TKey> outerKeySelector,\n\t\t\t        Func<TInner, TKey> innerKeySelector,\n\t\t\t        Func<TOuter, TInner, TResult> resultSelector\n\t\t\t) \n```\n\n类型参数\nTOuter\n第一个序列中的元素的类型。\nTInner\n第二个序列中的元素的类型。\nTKey\n键选择器函数返回的键的类型。\nTResult\n结果元素的类型。\n参数\nouter\n类型：System.Collections.Generic.IEnumerable<TOuter>\n要联接的第一个序列。\ninner\n类型：System.Collections.Generic.IEnumerable<TInner>\n要与第一个序列联接的序列。\nouterKeySelector\n类型：System.Func<TOuter, TKey>\n用于从第一个序列的每个元素提取联接键的函数。\ninnerKeySelector\n类型：System.Func<TInner, TKey>\n用于从第二个序列的每个元素提取联接键的函数。\nresultSelector\n类型：System.Func<TOuter, TInner, TResult>\n用于从两个匹配元素创建结果元素的函数。\n返回值\n类型：System.Collections.Generic.IEnumerable<TResult>\nIEnumerable&lt;T&gt; that has elements of type TResult that are obtained by performing an inner join on two sequences.\" xml:space=\"preserve\">一个具有 TResult 类型元素的 IEnumerable<T>，这些元素是通过对两个序列执行内部联接得来的。\n使用说明\n在 Visual Basic 和 C# 中，可以在 IEnumerable<TOuter> 类型的任何对象上将此方法作为实例方法来调用。当使用实例方法语法调用此方法时，请省略第一个参数。有关详细信息，请参阅 扩展方法 (Visual Basic) 或 扩展方法（C# 编程指南）。\n \n先上一个MSDN的例子。\n       \n         public static void JoinEx1()         \n         {\n\t       Person magnus = new Person { Name = \"Hedlund, Magnus\" };\n\t       Pet barley = new Pet { Name = \"Barley\", Owner = terry };\n\t       Person terry = new Person { Name = \"Adams, Terry\" };\n\t       Person charlotte = new Person { Name = \"Weiss, \n\t       Charlotte\" };\n\t       Pet boots = new Pet { Name = \"Boots\", Owner = terry };\n\t       Pet whiskers = new Pet { Name = \"Whiskers\", \n\t       Owner = charlotte};\n\t       Pet daisy = new Pet { Name = \"Daisy\", Owner = magnus };\n\n        List<Person> people = new List<Person> \n        { magnus, terry, charlotte };\n        List<Pet> pets = new List<Pet> \n        { barley, boots, whiskers, daisy };\n\n        // Create a list of Person-Pet pairs where \n        // each element is an anonymous type that contains a\n        // Pet's name and the name of the Person that owns the Pet.\n        var query =\n            people.Join(\n                        pets,//需要Join的另一个数据源\n              person => person,//自己用来比较的key， lambda 表达式\n         pet => pet.Owner,//另一个数据源用来比较的key， lambda 表达式\n    (person, pet) =>new { OwnerName = person.Name, Pet = pet.Name } \n                   //想要取出来的数据，支持匿名对象， lambda 表达式);\n        foreach (var obj in query)\n        {\n          Console.WriteLine( \"{0} - {1}\",obj.OwnerName,obj.Pet);\n        }\n    }\n\n LINQ的Join\n同样是上面的数据，如果换成LINQ的Join，写法如下：\n            var query = from person in people // 第一个数据源\n                      join pet in pets            //第二个数据源\n                      on person equals pet.Owner  //Join条件\n                      select  new { OwnerName = person.Name, Pet = pet.Name };  \n                      //要到得到的数据。\n\n\n上面两种写法得到的结果都是内链接结果，至于左连接、右连接、外连接....\n等我下次有心情再更新吧，再不走家里的键盘又要坏了。 \n\n一些资料链接：\nhttps://msdn.microsoft.com/zh-cn/library/bb311040.aspx\nhttps://msdn.microsoft.com/zh-cn/library/bb534675%28v=vs.110%29.aspx?f=255&MSPPError=-2147217396\nhttp://www.cnblogs.com/Ivony/archive/2008/08/18/1270555.html\nhttp://www.cnblogs.com/Ivony/archive/2008/08/28/1278643.html\nhttp://www.cnblogs.com/Ivony/archive/2008/10/14/1309807.html ; \n\n\nLINQ GroupJoin 实现左连接\nvar queryGroup = from person in people // 第一个数据源\n                                join pet in pets //第二个数据源\n                                on person equals pet.Owner into ps //加了into,华丽变身GroupJoin\n                                select new { OwnerName = person.Name, Pet = ps }; //要到得到的数据。 ","slug":"C#-Join","published":1,"updated":"2018-05-17T13:34:36.859Z","comments":1,"photos":[],"link":"","_id":"cjhal1fvv000cp631j90gyfm1","content":"<h1 id=\"Join\"><a href=\"#Join\" class=\"headerlink\" title=\"Join\"></a>Join</h1><p> 连接：内连接、外连接、左连接、右连接。<br>SQL的Join这里就不多说了，<br>今天主要是看一下LINQ的Join用法，以及Enumerable.Join()的用法。</p>\n<p>Join用于连接数据，首先就是数据之间有联系咯。</p>\n<p>先说Enumerable.Join()。<br>参数类型如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static IEnumerable&lt;TResult&gt; Join&lt;TOuter, TInner, TKey, TResult&gt;</span><br><span class=\"line\">(      </span><br><span class=\"line\">         this IEnumerable&lt;TOuter&gt; outer,</span><br><span class=\"line\">        IEnumerable&lt;TInner&gt; inner,</span><br><span class=\"line\">        Func&lt;TOuter, TKey&gt; outerKeySelector,</span><br><span class=\"line\">        Func&lt;TInner, TKey&gt; innerKeySelector,</span><br><span class=\"line\">        Func&lt;TOuter, TInner, TResult&gt; resultSelector</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>类型参数<br>TOuter<br>第一个序列中的元素的类型。<br>TInner<br>第二个序列中的元素的类型。<br>TKey<br>键选择器函数返回的键的类型。<br>TResult<br>结果元素的类型。<br>参数<br>outer<br>类型：System.Collections.Generic.IEnumerable<touter><br>要联接的第一个序列。<br>inner<br>类型：System.Collections.Generic.IEnumerable<tinner><br>要与第一个序列联接的序列。<br>outerKeySelector<br>类型：System.Func&lt;TOuter, TKey&gt;<br>用于从第一个序列的每个元素提取联接键的函数。<br>innerKeySelector<br>类型：System.Func&lt;TInner, TKey&gt;<br>用于从第二个序列的每个元素提取联接键的函数。<br>resultSelector<br>类型：System.Func&lt;TOuter, TInner, TResult&gt;<br>用于从两个匹配元素创建结果元素的函数。<br>返回值<br>类型：System.Collections.Generic.IEnumerable<tresult><br>IEnumerable&lt;T&gt; that has elements of type TResult that are obtained by performing an inner join on two sequences.” xml:space=”preserve”&gt;一个具有 TResult 类型元素的 IEnumerable<t>，这些元素是通过对两个序列执行内部联接得来的。<br>使用说明<br>在 Visual Basic 和 C# 中，可以在 IEnumerable<touter> 类型的任何对象上将此方法作为实例方法来调用。当使用实例方法语法调用此方法时，请省略第一个参数。有关详细信息，请参阅 扩展方法 (Visual Basic) 或 扩展方法（C# 编程指南）。</touter></t></tresult></tinner></touter></p>\n<p>先上一个MSDN的例子。</p>\n<pre><code>     public static void JoinEx1()         \n     {\n       Person magnus = new Person { Name = &quot;Hedlund, Magnus&quot; };\n       Pet barley = new Pet { Name = &quot;Barley&quot;, Owner = terry };\n       Person terry = new Person { Name = &quot;Adams, Terry&quot; };\n       Person charlotte = new Person { Name = &quot;Weiss, \n       Charlotte&quot; };\n       Pet boots = new Pet { Name = &quot;Boots&quot;, Owner = terry };\n       Pet whiskers = new Pet { Name = &quot;Whiskers&quot;, \n       Owner = charlotte};\n       Pet daisy = new Pet { Name = &quot;Daisy&quot;, Owner = magnus };\n\n    List&lt;Person&gt; people = new List&lt;Person&gt; \n    { magnus, terry, charlotte };\n    List&lt;Pet&gt; pets = new List&lt;Pet&gt; \n    { barley, boots, whiskers, daisy };\n\n    // Create a list of Person-Pet pairs where \n    // each element is an anonymous type that contains a\n    // Pet&apos;s name and the name of the Person that owns the Pet.\n    var query =\n        people.Join(\n                    pets,//需要Join的另一个数据源\n          person =&gt; person,//自己用来比较的key， lambda 表达式\n     pet =&gt; pet.Owner,//另一个数据源用来比较的key， lambda 表达式\n(person, pet) =&gt;new { OwnerName = person.Name, Pet = pet.Name } \n               //想要取出来的数据，支持匿名对象， lambda 表达式);\n    foreach (var obj in query)\n    {\n      Console.WriteLine( &quot;{0} - {1}&quot;,obj.OwnerName,obj.Pet);\n    }\n}\n</code></pre><p> LINQ的Join<br>同样是上面的数据，如果换成LINQ的Join，写法如下：<br>            var query = from person in people // 第一个数据源<br>                      join pet in pets            //第二个数据源<br>                      on person equals pet.Owner  //Join条件<br>                      select  new { OwnerName = person.Name, Pet = pet.Name };<br>                      //要到得到的数据。</p>\n<p>上面两种写法得到的结果都是内链接结果，至于左连接、右连接、外连接….<br>等我下次有心情再更新吧，再不走家里的键盘又要坏了。 </p>\n<p>一些资料链接：<br><a href=\"https://msdn.microsoft.com/zh-cn/library/bb311040.aspx\" target=\"_blank\" rel=\"noopener\">https://msdn.microsoft.com/zh-cn/library/bb311040.aspx</a><br><a href=\"https://msdn.microsoft.com/zh-cn/library/bb534675%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396\" target=\"_blank\" rel=\"noopener\">https://msdn.microsoft.com/zh-cn/library/bb534675%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396</a><br><a href=\"http://www.cnblogs.com/Ivony/archive/2008/08/18/1270555.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/Ivony/archive/2008/08/18/1270555.html</a><br><a href=\"http://www.cnblogs.com/Ivony/archive/2008/08/28/1278643.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/Ivony/archive/2008/08/28/1278643.html</a><br><a href=\"http://www.cnblogs.com/Ivony/archive/2008/10/14/1309807.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/Ivony/archive/2008/10/14/1309807.html</a> ; </p>\n<p>LINQ GroupJoin 实现左连接<br>var queryGroup = from person in people // 第一个数据源<br>                                join pet in pets //第二个数据源<br>                                on person equals pet.Owner into ps //加了into,华丽变身GroupJoin<br>                                select new { OwnerName = person.Name, Pet = ps }; //要到得到的数据。 </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Join\"><a href=\"#Join\" class=\"headerlink\" title=\"Join\"></a>Join</h1><p> 连接：内连接、外连接、左连接、右连接。<br>SQL的Join这里就不多说了，<br>今天主要是看一下LINQ的Join用法，以及Enumerable.Join()的用法。</p>\n<p>Join用于连接数据，首先就是数据之间有联系咯。</p>\n<p>先说Enumerable.Join()。<br>参数类型如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static IEnumerable&lt;TResult&gt; Join&lt;TOuter, TInner, TKey, TResult&gt;</span><br><span class=\"line\">(      </span><br><span class=\"line\">         this IEnumerable&lt;TOuter&gt; outer,</span><br><span class=\"line\">        IEnumerable&lt;TInner&gt; inner,</span><br><span class=\"line\">        Func&lt;TOuter, TKey&gt; outerKeySelector,</span><br><span class=\"line\">        Func&lt;TInner, TKey&gt; innerKeySelector,</span><br><span class=\"line\">        Func&lt;TOuter, TInner, TResult&gt; resultSelector</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>类型参数<br>TOuter<br>第一个序列中的元素的类型。<br>TInner<br>第二个序列中的元素的类型。<br>TKey<br>键选择器函数返回的键的类型。<br>TResult<br>结果元素的类型。<br>参数<br>outer<br>类型：System.Collections.Generic.IEnumerable<touter><br>要联接的第一个序列。<br>inner<br>类型：System.Collections.Generic.IEnumerable<tinner><br>要与第一个序列联接的序列。<br>outerKeySelector<br>类型：System.Func&lt;TOuter, TKey&gt;<br>用于从第一个序列的每个元素提取联接键的函数。<br>innerKeySelector<br>类型：System.Func&lt;TInner, TKey&gt;<br>用于从第二个序列的每个元素提取联接键的函数。<br>resultSelector<br>类型：System.Func&lt;TOuter, TInner, TResult&gt;<br>用于从两个匹配元素创建结果元素的函数。<br>返回值<br>类型：System.Collections.Generic.IEnumerable<tresult><br>IEnumerable&lt;T&gt; that has elements of type TResult that are obtained by performing an inner join on two sequences.” xml:space=”preserve”&gt;一个具有 TResult 类型元素的 IEnumerable<t>，这些元素是通过对两个序列执行内部联接得来的。<br>使用说明<br>在 Visual Basic 和 C# 中，可以在 IEnumerable<touter> 类型的任何对象上将此方法作为实例方法来调用。当使用实例方法语法调用此方法时，请省略第一个参数。有关详细信息，请参阅 扩展方法 (Visual Basic) 或 扩展方法（C# 编程指南）。</touter></t></tresult></tinner></touter></p>\n<p>先上一个MSDN的例子。</p>\n<pre><code>     public static void JoinEx1()         \n     {\n       Person magnus = new Person { Name = &quot;Hedlund, Magnus&quot; };\n       Pet barley = new Pet { Name = &quot;Barley&quot;, Owner = terry };\n       Person terry = new Person { Name = &quot;Adams, Terry&quot; };\n       Person charlotte = new Person { Name = &quot;Weiss, \n       Charlotte&quot; };\n       Pet boots = new Pet { Name = &quot;Boots&quot;, Owner = terry };\n       Pet whiskers = new Pet { Name = &quot;Whiskers&quot;, \n       Owner = charlotte};\n       Pet daisy = new Pet { Name = &quot;Daisy&quot;, Owner = magnus };\n\n    List&lt;Person&gt; people = new List&lt;Person&gt; \n    { magnus, terry, charlotte };\n    List&lt;Pet&gt; pets = new List&lt;Pet&gt; \n    { barley, boots, whiskers, daisy };\n\n    // Create a list of Person-Pet pairs where \n    // each element is an anonymous type that contains a\n    // Pet&apos;s name and the name of the Person that owns the Pet.\n    var query =\n        people.Join(\n                    pets,//需要Join的另一个数据源\n          person =&gt; person,//自己用来比较的key， lambda 表达式\n     pet =&gt; pet.Owner,//另一个数据源用来比较的key， lambda 表达式\n(person, pet) =&gt;new { OwnerName = person.Name, Pet = pet.Name } \n               //想要取出来的数据，支持匿名对象， lambda 表达式);\n    foreach (var obj in query)\n    {\n      Console.WriteLine( &quot;{0} - {1}&quot;,obj.OwnerName,obj.Pet);\n    }\n}\n</code></pre><p> LINQ的Join<br>同样是上面的数据，如果换成LINQ的Join，写法如下：<br>            var query = from person in people // 第一个数据源<br>                      join pet in pets            //第二个数据源<br>                      on person equals pet.Owner  //Join条件<br>                      select  new { OwnerName = person.Name, Pet = pet.Name };<br>                      //要到得到的数据。</p>\n<p>上面两种写法得到的结果都是内链接结果，至于左连接、右连接、外连接….<br>等我下次有心情再更新吧，再不走家里的键盘又要坏了。 </p>\n<p>一些资料链接：<br><a href=\"https://msdn.microsoft.com/zh-cn/library/bb311040.aspx\" target=\"_blank\" rel=\"noopener\">https://msdn.microsoft.com/zh-cn/library/bb311040.aspx</a><br><a href=\"https://msdn.microsoft.com/zh-cn/library/bb534675%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396\" target=\"_blank\" rel=\"noopener\">https://msdn.microsoft.com/zh-cn/library/bb534675%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396</a><br><a href=\"http://www.cnblogs.com/Ivony/archive/2008/08/18/1270555.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/Ivony/archive/2008/08/18/1270555.html</a><br><a href=\"http://www.cnblogs.com/Ivony/archive/2008/08/28/1278643.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/Ivony/archive/2008/08/28/1278643.html</a><br><a href=\"http://www.cnblogs.com/Ivony/archive/2008/10/14/1309807.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/Ivony/archive/2008/10/14/1309807.html</a> ; </p>\n<p>LINQ GroupJoin 实现左连接<br>var queryGroup = from person in people // 第一个数据源<br>                                join pet in pets //第二个数据源<br>                                on person equals pet.Owner into ps //加了into,华丽变身GroupJoin<br>                                select new { OwnerName = person.Name, Pet = ps }; //要到得到的数据。 </p>\n"},{"layout":"post","title":"C# LINQ","date":"2016-10-03T16:00:00.000Z","_content":"# LINQ 优点 总结(转载)\n\n原文链接：http://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html\n\n这几天在读一本LINQ方面的书《Essential LINQ》,在这里和大家分享下。\n\n由于对LINQ的深入总结需要大量的篇幅，因此在这里分成几个部分来讲。\n\n（*我看《Essential LINQ》是英文版的，有些名词不能翻译成正统的中文解释请给予谅解）\n\nLINQ的优点：\n\nLINQ基本有以下七个优点，让我来一一举例说明：\n\n## Integrated：所谓的Integrated（集成化），LINQ是从以下方面体现集成的：\n\n(1):把查询语法融入了C#(VB)这些语言中，让他变成了一种语法。这样就能和C#中的其他语法一样支持：\n\n语句高亮显示，类型检查，允许使用debugger调试\n\n(2):把以前复杂的查询前的工作都集成封装起来，让开发人员侧重于查询。\n\n(3):集成后的语法更加的清晰易懂，可读性较高。\n\n```C#\n比较： \n//原来的格式\nSqlConnection sqlConn = new SqlConnection(connectionString);>\nsqlConn.Open();\nSqlCommand command = new SqlCommand();\ncommand.Connection = sqlConn;\ncommand.CommandText = \"Select * From Customer\";\nSqlDataReader dataReader = command.ExecuteReader(CommandBehavior.CloseConnection);\n//LINQ的格式\nNORTHWNDDataContext dc = new NORTHWNDDataContext();\nvar query = from c in dc.Customers\n            select c;\n```\n\n## Unitive：所谓Unitive(统一化)就指不管对任何类型外部和内部数据源(对象集合,xlm,数据库数据)都使用统一的查询语法。\n\n使用统一化查询语言的好处在于以下几点：\n\n你不用因为要使用不太熟悉的数据源而花很多精力去了解它，你可以快速简单的使用LINQ语法对起查询。\n由于使用了统一的语法，可以使代码维护变的更加简单。\n以下代码体现了LINQ的统一化：\n\n```C#\n//数据源:对象集合\nvar query = from c in GetCustomers()\n            select c;\n \n//数据源:SQL\nvar query1 = from c in dc.Customers\n             select c;\n//数据源:XML\nvar query2 = from c in customers.Descendants(\"Customer\")\n             select c;\n```\n\n## Extensible：所谓Extensible(可扩展)指以下2个方面:\n\n(1).可查询数据源的扩展。 LINQ提供了个LINQ provider model，你可以为LINQ创建或提供provider让LINQ支持更多的数据源。\n\n(2).可扩展查询方法。开发者可以根据自己的需求为LINQ重写和扩展查询方法。\n\n以下是些第三方的LINQ provider：\n\nLINQ Extender, LINQ to JavaScript, LINQ to JSON, LINQ to MySQL, LINQ to Flickr, LINQ to Google\n\n## Declarative：所谓Declarative(声明式)，简单的来说指的是开发人员只要告诉程序做什么，程序自己判断怎么做。\n\nDeclarative programming(声明式编程)的优点体现在以下2点：\n\n(1).提高了开发速度。因为开发者不用书写大量的代码来具体化执行步骤，只许告诉程序做什么。\n\n(2).提高代码优化空间。因为开发者不用参与干涉对程序执行的具体步骤，这样就提供给编译器更多的空间去优化代码。\n\n举例SQL来说，LINQ生成的SQL语句往往比一对SQL水平一般的开发者能写出更好的SQL语句。\n\n比较Declarative programming 与 Imperative programming：\n\n```C#\n//声明式编程\nList<List<int>> lists = new List<List<int>> { new List<int> { 1, 2, 3 }, new List<int> { 4, 5 } };\nvar query = from list in lists\n            from num in list\n            where num % 3 == 0\n            orderby num descending\n            select num;\n \n//命令式编程\nList<int> list1 = new List<int>();\nlist1.Add(1);\nlist1.Add(2);\nlist1.Add(3);\nList<int> list2 = new List<int>();\nlist2.Add(4);\nlist2.Add(5);\nList<List<int>> lists1 = new List<List<int>>();\nlists1.Add(list1);\nlists1.Add(list2);\n \nList<int> newList = new List<int>();\nforeach (var item in lists1)\n      foreach (var num in item)\n        if (num % 3 == 0)\n            newList.Add(num);\nnewList.Reverse();\n\n```\n\n## .Hierarchical：所谓Hierarchical(层次化)指使用面向对象的方式抽象数据。\n\nSQL是关系型数据库，它以关系的方式描述数据以数据的联系，但我们的程序设计成面向对象的因此我们在程序里得到的数据库数据往往都是\n\nrectangular grid（平面的显示数据）。但是LINQ通过所谓的O-R Mapping方式，把关系型转换成对象与对象方式描述数据。\n\n这样带来的好处是：开发者能直接以对象的方式去操作数据，对习惯面向对象的开发者来说面向对象模型更易理解。\n\n \n\n## .Composable：所谓Composable(可组成)指LINQ可以把一个复杂的查询拆分成多个简单查询。\n\nLINQ返回的结果都是基于接口：IEnumerable<T>，因此能对查询结果继续查询，而且LINQ具有延迟执行的特性因此拆分执行不会影响效率。\n\n优点在于：\n\n(1).方便调试。把复杂的查询拆分成简单的查询，然后逐个调试。\n\n(2).便于代码维护。把代码拆分后能使代码变的更易理解。\n\n以下代码体现了可组成性：\n```\n//以下代码体现了Composable\nList<List<int>> lists = new List<List<int>> { new List<int>\n { 1, 2, 3 }, new List<int> { 4, 5 } };\n \nvar query1 = from list in lists\n             from num in list\n             select num;\n \nvar query2 = from num in query1\n             where num % 3 == 0\n             select num;\n \nvar query3 = from num in query2\n             orderby num descending\n             select num;\n```\n\n \n\n######7.Transformative：所谓Transformative(可转换)指的是LINQ能把一种数据源的内容转换到其他数据源。\n\n方便用户做数据移植。\n\n以下代码体现了转换的特性：\n```\n//把关系型数据转换成XML型\n\tvar query = new XElement(\"Orders\",\n            from c in dc.Customers\n            where c.City == \"Paris\"\n            select new XElement(\"Order\",\n                new XAttribute(\"Address\", c.Address)));\n```\n\n以上就是LINQ的几大优点，很高兴能在这里和大家分享。有任何不足之处请给予补充和纠正，谢谢光临小舍。\n\n//2011/1/28 补充(LINQ TO SQL)\n\n在LINQ TO SQL 方面，如果使用LINQ TO SQL可以有效的防止SQL注入，LINQ TO SQL 会把注入的代码当做无用的参数处理。\n\n\nhttp://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html ","source":"_posts/C#-LINQ优点总结(转载).md","raw":"---\nlayout: post\ntitle: C# LINQ\ncategory: dotnet core\ndate: 2016-10-04\ntags:\n- dotnet core\n---\n# LINQ 优点 总结(转载)\n\n原文链接：http://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html\n\n这几天在读一本LINQ方面的书《Essential LINQ》,在这里和大家分享下。\n\n由于对LINQ的深入总结需要大量的篇幅，因此在这里分成几个部分来讲。\n\n（*我看《Essential LINQ》是英文版的，有些名词不能翻译成正统的中文解释请给予谅解）\n\nLINQ的优点：\n\nLINQ基本有以下七个优点，让我来一一举例说明：\n\n## Integrated：所谓的Integrated（集成化），LINQ是从以下方面体现集成的：\n\n(1):把查询语法融入了C#(VB)这些语言中，让他变成了一种语法。这样就能和C#中的其他语法一样支持：\n\n语句高亮显示，类型检查，允许使用debugger调试\n\n(2):把以前复杂的查询前的工作都集成封装起来，让开发人员侧重于查询。\n\n(3):集成后的语法更加的清晰易懂，可读性较高。\n\n```C#\n比较： \n//原来的格式\nSqlConnection sqlConn = new SqlConnection(connectionString);>\nsqlConn.Open();\nSqlCommand command = new SqlCommand();\ncommand.Connection = sqlConn;\ncommand.CommandText = \"Select * From Customer\";\nSqlDataReader dataReader = command.ExecuteReader(CommandBehavior.CloseConnection);\n//LINQ的格式\nNORTHWNDDataContext dc = new NORTHWNDDataContext();\nvar query = from c in dc.Customers\n            select c;\n```\n\n## Unitive：所谓Unitive(统一化)就指不管对任何类型外部和内部数据源(对象集合,xlm,数据库数据)都使用统一的查询语法。\n\n使用统一化查询语言的好处在于以下几点：\n\n你不用因为要使用不太熟悉的数据源而花很多精力去了解它，你可以快速简单的使用LINQ语法对起查询。\n由于使用了统一的语法，可以使代码维护变的更加简单。\n以下代码体现了LINQ的统一化：\n\n```C#\n//数据源:对象集合\nvar query = from c in GetCustomers()\n            select c;\n \n//数据源:SQL\nvar query1 = from c in dc.Customers\n             select c;\n//数据源:XML\nvar query2 = from c in customers.Descendants(\"Customer\")\n             select c;\n```\n\n## Extensible：所谓Extensible(可扩展)指以下2个方面:\n\n(1).可查询数据源的扩展。 LINQ提供了个LINQ provider model，你可以为LINQ创建或提供provider让LINQ支持更多的数据源。\n\n(2).可扩展查询方法。开发者可以根据自己的需求为LINQ重写和扩展查询方法。\n\n以下是些第三方的LINQ provider：\n\nLINQ Extender, LINQ to JavaScript, LINQ to JSON, LINQ to MySQL, LINQ to Flickr, LINQ to Google\n\n## Declarative：所谓Declarative(声明式)，简单的来说指的是开发人员只要告诉程序做什么，程序自己判断怎么做。\n\nDeclarative programming(声明式编程)的优点体现在以下2点：\n\n(1).提高了开发速度。因为开发者不用书写大量的代码来具体化执行步骤，只许告诉程序做什么。\n\n(2).提高代码优化空间。因为开发者不用参与干涉对程序执行的具体步骤，这样就提供给编译器更多的空间去优化代码。\n\n举例SQL来说，LINQ生成的SQL语句往往比一对SQL水平一般的开发者能写出更好的SQL语句。\n\n比较Declarative programming 与 Imperative programming：\n\n```C#\n//声明式编程\nList<List<int>> lists = new List<List<int>> { new List<int> { 1, 2, 3 }, new List<int> { 4, 5 } };\nvar query = from list in lists\n            from num in list\n            where num % 3 == 0\n            orderby num descending\n            select num;\n \n//命令式编程\nList<int> list1 = new List<int>();\nlist1.Add(1);\nlist1.Add(2);\nlist1.Add(3);\nList<int> list2 = new List<int>();\nlist2.Add(4);\nlist2.Add(5);\nList<List<int>> lists1 = new List<List<int>>();\nlists1.Add(list1);\nlists1.Add(list2);\n \nList<int> newList = new List<int>();\nforeach (var item in lists1)\n      foreach (var num in item)\n        if (num % 3 == 0)\n            newList.Add(num);\nnewList.Reverse();\n\n```\n\n## .Hierarchical：所谓Hierarchical(层次化)指使用面向对象的方式抽象数据。\n\nSQL是关系型数据库，它以关系的方式描述数据以数据的联系，但我们的程序设计成面向对象的因此我们在程序里得到的数据库数据往往都是\n\nrectangular grid（平面的显示数据）。但是LINQ通过所谓的O-R Mapping方式，把关系型转换成对象与对象方式描述数据。\n\n这样带来的好处是：开发者能直接以对象的方式去操作数据，对习惯面向对象的开发者来说面向对象模型更易理解。\n\n \n\n## .Composable：所谓Composable(可组成)指LINQ可以把一个复杂的查询拆分成多个简单查询。\n\nLINQ返回的结果都是基于接口：IEnumerable<T>，因此能对查询结果继续查询，而且LINQ具有延迟执行的特性因此拆分执行不会影响效率。\n\n优点在于：\n\n(1).方便调试。把复杂的查询拆分成简单的查询，然后逐个调试。\n\n(2).便于代码维护。把代码拆分后能使代码变的更易理解。\n\n以下代码体现了可组成性：\n```\n//以下代码体现了Composable\nList<List<int>> lists = new List<List<int>> { new List<int>\n { 1, 2, 3 }, new List<int> { 4, 5 } };\n \nvar query1 = from list in lists\n             from num in list\n             select num;\n \nvar query2 = from num in query1\n             where num % 3 == 0\n             select num;\n \nvar query3 = from num in query2\n             orderby num descending\n             select num;\n```\n\n \n\n######7.Transformative：所谓Transformative(可转换)指的是LINQ能把一种数据源的内容转换到其他数据源。\n\n方便用户做数据移植。\n\n以下代码体现了转换的特性：\n```\n//把关系型数据转换成XML型\n\tvar query = new XElement(\"Orders\",\n            from c in dc.Customers\n            where c.City == \"Paris\"\n            select new XElement(\"Order\",\n                new XAttribute(\"Address\", c.Address)));\n```\n\n以上就是LINQ的几大优点，很高兴能在这里和大家分享。有任何不足之处请给予补充和纠正，谢谢光临小舍。\n\n//2011/1/28 补充(LINQ TO SQL)\n\n在LINQ TO SQL 方面，如果使用LINQ TO SQL可以有效的防止SQL注入，LINQ TO SQL 会把注入的代码当做无用的参数处理。\n\n\nhttp://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html ","slug":"C#-LINQ优点总结(转载)","published":1,"updated":"2018-05-17T13:34:47.232Z","comments":1,"photos":[],"link":"","_id":"cjhal1fvw000dp6318n6z1fdd","content":"<h1 id=\"LINQ-优点-总结-转载\"><a href=\"#LINQ-优点-总结-转载\" class=\"headerlink\" title=\"LINQ 优点 总结(转载)\"></a>LINQ 优点 总结(转载)</h1><p>原文链接：<a href=\"http://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html</a></p>\n<p>这几天在读一本LINQ方面的书《Essential LINQ》,在这里和大家分享下。</p>\n<p>由于对LINQ的深入总结需要大量的篇幅，因此在这里分成几个部分来讲。</p>\n<p>（*我看《Essential LINQ》是英文版的，有些名词不能翻译成正统的中文解释请给予谅解）</p>\n<p>LINQ的优点：</p>\n<p>LINQ基本有以下七个优点，让我来一一举例说明：</p>\n<h2 id=\"Integrated：所谓的Integrated（集成化），LINQ是从以下方面体现集成的：\"><a href=\"#Integrated：所谓的Integrated（集成化），LINQ是从以下方面体现集成的：\" class=\"headerlink\" title=\"Integrated：所谓的Integrated（集成化），LINQ是从以下方面体现集成的：\"></a>Integrated：所谓的Integrated（集成化），LINQ是从以下方面体现集成的：</h2><p>(1):把查询语法融入了C#(VB)这些语言中，让他变成了一种语法。这样就能和C#中的其他语法一样支持：</p>\n<p>语句高亮显示，类型检查，允许使用debugger调试</p>\n<p>(2):把以前复杂的查询前的工作都集成封装起来，让开发人员侧重于查询。</p>\n<p>(3):集成后的语法更加的清晰易懂，可读性较高。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">比较： </span><br><span class=\"line\">//原来的格式</span><br><span class=\"line\">SqlConnection sqlConn = new SqlConnection(connectionString);&gt;</span><br><span class=\"line\">sqlConn.Open();</span><br><span class=\"line\">SqlCommand command = new SqlCommand();</span><br><span class=\"line\">command.Connection = sqlConn;</span><br><span class=\"line\">command.CommandText = &quot;Select * From Customer&quot;;</span><br><span class=\"line\">SqlDataReader dataReader = command.ExecuteReader(CommandBehavior.CloseConnection);</span><br><span class=\"line\">//LINQ的格式</span><br><span class=\"line\">NORTHWNDDataContext dc = new NORTHWNDDataContext();</span><br><span class=\"line\">var query = from c in dc.Customers</span><br><span class=\"line\">            select c;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Unitive：所谓Unitive-统一化-就指不管对任何类型外部和内部数据源-对象集合-xlm-数据库数据-都使用统一的查询语法。\"><a href=\"#Unitive：所谓Unitive-统一化-就指不管对任何类型外部和内部数据源-对象集合-xlm-数据库数据-都使用统一的查询语法。\" class=\"headerlink\" title=\"Unitive：所谓Unitive(统一化)就指不管对任何类型外部和内部数据源(对象集合,xlm,数据库数据)都使用统一的查询语法。\"></a>Unitive：所谓Unitive(统一化)就指不管对任何类型外部和内部数据源(对象集合,xlm,数据库数据)都使用统一的查询语法。</h2><p>使用统一化查询语言的好处在于以下几点：</p>\n<p>你不用因为要使用不太熟悉的数据源而花很多精力去了解它，你可以快速简单的使用LINQ语法对起查询。<br>由于使用了统一的语法，可以使代码维护变的更加简单。<br>以下代码体现了LINQ的统一化：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//数据源:对象集合</span><br><span class=\"line\">var query = from c in GetCustomers()</span><br><span class=\"line\">            select c;</span><br><span class=\"line\"> </span><br><span class=\"line\">//数据源:SQL</span><br><span class=\"line\">var query1 = from c in dc.Customers</span><br><span class=\"line\">             select c;</span><br><span class=\"line\">//数据源:XML</span><br><span class=\"line\">var query2 = from c in customers.Descendants(&quot;Customer&quot;)</span><br><span class=\"line\">             select c;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Extensible：所谓Extensible-可扩展-指以下2个方面\"><a href=\"#Extensible：所谓Extensible-可扩展-指以下2个方面\" class=\"headerlink\" title=\"Extensible：所谓Extensible(可扩展)指以下2个方面:\"></a>Extensible：所谓Extensible(可扩展)指以下2个方面:</h2><p>(1).可查询数据源的扩展。 LINQ提供了个LINQ provider model，你可以为LINQ创建或提供provider让LINQ支持更多的数据源。</p>\n<p>(2).可扩展查询方法。开发者可以根据自己的需求为LINQ重写和扩展查询方法。</p>\n<p>以下是些第三方的LINQ provider：</p>\n<p>LINQ Extender, LINQ to JavaScript, LINQ to JSON, LINQ to MySQL, LINQ to Flickr, LINQ to Google</p>\n<h2 id=\"Declarative：所谓Declarative-声明式-，简单的来说指的是开发人员只要告诉程序做什么，程序自己判断怎么做。\"><a href=\"#Declarative：所谓Declarative-声明式-，简单的来说指的是开发人员只要告诉程序做什么，程序自己判断怎么做。\" class=\"headerlink\" title=\"Declarative：所谓Declarative(声明式)，简单的来说指的是开发人员只要告诉程序做什么，程序自己判断怎么做。\"></a>Declarative：所谓Declarative(声明式)，简单的来说指的是开发人员只要告诉程序做什么，程序自己判断怎么做。</h2><p>Declarative programming(声明式编程)的优点体现在以下2点：</p>\n<p>(1).提高了开发速度。因为开发者不用书写大量的代码来具体化执行步骤，只许告诉程序做什么。</p>\n<p>(2).提高代码优化空间。因为开发者不用参与干涉对程序执行的具体步骤，这样就提供给编译器更多的空间去优化代码。</p>\n<p>举例SQL来说，LINQ生成的SQL语句往往比一对SQL水平一般的开发者能写出更好的SQL语句。</p>\n<p>比较Declarative programming 与 Imperative programming：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//声明式编程</span><br><span class=\"line\">List&lt;List&lt;int&gt;&gt; lists = new List&lt;List&lt;int&gt;&gt; &#123; new List&lt;int&gt; &#123; 1, 2, 3 &#125;, new List&lt;int&gt; &#123; 4, 5 &#125; &#125;;</span><br><span class=\"line\">var query = from list in lists</span><br><span class=\"line\">            from num in list</span><br><span class=\"line\">            where num % 3 == 0</span><br><span class=\"line\">            orderby num descending</span><br><span class=\"line\">            select num;</span><br><span class=\"line\"> </span><br><span class=\"line\">//命令式编程</span><br><span class=\"line\">List&lt;int&gt; list1 = new List&lt;int&gt;();</span><br><span class=\"line\">list1.Add(1);</span><br><span class=\"line\">list1.Add(2);</span><br><span class=\"line\">list1.Add(3);</span><br><span class=\"line\">List&lt;int&gt; list2 = new List&lt;int&gt;();</span><br><span class=\"line\">list2.Add(4);</span><br><span class=\"line\">list2.Add(5);</span><br><span class=\"line\">List&lt;List&lt;int&gt;&gt; lists1 = new List&lt;List&lt;int&gt;&gt;();</span><br><span class=\"line\">lists1.Add(list1);</span><br><span class=\"line\">lists1.Add(list2);</span><br><span class=\"line\"> </span><br><span class=\"line\">List&lt;int&gt; newList = new List&lt;int&gt;();</span><br><span class=\"line\">foreach (var item in lists1)</span><br><span class=\"line\">      foreach (var num in item)</span><br><span class=\"line\">        if (num % 3 == 0)</span><br><span class=\"line\">            newList.Add(num);</span><br><span class=\"line\">newList.Reverse();</span><br></pre></td></tr></table></figure>\n<h2 id=\"Hierarchical：所谓Hierarchical-层次化-指使用面向对象的方式抽象数据。\"><a href=\"#Hierarchical：所谓Hierarchical-层次化-指使用面向对象的方式抽象数据。\" class=\"headerlink\" title=\".Hierarchical：所谓Hierarchical(层次化)指使用面向对象的方式抽象数据。\"></a>.Hierarchical：所谓Hierarchical(层次化)指使用面向对象的方式抽象数据。</h2><p>SQL是关系型数据库，它以关系的方式描述数据以数据的联系，但我们的程序设计成面向对象的因此我们在程序里得到的数据库数据往往都是</p>\n<p>rectangular grid（平面的显示数据）。但是LINQ通过所谓的O-R Mapping方式，把关系型转换成对象与对象方式描述数据。</p>\n<p>这样带来的好处是：开发者能直接以对象的方式去操作数据，对习惯面向对象的开发者来说面向对象模型更易理解。</p>\n<h2 id=\"Composable：所谓Composable-可组成-指LINQ可以把一个复杂的查询拆分成多个简单查询。\"><a href=\"#Composable：所谓Composable-可组成-指LINQ可以把一个复杂的查询拆分成多个简单查询。\" class=\"headerlink\" title=\".Composable：所谓Composable(可组成)指LINQ可以把一个复杂的查询拆分成多个简单查询。\"></a>.Composable：所谓Composable(可组成)指LINQ可以把一个复杂的查询拆分成多个简单查询。</h2><p>LINQ返回的结果都是基于接口：IEnumerable<t>，因此能对查询结果继续查询，而且LINQ具有延迟执行的特性因此拆分执行不会影响效率。</t></p>\n<p>优点在于：</p>\n<p>(1).方便调试。把复杂的查询拆分成简单的查询，然后逐个调试。</p>\n<p>(2).便于代码维护。把代码拆分后能使代码变的更易理解。</p>\n<p>以下代码体现了可组成性：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//以下代码体现了Composable</span><br><span class=\"line\">List&lt;List&lt;int&gt;&gt; lists = new List&lt;List&lt;int&gt;&gt; &#123; new List&lt;int&gt;</span><br><span class=\"line\"> &#123; 1, 2, 3 &#125;, new List&lt;int&gt; &#123; 4, 5 &#125; &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">var query1 = from list in lists</span><br><span class=\"line\">             from num in list</span><br><span class=\"line\">             select num;</span><br><span class=\"line\"> </span><br><span class=\"line\">var query2 = from num in query1</span><br><span class=\"line\">             where num % 3 == 0</span><br><span class=\"line\">             select num;</span><br><span class=\"line\"> </span><br><span class=\"line\">var query3 = from num in query2</span><br><span class=\"line\">             orderby num descending</span><br><span class=\"line\">             select num;</span><br></pre></td></tr></table></figure></p>\n<p>######7.Transformative：所谓Transformative(可转换)指的是LINQ能把一种数据源的内容转换到其他数据源。</p>\n<p>方便用户做数据移植。</p>\n<p>以下代码体现了转换的特性：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//把关系型数据转换成XML型</span><br><span class=\"line\">\tvar query = new XElement(&quot;Orders&quot;,</span><br><span class=\"line\">            from c in dc.Customers</span><br><span class=\"line\">            where c.City == &quot;Paris&quot;</span><br><span class=\"line\">            select new XElement(&quot;Order&quot;,</span><br><span class=\"line\">                new XAttribute(&quot;Address&quot;, c.Address)));</span><br></pre></td></tr></table></figure></p>\n<p>以上就是LINQ的几大优点，很高兴能在这里和大家分享。有任何不足之处请给予补充和纠正，谢谢光临小舍。</p>\n<p>//2011/1/28 补充(LINQ TO SQL)</p>\n<p>在LINQ TO SQL 方面，如果使用LINQ TO SQL可以有效的防止SQL注入，LINQ TO SQL 会把注入的代码当做无用的参数处理。</p>\n<p><a href=\"http://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html</a> </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"LINQ-优点-总结-转载\"><a href=\"#LINQ-优点-总结-转载\" class=\"headerlink\" title=\"LINQ 优点 总结(转载)\"></a>LINQ 优点 总结(转载)</h1><p>原文链接：<a href=\"http://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html</a></p>\n<p>这几天在读一本LINQ方面的书《Essential LINQ》,在这里和大家分享下。</p>\n<p>由于对LINQ的深入总结需要大量的篇幅，因此在这里分成几个部分来讲。</p>\n<p>（*我看《Essential LINQ》是英文版的，有些名词不能翻译成正统的中文解释请给予谅解）</p>\n<p>LINQ的优点：</p>\n<p>LINQ基本有以下七个优点，让我来一一举例说明：</p>\n<h2 id=\"Integrated：所谓的Integrated（集成化），LINQ是从以下方面体现集成的：\"><a href=\"#Integrated：所谓的Integrated（集成化），LINQ是从以下方面体现集成的：\" class=\"headerlink\" title=\"Integrated：所谓的Integrated（集成化），LINQ是从以下方面体现集成的：\"></a>Integrated：所谓的Integrated（集成化），LINQ是从以下方面体现集成的：</h2><p>(1):把查询语法融入了C#(VB)这些语言中，让他变成了一种语法。这样就能和C#中的其他语法一样支持：</p>\n<p>语句高亮显示，类型检查，允许使用debugger调试</p>\n<p>(2):把以前复杂的查询前的工作都集成封装起来，让开发人员侧重于查询。</p>\n<p>(3):集成后的语法更加的清晰易懂，可读性较高。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">比较： </span><br><span class=\"line\">//原来的格式</span><br><span class=\"line\">SqlConnection sqlConn = new SqlConnection(connectionString);&gt;</span><br><span class=\"line\">sqlConn.Open();</span><br><span class=\"line\">SqlCommand command = new SqlCommand();</span><br><span class=\"line\">command.Connection = sqlConn;</span><br><span class=\"line\">command.CommandText = &quot;Select * From Customer&quot;;</span><br><span class=\"line\">SqlDataReader dataReader = command.ExecuteReader(CommandBehavior.CloseConnection);</span><br><span class=\"line\">//LINQ的格式</span><br><span class=\"line\">NORTHWNDDataContext dc = new NORTHWNDDataContext();</span><br><span class=\"line\">var query = from c in dc.Customers</span><br><span class=\"line\">            select c;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Unitive：所谓Unitive-统一化-就指不管对任何类型外部和内部数据源-对象集合-xlm-数据库数据-都使用统一的查询语法。\"><a href=\"#Unitive：所谓Unitive-统一化-就指不管对任何类型外部和内部数据源-对象集合-xlm-数据库数据-都使用统一的查询语法。\" class=\"headerlink\" title=\"Unitive：所谓Unitive(统一化)就指不管对任何类型外部和内部数据源(对象集合,xlm,数据库数据)都使用统一的查询语法。\"></a>Unitive：所谓Unitive(统一化)就指不管对任何类型外部和内部数据源(对象集合,xlm,数据库数据)都使用统一的查询语法。</h2><p>使用统一化查询语言的好处在于以下几点：</p>\n<p>你不用因为要使用不太熟悉的数据源而花很多精力去了解它，你可以快速简单的使用LINQ语法对起查询。<br>由于使用了统一的语法，可以使代码维护变的更加简单。<br>以下代码体现了LINQ的统一化：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//数据源:对象集合</span><br><span class=\"line\">var query = from c in GetCustomers()</span><br><span class=\"line\">            select c;</span><br><span class=\"line\"> </span><br><span class=\"line\">//数据源:SQL</span><br><span class=\"line\">var query1 = from c in dc.Customers</span><br><span class=\"line\">             select c;</span><br><span class=\"line\">//数据源:XML</span><br><span class=\"line\">var query2 = from c in customers.Descendants(&quot;Customer&quot;)</span><br><span class=\"line\">             select c;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Extensible：所谓Extensible-可扩展-指以下2个方面\"><a href=\"#Extensible：所谓Extensible-可扩展-指以下2个方面\" class=\"headerlink\" title=\"Extensible：所谓Extensible(可扩展)指以下2个方面:\"></a>Extensible：所谓Extensible(可扩展)指以下2个方面:</h2><p>(1).可查询数据源的扩展。 LINQ提供了个LINQ provider model，你可以为LINQ创建或提供provider让LINQ支持更多的数据源。</p>\n<p>(2).可扩展查询方法。开发者可以根据自己的需求为LINQ重写和扩展查询方法。</p>\n<p>以下是些第三方的LINQ provider：</p>\n<p>LINQ Extender, LINQ to JavaScript, LINQ to JSON, LINQ to MySQL, LINQ to Flickr, LINQ to Google</p>\n<h2 id=\"Declarative：所谓Declarative-声明式-，简单的来说指的是开发人员只要告诉程序做什么，程序自己判断怎么做。\"><a href=\"#Declarative：所谓Declarative-声明式-，简单的来说指的是开发人员只要告诉程序做什么，程序自己判断怎么做。\" class=\"headerlink\" title=\"Declarative：所谓Declarative(声明式)，简单的来说指的是开发人员只要告诉程序做什么，程序自己判断怎么做。\"></a>Declarative：所谓Declarative(声明式)，简单的来说指的是开发人员只要告诉程序做什么，程序自己判断怎么做。</h2><p>Declarative programming(声明式编程)的优点体现在以下2点：</p>\n<p>(1).提高了开发速度。因为开发者不用书写大量的代码来具体化执行步骤，只许告诉程序做什么。</p>\n<p>(2).提高代码优化空间。因为开发者不用参与干涉对程序执行的具体步骤，这样就提供给编译器更多的空间去优化代码。</p>\n<p>举例SQL来说，LINQ生成的SQL语句往往比一对SQL水平一般的开发者能写出更好的SQL语句。</p>\n<p>比较Declarative programming 与 Imperative programming：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//声明式编程</span><br><span class=\"line\">List&lt;List&lt;int&gt;&gt; lists = new List&lt;List&lt;int&gt;&gt; &#123; new List&lt;int&gt; &#123; 1, 2, 3 &#125;, new List&lt;int&gt; &#123; 4, 5 &#125; &#125;;</span><br><span class=\"line\">var query = from list in lists</span><br><span class=\"line\">            from num in list</span><br><span class=\"line\">            where num % 3 == 0</span><br><span class=\"line\">            orderby num descending</span><br><span class=\"line\">            select num;</span><br><span class=\"line\"> </span><br><span class=\"line\">//命令式编程</span><br><span class=\"line\">List&lt;int&gt; list1 = new List&lt;int&gt;();</span><br><span class=\"line\">list1.Add(1);</span><br><span class=\"line\">list1.Add(2);</span><br><span class=\"line\">list1.Add(3);</span><br><span class=\"line\">List&lt;int&gt; list2 = new List&lt;int&gt;();</span><br><span class=\"line\">list2.Add(4);</span><br><span class=\"line\">list2.Add(5);</span><br><span class=\"line\">List&lt;List&lt;int&gt;&gt; lists1 = new List&lt;List&lt;int&gt;&gt;();</span><br><span class=\"line\">lists1.Add(list1);</span><br><span class=\"line\">lists1.Add(list2);</span><br><span class=\"line\"> </span><br><span class=\"line\">List&lt;int&gt; newList = new List&lt;int&gt;();</span><br><span class=\"line\">foreach (var item in lists1)</span><br><span class=\"line\">      foreach (var num in item)</span><br><span class=\"line\">        if (num % 3 == 0)</span><br><span class=\"line\">            newList.Add(num);</span><br><span class=\"line\">newList.Reverse();</span><br></pre></td></tr></table></figure>\n<h2 id=\"Hierarchical：所谓Hierarchical-层次化-指使用面向对象的方式抽象数据。\"><a href=\"#Hierarchical：所谓Hierarchical-层次化-指使用面向对象的方式抽象数据。\" class=\"headerlink\" title=\".Hierarchical：所谓Hierarchical(层次化)指使用面向对象的方式抽象数据。\"></a>.Hierarchical：所谓Hierarchical(层次化)指使用面向对象的方式抽象数据。</h2><p>SQL是关系型数据库，它以关系的方式描述数据以数据的联系，但我们的程序设计成面向对象的因此我们在程序里得到的数据库数据往往都是</p>\n<p>rectangular grid（平面的显示数据）。但是LINQ通过所谓的O-R Mapping方式，把关系型转换成对象与对象方式描述数据。</p>\n<p>这样带来的好处是：开发者能直接以对象的方式去操作数据，对习惯面向对象的开发者来说面向对象模型更易理解。</p>\n<h2 id=\"Composable：所谓Composable-可组成-指LINQ可以把一个复杂的查询拆分成多个简单查询。\"><a href=\"#Composable：所谓Composable-可组成-指LINQ可以把一个复杂的查询拆分成多个简单查询。\" class=\"headerlink\" title=\".Composable：所谓Composable(可组成)指LINQ可以把一个复杂的查询拆分成多个简单查询。\"></a>.Composable：所谓Composable(可组成)指LINQ可以把一个复杂的查询拆分成多个简单查询。</h2><p>LINQ返回的结果都是基于接口：IEnumerable<t>，因此能对查询结果继续查询，而且LINQ具有延迟执行的特性因此拆分执行不会影响效率。</t></p>\n<p>优点在于：</p>\n<p>(1).方便调试。把复杂的查询拆分成简单的查询，然后逐个调试。</p>\n<p>(2).便于代码维护。把代码拆分后能使代码变的更易理解。</p>\n<p>以下代码体现了可组成性：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//以下代码体现了Composable</span><br><span class=\"line\">List&lt;List&lt;int&gt;&gt; lists = new List&lt;List&lt;int&gt;&gt; &#123; new List&lt;int&gt;</span><br><span class=\"line\"> &#123; 1, 2, 3 &#125;, new List&lt;int&gt; &#123; 4, 5 &#125; &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">var query1 = from list in lists</span><br><span class=\"line\">             from num in list</span><br><span class=\"line\">             select num;</span><br><span class=\"line\"> </span><br><span class=\"line\">var query2 = from num in query1</span><br><span class=\"line\">             where num % 3 == 0</span><br><span class=\"line\">             select num;</span><br><span class=\"line\"> </span><br><span class=\"line\">var query3 = from num in query2</span><br><span class=\"line\">             orderby num descending</span><br><span class=\"line\">             select num;</span><br></pre></td></tr></table></figure></p>\n<p>######7.Transformative：所谓Transformative(可转换)指的是LINQ能把一种数据源的内容转换到其他数据源。</p>\n<p>方便用户做数据移植。</p>\n<p>以下代码体现了转换的特性：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//把关系型数据转换成XML型</span><br><span class=\"line\">\tvar query = new XElement(&quot;Orders&quot;,</span><br><span class=\"line\">            from c in dc.Customers</span><br><span class=\"line\">            where c.City == &quot;Paris&quot;</span><br><span class=\"line\">            select new XElement(&quot;Order&quot;,</span><br><span class=\"line\">                new XAttribute(&quot;Address&quot;, c.Address)));</span><br></pre></td></tr></table></figure></p>\n<p>以上就是LINQ的几大优点，很高兴能在这里和大家分享。有任何不足之处请给予补充和纠正，谢谢光临小舍。</p>\n<p>//2011/1/28 补充(LINQ TO SQL)</p>\n<p>在LINQ TO SQL 方面，如果使用LINQ TO SQL可以有效的防止SQL注入，LINQ TO SQL 会把注入的代码当做无用的参数处理。</p>\n<p><a href=\"http://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/c-jquery-linq-sql-net-problem/archive/2011/01/15/LINQ_Merit.html</a> </p>\n"},{"layout":"post","title":"C#类字段与类属性","date":"2016-10-03T16:00:00.000Z","_content":"# C# 类字段与类属性\n\n## 字段\n\n- 字段表示只读或可读/可写的数据值。\n- 字段可以是静态的，这种字段被认为是类型状态的一部分。\n- 字段也可以是实例（非静态），这种字段被认为是对象状态的一部分。 \n- 强烈建议把字段声明为私有，防止类型或对象的状态被类型外部代码破坏。\n\n## 属性\n\n属性允许用简单的、字段风格的语法设置或查询类型或对象的逻辑状态，同时保证状态不被破坏。\n作用于类型称为静态属性，作用于对象称为实例属性。\n属性可以无参，也可以有多个参数（相当少见，但集合类用的多）。 \n\n```\n\tusing System;\n\t\n\tpublic sealed class SomeType\n\t{                            //  1  \n\t// Nested class  \n\t   private class SomeNestedType { }                //  2  \n\t\n\t   // Constant, read­only, and static read/write field   \n\t   private const Int32 c_SomeConstant = 1;            //  3     \n\t\n\t   private readonly String m_SomeReadOnlyField = \"2\";     //  4    \n\t\n\t   private static Int32 s_SomeReadWriteField = 3;      //  5  \n\t\n\t   // Type constructor  \n\t   static SomeType() { }                                  //  6  \n\t\n\t   // Instance constructors  \n\t   public SomeType(Int32 x) { }                           //  7  \n\t\n\t   public SomeType() { }                                  //  8 \n\t\n\t   // Instance and static methods  \n\t   private String InstanceMethod() { return null; }       // 9   \n\t\n\t   public static void Main() { }                        // 10 \n\t\n\t   // Instance property  \n\t   public Int32 SomeProp\n\t   {                                // 11      \n\t       get { return 0; }                                // 12      \n\t       set { }                                          // 13  \n\t   }\n\t\n\t   // Instance parameterful property (indexer) \n\t   public Int32 this[String s]\n\t   {                          // 14       \n\t       get { return 0; }                                // 15        \n\t       set { }                                          // 16  \n\t   }\n\t\n\t   // Instance event  \n\t   public event EventHandler SomeEvent;                  // 17  \n\t}\n```\n\n![enter image description here](https://kekaeq-ch3301.files.1drv.com/y3meEWWaK-o9SNfr_fT71Xr3YrPqO1LIswWqMvlHyUxWeH8P0PtXsQlfRkDnGshlMJIy2gPsxNet14efOPOuX-dHmZhCTg8PXyELJR9tnayye4LeEQ6F997b8pSI84wBR6nmmOF8IAr92oKWk36-f8alkEj9TrDQbiMoKGQwO5MTFY/20150105.jpg?psid=1)\n\n![enter image description here](https://kekaeq-ch3301.files.1drv.com/y3mN8FseIEbAaQfT8ynEIc4nYsOUK0p0IN7Hp39imVSZXNQXlSfAYmvaC-9bDM3Hq6rPCV1XgrgvoST8wXejwARXaDmXptZpb_nyWwUzWK1rzaJ6fSsYfnP0icRKUclaVxnlltOJSQiuTFO7_fCfabmv0AsrgL5sLo6GdVJmpd-L10/QQ%E5%9B%BE%E7%89%8720151003165909.jpg?psid=1)","source":"_posts/C#-类字段与类属性.md","raw":"---\nlayout: post\ntitle: C#类字段与类属性\ncategory: dotnet\ndate: 2016-10-04\ntags:\n- dotnet core\n---\n# C# 类字段与类属性\n\n## 字段\n\n- 字段表示只读或可读/可写的数据值。\n- 字段可以是静态的，这种字段被认为是类型状态的一部分。\n- 字段也可以是实例（非静态），这种字段被认为是对象状态的一部分。 \n- 强烈建议把字段声明为私有，防止类型或对象的状态被类型外部代码破坏。\n\n## 属性\n\n属性允许用简单的、字段风格的语法设置或查询类型或对象的逻辑状态，同时保证状态不被破坏。\n作用于类型称为静态属性，作用于对象称为实例属性。\n属性可以无参，也可以有多个参数（相当少见，但集合类用的多）。 \n\n```\n\tusing System;\n\t\n\tpublic sealed class SomeType\n\t{                            //  1  \n\t// Nested class  \n\t   private class SomeNestedType { }                //  2  \n\t\n\t   // Constant, read­only, and static read/write field   \n\t   private const Int32 c_SomeConstant = 1;            //  3     \n\t\n\t   private readonly String m_SomeReadOnlyField = \"2\";     //  4    \n\t\n\t   private static Int32 s_SomeReadWriteField = 3;      //  5  \n\t\n\t   // Type constructor  \n\t   static SomeType() { }                                  //  6  \n\t\n\t   // Instance constructors  \n\t   public SomeType(Int32 x) { }                           //  7  \n\t\n\t   public SomeType() { }                                  //  8 \n\t\n\t   // Instance and static methods  \n\t   private String InstanceMethod() { return null; }       // 9   \n\t\n\t   public static void Main() { }                        // 10 \n\t\n\t   // Instance property  \n\t   public Int32 SomeProp\n\t   {                                // 11      \n\t       get { return 0; }                                // 12      \n\t       set { }                                          // 13  \n\t   }\n\t\n\t   // Instance parameterful property (indexer) \n\t   public Int32 this[String s]\n\t   {                          // 14       \n\t       get { return 0; }                                // 15        \n\t       set { }                                          // 16  \n\t   }\n\t\n\t   // Instance event  \n\t   public event EventHandler SomeEvent;                  // 17  \n\t}\n```\n\n![enter image description here](https://kekaeq-ch3301.files.1drv.com/y3meEWWaK-o9SNfr_fT71Xr3YrPqO1LIswWqMvlHyUxWeH8P0PtXsQlfRkDnGshlMJIy2gPsxNet14efOPOuX-dHmZhCTg8PXyELJR9tnayye4LeEQ6F997b8pSI84wBR6nmmOF8IAr92oKWk36-f8alkEj9TrDQbiMoKGQwO5MTFY/20150105.jpg?psid=1)\n\n![enter image description here](https://kekaeq-ch3301.files.1drv.com/y3mN8FseIEbAaQfT8ynEIc4nYsOUK0p0IN7Hp39imVSZXNQXlSfAYmvaC-9bDM3Hq6rPCV1XgrgvoST8wXejwARXaDmXptZpb_nyWwUzWK1rzaJ6fSsYfnP0icRKUclaVxnlltOJSQiuTFO7_fCfabmv0AsrgL5sLo6GdVJmpd-L10/QQ%E5%9B%BE%E7%89%8720151003165909.jpg?psid=1)","slug":"C#-类字段与类属性","published":1,"updated":"2018-05-17T13:34:50.502Z","comments":1,"photos":[],"link":"","_id":"cjhal1fvz000hp6310v2rio06","content":"<h1 id=\"C-类字段与类属性\"><a href=\"#C-类字段与类属性\" class=\"headerlink\" title=\"C# 类字段与类属性\"></a>C# 类字段与类属性</h1><h2 id=\"字段\"><a href=\"#字段\" class=\"headerlink\" title=\"字段\"></a>字段</h2><ul>\n<li>字段表示只读或可读/可写的数据值。</li>\n<li>字段可以是静态的，这种字段被认为是类型状态的一部分。</li>\n<li>字段也可以是实例（非静态），这种字段被认为是对象状态的一部分。 </li>\n<li>强烈建议把字段声明为私有，防止类型或对象的状态被类型外部代码破坏。</li>\n</ul>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><p>属性允许用简单的、字段风格的语法设置或查询类型或对象的逻辑状态，同时保证状态不被破坏。<br>作用于类型称为静态属性，作用于对象称为实例属性。<br>属性可以无参，也可以有多个参数（相当少见，但集合类用的多）。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">using System;</span><br><span class=\"line\"></span><br><span class=\"line\">public sealed class SomeType</span><br><span class=\"line\">&#123;                            //  1  </span><br><span class=\"line\">// Nested class  </span><br><span class=\"line\">   private class SomeNestedType &#123; &#125;                //  2  </span><br><span class=\"line\"></span><br><span class=\"line\">   // Constant, read­only, and static read/write field   </span><br><span class=\"line\">   private const Int32 c_SomeConstant = 1;            //  3     </span><br><span class=\"line\"></span><br><span class=\"line\">   private readonly String m_SomeReadOnlyField = &quot;2&quot;;     //  4    </span><br><span class=\"line\"></span><br><span class=\"line\">   private static Int32 s_SomeReadWriteField = 3;      //  5  </span><br><span class=\"line\"></span><br><span class=\"line\">   // Type constructor  </span><br><span class=\"line\">   static SomeType() &#123; &#125;                                  //  6  </span><br><span class=\"line\"></span><br><span class=\"line\">   // Instance constructors  </span><br><span class=\"line\">   public SomeType(Int32 x) &#123; &#125;                           //  7  </span><br><span class=\"line\"></span><br><span class=\"line\">   public SomeType() &#123; &#125;                                  //  8 </span><br><span class=\"line\"></span><br><span class=\"line\">   // Instance and static methods  </span><br><span class=\"line\">   private String InstanceMethod() &#123; return null; &#125;       // 9   </span><br><span class=\"line\"></span><br><span class=\"line\">   public static void Main() &#123; &#125;                        // 10 </span><br><span class=\"line\"></span><br><span class=\"line\">   // Instance property  </span><br><span class=\"line\">   public Int32 SomeProp</span><br><span class=\"line\">   &#123;                                // 11      </span><br><span class=\"line\">       get &#123; return 0; &#125;                                // 12      </span><br><span class=\"line\">       set &#123; &#125;                                          // 13  </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   // Instance parameterful property (indexer) </span><br><span class=\"line\">   public Int32 this[String s]</span><br><span class=\"line\">   &#123;                          // 14       </span><br><span class=\"line\">       get &#123; return 0; &#125;                                // 15        </span><br><span class=\"line\">       set &#123; &#125;                                          // 16  </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   // Instance event  </span><br><span class=\"line\">   public event EventHandler SomeEvent;                  // 17  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://kekaeq-ch3301.files.1drv.com/y3meEWWaK-o9SNfr_fT71Xr3YrPqO1LIswWqMvlHyUxWeH8P0PtXsQlfRkDnGshlMJIy2gPsxNet14efOPOuX-dHmZhCTg8PXyELJR9tnayye4LeEQ6F997b8pSI84wBR6nmmOF8IAr92oKWk36-f8alkEj9TrDQbiMoKGQwO5MTFY/20150105.jpg?psid=1\" alt=\"enter image description here\"></p>\n<p><img src=\"https://kekaeq-ch3301.files.1drv.com/y3mN8FseIEbAaQfT8ynEIc4nYsOUK0p0IN7Hp39imVSZXNQXlSfAYmvaC-9bDM3Hq6rPCV1XgrgvoST8wXejwARXaDmXptZpb_nyWwUzWK1rzaJ6fSsYfnP0icRKUclaVxnlltOJSQiuTFO7_fCfabmv0AsrgL5sLo6GdVJmpd-L10/QQ%E5%9B%BE%E7%89%8720151003165909.jpg?psid=1\" alt=\"enter image description here\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"C-类字段与类属性\"><a href=\"#C-类字段与类属性\" class=\"headerlink\" title=\"C# 类字段与类属性\"></a>C# 类字段与类属性</h1><h2 id=\"字段\"><a href=\"#字段\" class=\"headerlink\" title=\"字段\"></a>字段</h2><ul>\n<li>字段表示只读或可读/可写的数据值。</li>\n<li>字段可以是静态的，这种字段被认为是类型状态的一部分。</li>\n<li>字段也可以是实例（非静态），这种字段被认为是对象状态的一部分。 </li>\n<li>强烈建议把字段声明为私有，防止类型或对象的状态被类型外部代码破坏。</li>\n</ul>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><p>属性允许用简单的、字段风格的语法设置或查询类型或对象的逻辑状态，同时保证状态不被破坏。<br>作用于类型称为静态属性，作用于对象称为实例属性。<br>属性可以无参，也可以有多个参数（相当少见，但集合类用的多）。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">using System;</span><br><span class=\"line\"></span><br><span class=\"line\">public sealed class SomeType</span><br><span class=\"line\">&#123;                            //  1  </span><br><span class=\"line\">// Nested class  </span><br><span class=\"line\">   private class SomeNestedType &#123; &#125;                //  2  </span><br><span class=\"line\"></span><br><span class=\"line\">   // Constant, read­only, and static read/write field   </span><br><span class=\"line\">   private const Int32 c_SomeConstant = 1;            //  3     </span><br><span class=\"line\"></span><br><span class=\"line\">   private readonly String m_SomeReadOnlyField = &quot;2&quot;;     //  4    </span><br><span class=\"line\"></span><br><span class=\"line\">   private static Int32 s_SomeReadWriteField = 3;      //  5  </span><br><span class=\"line\"></span><br><span class=\"line\">   // Type constructor  </span><br><span class=\"line\">   static SomeType() &#123; &#125;                                  //  6  </span><br><span class=\"line\"></span><br><span class=\"line\">   // Instance constructors  </span><br><span class=\"line\">   public SomeType(Int32 x) &#123; &#125;                           //  7  </span><br><span class=\"line\"></span><br><span class=\"line\">   public SomeType() &#123; &#125;                                  //  8 </span><br><span class=\"line\"></span><br><span class=\"line\">   // Instance and static methods  </span><br><span class=\"line\">   private String InstanceMethod() &#123; return null; &#125;       // 9   </span><br><span class=\"line\"></span><br><span class=\"line\">   public static void Main() &#123; &#125;                        // 10 </span><br><span class=\"line\"></span><br><span class=\"line\">   // Instance property  </span><br><span class=\"line\">   public Int32 SomeProp</span><br><span class=\"line\">   &#123;                                // 11      </span><br><span class=\"line\">       get &#123; return 0; &#125;                                // 12      </span><br><span class=\"line\">       set &#123; &#125;                                          // 13  </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   // Instance parameterful property (indexer) </span><br><span class=\"line\">   public Int32 this[String s]</span><br><span class=\"line\">   &#123;                          // 14       </span><br><span class=\"line\">       get &#123; return 0; &#125;                                // 15        </span><br><span class=\"line\">       set &#123; &#125;                                          // 16  </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   // Instance event  </span><br><span class=\"line\">   public event EventHandler SomeEvent;                  // 17  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://kekaeq-ch3301.files.1drv.com/y3meEWWaK-o9SNfr_fT71Xr3YrPqO1LIswWqMvlHyUxWeH8P0PtXsQlfRkDnGshlMJIy2gPsxNet14efOPOuX-dHmZhCTg8PXyELJR9tnayye4LeEQ6F997b8pSI84wBR6nmmOF8IAr92oKWk36-f8alkEj9TrDQbiMoKGQwO5MTFY/20150105.jpg?psid=1\" alt=\"enter image description here\"></p>\n<p><img src=\"https://kekaeq-ch3301.files.1drv.com/y3mN8FseIEbAaQfT8ynEIc4nYsOUK0p0IN7Hp39imVSZXNQXlSfAYmvaC-9bDM3Hq6rPCV1XgrgvoST8wXejwARXaDmXptZpb_nyWwUzWK1rzaJ6fSsYfnP0icRKUclaVxnlltOJSQiuTFO7_fCfabmv0AsrgL5sLo6GdVJmpd-L10/QQ%E5%9B%BE%E7%89%8720151003165909.jpg?psid=1\" alt=\"enter image description here\"></p>\n"},{"layout":"post","title":"C#.NET托管堆和垃圾回收(续)","date":"2016-10-03T16:00:00.000Z","_content":"# 托管堆和垃圾回收(续)\n\n## 大对象\n\n CLR将对象分成大对象和小对象。目前认为85000字节或者更大的对象是大对象。CLR以不同方式对待大小对象。\n\n1. 大对象不是在小对象的地址空间分配的，而是在进程地址空间的其他地方分配。\n\n2. 目前版本的GC不“压缩”大对象，因为在内存中移动它们代价过高。但这可能在进程中的大对象之间造成地址空间碎片化，以至于抛出OutMemoryException。CLR将来的版本可能会压缩大对象。\n3. 大对象总是第2代，绝不可能是第0代或者第1代。所以只能为需要长时间存活的资源创建大对象。分配短时间存活的大对象会导致第2代被更频繁地回收，损失性能。大对象一般是大字符串（XML/JSON）或者用于I/O操作的字节数组（从文件/网络将字节读入缓冲区以便处理）。\n\n## 垃圾回收模式 \n CLR启动时会选择一个GC模式，进程中之前该模式都不会改变。\n\n 有两个基本GC模式。\n\n### 工作站\n\n- 该模式针对客户端应用程序优化GC。GC造成的延时很低，应用程序线程挂起时间很短，避免用户感到焦虑。在该模式中,GC假定机器上运行的其他应用程序都不会消耗太多的CPU资源。\n\n### 服务器\n\n- 该模式针对服务器端应用程序优化GC。被优化的主要是吞吐量和资源利用。GC假定机器上没有运行其他应用程序（无论客户端还是服务器应用程序），并假定机器的所有CPU都可以用来辅助完成GC。该模式造成托管堆被拆分成几个区域，每个CPU一个。开始垃圾回收时，垃圾回收器在每个CPU上运行一个特殊线程；每个线程都和其他线程并发回收它自己的区域。对于工作者线程行为一致的服务器应用程序，并发回收能很好进行。这个功能要求应用程序在多CPU计算机上运行，是线程能真正同时工作，从而得到性能上的提升。\n\n应用程序默认以“工作站”GC模式运行。寄宿了CLR的服务器应用程序（如ASP.NET ）可请求CLR加载服务器 GC.但如果应用程序在单处理器计算机上运行，CLR总是使用“工作站”GC模式。\n\n独立应用程序可以创建一个配置文件告诉CLR 使用CLR使用服务器回收器。配置文件要为应用程序添加gcServer元素。下面是一个示例配置文件：\n\n```XML\n<configuration>\n       <runtime>\n             <gcServer enabled=\"true\">\n      </runtime>\n</configuration> \n```\n\n可以使用GCSettings类的只读Boolean属性IsServerGC得到CLR是否处于“服务器”GC模式。\n\n除了这两种模式，GC还支持两种子模式：并发(默认)或者非并发。\n在并发方式中，垃圾回收器有一个额外的后台线程，它能在应用程序运行时并发标记对象。 程序运行时，垃圾回收器运行一个普通优先级的后台线程来查找不可达对象。找到之后，垃圾回收器再次挂起所以线程，判断是否要“压缩”内存。如决定压缩，内存会被压缩，根引用会被修正，应用程序线程恢复运行。这一次垃圾回收花费的时间比平常少，因为不可达对象集合已构造好了。但垃圾回收器也可能决定不压缩内存；事实上，垃圾回收器更倾向不压缩。可用内存多，垃圾回收器便不会压缩堆；这有利于增强性能，但会增大程序的工作集。使用并发垃圾回收器，应用程序消耗的内存通常比使用非并发垃圾回收器多。","source":"_posts/C#.NET托管堆和垃圾回收(续).md","raw":"---\nlayout: post\ntitle: C#.NET托管堆和垃圾回收(续)\ncategory: dotnet\ndate: 2016-10-04\ntags:\n- dotnet\n---\n# 托管堆和垃圾回收(续)\n\n## 大对象\n\n CLR将对象分成大对象和小对象。目前认为85000字节或者更大的对象是大对象。CLR以不同方式对待大小对象。\n\n1. 大对象不是在小对象的地址空间分配的，而是在进程地址空间的其他地方分配。\n\n2. 目前版本的GC不“压缩”大对象，因为在内存中移动它们代价过高。但这可能在进程中的大对象之间造成地址空间碎片化，以至于抛出OutMemoryException。CLR将来的版本可能会压缩大对象。\n3. 大对象总是第2代，绝不可能是第0代或者第1代。所以只能为需要长时间存活的资源创建大对象。分配短时间存活的大对象会导致第2代被更频繁地回收，损失性能。大对象一般是大字符串（XML/JSON）或者用于I/O操作的字节数组（从文件/网络将字节读入缓冲区以便处理）。\n\n## 垃圾回收模式 \n CLR启动时会选择一个GC模式，进程中之前该模式都不会改变。\n\n 有两个基本GC模式。\n\n### 工作站\n\n- 该模式针对客户端应用程序优化GC。GC造成的延时很低，应用程序线程挂起时间很短，避免用户感到焦虑。在该模式中,GC假定机器上运行的其他应用程序都不会消耗太多的CPU资源。\n\n### 服务器\n\n- 该模式针对服务器端应用程序优化GC。被优化的主要是吞吐量和资源利用。GC假定机器上没有运行其他应用程序（无论客户端还是服务器应用程序），并假定机器的所有CPU都可以用来辅助完成GC。该模式造成托管堆被拆分成几个区域，每个CPU一个。开始垃圾回收时，垃圾回收器在每个CPU上运行一个特殊线程；每个线程都和其他线程并发回收它自己的区域。对于工作者线程行为一致的服务器应用程序，并发回收能很好进行。这个功能要求应用程序在多CPU计算机上运行，是线程能真正同时工作，从而得到性能上的提升。\n\n应用程序默认以“工作站”GC模式运行。寄宿了CLR的服务器应用程序（如ASP.NET ）可请求CLR加载服务器 GC.但如果应用程序在单处理器计算机上运行，CLR总是使用“工作站”GC模式。\n\n独立应用程序可以创建一个配置文件告诉CLR 使用CLR使用服务器回收器。配置文件要为应用程序添加gcServer元素。下面是一个示例配置文件：\n\n```XML\n<configuration>\n       <runtime>\n             <gcServer enabled=\"true\">\n      </runtime>\n</configuration> \n```\n\n可以使用GCSettings类的只读Boolean属性IsServerGC得到CLR是否处于“服务器”GC模式。\n\n除了这两种模式，GC还支持两种子模式：并发(默认)或者非并发。\n在并发方式中，垃圾回收器有一个额外的后台线程，它能在应用程序运行时并发标记对象。 程序运行时，垃圾回收器运行一个普通优先级的后台线程来查找不可达对象。找到之后，垃圾回收器再次挂起所以线程，判断是否要“压缩”内存。如决定压缩，内存会被压缩，根引用会被修正，应用程序线程恢复运行。这一次垃圾回收花费的时间比平常少，因为不可达对象集合已构造好了。但垃圾回收器也可能决定不压缩内存；事实上，垃圾回收器更倾向不压缩。可用内存多，垃圾回收器便不会压缩堆；这有利于增强性能，但会增大程序的工作集。使用并发垃圾回收器，应用程序消耗的内存通常比使用非并发垃圾回收器多。","slug":"C#.NET托管堆和垃圾回收(续)","published":1,"updated":"2018-05-17T13:35:35.968Z","comments":1,"photos":[],"link":"","_id":"cjhal1fw1000jp631xlk43wr3","content":"<h1 id=\"托管堆和垃圾回收-续\"><a href=\"#托管堆和垃圾回收-续\" class=\"headerlink\" title=\"托管堆和垃圾回收(续)\"></a>托管堆和垃圾回收(续)</h1><h2 id=\"大对象\"><a href=\"#大对象\" class=\"headerlink\" title=\"大对象\"></a>大对象</h2><p> CLR将对象分成大对象和小对象。目前认为85000字节或者更大的对象是大对象。CLR以不同方式对待大小对象。</p>\n<ol>\n<li><p>大对象不是在小对象的地址空间分配的，而是在进程地址空间的其他地方分配。</p>\n</li>\n<li><p>目前版本的GC不“压缩”大对象，因为在内存中移动它们代价过高。但这可能在进程中的大对象之间造成地址空间碎片化，以至于抛出OutMemoryException。CLR将来的版本可能会压缩大对象。</p>\n</li>\n<li>大对象总是第2代，绝不可能是第0代或者第1代。所以只能为需要长时间存活的资源创建大对象。分配短时间存活的大对象会导致第2代被更频繁地回收，损失性能。大对象一般是大字符串（XML/JSON）或者用于I/O操作的字节数组（从文件/网络将字节读入缓冲区以便处理）。</li>\n</ol>\n<h2 id=\"垃圾回收模式\"><a href=\"#垃圾回收模式\" class=\"headerlink\" title=\"垃圾回收模式\"></a>垃圾回收模式</h2><p> CLR启动时会选择一个GC模式，进程中之前该模式都不会改变。</p>\n<p> 有两个基本GC模式。</p>\n<h3 id=\"工作站\"><a href=\"#工作站\" class=\"headerlink\" title=\"工作站\"></a>工作站</h3><ul>\n<li>该模式针对客户端应用程序优化GC。GC造成的延时很低，应用程序线程挂起时间很短，避免用户感到焦虑。在该模式中,GC假定机器上运行的其他应用程序都不会消耗太多的CPU资源。</li>\n</ul>\n<h3 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h3><ul>\n<li>该模式针对服务器端应用程序优化GC。被优化的主要是吞吐量和资源利用。GC假定机器上没有运行其他应用程序（无论客户端还是服务器应用程序），并假定机器的所有CPU都可以用来辅助完成GC。该模式造成托管堆被拆分成几个区域，每个CPU一个。开始垃圾回收时，垃圾回收器在每个CPU上运行一个特殊线程；每个线程都和其他线程并发回收它自己的区域。对于工作者线程行为一致的服务器应用程序，并发回收能很好进行。这个功能要求应用程序在多CPU计算机上运行，是线程能真正同时工作，从而得到性能上的提升。</li>\n</ul>\n<p>应用程序默认以“工作站”GC模式运行。寄宿了CLR的服务器应用程序（如ASP.NET ）可请求CLR加载服务器 GC.但如果应用程序在单处理器计算机上运行，CLR总是使用“工作站”GC模式。</p>\n<p>独立应用程序可以创建一个配置文件告诉CLR 使用CLR使用服务器回收器。配置文件要为应用程序添加gcServer元素。下面是一个示例配置文件：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">runtime</span>&gt;</span></span><br><span class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">gcServer</span> <span class=\"attr\">enabled</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">runtime</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以使用GCSettings类的只读Boolean属性IsServerGC得到CLR是否处于“服务器”GC模式。</p>\n<p>除了这两种模式，GC还支持两种子模式：并发(默认)或者非并发。<br>在并发方式中，垃圾回收器有一个额外的后台线程，它能在应用程序运行时并发标记对象。 程序运行时，垃圾回收器运行一个普通优先级的后台线程来查找不可达对象。找到之后，垃圾回收器再次挂起所以线程，判断是否要“压缩”内存。如决定压缩，内存会被压缩，根引用会被修正，应用程序线程恢复运行。这一次垃圾回收花费的时间比平常少，因为不可达对象集合已构造好了。但垃圾回收器也可能决定不压缩内存；事实上，垃圾回收器更倾向不压缩。可用内存多，垃圾回收器便不会压缩堆；这有利于增强性能，但会增大程序的工作集。使用并发垃圾回收器，应用程序消耗的内存通常比使用非并发垃圾回收器多。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"托管堆和垃圾回收-续\"><a href=\"#托管堆和垃圾回收-续\" class=\"headerlink\" title=\"托管堆和垃圾回收(续)\"></a>托管堆和垃圾回收(续)</h1><h2 id=\"大对象\"><a href=\"#大对象\" class=\"headerlink\" title=\"大对象\"></a>大对象</h2><p> CLR将对象分成大对象和小对象。目前认为85000字节或者更大的对象是大对象。CLR以不同方式对待大小对象。</p>\n<ol>\n<li><p>大对象不是在小对象的地址空间分配的，而是在进程地址空间的其他地方分配。</p>\n</li>\n<li><p>目前版本的GC不“压缩”大对象，因为在内存中移动它们代价过高。但这可能在进程中的大对象之间造成地址空间碎片化，以至于抛出OutMemoryException。CLR将来的版本可能会压缩大对象。</p>\n</li>\n<li>大对象总是第2代，绝不可能是第0代或者第1代。所以只能为需要长时间存活的资源创建大对象。分配短时间存活的大对象会导致第2代被更频繁地回收，损失性能。大对象一般是大字符串（XML/JSON）或者用于I/O操作的字节数组（从文件/网络将字节读入缓冲区以便处理）。</li>\n</ol>\n<h2 id=\"垃圾回收模式\"><a href=\"#垃圾回收模式\" class=\"headerlink\" title=\"垃圾回收模式\"></a>垃圾回收模式</h2><p> CLR启动时会选择一个GC模式，进程中之前该模式都不会改变。</p>\n<p> 有两个基本GC模式。</p>\n<h3 id=\"工作站\"><a href=\"#工作站\" class=\"headerlink\" title=\"工作站\"></a>工作站</h3><ul>\n<li>该模式针对客户端应用程序优化GC。GC造成的延时很低，应用程序线程挂起时间很短，避免用户感到焦虑。在该模式中,GC假定机器上运行的其他应用程序都不会消耗太多的CPU资源。</li>\n</ul>\n<h3 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h3><ul>\n<li>该模式针对服务器端应用程序优化GC。被优化的主要是吞吐量和资源利用。GC假定机器上没有运行其他应用程序（无论客户端还是服务器应用程序），并假定机器的所有CPU都可以用来辅助完成GC。该模式造成托管堆被拆分成几个区域，每个CPU一个。开始垃圾回收时，垃圾回收器在每个CPU上运行一个特殊线程；每个线程都和其他线程并发回收它自己的区域。对于工作者线程行为一致的服务器应用程序，并发回收能很好进行。这个功能要求应用程序在多CPU计算机上运行，是线程能真正同时工作，从而得到性能上的提升。</li>\n</ul>\n<p>应用程序默认以“工作站”GC模式运行。寄宿了CLR的服务器应用程序（如ASP.NET ）可请求CLR加载服务器 GC.但如果应用程序在单处理器计算机上运行，CLR总是使用“工作站”GC模式。</p>\n<p>独立应用程序可以创建一个配置文件告诉CLR 使用CLR使用服务器回收器。配置文件要为应用程序添加gcServer元素。下面是一个示例配置文件：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">runtime</span>&gt;</span></span><br><span class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">gcServer</span> <span class=\"attr\">enabled</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">runtime</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以使用GCSettings类的只读Boolean属性IsServerGC得到CLR是否处于“服务器”GC模式。</p>\n<p>除了这两种模式，GC还支持两种子模式：并发(默认)或者非并发。<br>在并发方式中，垃圾回收器有一个额外的后台线程，它能在应用程序运行时并发标记对象。 程序运行时，垃圾回收器运行一个普通优先级的后台线程来查找不可达对象。找到之后，垃圾回收器再次挂起所以线程，判断是否要“压缩”内存。如决定压缩，内存会被压缩，根引用会被修正，应用程序线程恢复运行。这一次垃圾回收花费的时间比平常少，因为不可达对象集合已构造好了。但垃圾回收器也可能决定不压缩内存；事实上，垃圾回收器更倾向不压缩。可用内存多，垃圾回收器便不会压缩堆；这有利于增强性能，但会增大程序的工作集。使用并发垃圾回收器，应用程序消耗的内存通常比使用非并发垃圾回收器多。</p>\n"},{"layout":"post","title":"C#.NET托管堆和垃圾回收","date":"2016-10-03T16:00:00.000Z","_content":"# dotnet托管堆和垃圾回收\n\n## 托管堆基础\n\n 简述：每个程序都要使用这样或那样的资源，包括文件、内存缓冲区、屏幕空间、网络连接.....事实上，在面向对象的环境中，每个类型都代表可供程序使用的一种资源。要使用这些资源，必须为代表资源的类型分配内存。\n 以下是访问一个资源所需步骤：\n\n1. 调用IL指令newobj，为代表资源的类型分配内存。(C# new操作符)\n2. 初始化内存，设置资源的初始状态。（一般指构造函数）\n3. 访问类型的成员来使用资源。（使用成员变量、方法、属性等）\n4. 摧毁资源的状态以进行清除。（Dispose？？？）\n5. 释放内存。（GC） \n\n## 从托管堆分配资源\n\nCLR要求所有的对象都从托管堆分配。\n进程初始化，CLR划出一个地址空间区域作为托管堆。CLR还要维护一个指针，姑且叫NextObjPtr，该指针指向下一个对象在堆中的分配位置。刚开始的时候， NextObjPtr 设为地址空间区域的基地址。\n一个区域被非垃圾对象填满后，CLR会分配更多的区域。\n\n\n这一个过程一直重复，直至整个进程地址空间被填满。所以，应用程序内存收进程的虚拟地址空间的限制。\n\n\n32位进程最多能分配1.5GB，64位进程最多能分配8T。\n注：进程内存大小的相关资料\n\n[Memory Support and Windows Operating Systems](https://msdn.microsoft.com/zh-cn/library/windows/hardware/Dn613959(v=vs.85).aspx)\n\n[进程地址空间](https://msdn.microsoft.com/zh-cn/library/ms189334.aspx)\n\n[ 32位模式下C/C++程序可用最大内存](http://blog.csdn.net/yusiguyuan/article/details/12405799)\n\n## C# 的new操作符导致CLR执行以下操作：\n\n1. 计算类型的字段（以及从基类型继承的字段）所需要的字节数。\n\n2. 加上对象的开销所需的字节数。每个对象都有两个开销字段：类型对象指针和同步块索引。对于32位应用程序，这两个字段各需要32位，所以每个对象需要增加8字节。对于64位应用程序，这两个字段各需要64位，所以每个对象要增加16字节。\n\n3. CLR检查区域中是否有分配对象所需的字节数。如果托管堆有足够的可用空间，就在NetxObjPtr指针指向的地址处放入对象，为对象分配的字节会被清零。接着调用类型的构造器（为this参数传递NextObjPtr），new操作符返回对象引用。就在返回这个对象引用之前，NextObjPtr指针的值会加上这个对象占用的字节数来得到一个新值，即下个对象放入托管堆时的地址。如下图：\n\n![tup](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/i3rlSCPAcnT9pL0El0BptPIBpuvnxHpBw9Nkp*UqIjw!/o/dJMAAAAAAAAA&ek=1&kp=1&pt=0&bo=LwKNAC8CjQADACU!&su=1199793361&sce=0-12-12&rf=2-9)\n\n\n### 垃圾回收算法\n\n####CLR使用引用跟踪算法。\n\n引用跟踪算法只关心引用类型的变量，因为只有这种变量才能引用堆上面的对象；\n值类型变量直接包含值类型实例。引用类型变量可在许多场合使用，包括类的静态和实例字段，或者方法的参数和局部变量。这里我们将所有引用类型的变量都称为根。\nCLR开始GC时，首先暂停所有的线程。(这样可以防止线程在CLR检查期间访问对象并更改其状态。) 然后CLR进入GC标记阶段。在这个阶段，CLR遍历堆中的所有对象，将同步块索引字段中的一位设为0。这表明所有的对象都应删除。然后，CLR检查所有的活动根，查看他们引用了哪些对象。这正是CLR的GC被称作引用跟踪GC的原因。如果一个根包含null，CLR忽略这个根并继续检查下一个根。\n下图展示一个堆，其中包含几个对象。\n![图片1](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/eVBVeXGrNAfoWfyRgl4aC2RRSGgiDpmbrocv4lTSJMA!/o/dJIAAAAAAAAA&ek=1&kp=1&pt=0&bo=gAIFAYACBQEDACU!&su=1176931729&sce=0-12-12&rf=2-9)\n\n应用程序的根直接引用对象A 、C、D 、F。所有的对象都已经被标记。标记对象D时，GC发现这个对象含有一个引用对象H的字段，造成对象H也被标记。标记过程会持续，直至应用程序的所有根所有检查完毕。\n检查完毕后，堆中的对象要么已标记，要么未标记。已标记的对象不能被垃圾回收，因为至少有一个根在引用它。我们说这种对象是可达的，因为应用程序可以通过引用它的变量抵达它。 未标记的对象是不可达的，因为应用程序中不存在使对象能被再次访问的根。\n\nCLR知道哪些对象可以幸存，哪些可以被删除后，进入GC的压缩（类似于碎片整理）阶段。在压缩阶段，CLR对堆中已标记的对象进行“乾坤大挪移”，整理所有幸存下来的对象，使他们占用连续的内存。\n\n这样做的好处在于：\n\n1. 所有幸存对象在内存中紧挨在一起，恢复了引用的“局部性”，减少了应用程序的工作集，从而提升了将来访问这些对象时的性能；\n\n2. 经过整理后，可用空间也是连续的，整个地址空间区段得到了解放，允许其他东西进驻。\n\n在内存中移动了对象之后有一个问题亟待解决。引用幸存对象的根现在引用的还是对象最初在内存中的位置，而非移动后的位置。被暂停的线程恢复执行时，将访问旧的内存位置，会造成内存损坏。 这显然是不能容忍的，所以作为压缩阶段的一部分，CLR还要从每个根减去所引用对象在内存中偏移的字节数。这样就能保证每个根还是引用和之前一样的对象，只是对象在内存中变换了位置。\n如图：\n![123](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/FyP2yk1O6kMsq3.u4e4x3qrAxpwbajgSHOd4QHTJOhE!/o/dJIAAAAAAAAA&ek=1&kp=1&pt=0&bo=TQI*AU0CPwEDACU!&su=1202148209&sce=0-12-12&rf=2-9)\n\n## 代：提升性能 (待续)\n\nCLR的GC是基于代的垃圾回收器，它对你的代码做出了以下几点假设：\n\n\n1. 对象越新，生存周期越短。\n\n2. 对象越老，生存周期越长。\n\n3. 回收堆的一部分 ，速度快于回收整个堆。\n\n大量研究表明，这些假设对于现今大多数的应用程序都是成立的，它们影响了垃圾回收器的实现方式。这里将解释代的工作原理。\n\n托管堆在初始化时不包括对象。添加到堆的对象成为第0代对象。简单来说，第0代对象就是那些新构造的对象，垃圾回收器从未检查过它们。如下图，新启动的应用程序，分配了5个对象（从A到E）。过了一会，C和E变得不可达了。\n\n![23](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/77WJus7lssJpEJ2RZREQoNx.5CL31HLdboJbAgCqS0E!/o/dJMAAAAAAAAA&ek=1&kp=1&pt=0&bo=tQIVAbUCFQEDACU!&su=172682065&sce=0-12-12&rf=2-9)\n\nCLR初始化第0代对象选择一个预算容量。如果分配一个新对象造成第0代超预算，就必须启动一次GC。假设对象A到E刚好用完了第0代的空间，那么分配对象F就必须启动GC。GC之后存活的对象现场成为第1代对象。如下图：\n\n![123](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/GEDzaV4pNFNQUuDwl2EQrv*eD9Sk9OJCzx5SpRRI2fk!/o/dGUBAAAAAAAA&ek=1&kp=1&pt=0&bo=OAL5ADgC.QADACU!&su=1155276897&sce=0-12-12&rf=2-9)\n一次GC之后，第0代就不包含任何对象。和前面一样，新对象会分配到第0代。新分配对象F到对象K都到了第0代。\n![234](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/Op0QokzBTNYCFR6zzm2tpc2V7U70IsIJTeWrd0UAUb0!/o/dGUBAAAAAAAA&ek=1&kp=1&pt=0&bo=yAJeAcgCXgEDACU!&su=1124261217&sce=0-12-12&rf=2-9)\n\n之后，程序继续运行，B、H、J变得不可达，它们的内存将在某一个时刻回收。\n\n假设现在新分配对象L会造成第0代超出预算,造成必须启动垃圾回收。\n\n开始垃圾回收时,垃圾回收器必须决定检查哪些代。前面说过,CLR初始化时会为第0代对象选择预算.事实上,它还必须为第1代选择预算.\n\n开始一次垃圾回收时,垃圾回收器还会检查第一代占用了多少内存。在本例中,由于第1代占用内存远少于预算,所以垃圾回收器只检查第0代对象。回顾之前基于代的垃圾回收器做出的第一个假设：对象越新，生存期越短。 因此，第0代包含更多的垃圾的可能性更大，能回收更多的内存。由于忽略第1代中的对象，所以加快了垃圾回收速度。\n\n显然，忽略第1代中的对象能提升垃圾回收器的性能。但对性能有更大提振作用的是现在不必遍历托管堆中的每个对象。如果根或对象引用了老一代的某个对象，垃圾回收器就可以忽略老对象内部的所有引用，能在更短的时间内构造好可达对象图。当然，如果老对象的字段也可能引用新对象。为了确保对老对象的已更新字段进行检查，垃圾回收器利用了JIT编译器内部的一个机制。这个机制在对象的引用字段发生变化时，会设置一个对应的标志位。这样，垃圾回收器就知道自上一次垃圾回收以来，哪些老对象（如果有的话）已被写入。只有字段发生变化的老对象才需要检查是否引用了第0代中的任何新对象。\n\n基于代的垃圾回收器还假设越老的对象活得越长。也就是说，第1代对象在应用程序中有可能是继续可达的。如果垃圾回收器检查第1代的对象，很有可能找不到多少垃圾，结果是也回收不了多少内存。因此，对第1代进行垃圾回收很可能是浪费时间的。如果第一代真有垃圾，垃圾将留在那里。如下图：\n![2345](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/Do.yRCBJEnaOfZaUOdxj4II9*pX2BEcX2QmIG6NQPBE!/o/dGUBAAAAAAAA&ek=1&kp=1&pt=0&bo=qAI5AagCOQEDACU!&su=187009937&sce=0-12-12&rf=2-9)\n\n程序继续运行，继续往第0代分配对象，同时程序停止对第1代某对象的使用。\n\n如下图：\n![edf](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/YEqIM16xFsSgXdvEzgrerLnKw7fEItnrSqEzlaYnUfE!/o/dGUBAAAAAAAA&ek=1&kp=1&pt=0&bo=egJPAXoCTwEDACU!&su=1118118497&sce=0-12-12&rf=2-9)\n分配对象P导致第0代超预算，开始GC。第1代的所有对象占据内存仍小于预算，垃圾回收器再次决定只回收第0代。忽略第1代中的垃圾对象。如下图：\n![2345](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/EcdSNU5AatqRERWtVdlJ7LiIPHHXe8.mklN.0hHDK9U!/o/dJQAAAAAAAAA&ek=1&kp=1&pt=0&bo=aAIxAWgCMQEDACU!&su=1214124305&sce=0-12-12&rf=2-9)\n\n程序继续运行，假设第一代的增长导致它的全部对象占用了全部预算。这时候应用程序分配对象P到对象S，使第0代对象达到它的预算总和。如下图：\n![43](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/6dB68RIUYrqMZ4p0VIY3REJZPg.g3ybkZFIazJ3h.CQ!/o/dJIAAAAAAAAA&ek=1&kp=1&pt=0&bo=jwIiAY8CIgEDACU!&su=177976657&sce=0-12-12&rf=2-9)\n\n这时候，应用程序准备分配对象T，由于第一代已满，所以必须开始GC。但这一次垃圾回收器发现第一代占用了太多内存，以至于用完了预算。由于前几次对第0代进行GC时，第1代中可能已经有很多对象变得不可达。所以这次垃圾回收器决定检查第1代和第0代中的所有对象。两代都被垃圾回收后，堆的情况如下图：\n![123](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/bxdZDsZi2Y6FSDWs7RXNPkkJK8dCzMD.cfnjwNY2Mjs!/o/dJIAAAAAAAAA&ek=1&kp=1&pt=0&bo=tgI2AbYCNgEDACU!&su=197762641&sce=0-12-12&rf=2-9)\n\n托管堆只支持三代：第0代、第1代和第2代。\n\nCLR初始化时，会为每一代选择预算。\n\n然而，CLR的垃圾回收是自调节的。\n\n这意味着垃圾回收器会在执行垃圾回收的过程了解程序的行为。\n\n\n例如：假设应用程序构造了许多对象，但每个对象的时间都很短。\n在这种情况下，对第0代的垃圾回收会回收到大量的内存。事实上，第0代的所有对象都可能被回收。\n\n如果垃圾回收器发现在回收第0代后存活下来的对象很少，就可能减少第0代的预算。已分配空间的减少意味着垃圾回收将更频繁地发生，但垃圾回收器每次做的事情也减少，这减少了进程的工作集。\n\n另一方面，如果垃圾回收器回收了第0代，发现还有很多对象存活，没多少内存可以被回收，就会增大第0代的预算。\n\n同样的启发性算法调整预算适用于了第1代和第2代的预算。\n\n引自：《CLR VIA C# -21章》\n\n[自动内存管理](https://msdn.microsoft.com/zh-cn/library/vstudio/f144e03t(v=vs.100).aspx)\n\n[垃圾回收的基础](https://msdn.microsoft.com/zh-cn/library/vstudio/ee787088(v=vs.100).aspx)\n\n[代数](https://msdn.microsoft.com/zh-cn/library/vstudio/ee787088(v=vs.100).aspx#generations )","source":"_posts/C#.NET托管堆和垃圾回收.md","raw":"---\nlayout: post\ntitle: C#.NET托管堆和垃圾回收\ncategory: dotnet\ndate: 2016-10-04\ntags:\n- dotnet core\n---\n# dotnet托管堆和垃圾回收\n\n## 托管堆基础\n\n 简述：每个程序都要使用这样或那样的资源，包括文件、内存缓冲区、屏幕空间、网络连接.....事实上，在面向对象的环境中，每个类型都代表可供程序使用的一种资源。要使用这些资源，必须为代表资源的类型分配内存。\n 以下是访问一个资源所需步骤：\n\n1. 调用IL指令newobj，为代表资源的类型分配内存。(C# new操作符)\n2. 初始化内存，设置资源的初始状态。（一般指构造函数）\n3. 访问类型的成员来使用资源。（使用成员变量、方法、属性等）\n4. 摧毁资源的状态以进行清除。（Dispose？？？）\n5. 释放内存。（GC） \n\n## 从托管堆分配资源\n\nCLR要求所有的对象都从托管堆分配。\n进程初始化，CLR划出一个地址空间区域作为托管堆。CLR还要维护一个指针，姑且叫NextObjPtr，该指针指向下一个对象在堆中的分配位置。刚开始的时候， NextObjPtr 设为地址空间区域的基地址。\n一个区域被非垃圾对象填满后，CLR会分配更多的区域。\n\n\n这一个过程一直重复，直至整个进程地址空间被填满。所以，应用程序内存收进程的虚拟地址空间的限制。\n\n\n32位进程最多能分配1.5GB，64位进程最多能分配8T。\n注：进程内存大小的相关资料\n\n[Memory Support and Windows Operating Systems](https://msdn.microsoft.com/zh-cn/library/windows/hardware/Dn613959(v=vs.85).aspx)\n\n[进程地址空间](https://msdn.microsoft.com/zh-cn/library/ms189334.aspx)\n\n[ 32位模式下C/C++程序可用最大内存](http://blog.csdn.net/yusiguyuan/article/details/12405799)\n\n## C# 的new操作符导致CLR执行以下操作：\n\n1. 计算类型的字段（以及从基类型继承的字段）所需要的字节数。\n\n2. 加上对象的开销所需的字节数。每个对象都有两个开销字段：类型对象指针和同步块索引。对于32位应用程序，这两个字段各需要32位，所以每个对象需要增加8字节。对于64位应用程序，这两个字段各需要64位，所以每个对象要增加16字节。\n\n3. CLR检查区域中是否有分配对象所需的字节数。如果托管堆有足够的可用空间，就在NetxObjPtr指针指向的地址处放入对象，为对象分配的字节会被清零。接着调用类型的构造器（为this参数传递NextObjPtr），new操作符返回对象引用。就在返回这个对象引用之前，NextObjPtr指针的值会加上这个对象占用的字节数来得到一个新值，即下个对象放入托管堆时的地址。如下图：\n\n![tup](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/i3rlSCPAcnT9pL0El0BptPIBpuvnxHpBw9Nkp*UqIjw!/o/dJMAAAAAAAAA&ek=1&kp=1&pt=0&bo=LwKNAC8CjQADACU!&su=1199793361&sce=0-12-12&rf=2-9)\n\n\n### 垃圾回收算法\n\n####CLR使用引用跟踪算法。\n\n引用跟踪算法只关心引用类型的变量，因为只有这种变量才能引用堆上面的对象；\n值类型变量直接包含值类型实例。引用类型变量可在许多场合使用，包括类的静态和实例字段，或者方法的参数和局部变量。这里我们将所有引用类型的变量都称为根。\nCLR开始GC时，首先暂停所有的线程。(这样可以防止线程在CLR检查期间访问对象并更改其状态。) 然后CLR进入GC标记阶段。在这个阶段，CLR遍历堆中的所有对象，将同步块索引字段中的一位设为0。这表明所有的对象都应删除。然后，CLR检查所有的活动根，查看他们引用了哪些对象。这正是CLR的GC被称作引用跟踪GC的原因。如果一个根包含null，CLR忽略这个根并继续检查下一个根。\n下图展示一个堆，其中包含几个对象。\n![图片1](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/eVBVeXGrNAfoWfyRgl4aC2RRSGgiDpmbrocv4lTSJMA!/o/dJIAAAAAAAAA&ek=1&kp=1&pt=0&bo=gAIFAYACBQEDACU!&su=1176931729&sce=0-12-12&rf=2-9)\n\n应用程序的根直接引用对象A 、C、D 、F。所有的对象都已经被标记。标记对象D时，GC发现这个对象含有一个引用对象H的字段，造成对象H也被标记。标记过程会持续，直至应用程序的所有根所有检查完毕。\n检查完毕后，堆中的对象要么已标记，要么未标记。已标记的对象不能被垃圾回收，因为至少有一个根在引用它。我们说这种对象是可达的，因为应用程序可以通过引用它的变量抵达它。 未标记的对象是不可达的，因为应用程序中不存在使对象能被再次访问的根。\n\nCLR知道哪些对象可以幸存，哪些可以被删除后，进入GC的压缩（类似于碎片整理）阶段。在压缩阶段，CLR对堆中已标记的对象进行“乾坤大挪移”，整理所有幸存下来的对象，使他们占用连续的内存。\n\n这样做的好处在于：\n\n1. 所有幸存对象在内存中紧挨在一起，恢复了引用的“局部性”，减少了应用程序的工作集，从而提升了将来访问这些对象时的性能；\n\n2. 经过整理后，可用空间也是连续的，整个地址空间区段得到了解放，允许其他东西进驻。\n\n在内存中移动了对象之后有一个问题亟待解决。引用幸存对象的根现在引用的还是对象最初在内存中的位置，而非移动后的位置。被暂停的线程恢复执行时，将访问旧的内存位置，会造成内存损坏。 这显然是不能容忍的，所以作为压缩阶段的一部分，CLR还要从每个根减去所引用对象在内存中偏移的字节数。这样就能保证每个根还是引用和之前一样的对象，只是对象在内存中变换了位置。\n如图：\n![123](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/FyP2yk1O6kMsq3.u4e4x3qrAxpwbajgSHOd4QHTJOhE!/o/dJIAAAAAAAAA&ek=1&kp=1&pt=0&bo=TQI*AU0CPwEDACU!&su=1202148209&sce=0-12-12&rf=2-9)\n\n## 代：提升性能 (待续)\n\nCLR的GC是基于代的垃圾回收器，它对你的代码做出了以下几点假设：\n\n\n1. 对象越新，生存周期越短。\n\n2. 对象越老，生存周期越长。\n\n3. 回收堆的一部分 ，速度快于回收整个堆。\n\n大量研究表明，这些假设对于现今大多数的应用程序都是成立的，它们影响了垃圾回收器的实现方式。这里将解释代的工作原理。\n\n托管堆在初始化时不包括对象。添加到堆的对象成为第0代对象。简单来说，第0代对象就是那些新构造的对象，垃圾回收器从未检查过它们。如下图，新启动的应用程序，分配了5个对象（从A到E）。过了一会，C和E变得不可达了。\n\n![23](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/77WJus7lssJpEJ2RZREQoNx.5CL31HLdboJbAgCqS0E!/o/dJMAAAAAAAAA&ek=1&kp=1&pt=0&bo=tQIVAbUCFQEDACU!&su=172682065&sce=0-12-12&rf=2-9)\n\nCLR初始化第0代对象选择一个预算容量。如果分配一个新对象造成第0代超预算，就必须启动一次GC。假设对象A到E刚好用完了第0代的空间，那么分配对象F就必须启动GC。GC之后存活的对象现场成为第1代对象。如下图：\n\n![123](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/GEDzaV4pNFNQUuDwl2EQrv*eD9Sk9OJCzx5SpRRI2fk!/o/dGUBAAAAAAAA&ek=1&kp=1&pt=0&bo=OAL5ADgC.QADACU!&su=1155276897&sce=0-12-12&rf=2-9)\n一次GC之后，第0代就不包含任何对象。和前面一样，新对象会分配到第0代。新分配对象F到对象K都到了第0代。\n![234](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/Op0QokzBTNYCFR6zzm2tpc2V7U70IsIJTeWrd0UAUb0!/o/dGUBAAAAAAAA&ek=1&kp=1&pt=0&bo=yAJeAcgCXgEDACU!&su=1124261217&sce=0-12-12&rf=2-9)\n\n之后，程序继续运行，B、H、J变得不可达，它们的内存将在某一个时刻回收。\n\n假设现在新分配对象L会造成第0代超出预算,造成必须启动垃圾回收。\n\n开始垃圾回收时,垃圾回收器必须决定检查哪些代。前面说过,CLR初始化时会为第0代对象选择预算.事实上,它还必须为第1代选择预算.\n\n开始一次垃圾回收时,垃圾回收器还会检查第一代占用了多少内存。在本例中,由于第1代占用内存远少于预算,所以垃圾回收器只检查第0代对象。回顾之前基于代的垃圾回收器做出的第一个假设：对象越新，生存期越短。 因此，第0代包含更多的垃圾的可能性更大，能回收更多的内存。由于忽略第1代中的对象，所以加快了垃圾回收速度。\n\n显然，忽略第1代中的对象能提升垃圾回收器的性能。但对性能有更大提振作用的是现在不必遍历托管堆中的每个对象。如果根或对象引用了老一代的某个对象，垃圾回收器就可以忽略老对象内部的所有引用，能在更短的时间内构造好可达对象图。当然，如果老对象的字段也可能引用新对象。为了确保对老对象的已更新字段进行检查，垃圾回收器利用了JIT编译器内部的一个机制。这个机制在对象的引用字段发生变化时，会设置一个对应的标志位。这样，垃圾回收器就知道自上一次垃圾回收以来，哪些老对象（如果有的话）已被写入。只有字段发生变化的老对象才需要检查是否引用了第0代中的任何新对象。\n\n基于代的垃圾回收器还假设越老的对象活得越长。也就是说，第1代对象在应用程序中有可能是继续可达的。如果垃圾回收器检查第1代的对象，很有可能找不到多少垃圾，结果是也回收不了多少内存。因此，对第1代进行垃圾回收很可能是浪费时间的。如果第一代真有垃圾，垃圾将留在那里。如下图：\n![2345](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/Do.yRCBJEnaOfZaUOdxj4II9*pX2BEcX2QmIG6NQPBE!/o/dGUBAAAAAAAA&ek=1&kp=1&pt=0&bo=qAI5AagCOQEDACU!&su=187009937&sce=0-12-12&rf=2-9)\n\n程序继续运行，继续往第0代分配对象，同时程序停止对第1代某对象的使用。\n\n如下图：\n![edf](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/YEqIM16xFsSgXdvEzgrerLnKw7fEItnrSqEzlaYnUfE!/o/dGUBAAAAAAAA&ek=1&kp=1&pt=0&bo=egJPAXoCTwEDACU!&su=1118118497&sce=0-12-12&rf=2-9)\n分配对象P导致第0代超预算，开始GC。第1代的所有对象占据内存仍小于预算，垃圾回收器再次决定只回收第0代。忽略第1代中的垃圾对象。如下图：\n![2345](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/EcdSNU5AatqRERWtVdlJ7LiIPHHXe8.mklN.0hHDK9U!/o/dJQAAAAAAAAA&ek=1&kp=1&pt=0&bo=aAIxAWgCMQEDACU!&su=1214124305&sce=0-12-12&rf=2-9)\n\n程序继续运行，假设第一代的增长导致它的全部对象占用了全部预算。这时候应用程序分配对象P到对象S，使第0代对象达到它的预算总和。如下图：\n![43](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/6dB68RIUYrqMZ4p0VIY3REJZPg.g3ybkZFIazJ3h.CQ!/o/dJIAAAAAAAAA&ek=1&kp=1&pt=0&bo=jwIiAY8CIgEDACU!&su=177976657&sce=0-12-12&rf=2-9)\n\n这时候，应用程序准备分配对象T，由于第一代已满，所以必须开始GC。但这一次垃圾回收器发现第一代占用了太多内存，以至于用完了预算。由于前几次对第0代进行GC时，第1代中可能已经有很多对象变得不可达。所以这次垃圾回收器决定检查第1代和第0代中的所有对象。两代都被垃圾回收后，堆的情况如下图：\n![123](http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/bxdZDsZi2Y6FSDWs7RXNPkkJK8dCzMD.cfnjwNY2Mjs!/o/dJIAAAAAAAAA&ek=1&kp=1&pt=0&bo=tgI2AbYCNgEDACU!&su=197762641&sce=0-12-12&rf=2-9)\n\n托管堆只支持三代：第0代、第1代和第2代。\n\nCLR初始化时，会为每一代选择预算。\n\n然而，CLR的垃圾回收是自调节的。\n\n这意味着垃圾回收器会在执行垃圾回收的过程了解程序的行为。\n\n\n例如：假设应用程序构造了许多对象，但每个对象的时间都很短。\n在这种情况下，对第0代的垃圾回收会回收到大量的内存。事实上，第0代的所有对象都可能被回收。\n\n如果垃圾回收器发现在回收第0代后存活下来的对象很少，就可能减少第0代的预算。已分配空间的减少意味着垃圾回收将更频繁地发生，但垃圾回收器每次做的事情也减少，这减少了进程的工作集。\n\n另一方面，如果垃圾回收器回收了第0代，发现还有很多对象存活，没多少内存可以被回收，就会增大第0代的预算。\n\n同样的启发性算法调整预算适用于了第1代和第2代的预算。\n\n引自：《CLR VIA C# -21章》\n\n[自动内存管理](https://msdn.microsoft.com/zh-cn/library/vstudio/f144e03t(v=vs.100).aspx)\n\n[垃圾回收的基础](https://msdn.microsoft.com/zh-cn/library/vstudio/ee787088(v=vs.100).aspx)\n\n[代数](https://msdn.microsoft.com/zh-cn/library/vstudio/ee787088(v=vs.100).aspx#generations )","slug":"C#.NET托管堆和垃圾回收","published":1,"updated":"2018-05-17T13:35:15.664Z","comments":1,"photos":[],"link":"","_id":"cjhal1fw2000op6316iy2n2hc","content":"<h1 id=\"dotnet托管堆和垃圾回收\"><a href=\"#dotnet托管堆和垃圾回收\" class=\"headerlink\" title=\"dotnet托管堆和垃圾回收\"></a>dotnet托管堆和垃圾回收</h1><h2 id=\"托管堆基础\"><a href=\"#托管堆基础\" class=\"headerlink\" title=\"托管堆基础\"></a>托管堆基础</h2><p> 简述：每个程序都要使用这样或那样的资源，包括文件、内存缓冲区、屏幕空间、网络连接…..事实上，在面向对象的环境中，每个类型都代表可供程序使用的一种资源。要使用这些资源，必须为代表资源的类型分配内存。<br> 以下是访问一个资源所需步骤：</p>\n<ol>\n<li>调用IL指令newobj，为代表资源的类型分配内存。(C# new操作符)</li>\n<li>初始化内存，设置资源的初始状态。（一般指构造函数）</li>\n<li>访问类型的成员来使用资源。（使用成员变量、方法、属性等）</li>\n<li>摧毁资源的状态以进行清除。（Dispose？？？）</li>\n<li>释放内存。（GC） </li>\n</ol>\n<h2 id=\"从托管堆分配资源\"><a href=\"#从托管堆分配资源\" class=\"headerlink\" title=\"从托管堆分配资源\"></a>从托管堆分配资源</h2><p>CLR要求所有的对象都从托管堆分配。<br>进程初始化，CLR划出一个地址空间区域作为托管堆。CLR还要维护一个指针，姑且叫NextObjPtr，该指针指向下一个对象在堆中的分配位置。刚开始的时候， NextObjPtr 设为地址空间区域的基地址。<br>一个区域被非垃圾对象填满后，CLR会分配更多的区域。</p>\n<p>这一个过程一直重复，直至整个进程地址空间被填满。所以，应用程序内存收进程的虚拟地址空间的限制。</p>\n<p>32位进程最多能分配1.5GB，64位进程最多能分配8T。<br>注：进程内存大小的相关资料</p>\n<p><a href=\"https://msdn.microsoft.com/zh-cn/library/windows/hardware/Dn613959(v=vs.85\" target=\"_blank\" rel=\"noopener\">Memory Support and Windows Operating Systems</a>.aspx)</p>\n<p><a href=\"https://msdn.microsoft.com/zh-cn/library/ms189334.aspx\" target=\"_blank\" rel=\"noopener\">进程地址空间</a></p>\n<p><a href=\"http://blog.csdn.net/yusiguyuan/article/details/12405799\" target=\"_blank\" rel=\"noopener\"> 32位模式下C/C++程序可用最大内存</a></p>\n<h2 id=\"C-的new操作符导致CLR执行以下操作：\"><a href=\"#C-的new操作符导致CLR执行以下操作：\" class=\"headerlink\" title=\"C# 的new操作符导致CLR执行以下操作：\"></a>C# 的new操作符导致CLR执行以下操作：</h2><ol>\n<li><p>计算类型的字段（以及从基类型继承的字段）所需要的字节数。</p>\n</li>\n<li><p>加上对象的开销所需的字节数。每个对象都有两个开销字段：类型对象指针和同步块索引。对于32位应用程序，这两个字段各需要32位，所以每个对象需要增加8字节。对于64位应用程序，这两个字段各需要64位，所以每个对象要增加16字节。</p>\n</li>\n<li><p>CLR检查区域中是否有分配对象所需的字节数。如果托管堆有足够的可用空间，就在NetxObjPtr指针指向的地址处放入对象，为对象分配的字节会被清零。接着调用类型的构造器（为this参数传递NextObjPtr），new操作符返回对象引用。就在返回这个对象引用之前，NextObjPtr指针的值会加上这个对象占用的字节数来得到一个新值，即下个对象放入托管堆时的地址。如下图：</p>\n</li>\n</ol>\n<p><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/i3rlSCPAcnT9pL0El0BptPIBpuvnxHpBw9Nkp*UqIjw!/o/dJMAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=LwKNAC8CjQADACU!&amp;su=1199793361&amp;sce=0-12-12&amp;rf=2-9\" alt=\"tup\"></p>\n<h3 id=\"垃圾回收算法\"><a href=\"#垃圾回收算法\" class=\"headerlink\" title=\"垃圾回收算法\"></a>垃圾回收算法</h3><p>####CLR使用引用跟踪算法。</p>\n<p>引用跟踪算法只关心引用类型的变量，因为只有这种变量才能引用堆上面的对象；<br>值类型变量直接包含值类型实例。引用类型变量可在许多场合使用，包括类的静态和实例字段，或者方法的参数和局部变量。这里我们将所有引用类型的变量都称为根。<br>CLR开始GC时，首先暂停所有的线程。(这样可以防止线程在CLR检查期间访问对象并更改其状态。) 然后CLR进入GC标记阶段。在这个阶段，CLR遍历堆中的所有对象，将同步块索引字段中的一位设为0。这表明所有的对象都应删除。然后，CLR检查所有的活动根，查看他们引用了哪些对象。这正是CLR的GC被称作引用跟踪GC的原因。如果一个根包含null，CLR忽略这个根并继续检查下一个根。<br>下图展示一个堆，其中包含几个对象。<br><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/eVBVeXGrNAfoWfyRgl4aC2RRSGgiDpmbrocv4lTSJMA!/o/dJIAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=gAIFAYACBQEDACU!&amp;su=1176931729&amp;sce=0-12-12&amp;rf=2-9\" alt=\"图片1\"></p>\n<p>应用程序的根直接引用对象A 、C、D 、F。所有的对象都已经被标记。标记对象D时，GC发现这个对象含有一个引用对象H的字段，造成对象H也被标记。标记过程会持续，直至应用程序的所有根所有检查完毕。<br>检查完毕后，堆中的对象要么已标记，要么未标记。已标记的对象不能被垃圾回收，因为至少有一个根在引用它。我们说这种对象是可达的，因为应用程序可以通过引用它的变量抵达它。 未标记的对象是不可达的，因为应用程序中不存在使对象能被再次访问的根。</p>\n<p>CLR知道哪些对象可以幸存，哪些可以被删除后，进入GC的压缩（类似于碎片整理）阶段。在压缩阶段，CLR对堆中已标记的对象进行“乾坤大挪移”，整理所有幸存下来的对象，使他们占用连续的内存。</p>\n<p>这样做的好处在于：</p>\n<ol>\n<li><p>所有幸存对象在内存中紧挨在一起，恢复了引用的“局部性”，减少了应用程序的工作集，从而提升了将来访问这些对象时的性能；</p>\n</li>\n<li><p>经过整理后，可用空间也是连续的，整个地址空间区段得到了解放，允许其他东西进驻。</p>\n</li>\n</ol>\n<p>在内存中移动了对象之后有一个问题亟待解决。引用幸存对象的根现在引用的还是对象最初在内存中的位置，而非移动后的位置。被暂停的线程恢复执行时，将访问旧的内存位置，会造成内存损坏。 这显然是不能容忍的，所以作为压缩阶段的一部分，CLR还要从每个根减去所引用对象在内存中偏移的字节数。这样就能保证每个根还是引用和之前一样的对象，只是对象在内存中变换了位置。<br>如图：<br><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/FyP2yk1O6kMsq3.u4e4x3qrAxpwbajgSHOd4QHTJOhE!/o/dJIAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=TQI*AU0CPwEDACU!&amp;su=1202148209&amp;sce=0-12-12&amp;rf=2-9\" alt=\"123\"></p>\n<h2 id=\"代：提升性能-待续\"><a href=\"#代：提升性能-待续\" class=\"headerlink\" title=\"代：提升性能 (待续)\"></a>代：提升性能 (待续)</h2><p>CLR的GC是基于代的垃圾回收器，它对你的代码做出了以下几点假设：</p>\n<ol>\n<li><p>对象越新，生存周期越短。</p>\n</li>\n<li><p>对象越老，生存周期越长。</p>\n</li>\n<li><p>回收堆的一部分 ，速度快于回收整个堆。</p>\n</li>\n</ol>\n<p>大量研究表明，这些假设对于现今大多数的应用程序都是成立的，它们影响了垃圾回收器的实现方式。这里将解释代的工作原理。</p>\n<p>托管堆在初始化时不包括对象。添加到堆的对象成为第0代对象。简单来说，第0代对象就是那些新构造的对象，垃圾回收器从未检查过它们。如下图，新启动的应用程序，分配了5个对象（从A到E）。过了一会，C和E变得不可达了。</p>\n<p><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/77WJus7lssJpEJ2RZREQoNx.5CL31HLdboJbAgCqS0E!/o/dJMAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=tQIVAbUCFQEDACU!&amp;su=172682065&amp;sce=0-12-12&amp;rf=2-9\" alt=\"23\"></p>\n<p>CLR初始化第0代对象选择一个预算容量。如果分配一个新对象造成第0代超预算，就必须启动一次GC。假设对象A到E刚好用完了第0代的空间，那么分配对象F就必须启动GC。GC之后存活的对象现场成为第1代对象。如下图：</p>\n<p><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/GEDzaV4pNFNQUuDwl2EQrv*eD9Sk9OJCzx5SpRRI2fk!/o/dGUBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=OAL5ADgC.QADACU!&amp;su=1155276897&amp;sce=0-12-12&amp;rf=2-9\" alt=\"123\"><br>一次GC之后，第0代就不包含任何对象。和前面一样，新对象会分配到第0代。新分配对象F到对象K都到了第0代。<br><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/Op0QokzBTNYCFR6zzm2tpc2V7U70IsIJTeWrd0UAUb0!/o/dGUBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=yAJeAcgCXgEDACU!&amp;su=1124261217&amp;sce=0-12-12&amp;rf=2-9\" alt=\"234\"></p>\n<p>之后，程序继续运行，B、H、J变得不可达，它们的内存将在某一个时刻回收。</p>\n<p>假设现在新分配对象L会造成第0代超出预算,造成必须启动垃圾回收。</p>\n<p>开始垃圾回收时,垃圾回收器必须决定检查哪些代。前面说过,CLR初始化时会为第0代对象选择预算.事实上,它还必须为第1代选择预算.</p>\n<p>开始一次垃圾回收时,垃圾回收器还会检查第一代占用了多少内存。在本例中,由于第1代占用内存远少于预算,所以垃圾回收器只检查第0代对象。回顾之前基于代的垃圾回收器做出的第一个假设：对象越新，生存期越短。 因此，第0代包含更多的垃圾的可能性更大，能回收更多的内存。由于忽略第1代中的对象，所以加快了垃圾回收速度。</p>\n<p>显然，忽略第1代中的对象能提升垃圾回收器的性能。但对性能有更大提振作用的是现在不必遍历托管堆中的每个对象。如果根或对象引用了老一代的某个对象，垃圾回收器就可以忽略老对象内部的所有引用，能在更短的时间内构造好可达对象图。当然，如果老对象的字段也可能引用新对象。为了确保对老对象的已更新字段进行检查，垃圾回收器利用了JIT编译器内部的一个机制。这个机制在对象的引用字段发生变化时，会设置一个对应的标志位。这样，垃圾回收器就知道自上一次垃圾回收以来，哪些老对象（如果有的话）已被写入。只有字段发生变化的老对象才需要检查是否引用了第0代中的任何新对象。</p>\n<p>基于代的垃圾回收器还假设越老的对象活得越长。也就是说，第1代对象在应用程序中有可能是继续可达的。如果垃圾回收器检查第1代的对象，很有可能找不到多少垃圾，结果是也回收不了多少内存。因此，对第1代进行垃圾回收很可能是浪费时间的。如果第一代真有垃圾，垃圾将留在那里。如下图：<br><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/Do.yRCBJEnaOfZaUOdxj4II9*pX2BEcX2QmIG6NQPBE!/o/dGUBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=qAI5AagCOQEDACU!&amp;su=187009937&amp;sce=0-12-12&amp;rf=2-9\" alt=\"2345\"></p>\n<p>程序继续运行，继续往第0代分配对象，同时程序停止对第1代某对象的使用。</p>\n<p>如下图：<br><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/YEqIM16xFsSgXdvEzgrerLnKw7fEItnrSqEzlaYnUfE!/o/dGUBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=egJPAXoCTwEDACU!&amp;su=1118118497&amp;sce=0-12-12&amp;rf=2-9\" alt=\"edf\"><br>分配对象P导致第0代超预算，开始GC。第1代的所有对象占据内存仍小于预算，垃圾回收器再次决定只回收第0代。忽略第1代中的垃圾对象。如下图：<br><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/EcdSNU5AatqRERWtVdlJ7LiIPHHXe8.mklN.0hHDK9U!/o/dJQAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=aAIxAWgCMQEDACU!&amp;su=1214124305&amp;sce=0-12-12&amp;rf=2-9\" alt=\"2345\"></p>\n<p>程序继续运行，假设第一代的增长导致它的全部对象占用了全部预算。这时候应用程序分配对象P到对象S，使第0代对象达到它的预算总和。如下图：<br><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/6dB68RIUYrqMZ4p0VIY3REJZPg.g3ybkZFIazJ3h.CQ!/o/dJIAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=jwIiAY8CIgEDACU!&amp;su=177976657&amp;sce=0-12-12&amp;rf=2-9\" alt=\"43\"></p>\n<p>这时候，应用程序准备分配对象T，由于第一代已满，所以必须开始GC。但这一次垃圾回收器发现第一代占用了太多内存，以至于用完了预算。由于前几次对第0代进行GC时，第1代中可能已经有很多对象变得不可达。所以这次垃圾回收器决定检查第1代和第0代中的所有对象。两代都被垃圾回收后，堆的情况如下图：<br><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/bxdZDsZi2Y6FSDWs7RXNPkkJK8dCzMD.cfnjwNY2Mjs!/o/dJIAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=tgI2AbYCNgEDACU!&amp;su=197762641&amp;sce=0-12-12&amp;rf=2-9\" alt=\"123\"></p>\n<p>托管堆只支持三代：第0代、第1代和第2代。</p>\n<p>CLR初始化时，会为每一代选择预算。</p>\n<p>然而，CLR的垃圾回收是自调节的。</p>\n<p>这意味着垃圾回收器会在执行垃圾回收的过程了解程序的行为。</p>\n<p>例如：假设应用程序构造了许多对象，但每个对象的时间都很短。<br>在这种情况下，对第0代的垃圾回收会回收到大量的内存。事实上，第0代的所有对象都可能被回收。</p>\n<p>如果垃圾回收器发现在回收第0代后存活下来的对象很少，就可能减少第0代的预算。已分配空间的减少意味着垃圾回收将更频繁地发生，但垃圾回收器每次做的事情也减少，这减少了进程的工作集。</p>\n<p>另一方面，如果垃圾回收器回收了第0代，发现还有很多对象存活，没多少内存可以被回收，就会增大第0代的预算。</p>\n<p>同样的启发性算法调整预算适用于了第1代和第2代的预算。</p>\n<p>引自：《CLR VIA C# -21章》</p>\n<p><a href=\"https://msdn.microsoft.com/zh-cn/library/vstudio/f144e03t(v=vs.100\" target=\"_blank\" rel=\"noopener\">自动内存管理</a>.aspx)</p>\n<p><a href=\"https://msdn.microsoft.com/zh-cn/library/vstudio/ee787088(v=vs.100\" target=\"_blank\" rel=\"noopener\">垃圾回收的基础</a>.aspx)</p>\n<p><a href=\"https://msdn.microsoft.com/zh-cn/library/vstudio/ee787088(v=vs.100\" target=\"_blank\" rel=\"noopener\">代数</a>.aspx#generations )</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"dotnet托管堆和垃圾回收\"><a href=\"#dotnet托管堆和垃圾回收\" class=\"headerlink\" title=\"dotnet托管堆和垃圾回收\"></a>dotnet托管堆和垃圾回收</h1><h2 id=\"托管堆基础\"><a href=\"#托管堆基础\" class=\"headerlink\" title=\"托管堆基础\"></a>托管堆基础</h2><p> 简述：每个程序都要使用这样或那样的资源，包括文件、内存缓冲区、屏幕空间、网络连接…..事实上，在面向对象的环境中，每个类型都代表可供程序使用的一种资源。要使用这些资源，必须为代表资源的类型分配内存。<br> 以下是访问一个资源所需步骤：</p>\n<ol>\n<li>调用IL指令newobj，为代表资源的类型分配内存。(C# new操作符)</li>\n<li>初始化内存，设置资源的初始状态。（一般指构造函数）</li>\n<li>访问类型的成员来使用资源。（使用成员变量、方法、属性等）</li>\n<li>摧毁资源的状态以进行清除。（Dispose？？？）</li>\n<li>释放内存。（GC） </li>\n</ol>\n<h2 id=\"从托管堆分配资源\"><a href=\"#从托管堆分配资源\" class=\"headerlink\" title=\"从托管堆分配资源\"></a>从托管堆分配资源</h2><p>CLR要求所有的对象都从托管堆分配。<br>进程初始化，CLR划出一个地址空间区域作为托管堆。CLR还要维护一个指针，姑且叫NextObjPtr，该指针指向下一个对象在堆中的分配位置。刚开始的时候， NextObjPtr 设为地址空间区域的基地址。<br>一个区域被非垃圾对象填满后，CLR会分配更多的区域。</p>\n<p>这一个过程一直重复，直至整个进程地址空间被填满。所以，应用程序内存收进程的虚拟地址空间的限制。</p>\n<p>32位进程最多能分配1.5GB，64位进程最多能分配8T。<br>注：进程内存大小的相关资料</p>\n<p><a href=\"https://msdn.microsoft.com/zh-cn/library/windows/hardware/Dn613959(v=vs.85\" target=\"_blank\" rel=\"noopener\">Memory Support and Windows Operating Systems</a>.aspx)</p>\n<p><a href=\"https://msdn.microsoft.com/zh-cn/library/ms189334.aspx\" target=\"_blank\" rel=\"noopener\">进程地址空间</a></p>\n<p><a href=\"http://blog.csdn.net/yusiguyuan/article/details/12405799\" target=\"_blank\" rel=\"noopener\"> 32位模式下C/C++程序可用最大内存</a></p>\n<h2 id=\"C-的new操作符导致CLR执行以下操作：\"><a href=\"#C-的new操作符导致CLR执行以下操作：\" class=\"headerlink\" title=\"C# 的new操作符导致CLR执行以下操作：\"></a>C# 的new操作符导致CLR执行以下操作：</h2><ol>\n<li><p>计算类型的字段（以及从基类型继承的字段）所需要的字节数。</p>\n</li>\n<li><p>加上对象的开销所需的字节数。每个对象都有两个开销字段：类型对象指针和同步块索引。对于32位应用程序，这两个字段各需要32位，所以每个对象需要增加8字节。对于64位应用程序，这两个字段各需要64位，所以每个对象要增加16字节。</p>\n</li>\n<li><p>CLR检查区域中是否有分配对象所需的字节数。如果托管堆有足够的可用空间，就在NetxObjPtr指针指向的地址处放入对象，为对象分配的字节会被清零。接着调用类型的构造器（为this参数传递NextObjPtr），new操作符返回对象引用。就在返回这个对象引用之前，NextObjPtr指针的值会加上这个对象占用的字节数来得到一个新值，即下个对象放入托管堆时的地址。如下图：</p>\n</li>\n</ol>\n<p><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/i3rlSCPAcnT9pL0El0BptPIBpuvnxHpBw9Nkp*UqIjw!/o/dJMAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=LwKNAC8CjQADACU!&amp;su=1199793361&amp;sce=0-12-12&amp;rf=2-9\" alt=\"tup\"></p>\n<h3 id=\"垃圾回收算法\"><a href=\"#垃圾回收算法\" class=\"headerlink\" title=\"垃圾回收算法\"></a>垃圾回收算法</h3><p>####CLR使用引用跟踪算法。</p>\n<p>引用跟踪算法只关心引用类型的变量，因为只有这种变量才能引用堆上面的对象；<br>值类型变量直接包含值类型实例。引用类型变量可在许多场合使用，包括类的静态和实例字段，或者方法的参数和局部变量。这里我们将所有引用类型的变量都称为根。<br>CLR开始GC时，首先暂停所有的线程。(这样可以防止线程在CLR检查期间访问对象并更改其状态。) 然后CLR进入GC标记阶段。在这个阶段，CLR遍历堆中的所有对象，将同步块索引字段中的一位设为0。这表明所有的对象都应删除。然后，CLR检查所有的活动根，查看他们引用了哪些对象。这正是CLR的GC被称作引用跟踪GC的原因。如果一个根包含null，CLR忽略这个根并继续检查下一个根。<br>下图展示一个堆，其中包含几个对象。<br><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/eVBVeXGrNAfoWfyRgl4aC2RRSGgiDpmbrocv4lTSJMA!/o/dJIAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=gAIFAYACBQEDACU!&amp;su=1176931729&amp;sce=0-12-12&amp;rf=2-9\" alt=\"图片1\"></p>\n<p>应用程序的根直接引用对象A 、C、D 、F。所有的对象都已经被标记。标记对象D时，GC发现这个对象含有一个引用对象H的字段，造成对象H也被标记。标记过程会持续，直至应用程序的所有根所有检查完毕。<br>检查完毕后，堆中的对象要么已标记，要么未标记。已标记的对象不能被垃圾回收，因为至少有一个根在引用它。我们说这种对象是可达的，因为应用程序可以通过引用它的变量抵达它。 未标记的对象是不可达的，因为应用程序中不存在使对象能被再次访问的根。</p>\n<p>CLR知道哪些对象可以幸存，哪些可以被删除后，进入GC的压缩（类似于碎片整理）阶段。在压缩阶段，CLR对堆中已标记的对象进行“乾坤大挪移”，整理所有幸存下来的对象，使他们占用连续的内存。</p>\n<p>这样做的好处在于：</p>\n<ol>\n<li><p>所有幸存对象在内存中紧挨在一起，恢复了引用的“局部性”，减少了应用程序的工作集，从而提升了将来访问这些对象时的性能；</p>\n</li>\n<li><p>经过整理后，可用空间也是连续的，整个地址空间区段得到了解放，允许其他东西进驻。</p>\n</li>\n</ol>\n<p>在内存中移动了对象之后有一个问题亟待解决。引用幸存对象的根现在引用的还是对象最初在内存中的位置，而非移动后的位置。被暂停的线程恢复执行时，将访问旧的内存位置，会造成内存损坏。 这显然是不能容忍的，所以作为压缩阶段的一部分，CLR还要从每个根减去所引用对象在内存中偏移的字节数。这样就能保证每个根还是引用和之前一样的对象，只是对象在内存中变换了位置。<br>如图：<br><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/FyP2yk1O6kMsq3.u4e4x3qrAxpwbajgSHOd4QHTJOhE!/o/dJIAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=TQI*AU0CPwEDACU!&amp;su=1202148209&amp;sce=0-12-12&amp;rf=2-9\" alt=\"123\"></p>\n<h2 id=\"代：提升性能-待续\"><a href=\"#代：提升性能-待续\" class=\"headerlink\" title=\"代：提升性能 (待续)\"></a>代：提升性能 (待续)</h2><p>CLR的GC是基于代的垃圾回收器，它对你的代码做出了以下几点假设：</p>\n<ol>\n<li><p>对象越新，生存周期越短。</p>\n</li>\n<li><p>对象越老，生存周期越长。</p>\n</li>\n<li><p>回收堆的一部分 ，速度快于回收整个堆。</p>\n</li>\n</ol>\n<p>大量研究表明，这些假设对于现今大多数的应用程序都是成立的，它们影响了垃圾回收器的实现方式。这里将解释代的工作原理。</p>\n<p>托管堆在初始化时不包括对象。添加到堆的对象成为第0代对象。简单来说，第0代对象就是那些新构造的对象，垃圾回收器从未检查过它们。如下图，新启动的应用程序，分配了5个对象（从A到E）。过了一会，C和E变得不可达了。</p>\n<p><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/77WJus7lssJpEJ2RZREQoNx.5CL31HLdboJbAgCqS0E!/o/dJMAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=tQIVAbUCFQEDACU!&amp;su=172682065&amp;sce=0-12-12&amp;rf=2-9\" alt=\"23\"></p>\n<p>CLR初始化第0代对象选择一个预算容量。如果分配一个新对象造成第0代超预算，就必须启动一次GC。假设对象A到E刚好用完了第0代的空间，那么分配对象F就必须启动GC。GC之后存活的对象现场成为第1代对象。如下图：</p>\n<p><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/GEDzaV4pNFNQUuDwl2EQrv*eD9Sk9OJCzx5SpRRI2fk!/o/dGUBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=OAL5ADgC.QADACU!&amp;su=1155276897&amp;sce=0-12-12&amp;rf=2-9\" alt=\"123\"><br>一次GC之后，第0代就不包含任何对象。和前面一样，新对象会分配到第0代。新分配对象F到对象K都到了第0代。<br><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/Op0QokzBTNYCFR6zzm2tpc2V7U70IsIJTeWrd0UAUb0!/o/dGUBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=yAJeAcgCXgEDACU!&amp;su=1124261217&amp;sce=0-12-12&amp;rf=2-9\" alt=\"234\"></p>\n<p>之后，程序继续运行，B、H、J变得不可达，它们的内存将在某一个时刻回收。</p>\n<p>假设现在新分配对象L会造成第0代超出预算,造成必须启动垃圾回收。</p>\n<p>开始垃圾回收时,垃圾回收器必须决定检查哪些代。前面说过,CLR初始化时会为第0代对象选择预算.事实上,它还必须为第1代选择预算.</p>\n<p>开始一次垃圾回收时,垃圾回收器还会检查第一代占用了多少内存。在本例中,由于第1代占用内存远少于预算,所以垃圾回收器只检查第0代对象。回顾之前基于代的垃圾回收器做出的第一个假设：对象越新，生存期越短。 因此，第0代包含更多的垃圾的可能性更大，能回收更多的内存。由于忽略第1代中的对象，所以加快了垃圾回收速度。</p>\n<p>显然，忽略第1代中的对象能提升垃圾回收器的性能。但对性能有更大提振作用的是现在不必遍历托管堆中的每个对象。如果根或对象引用了老一代的某个对象，垃圾回收器就可以忽略老对象内部的所有引用，能在更短的时间内构造好可达对象图。当然，如果老对象的字段也可能引用新对象。为了确保对老对象的已更新字段进行检查，垃圾回收器利用了JIT编译器内部的一个机制。这个机制在对象的引用字段发生变化时，会设置一个对应的标志位。这样，垃圾回收器就知道自上一次垃圾回收以来，哪些老对象（如果有的话）已被写入。只有字段发生变化的老对象才需要检查是否引用了第0代中的任何新对象。</p>\n<p>基于代的垃圾回收器还假设越老的对象活得越长。也就是说，第1代对象在应用程序中有可能是继续可达的。如果垃圾回收器检查第1代的对象，很有可能找不到多少垃圾，结果是也回收不了多少内存。因此，对第1代进行垃圾回收很可能是浪费时间的。如果第一代真有垃圾，垃圾将留在那里。如下图：<br><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/Do.yRCBJEnaOfZaUOdxj4II9*pX2BEcX2QmIG6NQPBE!/o/dGUBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=qAI5AagCOQEDACU!&amp;su=187009937&amp;sce=0-12-12&amp;rf=2-9\" alt=\"2345\"></p>\n<p>程序继续运行，继续往第0代分配对象，同时程序停止对第1代某对象的使用。</p>\n<p>如下图：<br><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/YEqIM16xFsSgXdvEzgrerLnKw7fEItnrSqEzlaYnUfE!/o/dGUBAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=egJPAXoCTwEDACU!&amp;su=1118118497&amp;sce=0-12-12&amp;rf=2-9\" alt=\"edf\"><br>分配对象P导致第0代超预算，开始GC。第1代的所有对象占据内存仍小于预算，垃圾回收器再次决定只回收第0代。忽略第1代中的垃圾对象。如下图：<br><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/EcdSNU5AatqRERWtVdlJ7LiIPHHXe8.mklN.0hHDK9U!/o/dJQAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=aAIxAWgCMQEDACU!&amp;su=1214124305&amp;sce=0-12-12&amp;rf=2-9\" alt=\"2345\"></p>\n<p>程序继续运行，假设第一代的增长导致它的全部对象占用了全部预算。这时候应用程序分配对象P到对象S，使第0代对象达到它的预算总和。如下图：<br><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/6dB68RIUYrqMZ4p0VIY3REJZPg.g3ybkZFIazJ3h.CQ!/o/dJIAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=jwIiAY8CIgEDACU!&amp;su=177976657&amp;sce=0-12-12&amp;rf=2-9\" alt=\"43\"></p>\n<p>这时候，应用程序准备分配对象T，由于第一代已满，所以必须开始GC。但这一次垃圾回收器发现第一代占用了太多内存，以至于用完了预算。由于前几次对第0代进行GC时，第1代中可能已经有很多对象变得不可达。所以这次垃圾回收器决定检查第1代和第0代中的所有对象。两代都被垃圾回收后，堆的情况如下图：<br><img src=\"http://r.photo.store.qq.com/psb?/4d3e65a5-4593-42bc-88f9-7bbb2e647ebe/bxdZDsZi2Y6FSDWs7RXNPkkJK8dCzMD.cfnjwNY2Mjs!/o/dJIAAAAAAAAA&amp;ek=1&amp;kp=1&amp;pt=0&amp;bo=tgI2AbYCNgEDACU!&amp;su=197762641&amp;sce=0-12-12&amp;rf=2-9\" alt=\"123\"></p>\n<p>托管堆只支持三代：第0代、第1代和第2代。</p>\n<p>CLR初始化时，会为每一代选择预算。</p>\n<p>然而，CLR的垃圾回收是自调节的。</p>\n<p>这意味着垃圾回收器会在执行垃圾回收的过程了解程序的行为。</p>\n<p>例如：假设应用程序构造了许多对象，但每个对象的时间都很短。<br>在这种情况下，对第0代的垃圾回收会回收到大量的内存。事实上，第0代的所有对象都可能被回收。</p>\n<p>如果垃圾回收器发现在回收第0代后存活下来的对象很少，就可能减少第0代的预算。已分配空间的减少意味着垃圾回收将更频繁地发生，但垃圾回收器每次做的事情也减少，这减少了进程的工作集。</p>\n<p>另一方面，如果垃圾回收器回收了第0代，发现还有很多对象存活，没多少内存可以被回收，就会增大第0代的预算。</p>\n<p>同样的启发性算法调整预算适用于了第1代和第2代的预算。</p>\n<p>引自：《CLR VIA C# -21章》</p>\n<p><a href=\"https://msdn.microsoft.com/zh-cn/library/vstudio/f144e03t(v=vs.100\" target=\"_blank\" rel=\"noopener\">自动内存管理</a>.aspx)</p>\n<p><a href=\"https://msdn.microsoft.com/zh-cn/library/vstudio/ee787088(v=vs.100\" target=\"_blank\" rel=\"noopener\">垃圾回收的基础</a>.aspx)</p>\n<p><a href=\"https://msdn.microsoft.com/zh-cn/library/vstudio/ee787088(v=vs.100\" target=\"_blank\" rel=\"noopener\">代数</a>.aspx#generations )</p>\n"},{"layout":"post","title":"C#为匿名类型定义局部函数","date":"2016-10-03T16:00:00.000Z","_content":"\n可能是因为我们都习惯于明确定义，一般而言,日常我们很少使用匿名对象。\n然而对于实现那些短时间存在的、并不在应用程序逻辑中起支配地位的类型，使用匿名对象就是一个不错的选择了另一个方面，可能也是因为匿名类型的生命周期无法跨越包含改类型的方法，导致很多人觉得匿名对象并不好用，因为其无法在多个方法之间传递。\n\n这样说并不准确。我们完全可以为匿名类型编写泛型方法。不过若是如此，我们便不能在泛型类型方法中处理任何特殊的元素或者编写任何的专门逻辑。\n下面我们就来写一个简单的示例，示例功能：返回集合中与待查找对象相等的所有元素。\n\n```csharp\nstatic IEnumerable<T> FindValue(IEnumerable<T> enumerable, T value)\n{\n    foreach (T element in enumerable)\n    {\n        if (element.Equals(value))\n            yield return element;\n    }\n}\n```\n\n这个方法是可以配合匿名类型使用的，但是这个方法本质上其实就是一个泛型方法，并不了解匿名类型的信息。\n\n\n```csharp\n\n```\n\n\n\n```csharp\n\n```\n\n\n```csharp\n\n```","source":"_posts/C#为匿名类型定义局部函数.md","raw":"---\nlayout: post\ntitle: C#为匿名类型定义局部函数\ncategory: dotnet\ndate: 2016-10-04\ntags:\n- dotnet\n---\n\n可能是因为我们都习惯于明确定义，一般而言,日常我们很少使用匿名对象。\n然而对于实现那些短时间存在的、并不在应用程序逻辑中起支配地位的类型，使用匿名对象就是一个不错的选择了另一个方面，可能也是因为匿名类型的生命周期无法跨越包含改类型的方法，导致很多人觉得匿名对象并不好用，因为其无法在多个方法之间传递。\n\n这样说并不准确。我们完全可以为匿名类型编写泛型方法。不过若是如此，我们便不能在泛型类型方法中处理任何特殊的元素或者编写任何的专门逻辑。\n下面我们就来写一个简单的示例，示例功能：返回集合中与待查找对象相等的所有元素。\n\n```csharp\nstatic IEnumerable<T> FindValue(IEnumerable<T> enumerable, T value)\n{\n    foreach (T element in enumerable)\n    {\n        if (element.Equals(value))\n            yield return element;\n    }\n}\n```\n\n这个方法是可以配合匿名类型使用的，但是这个方法本质上其实就是一个泛型方法，并不了解匿名类型的信息。\n\n\n```csharp\n\n```\n\n\n\n```csharp\n\n```\n\n\n```csharp\n\n```","slug":"C#为匿名类型定义局部函数","published":1,"updated":"2018-05-17T13:35:33.125Z","comments":1,"photos":[],"link":"","_id":"cjhal1fw3000pp6314ovhohb8","content":"<p>可能是因为我们都习惯于明确定义，一般而言,日常我们很少使用匿名对象。<br>然而对于实现那些短时间存在的、并不在应用程序逻辑中起支配地位的类型，使用匿名对象就是一个不错的选择了另一个方面，可能也是因为匿名类型的生命周期无法跨越包含改类型的方法，导致很多人觉得匿名对象并不好用，因为其无法在多个方法之间传递。</p>\n<p>这样说并不准确。我们完全可以为匿名类型编写泛型方法。不过若是如此，我们便不能在泛型类型方法中处理任何特殊的元素或者编写任何的专门逻辑。<br>下面我们就来写一个简单的示例，示例功能：返回集合中与待查找对象相等的所有元素。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> IEnumerable&lt;T&gt; <span class=\"title\">FindValue</span>(<span class=\"params\">IEnumerable&lt;T&gt; enumerable, T <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (T element <span class=\"keyword\">in</span> enumerable)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (element.Equals(<span class=\"keyword\">value</span>))</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个方法是可以配合匿名类型使用的，但是这个方法本质上其实就是一个泛型方法，并不了解匿名类型的信息。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>可能是因为我们都习惯于明确定义，一般而言,日常我们很少使用匿名对象。<br>然而对于实现那些短时间存在的、并不在应用程序逻辑中起支配地位的类型，使用匿名对象就是一个不错的选择了另一个方面，可能也是因为匿名类型的生命周期无法跨越包含改类型的方法，导致很多人觉得匿名对象并不好用，因为其无法在多个方法之间传递。</p>\n<p>这样说并不准确。我们完全可以为匿名类型编写泛型方法。不过若是如此，我们便不能在泛型类型方法中处理任何特殊的元素或者编写任何的专门逻辑。<br>下面我们就来写一个简单的示例，示例功能：返回集合中与待查找对象相等的所有元素。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> IEnumerable&lt;T&gt; <span class=\"title\">FindValue</span>(<span class=\"params\">IEnumerable&lt;T&gt; enumerable, T <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (T element <span class=\"keyword\">in</span> enumerable)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (element.Equals(<span class=\"keyword\">value</span>))</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个方法是可以配合匿名类型使用的，但是这个方法本质上其实就是一个泛型方法，并不了解匿名类型的信息。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"dotnet lmabda避免修改绑定变量","date":"2016-10-03T16:00:00.000Z","_content":"\n先看一段代码\n\n```C#\n#region test1 闭包\n\n        public static void test1()\n        {\n            int index = 0;\n            Func<IEnumerable<int>> sequence =()=>GetEnumrableInt(index);\n\n            index = 20;\n            foreach(int n in sequence())\n                Console.WriteLine(n);\n\n            Console.WriteLine(\"Done\");\n\n            index = 100;\n            foreach (int n in sequence())\n                Console.WriteLine(n);\n        }\n\n\n        public static IEnumerable<int> GetEnumrableInt(int index)\n        {\n            List<int> l = new List<int>();\n            for(int i=index;i<index+30;i++)\n            {\n                l.Add(i);\n            }\n            return l;\n        }\n\n        #endregion\n```\n\n上面一坨代码演示了在闭包中使用了外部变量，随即又在外部修改了这些变量的情况，得到的结果是输出了20-50的数，然后又输出了100-130之间的数。这种行为有点诡异，但是确实有存在的意义...(书本这样说的，我到觉得很少会用到。)\n\n为了将查询表达式转换成可执行代码，C#编译器做了很多工作。一般而言，C#编译器将查询和lambda表达式转换成 \"静态委托\"、\"实例委托\" 或 \"闭包\"。编译器将根据lambda表达式中的代码选择一种实现方式。选择哪种方式依赖于lambda表达式的主体（body）。这看上去似乎是一些语言上的实现细节，但它却会显著地影响到我们的代码。编译器选择何种实现将可能导致diamante行为发生微妙的变化。\n\n并不是任何的lambda表达式都会生成同样结构的代码。\n\n对于编译器来说，最简单的一种行为是为以下形式的代码生成委托。\n\n```C#\n//我们的lambda表达式\n        public static void test2()\n        {\n            int[] someNum = {0,1,2,3,4,5,6,7,8,9,10 };\n\n            IEnumerable<int> ans = from n in someNum\n                                   select n * n;\n\n            foreach (int i in ans)\n                Console.WriteLine(i);\n\n        }\n```\n\n编译器将使用静态委托来实现n*n的lambda表达式，其为上面代码生成的代码如下：\n```C#\n         //编译器为我们的lambda生成的代码\n        #region 等价于 test2()\n        private static int HiddenFunc(int n)\n        {\n            return n * n;\n        }\n        //静态委托\n        private static Func<int, int> HiddenDelegate;\n\n        public void test2_1()\n        {\n\n            int[] someNum = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n\n            if(HiddenDelegate==null)\n            {\n                HiddenDelegate = new Func<int, int>(HiddenFunc);\n            }\n            IEnumerable<int> ans = someNum.Select<int, int>(HiddenDelegate);\n\n          foreach(int i in ans)\n              Console.WriteLine(i);\n\n        }\n        #endregion\n```\n\n这个lambda表达式主体部分并没有访问任何的实例变量或者局部变量。lambda表达式仅仅访问了它的参数。对于这种情况，C#编译器将创建一个静态方法，作为委托的目标。这也是编译器执行的最简单的一种处理方式。若表达式可以通过私有的静态方法实现，那么编译器将生成该私有的静态方法以及相对应的委托定义。对于上面的代码例子中的情况以及仅访问了静态变量的表达式，编译器都会采用这样的方案。\n\n接下来介绍另一种较为简单的情况：\nlambda表达式需要访问类型的实例变量，但无需访问外层方法中的局部变量。\n```C#\n    public class ModFilter\n    {\n        private readonly int modules;\n\n        public ModFilter(int mod)\n        {\n            modules = mod;\n        }\n\n\n        public IEnumerable<int> FindValues(IEnumerable<int> sequence)\n        {\n\n            return from n in sequence\n                   where n % modules == 0 //新添加的表达式\n                   select n * n;  //和前面的例子是一样的\n        }\n    }\n\n\n\n/* \n\n在这种情况下，编译器将为表达式创建一个实例方法来包装该委托。\n其基本概念和前一种情况一致，只是这里使用了实例方法，以便读取并修改当前对象的状态。\n与静态委托的例子一样，这里编译器将把lambda表达式转换成我们熟悉的代码。其中包含委托的定义以及方法调用。\n如下：\n\n*/\n\n\n\n    public class ModFilter_Other\n    {\n        private readonly int modules;\n\n\n        //实例方法\n        private bool WhereClause(int n)\n        {\n            return ((n%this.modules) ==0);\n        }\n\n\n        private static int SelectClause(int n)\n        {\n            return n * n;\n        }\n\n        private static Func<int, int> SelectDelegate;\n\n\n\n\n        public ModFilter_Other(int mod)\n        {\n            modules = mod;\n        }\n\n\n        public IEnumerable<int> FindValues(IEnumerable<int> sequence)\n        {\n            if(SelectDelegate==null)\n            {\n                SelectDelegate = new Func<int, int>(SelectClause);\n            }\n\n            return sequence.Where<int>(\n                new Func<int, bool>(this.WhereClause)).\n                Select<int, int>(SelectClause);\n        }\n    }\n```\n\n概括来说便是：lambda表达式中的代码访问了对象实例中的成员变量，那么编译器将生成实例方法来表示lambda表达式中的代码。其实这并没有什么奇特之处——编译器省去了我们的一些代码输入工作，代码也变得整洁很多，本质来说这还是普通的方法调用。\n\n不过若是lambda表达式中访问到了外部方法中的局部变量或者方法参数，那么编译器将帮你完成很多工作。\n\n这里会用到闭包。编译器将生成一个私有的嵌套类型，以便为局部变量实现闭包。\n\n局部变量必须传入到实现了lambda表达式主体部分的委托里。\n\n此外，所有由该lambda表达式执行的对这些局部变量所作的修改都必须能够在外部访问到。\n\n当然，代码中内层和外层中共享的可能不止有一个变量，也可能不止一个的查询表达式。\n\n我们来修改一下该实例方法，让其访问一个局部变量。\n\n```C#\n\t\t  public class ModFilter\n\t\t  {\n\t\t        private readonly int modules;\n\t\t\n\t\t        public ModFilter(int mod)\n\t\t        {\n\t\t            modules = mod;\n\t\t        }\n\t\t\n\t\t\n\t\t        public IEnumerable<int> FindValues(IEnumerable<int> sequence)\n\t\t        {\n\t\t            int numValues = 0;\n\t\t\n\t\t            return from n in sequence\n\t\t                   where n % modules == 0 //新添加的表达式\n\t\t                   select n * n / ++ numValues; //访问局部变量\n\t\t        }\n\t      }\n\n\n注意，select字句需要访问numValues这个局部变量。编译器为了创建这个闭包，需要使用嵌套类型来实现你所需要的行为。下面展示的是编译器为你生成的代码。\n\n\n\n\n \t public class ModFilter\n     {\n        private sealed class Closure\n        {\n            public ModFilter outer;\n\n            public int numValues;\n\n            public int SelectClause(int n)\n            {\n                return ((n * n) / ++this.numValues);\n            }\n        }\n\n\n\n        private readonly int modules;\n\n\n        //实例方法\n        private bool WhereClause(int n)\n        {\n            return ((n % this.modules) == 0);\n        }\n\n        public ModFilter(int mod)\n        {\n            modules = mod;\n        }\n\n\n        public IEnumerable<int> FindValues(IEnumerable<int> sequence)\n        {\n            Closure c = new Closure();\n            c.outer = this;\n            c.numValues = 0;\n\n            return sequence.Where<int>(\n                new Func<int, bool>(this.WhereClause)).\n                Select<int, int>(c.SelectClause);\n        }\n    }\n```\n\n在上面这段代码中，编译器专门创建了一个嵌套类，用来容纳所有将在lambda表达式中访问或修改的变量。实际上，这些局部变量将完全被嵌套类的字段所代替。lambda表达式内部的代码以及表达式外部(但仍在当前方法内)的代码访问的均是同一个字段，lambda表达式中的逻辑也被编译成了内部类的一个方法。\n\n对于lambda表达式中将要用到的外部方法的参数，编译器也会以对待局部变量的方式实现：编译器将这些参数复制到表示该闭包的嵌套类中。\n\n回到最开始的那个示例，这是我们应该可以理解这种看似怪异的行为了。变量index在传入闭包后，但在查询开始执行前曾被外部代码修改。也就是说，你修改了闭包的内部状态，然后还期待其能够回到从前的状态开始执行，显然这是不可能实现的。\n\n考虑到延迟执行中的交互以及编译器实现闭包的方式，修改查询与外部代码之间绑定的变量将可能会引发错误的行为。\n因此，我们应该尽量避免在方法中修改哪些将要传入到闭包中，并将在闭包中使用的变量。\n\n","source":"_posts/C#技巧避免修改绑定变量.md","raw":"---\nlayout: post\ntitle: dotnet lmabda避免修改绑定变量\ncategory: dotnet\ndate: 2016-10-04\ntags:\n- dotnet \n---\n\n先看一段代码\n\n```C#\n#region test1 闭包\n\n        public static void test1()\n        {\n            int index = 0;\n            Func<IEnumerable<int>> sequence =()=>GetEnumrableInt(index);\n\n            index = 20;\n            foreach(int n in sequence())\n                Console.WriteLine(n);\n\n            Console.WriteLine(\"Done\");\n\n            index = 100;\n            foreach (int n in sequence())\n                Console.WriteLine(n);\n        }\n\n\n        public static IEnumerable<int> GetEnumrableInt(int index)\n        {\n            List<int> l = new List<int>();\n            for(int i=index;i<index+30;i++)\n            {\n                l.Add(i);\n            }\n            return l;\n        }\n\n        #endregion\n```\n\n上面一坨代码演示了在闭包中使用了外部变量，随即又在外部修改了这些变量的情况，得到的结果是输出了20-50的数，然后又输出了100-130之间的数。这种行为有点诡异，但是确实有存在的意义...(书本这样说的，我到觉得很少会用到。)\n\n为了将查询表达式转换成可执行代码，C#编译器做了很多工作。一般而言，C#编译器将查询和lambda表达式转换成 \"静态委托\"、\"实例委托\" 或 \"闭包\"。编译器将根据lambda表达式中的代码选择一种实现方式。选择哪种方式依赖于lambda表达式的主体（body）。这看上去似乎是一些语言上的实现细节，但它却会显著地影响到我们的代码。编译器选择何种实现将可能导致diamante行为发生微妙的变化。\n\n并不是任何的lambda表达式都会生成同样结构的代码。\n\n对于编译器来说，最简单的一种行为是为以下形式的代码生成委托。\n\n```C#\n//我们的lambda表达式\n        public static void test2()\n        {\n            int[] someNum = {0,1,2,3,4,5,6,7,8,9,10 };\n\n            IEnumerable<int> ans = from n in someNum\n                                   select n * n;\n\n            foreach (int i in ans)\n                Console.WriteLine(i);\n\n        }\n```\n\n编译器将使用静态委托来实现n*n的lambda表达式，其为上面代码生成的代码如下：\n```C#\n         //编译器为我们的lambda生成的代码\n        #region 等价于 test2()\n        private static int HiddenFunc(int n)\n        {\n            return n * n;\n        }\n        //静态委托\n        private static Func<int, int> HiddenDelegate;\n\n        public void test2_1()\n        {\n\n            int[] someNum = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n\n            if(HiddenDelegate==null)\n            {\n                HiddenDelegate = new Func<int, int>(HiddenFunc);\n            }\n            IEnumerable<int> ans = someNum.Select<int, int>(HiddenDelegate);\n\n          foreach(int i in ans)\n              Console.WriteLine(i);\n\n        }\n        #endregion\n```\n\n这个lambda表达式主体部分并没有访问任何的实例变量或者局部变量。lambda表达式仅仅访问了它的参数。对于这种情况，C#编译器将创建一个静态方法，作为委托的目标。这也是编译器执行的最简单的一种处理方式。若表达式可以通过私有的静态方法实现，那么编译器将生成该私有的静态方法以及相对应的委托定义。对于上面的代码例子中的情况以及仅访问了静态变量的表达式，编译器都会采用这样的方案。\n\n接下来介绍另一种较为简单的情况：\nlambda表达式需要访问类型的实例变量，但无需访问外层方法中的局部变量。\n```C#\n    public class ModFilter\n    {\n        private readonly int modules;\n\n        public ModFilter(int mod)\n        {\n            modules = mod;\n        }\n\n\n        public IEnumerable<int> FindValues(IEnumerable<int> sequence)\n        {\n\n            return from n in sequence\n                   where n % modules == 0 //新添加的表达式\n                   select n * n;  //和前面的例子是一样的\n        }\n    }\n\n\n\n/* \n\n在这种情况下，编译器将为表达式创建一个实例方法来包装该委托。\n其基本概念和前一种情况一致，只是这里使用了实例方法，以便读取并修改当前对象的状态。\n与静态委托的例子一样，这里编译器将把lambda表达式转换成我们熟悉的代码。其中包含委托的定义以及方法调用。\n如下：\n\n*/\n\n\n\n    public class ModFilter_Other\n    {\n        private readonly int modules;\n\n\n        //实例方法\n        private bool WhereClause(int n)\n        {\n            return ((n%this.modules) ==0);\n        }\n\n\n        private static int SelectClause(int n)\n        {\n            return n * n;\n        }\n\n        private static Func<int, int> SelectDelegate;\n\n\n\n\n        public ModFilter_Other(int mod)\n        {\n            modules = mod;\n        }\n\n\n        public IEnumerable<int> FindValues(IEnumerable<int> sequence)\n        {\n            if(SelectDelegate==null)\n            {\n                SelectDelegate = new Func<int, int>(SelectClause);\n            }\n\n            return sequence.Where<int>(\n                new Func<int, bool>(this.WhereClause)).\n                Select<int, int>(SelectClause);\n        }\n    }\n```\n\n概括来说便是：lambda表达式中的代码访问了对象实例中的成员变量，那么编译器将生成实例方法来表示lambda表达式中的代码。其实这并没有什么奇特之处——编译器省去了我们的一些代码输入工作，代码也变得整洁很多，本质来说这还是普通的方法调用。\n\n不过若是lambda表达式中访问到了外部方法中的局部变量或者方法参数，那么编译器将帮你完成很多工作。\n\n这里会用到闭包。编译器将生成一个私有的嵌套类型，以便为局部变量实现闭包。\n\n局部变量必须传入到实现了lambda表达式主体部分的委托里。\n\n此外，所有由该lambda表达式执行的对这些局部变量所作的修改都必须能够在外部访问到。\n\n当然，代码中内层和外层中共享的可能不止有一个变量，也可能不止一个的查询表达式。\n\n我们来修改一下该实例方法，让其访问一个局部变量。\n\n```C#\n\t\t  public class ModFilter\n\t\t  {\n\t\t        private readonly int modules;\n\t\t\n\t\t        public ModFilter(int mod)\n\t\t        {\n\t\t            modules = mod;\n\t\t        }\n\t\t\n\t\t\n\t\t        public IEnumerable<int> FindValues(IEnumerable<int> sequence)\n\t\t        {\n\t\t            int numValues = 0;\n\t\t\n\t\t            return from n in sequence\n\t\t                   where n % modules == 0 //新添加的表达式\n\t\t                   select n * n / ++ numValues; //访问局部变量\n\t\t        }\n\t      }\n\n\n注意，select字句需要访问numValues这个局部变量。编译器为了创建这个闭包，需要使用嵌套类型来实现你所需要的行为。下面展示的是编译器为你生成的代码。\n\n\n\n\n \t public class ModFilter\n     {\n        private sealed class Closure\n        {\n            public ModFilter outer;\n\n            public int numValues;\n\n            public int SelectClause(int n)\n            {\n                return ((n * n) / ++this.numValues);\n            }\n        }\n\n\n\n        private readonly int modules;\n\n\n        //实例方法\n        private bool WhereClause(int n)\n        {\n            return ((n % this.modules) == 0);\n        }\n\n        public ModFilter(int mod)\n        {\n            modules = mod;\n        }\n\n\n        public IEnumerable<int> FindValues(IEnumerable<int> sequence)\n        {\n            Closure c = new Closure();\n            c.outer = this;\n            c.numValues = 0;\n\n            return sequence.Where<int>(\n                new Func<int, bool>(this.WhereClause)).\n                Select<int, int>(c.SelectClause);\n        }\n    }\n```\n\n在上面这段代码中，编译器专门创建了一个嵌套类，用来容纳所有将在lambda表达式中访问或修改的变量。实际上，这些局部变量将完全被嵌套类的字段所代替。lambda表达式内部的代码以及表达式外部(但仍在当前方法内)的代码访问的均是同一个字段，lambda表达式中的逻辑也被编译成了内部类的一个方法。\n\n对于lambda表达式中将要用到的外部方法的参数，编译器也会以对待局部变量的方式实现：编译器将这些参数复制到表示该闭包的嵌套类中。\n\n回到最开始的那个示例，这是我们应该可以理解这种看似怪异的行为了。变量index在传入闭包后，但在查询开始执行前曾被外部代码修改。也就是说，你修改了闭包的内部状态，然后还期待其能够回到从前的状态开始执行，显然这是不可能实现的。\n\n考虑到延迟执行中的交互以及编译器实现闭包的方式，修改查询与外部代码之间绑定的变量将可能会引发错误的行为。\n因此，我们应该尽量避免在方法中修改哪些将要传入到闭包中，并将在闭包中使用的变量。\n\n","slug":"C#技巧避免修改绑定变量","published":1,"updated":"2018-05-17T13:35:30.029Z","comments":1,"photos":[],"link":"","_id":"cjhal1fw5000tp631qcms0dky","content":"<p>先看一段代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#region test1 闭包</span><br><span class=\"line\"></span><br><span class=\"line\">        public static void test1()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            int index = 0;</span><br><span class=\"line\">            Func&lt;IEnumerable&lt;int&gt;&gt; sequence =()=&gt;GetEnumrableInt(index);</span><br><span class=\"line\"></span><br><span class=\"line\">            index = 20;</span><br><span class=\"line\">            foreach(int n in sequence())</span><br><span class=\"line\">                Console.WriteLine(n);</span><br><span class=\"line\"></span><br><span class=\"line\">            Console.WriteLine(&quot;Done&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">            index = 100;</span><br><span class=\"line\">            foreach (int n in sequence())</span><br><span class=\"line\">                Console.WriteLine(n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        public static IEnumerable&lt;int&gt; GetEnumrableInt(int index)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            List&lt;int&gt; l = new List&lt;int&gt;();</span><br><span class=\"line\">            for(int i=index;i&lt;index+30;i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                l.Add(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return l;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #endregion</span><br></pre></td></tr></table></figure>\n<p>上面一坨代码演示了在闭包中使用了外部变量，随即又在外部修改了这些变量的情况，得到的结果是输出了20-50的数，然后又输出了100-130之间的数。这种行为有点诡异，但是确实有存在的意义…(书本这样说的，我到觉得很少会用到。)</p>\n<p>为了将查询表达式转换成可执行代码，C#编译器做了很多工作。一般而言，C#编译器将查询和lambda表达式转换成 “静态委托”、”实例委托” 或 “闭包”。编译器将根据lambda表达式中的代码选择一种实现方式。选择哪种方式依赖于lambda表达式的主体（body）。这看上去似乎是一些语言上的实现细节，但它却会显著地影响到我们的代码。编译器选择何种实现将可能导致diamante行为发生微妙的变化。</p>\n<p>并不是任何的lambda表达式都会生成同样结构的代码。</p>\n<p>对于编译器来说，最简单的一种行为是为以下形式的代码生成委托。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//我们的lambda表达式</span><br><span class=\"line\">        public static void test2()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            int[] someNum = &#123;0,1,2,3,4,5,6,7,8,9,10 &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            IEnumerable&lt;int&gt; ans = from n in someNum</span><br><span class=\"line\">                                   select n * n;</span><br><span class=\"line\"></span><br><span class=\"line\">            foreach (int i in ans)</span><br><span class=\"line\">                Console.WriteLine(i);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p>编译器将使用静态委托来实现n*n的lambda表达式，其为上面代码生成的代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> //编译器为我们的lambda生成的代码</span><br><span class=\"line\">#region 等价于 test2()</span><br><span class=\"line\">private static int HiddenFunc(int n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return n * n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//静态委托</span><br><span class=\"line\">private static Func&lt;int, int&gt; HiddenDelegate;</span><br><span class=\"line\"></span><br><span class=\"line\">public void test2_1()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    int[] someNum = &#123; 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(HiddenDelegate==null)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        HiddenDelegate = new Func&lt;int, int&gt;(HiddenFunc);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    IEnumerable&lt;int&gt; ans = someNum.Select&lt;int, int&gt;(HiddenDelegate);</span><br><span class=\"line\"></span><br><span class=\"line\">  foreach(int i in ans)</span><br><span class=\"line\">      Console.WriteLine(i);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#endregion</span><br></pre></td></tr></table></figure></p>\n<p>这个lambda表达式主体部分并没有访问任何的实例变量或者局部变量。lambda表达式仅仅访问了它的参数。对于这种情况，C#编译器将创建一个静态方法，作为委托的目标。这也是编译器执行的最简单的一种处理方式。若表达式可以通过私有的静态方法实现，那么编译器将生成该私有的静态方法以及相对应的委托定义。对于上面的代码例子中的情况以及仅访问了静态变量的表达式，编译器都会采用这样的方案。</p>\n<p>接下来介绍另一种较为简单的情况：<br>lambda表达式需要访问类型的实例变量，但无需访问外层方法中的局部变量。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    public class ModFilter</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        private readonly int modules;</span><br><span class=\"line\"></span><br><span class=\"line\">        public ModFilter(int mod)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            modules = mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        public IEnumerable&lt;int&gt; FindValues(IEnumerable&lt;int&gt; sequence)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            return from n in sequence</span><br><span class=\"line\">                   where n % modules == 0 //新添加的表达式</span><br><span class=\"line\">                   select n * n;  //和前面的例子是一样的</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/* </span><br><span class=\"line\"></span><br><span class=\"line\">在这种情况下，编译器将为表达式创建一个实例方法来包装该委托。</span><br><span class=\"line\">其基本概念和前一种情况一致，只是这里使用了实例方法，以便读取并修改当前对象的状态。</span><br><span class=\"line\">与静态委托的例子一样，这里编译器将把lambda表达式转换成我们熟悉的代码。其中包含委托的定义以及方法调用。</span><br><span class=\"line\">如下：</span><br><span class=\"line\"></span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public class ModFilter_Other</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        private readonly int modules;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        //实例方法</span><br><span class=\"line\">        private bool WhereClause(int n)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return ((n%this.modules) ==0);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        private static int SelectClause(int n)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return n * n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        private static Func&lt;int, int&gt; SelectDelegate;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        public ModFilter_Other(int mod)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            modules = mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        public IEnumerable&lt;int&gt; FindValues(IEnumerable&lt;int&gt; sequence)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if(SelectDelegate==null)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                SelectDelegate = new Func&lt;int, int&gt;(SelectClause);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            return sequence.Where&lt;int&gt;(</span><br><span class=\"line\">                new Func&lt;int, bool&gt;(this.WhereClause)).</span><br><span class=\"line\">                Select&lt;int, int&gt;(SelectClause);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>概括来说便是：lambda表达式中的代码访问了对象实例中的成员变量，那么编译器将生成实例方法来表示lambda表达式中的代码。其实这并没有什么奇特之处——编译器省去了我们的一些代码输入工作，代码也变得整洁很多，本质来说这还是普通的方法调用。</p>\n<p>不过若是lambda表达式中访问到了外部方法中的局部变量或者方法参数，那么编译器将帮你完成很多工作。</p>\n<p>这里会用到闭包。编译器将生成一个私有的嵌套类型，以便为局部变量实现闭包。</p>\n<p>局部变量必须传入到实现了lambda表达式主体部分的委托里。</p>\n<p>此外，所有由该lambda表达式执行的对这些局部变量所作的修改都必须能够在外部访问到。</p>\n<p>当然，代码中内层和外层中共享的可能不止有一个变量，也可能不止一个的查询表达式。</p>\n<p>我们来修改一下该实例方法，让其访问一个局部变量。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t  public class ModFilter</span><br><span class=\"line\">\t\t  &#123;</span><br><span class=\"line\">\t\t        private readonly int modules;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t        public ModFilter(int mod)</span><br><span class=\"line\">\t\t        &#123;</span><br><span class=\"line\">\t\t            modules = mod;</span><br><span class=\"line\">\t\t        &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t        public IEnumerable&lt;int&gt; FindValues(IEnumerable&lt;int&gt; sequence)</span><br><span class=\"line\">\t\t        &#123;</span><br><span class=\"line\">\t\t            int numValues = 0;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t            return from n in sequence</span><br><span class=\"line\">\t\t                   where n % modules == 0 //新添加的表达式</span><br><span class=\"line\">\t\t                   select n * n / ++ numValues; //访问局部变量</span><br><span class=\"line\">\t\t        &#125;</span><br><span class=\"line\">\t      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">注意，select字句需要访问numValues这个局部变量。编译器为了创建这个闭包，需要使用嵌套类型来实现你所需要的行为。下面展示的是编译器为你生成的代码。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> \t public class ModFilter</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">        private sealed class Closure</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            public ModFilter outer;</span><br><span class=\"line\"></span><br><span class=\"line\">            public int numValues;</span><br><span class=\"line\"></span><br><span class=\"line\">            public int SelectClause(int n)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                return ((n * n) / ++this.numValues);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        private readonly int modules;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        //实例方法</span><br><span class=\"line\">        private bool WhereClause(int n)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return ((n % this.modules) == 0);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public ModFilter(int mod)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            modules = mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        public IEnumerable&lt;int&gt; FindValues(IEnumerable&lt;int&gt; sequence)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Closure c = new Closure();</span><br><span class=\"line\">            c.outer = this;</span><br><span class=\"line\">            c.numValues = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">            return sequence.Where&lt;int&gt;(</span><br><span class=\"line\">                new Func&lt;int, bool&gt;(this.WhereClause)).</span><br><span class=\"line\">                Select&lt;int, int&gt;(c.SelectClause);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>在上面这段代码中，编译器专门创建了一个嵌套类，用来容纳所有将在lambda表达式中访问或修改的变量。实际上，这些局部变量将完全被嵌套类的字段所代替。lambda表达式内部的代码以及表达式外部(但仍在当前方法内)的代码访问的均是同一个字段，lambda表达式中的逻辑也被编译成了内部类的一个方法。</p>\n<p>对于lambda表达式中将要用到的外部方法的参数，编译器也会以对待局部变量的方式实现：编译器将这些参数复制到表示该闭包的嵌套类中。</p>\n<p>回到最开始的那个示例，这是我们应该可以理解这种看似怪异的行为了。变量index在传入闭包后，但在查询开始执行前曾被外部代码修改。也就是说，你修改了闭包的内部状态，然后还期待其能够回到从前的状态开始执行，显然这是不可能实现的。</p>\n<p>考虑到延迟执行中的交互以及编译器实现闭包的方式，修改查询与外部代码之间绑定的变量将可能会引发错误的行为。<br>因此，我们应该尽量避免在方法中修改哪些将要传入到闭包中，并将在闭包中使用的变量。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>先看一段代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#region test1 闭包</span><br><span class=\"line\"></span><br><span class=\"line\">        public static void test1()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            int index = 0;</span><br><span class=\"line\">            Func&lt;IEnumerable&lt;int&gt;&gt; sequence =()=&gt;GetEnumrableInt(index);</span><br><span class=\"line\"></span><br><span class=\"line\">            index = 20;</span><br><span class=\"line\">            foreach(int n in sequence())</span><br><span class=\"line\">                Console.WriteLine(n);</span><br><span class=\"line\"></span><br><span class=\"line\">            Console.WriteLine(&quot;Done&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">            index = 100;</span><br><span class=\"line\">            foreach (int n in sequence())</span><br><span class=\"line\">                Console.WriteLine(n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        public static IEnumerable&lt;int&gt; GetEnumrableInt(int index)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            List&lt;int&gt; l = new List&lt;int&gt;();</span><br><span class=\"line\">            for(int i=index;i&lt;index+30;i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                l.Add(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return l;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #endregion</span><br></pre></td></tr></table></figure>\n<p>上面一坨代码演示了在闭包中使用了外部变量，随即又在外部修改了这些变量的情况，得到的结果是输出了20-50的数，然后又输出了100-130之间的数。这种行为有点诡异，但是确实有存在的意义…(书本这样说的，我到觉得很少会用到。)</p>\n<p>为了将查询表达式转换成可执行代码，C#编译器做了很多工作。一般而言，C#编译器将查询和lambda表达式转换成 “静态委托”、”实例委托” 或 “闭包”。编译器将根据lambda表达式中的代码选择一种实现方式。选择哪种方式依赖于lambda表达式的主体（body）。这看上去似乎是一些语言上的实现细节，但它却会显著地影响到我们的代码。编译器选择何种实现将可能导致diamante行为发生微妙的变化。</p>\n<p>并不是任何的lambda表达式都会生成同样结构的代码。</p>\n<p>对于编译器来说，最简单的一种行为是为以下形式的代码生成委托。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//我们的lambda表达式</span><br><span class=\"line\">        public static void test2()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            int[] someNum = &#123;0,1,2,3,4,5,6,7,8,9,10 &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            IEnumerable&lt;int&gt; ans = from n in someNum</span><br><span class=\"line\">                                   select n * n;</span><br><span class=\"line\"></span><br><span class=\"line\">            foreach (int i in ans)</span><br><span class=\"line\">                Console.WriteLine(i);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p>编译器将使用静态委托来实现n*n的lambda表达式，其为上面代码生成的代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> //编译器为我们的lambda生成的代码</span><br><span class=\"line\">#region 等价于 test2()</span><br><span class=\"line\">private static int HiddenFunc(int n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return n * n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//静态委托</span><br><span class=\"line\">private static Func&lt;int, int&gt; HiddenDelegate;</span><br><span class=\"line\"></span><br><span class=\"line\">public void test2_1()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    int[] someNum = &#123; 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(HiddenDelegate==null)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        HiddenDelegate = new Func&lt;int, int&gt;(HiddenFunc);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    IEnumerable&lt;int&gt; ans = someNum.Select&lt;int, int&gt;(HiddenDelegate);</span><br><span class=\"line\"></span><br><span class=\"line\">  foreach(int i in ans)</span><br><span class=\"line\">      Console.WriteLine(i);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#endregion</span><br></pre></td></tr></table></figure></p>\n<p>这个lambda表达式主体部分并没有访问任何的实例变量或者局部变量。lambda表达式仅仅访问了它的参数。对于这种情况，C#编译器将创建一个静态方法，作为委托的目标。这也是编译器执行的最简单的一种处理方式。若表达式可以通过私有的静态方法实现，那么编译器将生成该私有的静态方法以及相对应的委托定义。对于上面的代码例子中的情况以及仅访问了静态变量的表达式，编译器都会采用这样的方案。</p>\n<p>接下来介绍另一种较为简单的情况：<br>lambda表达式需要访问类型的实例变量，但无需访问外层方法中的局部变量。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    public class ModFilter</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        private readonly int modules;</span><br><span class=\"line\"></span><br><span class=\"line\">        public ModFilter(int mod)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            modules = mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        public IEnumerable&lt;int&gt; FindValues(IEnumerable&lt;int&gt; sequence)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            return from n in sequence</span><br><span class=\"line\">                   where n % modules == 0 //新添加的表达式</span><br><span class=\"line\">                   select n * n;  //和前面的例子是一样的</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/* </span><br><span class=\"line\"></span><br><span class=\"line\">在这种情况下，编译器将为表达式创建一个实例方法来包装该委托。</span><br><span class=\"line\">其基本概念和前一种情况一致，只是这里使用了实例方法，以便读取并修改当前对象的状态。</span><br><span class=\"line\">与静态委托的例子一样，这里编译器将把lambda表达式转换成我们熟悉的代码。其中包含委托的定义以及方法调用。</span><br><span class=\"line\">如下：</span><br><span class=\"line\"></span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public class ModFilter_Other</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        private readonly int modules;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        //实例方法</span><br><span class=\"line\">        private bool WhereClause(int n)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return ((n%this.modules) ==0);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        private static int SelectClause(int n)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return n * n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        private static Func&lt;int, int&gt; SelectDelegate;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        public ModFilter_Other(int mod)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            modules = mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        public IEnumerable&lt;int&gt; FindValues(IEnumerable&lt;int&gt; sequence)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if(SelectDelegate==null)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                SelectDelegate = new Func&lt;int, int&gt;(SelectClause);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            return sequence.Where&lt;int&gt;(</span><br><span class=\"line\">                new Func&lt;int, bool&gt;(this.WhereClause)).</span><br><span class=\"line\">                Select&lt;int, int&gt;(SelectClause);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>概括来说便是：lambda表达式中的代码访问了对象实例中的成员变量，那么编译器将生成实例方法来表示lambda表达式中的代码。其实这并没有什么奇特之处——编译器省去了我们的一些代码输入工作，代码也变得整洁很多，本质来说这还是普通的方法调用。</p>\n<p>不过若是lambda表达式中访问到了外部方法中的局部变量或者方法参数，那么编译器将帮你完成很多工作。</p>\n<p>这里会用到闭包。编译器将生成一个私有的嵌套类型，以便为局部变量实现闭包。</p>\n<p>局部变量必须传入到实现了lambda表达式主体部分的委托里。</p>\n<p>此外，所有由该lambda表达式执行的对这些局部变量所作的修改都必须能够在外部访问到。</p>\n<p>当然，代码中内层和外层中共享的可能不止有一个变量，也可能不止一个的查询表达式。</p>\n<p>我们来修改一下该实例方法，让其访问一个局部变量。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t  public class ModFilter</span><br><span class=\"line\">\t\t  &#123;</span><br><span class=\"line\">\t\t        private readonly int modules;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t        public ModFilter(int mod)</span><br><span class=\"line\">\t\t        &#123;</span><br><span class=\"line\">\t\t            modules = mod;</span><br><span class=\"line\">\t\t        &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t        public IEnumerable&lt;int&gt; FindValues(IEnumerable&lt;int&gt; sequence)</span><br><span class=\"line\">\t\t        &#123;</span><br><span class=\"line\">\t\t            int numValues = 0;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t            return from n in sequence</span><br><span class=\"line\">\t\t                   where n % modules == 0 //新添加的表达式</span><br><span class=\"line\">\t\t                   select n * n / ++ numValues; //访问局部变量</span><br><span class=\"line\">\t\t        &#125;</span><br><span class=\"line\">\t      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">注意，select字句需要访问numValues这个局部变量。编译器为了创建这个闭包，需要使用嵌套类型来实现你所需要的行为。下面展示的是编译器为你生成的代码。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> \t public class ModFilter</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">        private sealed class Closure</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            public ModFilter outer;</span><br><span class=\"line\"></span><br><span class=\"line\">            public int numValues;</span><br><span class=\"line\"></span><br><span class=\"line\">            public int SelectClause(int n)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                return ((n * n) / ++this.numValues);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        private readonly int modules;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        //实例方法</span><br><span class=\"line\">        private bool WhereClause(int n)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return ((n % this.modules) == 0);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public ModFilter(int mod)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            modules = mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        public IEnumerable&lt;int&gt; FindValues(IEnumerable&lt;int&gt; sequence)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Closure c = new Closure();</span><br><span class=\"line\">            c.outer = this;</span><br><span class=\"line\">            c.numValues = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">            return sequence.Where&lt;int&gt;(</span><br><span class=\"line\">                new Func&lt;int, bool&gt;(this.WhereClause)).</span><br><span class=\"line\">                Select&lt;int, int&gt;(c.SelectClause);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>在上面这段代码中，编译器专门创建了一个嵌套类，用来容纳所有将在lambda表达式中访问或修改的变量。实际上，这些局部变量将完全被嵌套类的字段所代替。lambda表达式内部的代码以及表达式外部(但仍在当前方法内)的代码访问的均是同一个字段，lambda表达式中的逻辑也被编译成了内部类的一个方法。</p>\n<p>对于lambda表达式中将要用到的外部方法的参数，编译器也会以对待局部变量的方式实现：编译器将这些参数复制到表示该闭包的嵌套类中。</p>\n<p>回到最开始的那个示例，这是我们应该可以理解这种看似怪异的行为了。变量index在传入闭包后，但在查询开始执行前曾被外部代码修改。也就是说，你修改了闭包的内部状态，然后还期待其能够回到从前的状态开始执行，显然这是不可能实现的。</p>\n<p>考虑到延迟执行中的交互以及编译器实现闭包的方式，修改查询与外部代码之间绑定的变量将可能会引发错误的行为。<br>因此，我们应该尽量避免在方法中修改哪些将要传入到闭包中，并将在闭包中使用的变量。</p>\n"},{"layout":"post","title":"C#避免在函数或者操作中抛出异常","date":"2016-10-03T16:00:00.000Z","_content":"# C#避免在函数或者操作中抛出异常\n\n## 引言\n\n如某个场景下，你的函数或操作需要操作一个序列的对象，且在处理的过程中抛出了异常。这时如果没有一些状态记录之类的数据，我们不了解已经处理了多少的数据，也不知道应该采用怎么样的策略回滚，因此根本无法返回到之前的状态。\n我们看一下下面的一个代码：\n\n```csharp\nvar allEmp = FindAllEmployees();\nallEmp.ForEach(e => e.MonthlySalary *=1.05M);\n```\n\n这样的代码看起来没什么问题。可是某一天，这个程序运行时抛出了异常。抛出异常的位置可能未知，导致部分员工得到了加薪，另外的一些员工却没有。结果是除了人工检查数据，我们已经没有办法重新找回丢失的状态。\n\n这样的代码修改元素的方式导致发生了上面的问题。这段代码并没有遵循“强异常安全保证”规则。换而言之，在运行时遇到错误，我们无法得知具体发生了什么，没有发生什么。\n\n### 原则：如果我们能保证当方法无法完成时，程序的状态不会发生改变，这样的问题就不会发生。\n\n我们有几种方法都可以实现这样的需求，但是每种方法都有各自的优势和风险。\n\n## 在函数/操作中抛出异常\n\n显而易见的，不是所有的方法都会遇到这样的问题（异常导致状态丢失）。很多时候我们只是检查了一下序列中的元素，访问之后并不会修改其中的元素。这类的行为我们其实并不需要太过于小心。现在我们回到最开始的地方，对于上面的场景（为每位员工加薪百分之五），如果我们想遵循“强异常安全保证”原则，那应该如何修改这个方法呢？\n\n#### 第一种异常：获取数据的时候异常\n\n在上面的例子中，即使FindAllEmployees()函数抛出异常，导致我们无法正确让员工加薪。虽然这样的情况并不是导致我们的数据产生问题，但是该加薪的大家没有得到加薪，这是一个多么沮丧的事情呢。\n\n#### 解决方法：重写前面以lambda表达式给出的操作方法（即FindAllEmployees()方法），让其永远不会抛出异常。\n\n很多时候，我们在开始修改数据之前，先校验数据的合法性以及剔除错误数据（如果允许剔除的话）并不是非常困难。我们是可以采取这样的方法来实现我们的目的。不过在这里的话，我们就必须严格处理操作方法，使得它能满足所有情况下的需求。\n\n#### 第二种异常：lambda表达式中操作数据异常\n同样是上面的例子，如果我们在执行加薪操作的时候，提升了那些已经离职的员工薪资导致了异常，使得程序中断，状态丢失。这样的情况，我们在执行加薪操作前先过滤掉已离职的员工便是一种正确的做法。\n\n#### 解决方法：操作数据前通过校验过滤后再执行操作\n\n如：\nallEmp.Where(emp=>emp.Active).ForEach(e => e.MonthlySalary *=1.05M);\n\n#### 第三种异常：执行操作的时候抛出异常\n\n有时候，我们根本无法保证处理方法的时候会不会抛出异常。这个时候就必须采取一些代价更加昂贵的处理方法了。\n\n#### 解决方法：创建副本尝试执行操作，副本无误后执行真正操作\n\n我们在编写这类代码的时候，应该考虑抛出异常之后的处理方案。这就意味着，我们的操作应该先在原数据副本上执行，随后仅在操作成功之后再将其替换原有的数据。\n如:\n\n```C#\nvar updatas = (from e in allEmp \n              select new Emp\n              {\n                  EmpID=e.EmpID,\n                  .....\n                  MonthlySalary =e.MonthlySalary *=1.05M\n              }).ToList();\n\nallEmp = updatas;\n```\n\n但是这样的修改也引发了其他的问题：代码量增加了，同时生成副本也消耗了大量的资源。这样的做法也有一个好处，我们在操作副本数据时遇到异常之后，有充分的\"空间\"来处理这些数据。\n\n实际中，这意味着我们让查询表达式返回了新序列，而不是去修改原先序列中的元素。这样的话，我们在尝试完成所有的操作的同时，即使失败了，也不会影响到我们程序的原有状态。\n","source":"_posts/C#避免在函数或者操作中抛出异常.md","raw":"---\nlayout: post\ntitle: C#避免在函数或者操作中抛出异常\ncategory: dotnet\ndate: 2016-10-04\ntags:\n- dotnet core\n- dotnet\n---\n# C#避免在函数或者操作中抛出异常\n\n## 引言\n\n如某个场景下，你的函数或操作需要操作一个序列的对象，且在处理的过程中抛出了异常。这时如果没有一些状态记录之类的数据，我们不了解已经处理了多少的数据，也不知道应该采用怎么样的策略回滚，因此根本无法返回到之前的状态。\n我们看一下下面的一个代码：\n\n```csharp\nvar allEmp = FindAllEmployees();\nallEmp.ForEach(e => e.MonthlySalary *=1.05M);\n```\n\n这样的代码看起来没什么问题。可是某一天，这个程序运行时抛出了异常。抛出异常的位置可能未知，导致部分员工得到了加薪，另外的一些员工却没有。结果是除了人工检查数据，我们已经没有办法重新找回丢失的状态。\n\n这样的代码修改元素的方式导致发生了上面的问题。这段代码并没有遵循“强异常安全保证”规则。换而言之，在运行时遇到错误，我们无法得知具体发生了什么，没有发生什么。\n\n### 原则：如果我们能保证当方法无法完成时，程序的状态不会发生改变，这样的问题就不会发生。\n\n我们有几种方法都可以实现这样的需求，但是每种方法都有各自的优势和风险。\n\n## 在函数/操作中抛出异常\n\n显而易见的，不是所有的方法都会遇到这样的问题（异常导致状态丢失）。很多时候我们只是检查了一下序列中的元素，访问之后并不会修改其中的元素。这类的行为我们其实并不需要太过于小心。现在我们回到最开始的地方，对于上面的场景（为每位员工加薪百分之五），如果我们想遵循“强异常安全保证”原则，那应该如何修改这个方法呢？\n\n#### 第一种异常：获取数据的时候异常\n\n在上面的例子中，即使FindAllEmployees()函数抛出异常，导致我们无法正确让员工加薪。虽然这样的情况并不是导致我们的数据产生问题，但是该加薪的大家没有得到加薪，这是一个多么沮丧的事情呢。\n\n#### 解决方法：重写前面以lambda表达式给出的操作方法（即FindAllEmployees()方法），让其永远不会抛出异常。\n\n很多时候，我们在开始修改数据之前，先校验数据的合法性以及剔除错误数据（如果允许剔除的话）并不是非常困难。我们是可以采取这样的方法来实现我们的目的。不过在这里的话，我们就必须严格处理操作方法，使得它能满足所有情况下的需求。\n\n#### 第二种异常：lambda表达式中操作数据异常\n同样是上面的例子，如果我们在执行加薪操作的时候，提升了那些已经离职的员工薪资导致了异常，使得程序中断，状态丢失。这样的情况，我们在执行加薪操作前先过滤掉已离职的员工便是一种正确的做法。\n\n#### 解决方法：操作数据前通过校验过滤后再执行操作\n\n如：\nallEmp.Where(emp=>emp.Active).ForEach(e => e.MonthlySalary *=1.05M);\n\n#### 第三种异常：执行操作的时候抛出异常\n\n有时候，我们根本无法保证处理方法的时候会不会抛出异常。这个时候就必须采取一些代价更加昂贵的处理方法了。\n\n#### 解决方法：创建副本尝试执行操作，副本无误后执行真正操作\n\n我们在编写这类代码的时候，应该考虑抛出异常之后的处理方案。这就意味着，我们的操作应该先在原数据副本上执行，随后仅在操作成功之后再将其替换原有的数据。\n如:\n\n```C#\nvar updatas = (from e in allEmp \n              select new Emp\n              {\n                  EmpID=e.EmpID,\n                  .....\n                  MonthlySalary =e.MonthlySalary *=1.05M\n              }).ToList();\n\nallEmp = updatas;\n```\n\n但是这样的修改也引发了其他的问题：代码量增加了，同时生成副本也消耗了大量的资源。这样的做法也有一个好处，我们在操作副本数据时遇到异常之后，有充分的\"空间\"来处理这些数据。\n\n实际中，这意味着我们让查询表达式返回了新序列，而不是去修改原先序列中的元素。这样的话，我们在尝试完成所有的操作的同时，即使失败了，也不会影响到我们程序的原有状态。\n","slug":"C#避免在函数或者操作中抛出异常","published":1,"updated":"2018-05-17T13:35:53.422Z","comments":1,"photos":[],"link":"","_id":"cjhal1fw6000vp631qtj0tdy9","content":"<h1 id=\"C-避免在函数或者操作中抛出异常\"><a href=\"#C-避免在函数或者操作中抛出异常\" class=\"headerlink\" title=\"C#避免在函数或者操作中抛出异常\"></a>C#避免在函数或者操作中抛出异常</h1><h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>如某个场景下，你的函数或操作需要操作一个序列的对象，且在处理的过程中抛出了异常。这时如果没有一些状态记录之类的数据，我们不了解已经处理了多少的数据，也不知道应该采用怎么样的策略回滚，因此根本无法返回到之前的状态。<br>我们看一下下面的一个代码：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> allEmp = FindAllEmployees();</span><br><span class=\"line\">allEmp.ForEach(e =&gt; e.MonthlySalary *=<span class=\"number\">1.05</span>M);</span><br></pre></td></tr></table></figure>\n<p>这样的代码看起来没什么问题。可是某一天，这个程序运行时抛出了异常。抛出异常的位置可能未知，导致部分员工得到了加薪，另外的一些员工却没有。结果是除了人工检查数据，我们已经没有办法重新找回丢失的状态。</p>\n<p>这样的代码修改元素的方式导致发生了上面的问题。这段代码并没有遵循“强异常安全保证”规则。换而言之，在运行时遇到错误，我们无法得知具体发生了什么，没有发生什么。</p>\n<h3 id=\"原则：如果我们能保证当方法无法完成时，程序的状态不会发生改变，这样的问题就不会发生。\"><a href=\"#原则：如果我们能保证当方法无法完成时，程序的状态不会发生改变，这样的问题就不会发生。\" class=\"headerlink\" title=\"原则：如果我们能保证当方法无法完成时，程序的状态不会发生改变，这样的问题就不会发生。\"></a>原则：如果我们能保证当方法无法完成时，程序的状态不会发生改变，这样的问题就不会发生。</h3><p>我们有几种方法都可以实现这样的需求，但是每种方法都有各自的优势和风险。</p>\n<h2 id=\"在函数-操作中抛出异常\"><a href=\"#在函数-操作中抛出异常\" class=\"headerlink\" title=\"在函数/操作中抛出异常\"></a>在函数/操作中抛出异常</h2><p>显而易见的，不是所有的方法都会遇到这样的问题（异常导致状态丢失）。很多时候我们只是检查了一下序列中的元素，访问之后并不会修改其中的元素。这类的行为我们其实并不需要太过于小心。现在我们回到最开始的地方，对于上面的场景（为每位员工加薪百分之五），如果我们想遵循“强异常安全保证”原则，那应该如何修改这个方法呢？</p>\n<h4 id=\"第一种异常：获取数据的时候异常\"><a href=\"#第一种异常：获取数据的时候异常\" class=\"headerlink\" title=\"第一种异常：获取数据的时候异常\"></a>第一种异常：获取数据的时候异常</h4><p>在上面的例子中，即使FindAllEmployees()函数抛出异常，导致我们无法正确让员工加薪。虽然这样的情况并不是导致我们的数据产生问题，但是该加薪的大家没有得到加薪，这是一个多么沮丧的事情呢。</p>\n<h4 id=\"解决方法：重写前面以lambda表达式给出的操作方法（即FindAllEmployees-方法），让其永远不会抛出异常。\"><a href=\"#解决方法：重写前面以lambda表达式给出的操作方法（即FindAllEmployees-方法），让其永远不会抛出异常。\" class=\"headerlink\" title=\"解决方法：重写前面以lambda表达式给出的操作方法（即FindAllEmployees()方法），让其永远不会抛出异常。\"></a>解决方法：重写前面以lambda表达式给出的操作方法（即FindAllEmployees()方法），让其永远不会抛出异常。</h4><p>很多时候，我们在开始修改数据之前，先校验数据的合法性以及剔除错误数据（如果允许剔除的话）并不是非常困难。我们是可以采取这样的方法来实现我们的目的。不过在这里的话，我们就必须严格处理操作方法，使得它能满足所有情况下的需求。</p>\n<h4 id=\"第二种异常：lambda表达式中操作数据异常\"><a href=\"#第二种异常：lambda表达式中操作数据异常\" class=\"headerlink\" title=\"第二种异常：lambda表达式中操作数据异常\"></a>第二种异常：lambda表达式中操作数据异常</h4><p>同样是上面的例子，如果我们在执行加薪操作的时候，提升了那些已经离职的员工薪资导致了异常，使得程序中断，状态丢失。这样的情况，我们在执行加薪操作前先过滤掉已离职的员工便是一种正确的做法。</p>\n<h4 id=\"解决方法：操作数据前通过校验过滤后再执行操作\"><a href=\"#解决方法：操作数据前通过校验过滤后再执行操作\" class=\"headerlink\" title=\"解决方法：操作数据前通过校验过滤后再执行操作\"></a>解决方法：操作数据前通过校验过滤后再执行操作</h4><p>如：<br>allEmp.Where(emp=&gt;emp.Active).ForEach(e =&gt; e.MonthlySalary *=1.05M);</p>\n<h4 id=\"第三种异常：执行操作的时候抛出异常\"><a href=\"#第三种异常：执行操作的时候抛出异常\" class=\"headerlink\" title=\"第三种异常：执行操作的时候抛出异常\"></a>第三种异常：执行操作的时候抛出异常</h4><p>有时候，我们根本无法保证处理方法的时候会不会抛出异常。这个时候就必须采取一些代价更加昂贵的处理方法了。</p>\n<h4 id=\"解决方法：创建副本尝试执行操作，副本无误后执行真正操作\"><a href=\"#解决方法：创建副本尝试执行操作，副本无误后执行真正操作\" class=\"headerlink\" title=\"解决方法：创建副本尝试执行操作，副本无误后执行真正操作\"></a>解决方法：创建副本尝试执行操作，副本无误后执行真正操作</h4><p>我们在编写这类代码的时候，应该考虑抛出异常之后的处理方案。这就意味着，我们的操作应该先在原数据副本上执行，随后仅在操作成功之后再将其替换原有的数据。<br>如:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var updatas = (from e in allEmp </span><br><span class=\"line\">              select new Emp</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  EmpID=e.EmpID,</span><br><span class=\"line\">                  .....</span><br><span class=\"line\">                  MonthlySalary =e.MonthlySalary *=1.05M</span><br><span class=\"line\">              &#125;).ToList();</span><br><span class=\"line\"></span><br><span class=\"line\">allEmp = updatas;</span><br></pre></td></tr></table></figure>\n<p>但是这样的修改也引发了其他的问题：代码量增加了，同时生成副本也消耗了大量的资源。这样的做法也有一个好处，我们在操作副本数据时遇到异常之后，有充分的”空间”来处理这些数据。</p>\n<p>实际中，这意味着我们让查询表达式返回了新序列，而不是去修改原先序列中的元素。这样的话，我们在尝试完成所有的操作的同时，即使失败了，也不会影响到我们程序的原有状态。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"C-避免在函数或者操作中抛出异常\"><a href=\"#C-避免在函数或者操作中抛出异常\" class=\"headerlink\" title=\"C#避免在函数或者操作中抛出异常\"></a>C#避免在函数或者操作中抛出异常</h1><h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>如某个场景下，你的函数或操作需要操作一个序列的对象，且在处理的过程中抛出了异常。这时如果没有一些状态记录之类的数据，我们不了解已经处理了多少的数据，也不知道应该采用怎么样的策略回滚，因此根本无法返回到之前的状态。<br>我们看一下下面的一个代码：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> allEmp = FindAllEmployees();</span><br><span class=\"line\">allEmp.ForEach(e =&gt; e.MonthlySalary *=<span class=\"number\">1.05</span>M);</span><br></pre></td></tr></table></figure>\n<p>这样的代码看起来没什么问题。可是某一天，这个程序运行时抛出了异常。抛出异常的位置可能未知，导致部分员工得到了加薪，另外的一些员工却没有。结果是除了人工检查数据，我们已经没有办法重新找回丢失的状态。</p>\n<p>这样的代码修改元素的方式导致发生了上面的问题。这段代码并没有遵循“强异常安全保证”规则。换而言之，在运行时遇到错误，我们无法得知具体发生了什么，没有发生什么。</p>\n<h3 id=\"原则：如果我们能保证当方法无法完成时，程序的状态不会发生改变，这样的问题就不会发生。\"><a href=\"#原则：如果我们能保证当方法无法完成时，程序的状态不会发生改变，这样的问题就不会发生。\" class=\"headerlink\" title=\"原则：如果我们能保证当方法无法完成时，程序的状态不会发生改变，这样的问题就不会发生。\"></a>原则：如果我们能保证当方法无法完成时，程序的状态不会发生改变，这样的问题就不会发生。</h3><p>我们有几种方法都可以实现这样的需求，但是每种方法都有各自的优势和风险。</p>\n<h2 id=\"在函数-操作中抛出异常\"><a href=\"#在函数-操作中抛出异常\" class=\"headerlink\" title=\"在函数/操作中抛出异常\"></a>在函数/操作中抛出异常</h2><p>显而易见的，不是所有的方法都会遇到这样的问题（异常导致状态丢失）。很多时候我们只是检查了一下序列中的元素，访问之后并不会修改其中的元素。这类的行为我们其实并不需要太过于小心。现在我们回到最开始的地方，对于上面的场景（为每位员工加薪百分之五），如果我们想遵循“强异常安全保证”原则，那应该如何修改这个方法呢？</p>\n<h4 id=\"第一种异常：获取数据的时候异常\"><a href=\"#第一种异常：获取数据的时候异常\" class=\"headerlink\" title=\"第一种异常：获取数据的时候异常\"></a>第一种异常：获取数据的时候异常</h4><p>在上面的例子中，即使FindAllEmployees()函数抛出异常，导致我们无法正确让员工加薪。虽然这样的情况并不是导致我们的数据产生问题，但是该加薪的大家没有得到加薪，这是一个多么沮丧的事情呢。</p>\n<h4 id=\"解决方法：重写前面以lambda表达式给出的操作方法（即FindAllEmployees-方法），让其永远不会抛出异常。\"><a href=\"#解决方法：重写前面以lambda表达式给出的操作方法（即FindAllEmployees-方法），让其永远不会抛出异常。\" class=\"headerlink\" title=\"解决方法：重写前面以lambda表达式给出的操作方法（即FindAllEmployees()方法），让其永远不会抛出异常。\"></a>解决方法：重写前面以lambda表达式给出的操作方法（即FindAllEmployees()方法），让其永远不会抛出异常。</h4><p>很多时候，我们在开始修改数据之前，先校验数据的合法性以及剔除错误数据（如果允许剔除的话）并不是非常困难。我们是可以采取这样的方法来实现我们的目的。不过在这里的话，我们就必须严格处理操作方法，使得它能满足所有情况下的需求。</p>\n<h4 id=\"第二种异常：lambda表达式中操作数据异常\"><a href=\"#第二种异常：lambda表达式中操作数据异常\" class=\"headerlink\" title=\"第二种异常：lambda表达式中操作数据异常\"></a>第二种异常：lambda表达式中操作数据异常</h4><p>同样是上面的例子，如果我们在执行加薪操作的时候，提升了那些已经离职的员工薪资导致了异常，使得程序中断，状态丢失。这样的情况，我们在执行加薪操作前先过滤掉已离职的员工便是一种正确的做法。</p>\n<h4 id=\"解决方法：操作数据前通过校验过滤后再执行操作\"><a href=\"#解决方法：操作数据前通过校验过滤后再执行操作\" class=\"headerlink\" title=\"解决方法：操作数据前通过校验过滤后再执行操作\"></a>解决方法：操作数据前通过校验过滤后再执行操作</h4><p>如：<br>allEmp.Where(emp=&gt;emp.Active).ForEach(e =&gt; e.MonthlySalary *=1.05M);</p>\n<h4 id=\"第三种异常：执行操作的时候抛出异常\"><a href=\"#第三种异常：执行操作的时候抛出异常\" class=\"headerlink\" title=\"第三种异常：执行操作的时候抛出异常\"></a>第三种异常：执行操作的时候抛出异常</h4><p>有时候，我们根本无法保证处理方法的时候会不会抛出异常。这个时候就必须采取一些代价更加昂贵的处理方法了。</p>\n<h4 id=\"解决方法：创建副本尝试执行操作，副本无误后执行真正操作\"><a href=\"#解决方法：创建副本尝试执行操作，副本无误后执行真正操作\" class=\"headerlink\" title=\"解决方法：创建副本尝试执行操作，副本无误后执行真正操作\"></a>解决方法：创建副本尝试执行操作，副本无误后执行真正操作</h4><p>我们在编写这类代码的时候，应该考虑抛出异常之后的处理方案。这就意味着，我们的操作应该先在原数据副本上执行，随后仅在操作成功之后再将其替换原有的数据。<br>如:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var updatas = (from e in allEmp </span><br><span class=\"line\">              select new Emp</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  EmpID=e.EmpID,</span><br><span class=\"line\">                  .....</span><br><span class=\"line\">                  MonthlySalary =e.MonthlySalary *=1.05M</span><br><span class=\"line\">              &#125;).ToList();</span><br><span class=\"line\"></span><br><span class=\"line\">allEmp = updatas;</span><br></pre></td></tr></table></figure>\n<p>但是这样的修改也引发了其他的问题：代码量增加了，同时生成副本也消耗了大量的资源。这样的做法也有一个好处，我们在操作副本数据时遇到异常之后，有充分的”空间”来处理这些数据。</p>\n<p>实际中，这意味着我们让查询表达式返回了新序列，而不是去修改原先序列中的元素。这样的话，我们在尝试完成所有的操作的同时，即使失败了，也不会影响到我们程序的原有状态。</p>\n"},{"layout":"post","title":"CLR 手动监控和控制对象的生存周期","date":"2016-10-03T16:00:00.000Z","_content":"CLR为每个 ApDomain 都提供了一个 **GC句柄表（GC Handle table）**，允许应用程序监视或者手动控制对象的生存期。这个表在 ApDomain 创建之初是空白的。\n\n表中每个记录项都包含一下两种信息：\n\n对托管堆中的一个对象的引用，以及之初如何监视或者控制对象的标志（flag）。\n\n\n```csharp\n\n```","source":"_posts/CLR-GC-Handle-Table.md","raw":"---\nlayout: post\ntitle: CLR 手动监控和控制对象的生存周期\ncategory: dotnet\ndate: 2016-10-04\ntags:\n- dotnet core\n- dotnet\n---\nCLR为每个 ApDomain 都提供了一个 **GC句柄表（GC Handle table）**，允许应用程序监视或者手动控制对象的生存期。这个表在 ApDomain 创建之初是空白的。\n\n表中每个记录项都包含一下两种信息：\n\n对托管堆中的一个对象的引用，以及之初如何监视或者控制对象的标志（flag）。\n\n\n```csharp\n\n```","slug":"CLR-GC-Handle-Table","published":1,"updated":"2018-05-17T13:36:04.007Z","comments":1,"photos":[],"link":"","_id":"cjhal1fw70010p631t1ot1bv2","content":"<p>CLR为每个 ApDomain 都提供了一个 <strong>GC句柄表（GC Handle table）</strong>，允许应用程序监视或者手动控制对象的生存期。这个表在 ApDomain 创建之初是空白的。</p>\n<p>表中每个记录项都包含一下两种信息：</p>\n<p>对托管堆中的一个对象的引用，以及之初如何监视或者控制对象的标志（flag）。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>CLR为每个 ApDomain 都提供了一个 <strong>GC句柄表（GC Handle table）</strong>，允许应用程序监视或者手动控制对象的生存期。这个表在 ApDomain 创建之初是空白的。</p>\n<p>表中每个记录项都包含一下两种信息：</p>\n<p>对托管堆中的一个对象的引用，以及之初如何监视或者控制对象的标志（flag）。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"Microsoft .NET Core 1.0.0 VS 2015 Tooling Preview 2 0x80070003","date":"2016-10-03T16:00:00.000Z","_content":"\n最近安装Microsoft .NET Core 1.0.0 VS 2015 Tooling Preview 2实在有点曲折，忍不住写个文章来讲这货的坑爹之旅了。\n\n一般我们在[.NET Downloads](https://www.microsoft.com/net/download) 下载回来的Microsoft .NET Core 1.0.0 VS 2015 Tooling Preview 2是一个简易安装包。\n\n它在安装过程中会不断去网络请求需要的msi文件，美名曰：在线安装。\n\n然而在我国的国情以及我国网络运营商的衬托下，在线安装这种东西实在不可恭维。\n\n本来网络稳定，在线安装 这种鬼也还算能用，不过最近微软爸爸不知道为嘛了，.net core相关安装包的下载地址全线失效。\n如[DotNetCore.1.0.1-SDK.1.0.0.Preview2-003133-x64.exe](https://download.microsoft.com/download/0/A/3/0A372822-205D-4A86-BFA7-084D2CBE9EDF/DotNetCore.1.0.1-SDK.1.0.0.Preview2-003133-x64.exe)，直接出502 Bad Gateway。\n\n这个还能用迅雷或者命令行下载回来，但是DotNetCore.1.0.1-SDK.1.0.0.Preview2这货安装过程中需要的一下msi安装包，就死活下不回来了。\n\n#### 安装过程报错：0x80070003 系统找不到需要的文件。\n\n此处已确认是微软爸爸的bug了。[issue在这里](https://github.com/aspnet/Tooling/issues/655)\n\n#### 分析log\n\n我们去看安装失败的log，能看到类似下面的log：\n\nError 0x80072efd: Failed attempt to download URL: 'https://download.microsoft.com/download/A/3/8/A38489F3-9777-41DD-83F8-2CBDFAB2520C/packages/ancm_iis_express_x64_en_rc2_39.msi' to: 'C:\\Users\\cneuss\\AppData\\Local\\Temp{C307771D-8D9A-45B5-B514-B6CA69C0C6E2}\\ANCM_IISExpress_x64'\n\n\n很明显这个操作从\n\n[https://download.microsoft.com/download/A/3/8/A38489F3-9777-41DD-83F8-2CBDFAB2520C/packages/ancm_iis_express_x64_en_rc2_39.msi](https://download.microsoft.com/download/A/3/8/A38489F3-9777-41DD-83F8-2CBDFAB2520C/packages/ancm_iis_express_x64_en_rc2_39.msi)\n\n上面下载ancm_iis_express_x64_en_rc2_39.msi文件。\n\n然而我们点击进去，看到这个同样的问题：502 Bad Gateway。\n\n\n安装到这里，已经GG了。\n\n不过既然知道是因为下载文件的问题了，那么解决办法也应运而生了。\n\n我们完全手动下载文件（用迅雷或者别的下载工具），发布在本地，改hosts地址让下载请求直接从本地下载文件。\n\n这个方案听起来是没有任何的问题的，我也成功使用迅雷把无法下载的文件下载到本地了。然而在改host地址这里卡住了。\n\n不知道为嘛，无论我把[download.microsoft.com](download.microsoft.com)指向怎么改，也无法把请求重定向到本地。\n\n后来认真看了下安装log，发现所以的下载操作都是把文件下载到 C:\\Users\\cneuss\\AppData\\Local\\Temp 目录（具体目录看log文件内容）下的临时路径，报错是系统找不到需要的文件。\n\n那么，我们手动把需要的文件放到对应的位置，问题也就解决了。\n\n所以，为了清晰找到临时路径，安装之前先把“C:\\Users\\cneuss\\AppData\\Local\\Temp”的文件清空，然后点击安装包。\n\n很快可以在temp路径下看到冒出来的{xxxxxxxxxxxxx}文件夹，然后迅速把我们通过迅雷下载回来的文件仍到这个目录底下。\n\n迅速操作的原因是，在线安装包正在下载所需要的文件，如：ancm_iis_express_x64_en_rc2_39.msi，我们要在下载超时之前把文件应该在的位置，这样的话即使下载没拿到文件，安装程序还是可以拿我们的文件去执行安装。\n\n别的就是不断尝试，看缺少那个msi手动下哪个msi的事情了。\n\n#### 最终方案\n最后，根据log文件，还发现了一个更简单的方法：\n\n在DotNetCore.1.0.1-SDK.1.0.0.Preview2-003133-x64.exe的同级目录下新建packages文件夹，把上面无法在线下载到的msi仍进去，然后就一路绿灯了。\n\n","source":"_posts/Can't_install_Preview2_on_fresh_VS2015_Update3_Installation.md","raw":"---\nlayout: post\ntitle : Microsoft .NET Core 1.0.0 VS 2015 Tooling Preview 2 0x80070003\ncategory: dotnet core\ndate: 2016-10-04\ntags:\n- dotnet core\n- dotnet\n---\n\n最近安装Microsoft .NET Core 1.0.0 VS 2015 Tooling Preview 2实在有点曲折，忍不住写个文章来讲这货的坑爹之旅了。\n\n一般我们在[.NET Downloads](https://www.microsoft.com/net/download) 下载回来的Microsoft .NET Core 1.0.0 VS 2015 Tooling Preview 2是一个简易安装包。\n\n它在安装过程中会不断去网络请求需要的msi文件，美名曰：在线安装。\n\n然而在我国的国情以及我国网络运营商的衬托下，在线安装这种东西实在不可恭维。\n\n本来网络稳定，在线安装 这种鬼也还算能用，不过最近微软爸爸不知道为嘛了，.net core相关安装包的下载地址全线失效。\n如[DotNetCore.1.0.1-SDK.1.0.0.Preview2-003133-x64.exe](https://download.microsoft.com/download/0/A/3/0A372822-205D-4A86-BFA7-084D2CBE9EDF/DotNetCore.1.0.1-SDK.1.0.0.Preview2-003133-x64.exe)，直接出502 Bad Gateway。\n\n这个还能用迅雷或者命令行下载回来，但是DotNetCore.1.0.1-SDK.1.0.0.Preview2这货安装过程中需要的一下msi安装包，就死活下不回来了。\n\n#### 安装过程报错：0x80070003 系统找不到需要的文件。\n\n此处已确认是微软爸爸的bug了。[issue在这里](https://github.com/aspnet/Tooling/issues/655)\n\n#### 分析log\n\n我们去看安装失败的log，能看到类似下面的log：\n\nError 0x80072efd: Failed attempt to download URL: 'https://download.microsoft.com/download/A/3/8/A38489F3-9777-41DD-83F8-2CBDFAB2520C/packages/ancm_iis_express_x64_en_rc2_39.msi' to: 'C:\\Users\\cneuss\\AppData\\Local\\Temp{C307771D-8D9A-45B5-B514-B6CA69C0C6E2}\\ANCM_IISExpress_x64'\n\n\n很明显这个操作从\n\n[https://download.microsoft.com/download/A/3/8/A38489F3-9777-41DD-83F8-2CBDFAB2520C/packages/ancm_iis_express_x64_en_rc2_39.msi](https://download.microsoft.com/download/A/3/8/A38489F3-9777-41DD-83F8-2CBDFAB2520C/packages/ancm_iis_express_x64_en_rc2_39.msi)\n\n上面下载ancm_iis_express_x64_en_rc2_39.msi文件。\n\n然而我们点击进去，看到这个同样的问题：502 Bad Gateway。\n\n\n安装到这里，已经GG了。\n\n不过既然知道是因为下载文件的问题了，那么解决办法也应运而生了。\n\n我们完全手动下载文件（用迅雷或者别的下载工具），发布在本地，改hosts地址让下载请求直接从本地下载文件。\n\n这个方案听起来是没有任何的问题的，我也成功使用迅雷把无法下载的文件下载到本地了。然而在改host地址这里卡住了。\n\n不知道为嘛，无论我把[download.microsoft.com](download.microsoft.com)指向怎么改，也无法把请求重定向到本地。\n\n后来认真看了下安装log，发现所以的下载操作都是把文件下载到 C:\\Users\\cneuss\\AppData\\Local\\Temp 目录（具体目录看log文件内容）下的临时路径，报错是系统找不到需要的文件。\n\n那么，我们手动把需要的文件放到对应的位置，问题也就解决了。\n\n所以，为了清晰找到临时路径，安装之前先把“C:\\Users\\cneuss\\AppData\\Local\\Temp”的文件清空，然后点击安装包。\n\n很快可以在temp路径下看到冒出来的{xxxxxxxxxxxxx}文件夹，然后迅速把我们通过迅雷下载回来的文件仍到这个目录底下。\n\n迅速操作的原因是，在线安装包正在下载所需要的文件，如：ancm_iis_express_x64_en_rc2_39.msi，我们要在下载超时之前把文件应该在的位置，这样的话即使下载没拿到文件，安装程序还是可以拿我们的文件去执行安装。\n\n别的就是不断尝试，看缺少那个msi手动下哪个msi的事情了。\n\n#### 最终方案\n最后，根据log文件，还发现了一个更简单的方法：\n\n在DotNetCore.1.0.1-SDK.1.0.0.Preview2-003133-x64.exe的同级目录下新建packages文件夹，把上面无法在线下载到的msi仍进去，然后就一路绿灯了。\n\n","slug":"Can't_install_Preview2_on_fresh_VS2015_Update3_Installation","published":1,"updated":"2018-05-17T13:35:58.304Z","comments":1,"photos":[],"link":"","_id":"cjhal1fw80013p631i5yev9j2","content":"<p>最近安装Microsoft .NET Core 1.0.0 VS 2015 Tooling Preview 2实在有点曲折，忍不住写个文章来讲这货的坑爹之旅了。</p>\n<p>一般我们在<a href=\"https://www.microsoft.com/net/download\" target=\"_blank\" rel=\"noopener\">.NET Downloads</a> 下载回来的Microsoft .NET Core 1.0.0 VS 2015 Tooling Preview 2是一个简易安装包。</p>\n<p>它在安装过程中会不断去网络请求需要的msi文件，美名曰：在线安装。</p>\n<p>然而在我国的国情以及我国网络运营商的衬托下，在线安装这种东西实在不可恭维。</p>\n<p>本来网络稳定，在线安装 这种鬼也还算能用，不过最近微软爸爸不知道为嘛了，.net core相关安装包的下载地址全线失效。<br>如<a href=\"https://download.microsoft.com/download/0/A/3/0A372822-205D-4A86-BFA7-084D2CBE9EDF/DotNetCore.1.0.1-SDK.1.0.0.Preview2-003133-x64.exe\" target=\"_blank\" rel=\"noopener\">DotNetCore.1.0.1-SDK.1.0.0.Preview2-003133-x64.exe</a>，直接出502 Bad Gateway。</p>\n<p>这个还能用迅雷或者命令行下载回来，但是DotNetCore.1.0.1-SDK.1.0.0.Preview2这货安装过程中需要的一下msi安装包，就死活下不回来了。</p>\n<h4 id=\"安装过程报错：0x80070003-系统找不到需要的文件。\"><a href=\"#安装过程报错：0x80070003-系统找不到需要的文件。\" class=\"headerlink\" title=\"安装过程报错：0x80070003 系统找不到需要的文件。\"></a>安装过程报错：0x80070003 系统找不到需要的文件。</h4><p>此处已确认是微软爸爸的bug了。<a href=\"https://github.com/aspnet/Tooling/issues/655\" target=\"_blank\" rel=\"noopener\">issue在这里</a></p>\n<h4 id=\"分析log\"><a href=\"#分析log\" class=\"headerlink\" title=\"分析log\"></a>分析log</h4><p>我们去看安装失败的log，能看到类似下面的log：</p>\n<p>Error 0x80072efd: Failed attempt to download URL: ‘<a href=\"https://download.microsoft.com/download/A/3/8/A38489F3-9777-41DD-83F8-2CBDFAB2520C/packages/ancm_iis_express_x64_en_rc2_39.msi&#39;\" target=\"_blank\" rel=\"noopener\">https://download.microsoft.com/download/A/3/8/A38489F3-9777-41DD-83F8-2CBDFAB2520C/packages/ancm_iis_express_x64_en_rc2_39.msi&#39;</a> to: ‘C:\\Users\\cneuss\\AppData\\Local\\Temp{C307771D-8D9A-45B5-B514-B6CA69C0C6E2}\\ANCM_IISExpress_x64’</p>\n<p>很明显这个操作从</p>\n<p><a href=\"https://download.microsoft.com/download/A/3/8/A38489F3-9777-41DD-83F8-2CBDFAB2520C/packages/ancm_iis_express_x64_en_rc2_39.msi\" target=\"_blank\" rel=\"noopener\">https://download.microsoft.com/download/A/3/8/A38489F3-9777-41DD-83F8-2CBDFAB2520C/packages/ancm_iis_express_x64_en_rc2_39.msi</a></p>\n<p>上面下载ancm_iis_express_x64_en_rc2_39.msi文件。</p>\n<p>然而我们点击进去，看到这个同样的问题：502 Bad Gateway。</p>\n<p>安装到这里，已经GG了。</p>\n<p>不过既然知道是因为下载文件的问题了，那么解决办法也应运而生了。</p>\n<p>我们完全手动下载文件（用迅雷或者别的下载工具），发布在本地，改hosts地址让下载请求直接从本地下载文件。</p>\n<p>这个方案听起来是没有任何的问题的，我也成功使用迅雷把无法下载的文件下载到本地了。然而在改host地址这里卡住了。</p>\n<p>不知道为嘛，无论我把<a href=\"download.microsoft.com\">download.microsoft.com</a>指向怎么改，也无法把请求重定向到本地。</p>\n<p>后来认真看了下安装log，发现所以的下载操作都是把文件下载到 C:\\Users\\cneuss\\AppData\\Local\\Temp 目录（具体目录看log文件内容）下的临时路径，报错是系统找不到需要的文件。</p>\n<p>那么，我们手动把需要的文件放到对应的位置，问题也就解决了。</p>\n<p>所以，为了清晰找到临时路径，安装之前先把“C:\\Users\\cneuss\\AppData\\Local\\Temp”的文件清空，然后点击安装包。</p>\n<p>很快可以在temp路径下看到冒出来的{xxxxxxxxxxxxx}文件夹，然后迅速把我们通过迅雷下载回来的文件仍到这个目录底下。</p>\n<p>迅速操作的原因是，在线安装包正在下载所需要的文件，如：ancm_iis_express_x64_en_rc2_39.msi，我们要在下载超时之前把文件应该在的位置，这样的话即使下载没拿到文件，安装程序还是可以拿我们的文件去执行安装。</p>\n<p>别的就是不断尝试，看缺少那个msi手动下哪个msi的事情了。</p>\n<h4 id=\"最终方案\"><a href=\"#最终方案\" class=\"headerlink\" title=\"最终方案\"></a>最终方案</h4><p>最后，根据log文件，还发现了一个更简单的方法：</p>\n<p>在DotNetCore.1.0.1-SDK.1.0.0.Preview2-003133-x64.exe的同级目录下新建packages文件夹，把上面无法在线下载到的msi仍进去，然后就一路绿灯了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近安装Microsoft .NET Core 1.0.0 VS 2015 Tooling Preview 2实在有点曲折，忍不住写个文章来讲这货的坑爹之旅了。</p>\n<p>一般我们在<a href=\"https://www.microsoft.com/net/download\" target=\"_blank\" rel=\"noopener\">.NET Downloads</a> 下载回来的Microsoft .NET Core 1.0.0 VS 2015 Tooling Preview 2是一个简易安装包。</p>\n<p>它在安装过程中会不断去网络请求需要的msi文件，美名曰：在线安装。</p>\n<p>然而在我国的国情以及我国网络运营商的衬托下，在线安装这种东西实在不可恭维。</p>\n<p>本来网络稳定，在线安装 这种鬼也还算能用，不过最近微软爸爸不知道为嘛了，.net core相关安装包的下载地址全线失效。<br>如<a href=\"https://download.microsoft.com/download/0/A/3/0A372822-205D-4A86-BFA7-084D2CBE9EDF/DotNetCore.1.0.1-SDK.1.0.0.Preview2-003133-x64.exe\" target=\"_blank\" rel=\"noopener\">DotNetCore.1.0.1-SDK.1.0.0.Preview2-003133-x64.exe</a>，直接出502 Bad Gateway。</p>\n<p>这个还能用迅雷或者命令行下载回来，但是DotNetCore.1.0.1-SDK.1.0.0.Preview2这货安装过程中需要的一下msi安装包，就死活下不回来了。</p>\n<h4 id=\"安装过程报错：0x80070003-系统找不到需要的文件。\"><a href=\"#安装过程报错：0x80070003-系统找不到需要的文件。\" class=\"headerlink\" title=\"安装过程报错：0x80070003 系统找不到需要的文件。\"></a>安装过程报错：0x80070003 系统找不到需要的文件。</h4><p>此处已确认是微软爸爸的bug了。<a href=\"https://github.com/aspnet/Tooling/issues/655\" target=\"_blank\" rel=\"noopener\">issue在这里</a></p>\n<h4 id=\"分析log\"><a href=\"#分析log\" class=\"headerlink\" title=\"分析log\"></a>分析log</h4><p>我们去看安装失败的log，能看到类似下面的log：</p>\n<p>Error 0x80072efd: Failed attempt to download URL: ‘<a href=\"https://download.microsoft.com/download/A/3/8/A38489F3-9777-41DD-83F8-2CBDFAB2520C/packages/ancm_iis_express_x64_en_rc2_39.msi&#39;\" target=\"_blank\" rel=\"noopener\">https://download.microsoft.com/download/A/3/8/A38489F3-9777-41DD-83F8-2CBDFAB2520C/packages/ancm_iis_express_x64_en_rc2_39.msi&#39;</a> to: ‘C:\\Users\\cneuss\\AppData\\Local\\Temp{C307771D-8D9A-45B5-B514-B6CA69C0C6E2}\\ANCM_IISExpress_x64’</p>\n<p>很明显这个操作从</p>\n<p><a href=\"https://download.microsoft.com/download/A/3/8/A38489F3-9777-41DD-83F8-2CBDFAB2520C/packages/ancm_iis_express_x64_en_rc2_39.msi\" target=\"_blank\" rel=\"noopener\">https://download.microsoft.com/download/A/3/8/A38489F3-9777-41DD-83F8-2CBDFAB2520C/packages/ancm_iis_express_x64_en_rc2_39.msi</a></p>\n<p>上面下载ancm_iis_express_x64_en_rc2_39.msi文件。</p>\n<p>然而我们点击进去，看到这个同样的问题：502 Bad Gateway。</p>\n<p>安装到这里，已经GG了。</p>\n<p>不过既然知道是因为下载文件的问题了，那么解决办法也应运而生了。</p>\n<p>我们完全手动下载文件（用迅雷或者别的下载工具），发布在本地，改hosts地址让下载请求直接从本地下载文件。</p>\n<p>这个方案听起来是没有任何的问题的，我也成功使用迅雷把无法下载的文件下载到本地了。然而在改host地址这里卡住了。</p>\n<p>不知道为嘛，无论我把<a href=\"download.microsoft.com\">download.microsoft.com</a>指向怎么改，也无法把请求重定向到本地。</p>\n<p>后来认真看了下安装log，发现所以的下载操作都是把文件下载到 C:\\Users\\cneuss\\AppData\\Local\\Temp 目录（具体目录看log文件内容）下的临时路径，报错是系统找不到需要的文件。</p>\n<p>那么，我们手动把需要的文件放到对应的位置，问题也就解决了。</p>\n<p>所以，为了清晰找到临时路径，安装之前先把“C:\\Users\\cneuss\\AppData\\Local\\Temp”的文件清空，然后点击安装包。</p>\n<p>很快可以在temp路径下看到冒出来的{xxxxxxxxxxxxx}文件夹，然后迅速把我们通过迅雷下载回来的文件仍到这个目录底下。</p>\n<p>迅速操作的原因是，在线安装包正在下载所需要的文件，如：ancm_iis_express_x64_en_rc2_39.msi，我们要在下载超时之前把文件应该在的位置，这样的话即使下载没拿到文件，安装程序还是可以拿我们的文件去执行安装。</p>\n<p>别的就是不断尝试，看缺少那个msi手动下哪个msi的事情了。</p>\n<h4 id=\"最终方案\"><a href=\"#最终方案\" class=\"headerlink\" title=\"最终方案\"></a>最终方案</h4><p>最后，根据log文件，还发现了一个更简单的方法：</p>\n<p>在DotNetCore.1.0.1-SDK.1.0.0.Preview2-003133-x64.exe的同级目录下新建packages文件夹，把上面无法在线下载到的msi仍进去，然后就一路绿灯了。</p>\n"},{"layout":"post","title":"CodeSmith for MySQL template","date":"2016-10-03T16:00:00.000Z","_content":"\n\n对于.NET平台上的代码生成器来说，codesmith是一个非常好的选择。\n\n<br> \n以前在学院实验室用的都是SQL server数据库，老师给的一套codesmith模板用来生成model/DAL/BLL很是方便。\n<br> \n不过后来放弃SQL server 投入MySQL之后，刚开始都是手写SQL，还是很痛苦的。\n<br> \n再后来又去找MySQL codesmith模板,这个对应的资料就不多了。不过最后还是找到了一套不错的，凑合能用。起初也懒，codesmith语法不熟，就没想过去修改一下了。\n<br> 最近又要用到这套东西，于是决定还是去修改一番，更便于使用。\n\n这个文章就主要讲一下修改过程，顺便说一下codesmith的简单语法。\n\n\n先说一下操作步骤：\n\n把模板的文件夹扔到codesmith模板文件的路径下，接着打开Codesmith，找到刚扔过去的文件夹，选择Main.cst,右键-execute-选择对应的MySQL库-选中表。\n<br>（注：codesmith连接MySQL有问题的话，\n<br>移步这里解决 [CodeSmith 连接MySQL数据库报“can't find .net framework data provider”](http://codelover.link/2016/02/25/CodeSmith%E8%BF%9E%E6%8E%A5MySQL%E6%8A%A5%E9%94%99%E2%80%9C%E6%89%BE%E4%B8%8D%E5%88%B0%E8%AF%B7%E6%B1%82%E7%9A%84%20.Net%20Framework%20Data%20Provider%E3%80%82%E5%8F%AF%E8%83%BD%E6%B2%A1%E6%9C%89%E5%AE%89%E8%A3%85%E3%80%82%E2%80%9D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/))\n\n如下图：\n![1](http://a1.qpic.cn/psb?/V13bZOxq1m5DxB/1XlywVcAyPW6y*6sO1QU.gkuidIqPkx.f70JsaijlU0!/b/dIwBAAAAAAAA&bo=MQIcAjECHAIDCSw!&rf=viewer_4)\n\n\n\n然后点击Generate就能顺利生成model/dal/bll了。\n\n\n生成代码结构如下：\n![2](http://a3.qpic.cn/psb?/V13bZOxq1m5DxB/ikI1fSxAYklZgi1PmtPVTQqpHcZ0KTQHgN7LrPJaKNo!/b/dG4AAAAAAAAA&bo=fgLGAH4CxgADCSw!&rf=viewer_4)\n\n\n\n<p>这样操作没什么问题，顺利生成了我们要的model/dal/bll了，然后....我懒嘛。\n每次都要把表一个个选一次，麻不麻烦啊。然后就想了，能不能改一下模板呢。于是便开始google相关资料了。找到了几个相关文章，参考这就开始改造了。\n先看看原来的Main.cst里面写了撒。\n\n```C#\n\n<%@ CodeTemplate Language=\"C#\" ResponseEncoding=\"UTF-8\" \nTargetLanguage=\"Text\" Src=\"\" Inherits=\"\" Debug=\"False\" \nDescription=\"Template description here.\" \n Output=\"None\"%>\n<%@ Register Name=\"Models\" Template=\"DBMad.Models.cst\" \n\tMergeProperties=\"False\" ExcludeProperties=\"\" %>\t\n<%@ Register Name=\"DAL\" Template=\"DBMad.DAL.cst\" \nMergeProperties=\"False\" ExcludeProperties=\"\" %> \n<%@ Register Name=\"BLL\" Template=\"DBMad.BLL.cst\" \nMergeProperties=\"False\" ExcludeProperties=\"\" %>\n\n<%@ Property Name=\"SourceTable\" \nType=\"SchemaExplorer.TableSchema\" Optional=\"False\"%>\n<%@ Property Name=\"RootNamespace\" Default=\"Net.Itcast.CN\" \nType=\"System.String\" Optional=\"False\"%>\n\n<%@ Assembly Name=\"SchemaExplorer\" %>\n<%@ Assembly Name=\"System.Data\" %>\n<%@ Import Namespace=\"SchemaExplorer\" %>\n<%@ Import Namespace=\"System.Data\" %>\n<script runat=\"template\">\n\tprivate string _outputDirectory = String.Empty;\n\t[Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), \n\ttypeof(System.Drawing.Design.UITypeEditor))] \n\t[Description(\"The directory to output the results to.\")]\n\tpublic string OutputDirectory \n\t{\n\t\tget\n\t\t{\t\t\n\t\t\treturn _outputDirectory;\n\t\t}\n\t\tset\n\t\t{\n\t\t\tif (value != null && !value.EndsWith(\"\\\\\"))\n\t\t\t{\n\t\t\t\tvalue += \"\\\\\";\n\t\t    }\n\t\t\t_outputDirectory = value;\n\t\t} \n\t}\n</script>\n\n```\n\n\n这一段基本就是在声明选项以及引用命名空间，表现出来的便是我们看到的下图：\n\n![1](http://a1.qpic.cn/psb?/V13bZOxq1m5DxB/1XlywVcAyPW6y*6sO1QU.gkuidIqPkx.f70JsaijlU0!/b/dIwBAAAAAAAA&bo=MQIcAjECHAIDCSw!&rf=viewer_4)\n\n\n``` C#\n\n<%\n    Models model = this.Create<Models>();\n\tmodel.ModelsNamespace = this.RootNamespace+\".Model\";\n\tmodel.TargetTable = this.SourceTable;\n\tmodel.RenderToFile(this.OutputDirectory+\"Model/\"+model.GetFileName(),true);\n\t\n\n   DAL dal = this.Create<DAL>();\n   dal.TargetTable = this.SourceTable;\n   dal.ModelsNamespace = model.ModelsNamespace;\n   dal.DALClassNameSurfix = \"DAL\";\n   dal.DALNamespace =this.RootNamespace+\".DAL\";\n   dal.RenderToFile(this.OutputDirectory+\"DAL/\"\n   +dal.GetFileName(),true);\n\n   BLL bll = this.Create<BLL>();\n   bll.ModelsNamespace = model.ModelsNamespace;\n   bll.DALClassNameSurfix = dal.DALClassNameSurfix;\n   bll.DALNamespace = dal.DALNamespace;\n   bll.BLLClassNameSurfix = \"BLL\";\n   bll.BLLNamespace = this.RootNamespace+\".BLL\";\n   bll.TargetTable = this.SourceTable;\n   bll.RenderToFile(this.OutputDirectory+\"BLL/\"\n   +bll.GetFileName(),true);\n\n   Response.Write(\"ok,see \"+this.OutputDirectory);\n%>\n```\n\n这一段就是我们点击Generate之后执行的代码，基本功能就是调用\nDBMad.Models.cst,DBMad.DAL.cst,DBMad.BLL.cst。\n因为在上面声明数据源的时候，使用了SchemaExplorer.TableSchema，导致我们选择表的时候不能多选。代码如下：\n\n<%@ Property Name=\"SourceTable\" Type=\"SchemaExplorer.TableSchema\" Optional=\"False\"%>\n\n这样一想，这个Main.cst就是一个可以处理单表的生成模板了，我们只要自己写一个可以多选表的模板，然后循环调用这个模板去生成，不就完事了？\n\n找了一下资料，发现只需要把上面的选项Type改一下，便可以多选表了。\n\n如下：\n\n<%@ Property Name=\"SourceTables\" Type=\"SchemaExplorer.TableSchemaCollection\" Default=\"\" Optional=\"False\" Category=\"\"%> \n\n\n整体代码如下：\n\n``` C#\n<%@ CodeTemplate Language=\"C#\" ResponseEncoding=\"UTF-8\" \nTargetLanguage=\"Text\" Src=\"\" Inherits=\"\" Debug=\"False\" \nDescription=\"Template description here.\" Output=\"None\"%>\n<%@ Property Name=\"SourceTables\" \nType=\"SchemaExplorer.TableSchemaCollection\" Default=\"\" \nOptional=\"False\" Category=\"\"%> \n<%@ Register Name=\"SE\" Template=\"CreatSingleTable.cst\" \nMergeProperties=\"False\" ExcludeProperties=\"\" %> \n<%@ Property Name=\"RootNamespace\" Default=\"Net.Itcast.CN\" \nType=\"System.String\" Optional=\"False\"%>\n<%@ Assembly Name=\"SchemaExplorer\" %> \n<%@ Assembly Name=\"System.Data\" %>\n<%@ Import Namespace=\"SchemaExplorer\" %> \n<%@ Import Namespace=\"System.Data\" %> \n<%@ Import Namespace=\"System.Collections\" %> \n<script runat=\"template\">\n\tprivate string _outputDirectory = String.Empty;\n\t[Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), \n\ttypeof(System.Drawing.Design.UITypeEditor))] \n\t[Description(\"The directory to output the results to.\")]\n\tpublic string OutputDirectory \n\t{\n\t\tget\n\t\t{\t\t\n\t\t\treturn _outputDirectory;\n\t\t}\n\t\tset\n\t\t{\n\t\t\tif (value != null && !value.EndsWith(\"\\\\\"))\n\t\t\t{\n\t\t\t\tvalue += \"\\\\\";\n\t\t    }\n\t\t\t_outputDirectory = value;\n\t\t} \n\t}\n</script>\n\n<% \nforeach(TableSchema ts in SourceTables) \n{ \nSE s = new SE(); \n   s.SourceTable = ts; \n   s.RootNamespace = RootNamespace;\n   s.OutputDirectory = OutputDirectory;\n   s.Render(this.Response); \n} \n%> \n<script runat=\"template\"> \n</script> \n\n```\n\n前面一部分还是一样的声明，\n\n<%@ Property Name=\"SourceTables\" Type=\"SchemaExplorer.TableSchemaCollection\" Default=\"\" Optional=\"False\" Category=\"\"%> \n\n这一句把选项类型修改成可多选的（既 集合）。\n效果如下图：\n![3](http://a2.qpic.cn/psb?/V13bZOxq1m5DxB/CGQI8amVPz7K7Vyb05kp*0ti3mbnPWz4Q5xdUPBQSl0!/b/dHIBAAAAAAAA&bo=MQK0AjECtAIDCSw!&rf=viewer_4)\n\n\n\n``` C#\n<% \nforeach(TableSchema ts in SourceTables) \n{ \nSE s = new SE(); \n   s.SourceTable = ts; \n   s.RootNamespace = RootNamespace;\n   s.OutputDirectory = OutputDirectory;\n   s.Render(this.Response); \n} \n%> \n<script runat=\"template\"> \n</script> \n\n```\n\n\n这一段代码便是获取刚得到的表集合，遍历集合然后依次调用之前的单表生成模板。\n\n\n到这里差不多已经完成了我要的效果，选择多表，实现一次生成所有的表对应的model/dal/bll。\n\n\n这个效果基本就是我要的了，但是后来又发现，model里面的字段居然没有注释，我在建表的时候写了字段注释的呀。\n\n打开model的cst文件之后发现，模板并没有做注释这个工作。\n代码如下：\n\n``` C#\n<%@ CodeTemplate Language=\"C#\" TargetLanguage=\"C#\" \nSrc=\"ToolsCodeTemplate.cs\" Inherits=\"ToolsCodeTemplate\"%>\n<%@ Property Name=\"TargetTable\" Type=\"SchemaExplorer.TableSchema\" \nCategory=\"Context\" Description=\"TargetTable that the object is \nbased on.\" %>\n<%@ Property Name=\"ModelsNamespace\" Default=\"Model\" \nType=\"System.String\" Category=\"Context\" Description=\"TargetTable \nthat the object is based on.\" %>\n<%@ Assembly Name=\"SchemaExplorer\" %>\n<%@ Assembly Name=\"System.Data\" %>\n<%@ Import Namespace=\"SchemaExplorer\" %>\n<%@ Import Namespace=\"System.Data\" %>\n<% PrintHeader(); %>\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace <%= ModelsNamespace %>\n{\t\n\t[Serializable()]\n\tpublic class <%= GetModelClassName() %>\n\t{\n\t    <% \n\t\tforeach (ColumnSchema column in TargetTable.Columns)\n\t   {\n\t\t%>\n\t\t\tprivate <%= GetPropertyType(column) %>  _<%= \n\t\t\tGetPropertyName(column) %>;\t\t\t\n\t\t<%\n\t\t}\n\t\t%>\n\t    \n\t\t<% \n\t\tforeach (ColumnSchema column in TargetTable.Columns)\n\t\t{\n\t\t%>\n\t\t\tpublic <%= GetPropertyType(column) %> <%= \n\t\t\tGetPropertyName(column) %>\n\t\t\t{\n\t\t\t\t get { return _<%= GetPropertyName(column) %>; }\n\t             set { _<%= GetPropertyName(column) %> = value; }\n\t\t\t}\n\t\t<%\n\t\t}\n\t\t%>\t\n\t}\n}\n<script runat=\"template\">\npublic string GetModelClassName()\n{\n\treturn GetModelClassName(TargetTable);\n}\n\npublic override string GetFileName()\n{\n\treturn this.GetModelClassName(this.TargetTable) + \".cs\";\n}\n\n</script>\n```\n\n获取表中字段名使用的是GetPropertyName(column)，咦，在哪实现了这个东西呢？回去翻一下文件，哦，还有一个ToolsCodeTemplate.cs文一直没管呢。\n\n果然，GetPropertyName(column)在这里。\n\n``` C#\npublic string GetPropertyName(ColumnSchema column)\n{\n\n    return GetNameFromDBFieldName(column);\n}\npublic string GetNameFromDBFieldName(ColumnSchema column)\n{\n\treturn column.Name;\n}\n\n```\n读取列名就是这么简单，那么我们对应写一个函数读取一下列注释，然后再model里面调用一下不好了。\n\n又查了一下资料，\n\n```C#\n    public string GetColumnComment(ColumnSchema column)\n    {\n         return column.Description;\n    }\n\n```\n嗯，理论上这样是可以的...\n然而，我想多了。倒腾了好久，这个属性值都是空的...\ngoogle了一圈之后发现，原来是SchemaExplorer.MySQLSchemaProvider.dll 里面压根没实现读取列注释的实现....\n\n\n不过也有对应的解决方法：\n\n[完美解决CodeSmith无法获取MySQL表及列Description说明注释的方案](http://www.cnblogs.com/LonelyShadow/p/4147743.html)\n\n把DLL替换一下就好了。\n\n最后附上模板连接:[CodeSmith-for-MySQL-Template](https://github.com/liguobao/CodeSmith-for-MySQL-Template)\n\n\n\n注：\n\n1. 模板会把MySQL的表名前三个字符截取掉，建议把表明设置为tbl开头，或者自行修改模板文件。\n2. 想让字段注释生效记得替换SchemaExplorer.MySQLSchemaProvider.dll(替换前记得备份！)\n\n","source":"_posts/CodeSmith-MySQL.md","raw":"---\nlayout: post\ntitle: CodeSmith for MySQL template\ncategory: CodeSmith\ndate: 2016-10-04\ntags:\n- dotnet\n---\n\n\n对于.NET平台上的代码生成器来说，codesmith是一个非常好的选择。\n\n<br> \n以前在学院实验室用的都是SQL server数据库，老师给的一套codesmith模板用来生成model/DAL/BLL很是方便。\n<br> \n不过后来放弃SQL server 投入MySQL之后，刚开始都是手写SQL，还是很痛苦的。\n<br> \n再后来又去找MySQL codesmith模板,这个对应的资料就不多了。不过最后还是找到了一套不错的，凑合能用。起初也懒，codesmith语法不熟，就没想过去修改一下了。\n<br> 最近又要用到这套东西，于是决定还是去修改一番，更便于使用。\n\n这个文章就主要讲一下修改过程，顺便说一下codesmith的简单语法。\n\n\n先说一下操作步骤：\n\n把模板的文件夹扔到codesmith模板文件的路径下，接着打开Codesmith，找到刚扔过去的文件夹，选择Main.cst,右键-execute-选择对应的MySQL库-选中表。\n<br>（注：codesmith连接MySQL有问题的话，\n<br>移步这里解决 [CodeSmith 连接MySQL数据库报“can't find .net framework data provider”](http://codelover.link/2016/02/25/CodeSmith%E8%BF%9E%E6%8E%A5MySQL%E6%8A%A5%E9%94%99%E2%80%9C%E6%89%BE%E4%B8%8D%E5%88%B0%E8%AF%B7%E6%B1%82%E7%9A%84%20.Net%20Framework%20Data%20Provider%E3%80%82%E5%8F%AF%E8%83%BD%E6%B2%A1%E6%9C%89%E5%AE%89%E8%A3%85%E3%80%82%E2%80%9D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/))\n\n如下图：\n![1](http://a1.qpic.cn/psb?/V13bZOxq1m5DxB/1XlywVcAyPW6y*6sO1QU.gkuidIqPkx.f70JsaijlU0!/b/dIwBAAAAAAAA&bo=MQIcAjECHAIDCSw!&rf=viewer_4)\n\n\n\n然后点击Generate就能顺利生成model/dal/bll了。\n\n\n生成代码结构如下：\n![2](http://a3.qpic.cn/psb?/V13bZOxq1m5DxB/ikI1fSxAYklZgi1PmtPVTQqpHcZ0KTQHgN7LrPJaKNo!/b/dG4AAAAAAAAA&bo=fgLGAH4CxgADCSw!&rf=viewer_4)\n\n\n\n<p>这样操作没什么问题，顺利生成了我们要的model/dal/bll了，然后....我懒嘛。\n每次都要把表一个个选一次，麻不麻烦啊。然后就想了，能不能改一下模板呢。于是便开始google相关资料了。找到了几个相关文章，参考这就开始改造了。\n先看看原来的Main.cst里面写了撒。\n\n```C#\n\n<%@ CodeTemplate Language=\"C#\" ResponseEncoding=\"UTF-8\" \nTargetLanguage=\"Text\" Src=\"\" Inherits=\"\" Debug=\"False\" \nDescription=\"Template description here.\" \n Output=\"None\"%>\n<%@ Register Name=\"Models\" Template=\"DBMad.Models.cst\" \n\tMergeProperties=\"False\" ExcludeProperties=\"\" %>\t\n<%@ Register Name=\"DAL\" Template=\"DBMad.DAL.cst\" \nMergeProperties=\"False\" ExcludeProperties=\"\" %> \n<%@ Register Name=\"BLL\" Template=\"DBMad.BLL.cst\" \nMergeProperties=\"False\" ExcludeProperties=\"\" %>\n\n<%@ Property Name=\"SourceTable\" \nType=\"SchemaExplorer.TableSchema\" Optional=\"False\"%>\n<%@ Property Name=\"RootNamespace\" Default=\"Net.Itcast.CN\" \nType=\"System.String\" Optional=\"False\"%>\n\n<%@ Assembly Name=\"SchemaExplorer\" %>\n<%@ Assembly Name=\"System.Data\" %>\n<%@ Import Namespace=\"SchemaExplorer\" %>\n<%@ Import Namespace=\"System.Data\" %>\n<script runat=\"template\">\n\tprivate string _outputDirectory = String.Empty;\n\t[Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), \n\ttypeof(System.Drawing.Design.UITypeEditor))] \n\t[Description(\"The directory to output the results to.\")]\n\tpublic string OutputDirectory \n\t{\n\t\tget\n\t\t{\t\t\n\t\t\treturn _outputDirectory;\n\t\t}\n\t\tset\n\t\t{\n\t\t\tif (value != null && !value.EndsWith(\"\\\\\"))\n\t\t\t{\n\t\t\t\tvalue += \"\\\\\";\n\t\t    }\n\t\t\t_outputDirectory = value;\n\t\t} \n\t}\n</script>\n\n```\n\n\n这一段基本就是在声明选项以及引用命名空间，表现出来的便是我们看到的下图：\n\n![1](http://a1.qpic.cn/psb?/V13bZOxq1m5DxB/1XlywVcAyPW6y*6sO1QU.gkuidIqPkx.f70JsaijlU0!/b/dIwBAAAAAAAA&bo=MQIcAjECHAIDCSw!&rf=viewer_4)\n\n\n``` C#\n\n<%\n    Models model = this.Create<Models>();\n\tmodel.ModelsNamespace = this.RootNamespace+\".Model\";\n\tmodel.TargetTable = this.SourceTable;\n\tmodel.RenderToFile(this.OutputDirectory+\"Model/\"+model.GetFileName(),true);\n\t\n\n   DAL dal = this.Create<DAL>();\n   dal.TargetTable = this.SourceTable;\n   dal.ModelsNamespace = model.ModelsNamespace;\n   dal.DALClassNameSurfix = \"DAL\";\n   dal.DALNamespace =this.RootNamespace+\".DAL\";\n   dal.RenderToFile(this.OutputDirectory+\"DAL/\"\n   +dal.GetFileName(),true);\n\n   BLL bll = this.Create<BLL>();\n   bll.ModelsNamespace = model.ModelsNamespace;\n   bll.DALClassNameSurfix = dal.DALClassNameSurfix;\n   bll.DALNamespace = dal.DALNamespace;\n   bll.BLLClassNameSurfix = \"BLL\";\n   bll.BLLNamespace = this.RootNamespace+\".BLL\";\n   bll.TargetTable = this.SourceTable;\n   bll.RenderToFile(this.OutputDirectory+\"BLL/\"\n   +bll.GetFileName(),true);\n\n   Response.Write(\"ok,see \"+this.OutputDirectory);\n%>\n```\n\n这一段就是我们点击Generate之后执行的代码，基本功能就是调用\nDBMad.Models.cst,DBMad.DAL.cst,DBMad.BLL.cst。\n因为在上面声明数据源的时候，使用了SchemaExplorer.TableSchema，导致我们选择表的时候不能多选。代码如下：\n\n<%@ Property Name=\"SourceTable\" Type=\"SchemaExplorer.TableSchema\" Optional=\"False\"%>\n\n这样一想，这个Main.cst就是一个可以处理单表的生成模板了，我们只要自己写一个可以多选表的模板，然后循环调用这个模板去生成，不就完事了？\n\n找了一下资料，发现只需要把上面的选项Type改一下，便可以多选表了。\n\n如下：\n\n<%@ Property Name=\"SourceTables\" Type=\"SchemaExplorer.TableSchemaCollection\" Default=\"\" Optional=\"False\" Category=\"\"%> \n\n\n整体代码如下：\n\n``` C#\n<%@ CodeTemplate Language=\"C#\" ResponseEncoding=\"UTF-8\" \nTargetLanguage=\"Text\" Src=\"\" Inherits=\"\" Debug=\"False\" \nDescription=\"Template description here.\" Output=\"None\"%>\n<%@ Property Name=\"SourceTables\" \nType=\"SchemaExplorer.TableSchemaCollection\" Default=\"\" \nOptional=\"False\" Category=\"\"%> \n<%@ Register Name=\"SE\" Template=\"CreatSingleTable.cst\" \nMergeProperties=\"False\" ExcludeProperties=\"\" %> \n<%@ Property Name=\"RootNamespace\" Default=\"Net.Itcast.CN\" \nType=\"System.String\" Optional=\"False\"%>\n<%@ Assembly Name=\"SchemaExplorer\" %> \n<%@ Assembly Name=\"System.Data\" %>\n<%@ Import Namespace=\"SchemaExplorer\" %> \n<%@ Import Namespace=\"System.Data\" %> \n<%@ Import Namespace=\"System.Collections\" %> \n<script runat=\"template\">\n\tprivate string _outputDirectory = String.Empty;\n\t[Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), \n\ttypeof(System.Drawing.Design.UITypeEditor))] \n\t[Description(\"The directory to output the results to.\")]\n\tpublic string OutputDirectory \n\t{\n\t\tget\n\t\t{\t\t\n\t\t\treturn _outputDirectory;\n\t\t}\n\t\tset\n\t\t{\n\t\t\tif (value != null && !value.EndsWith(\"\\\\\"))\n\t\t\t{\n\t\t\t\tvalue += \"\\\\\";\n\t\t    }\n\t\t\t_outputDirectory = value;\n\t\t} \n\t}\n</script>\n\n<% \nforeach(TableSchema ts in SourceTables) \n{ \nSE s = new SE(); \n   s.SourceTable = ts; \n   s.RootNamespace = RootNamespace;\n   s.OutputDirectory = OutputDirectory;\n   s.Render(this.Response); \n} \n%> \n<script runat=\"template\"> \n</script> \n\n```\n\n前面一部分还是一样的声明，\n\n<%@ Property Name=\"SourceTables\" Type=\"SchemaExplorer.TableSchemaCollection\" Default=\"\" Optional=\"False\" Category=\"\"%> \n\n这一句把选项类型修改成可多选的（既 集合）。\n效果如下图：\n![3](http://a2.qpic.cn/psb?/V13bZOxq1m5DxB/CGQI8amVPz7K7Vyb05kp*0ti3mbnPWz4Q5xdUPBQSl0!/b/dHIBAAAAAAAA&bo=MQK0AjECtAIDCSw!&rf=viewer_4)\n\n\n\n``` C#\n<% \nforeach(TableSchema ts in SourceTables) \n{ \nSE s = new SE(); \n   s.SourceTable = ts; \n   s.RootNamespace = RootNamespace;\n   s.OutputDirectory = OutputDirectory;\n   s.Render(this.Response); \n} \n%> \n<script runat=\"template\"> \n</script> \n\n```\n\n\n这一段代码便是获取刚得到的表集合，遍历集合然后依次调用之前的单表生成模板。\n\n\n到这里差不多已经完成了我要的效果，选择多表，实现一次生成所有的表对应的model/dal/bll。\n\n\n这个效果基本就是我要的了，但是后来又发现，model里面的字段居然没有注释，我在建表的时候写了字段注释的呀。\n\n打开model的cst文件之后发现，模板并没有做注释这个工作。\n代码如下：\n\n``` C#\n<%@ CodeTemplate Language=\"C#\" TargetLanguage=\"C#\" \nSrc=\"ToolsCodeTemplate.cs\" Inherits=\"ToolsCodeTemplate\"%>\n<%@ Property Name=\"TargetTable\" Type=\"SchemaExplorer.TableSchema\" \nCategory=\"Context\" Description=\"TargetTable that the object is \nbased on.\" %>\n<%@ Property Name=\"ModelsNamespace\" Default=\"Model\" \nType=\"System.String\" Category=\"Context\" Description=\"TargetTable \nthat the object is based on.\" %>\n<%@ Assembly Name=\"SchemaExplorer\" %>\n<%@ Assembly Name=\"System.Data\" %>\n<%@ Import Namespace=\"SchemaExplorer\" %>\n<%@ Import Namespace=\"System.Data\" %>\n<% PrintHeader(); %>\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace <%= ModelsNamespace %>\n{\t\n\t[Serializable()]\n\tpublic class <%= GetModelClassName() %>\n\t{\n\t    <% \n\t\tforeach (ColumnSchema column in TargetTable.Columns)\n\t   {\n\t\t%>\n\t\t\tprivate <%= GetPropertyType(column) %>  _<%= \n\t\t\tGetPropertyName(column) %>;\t\t\t\n\t\t<%\n\t\t}\n\t\t%>\n\t    \n\t\t<% \n\t\tforeach (ColumnSchema column in TargetTable.Columns)\n\t\t{\n\t\t%>\n\t\t\tpublic <%= GetPropertyType(column) %> <%= \n\t\t\tGetPropertyName(column) %>\n\t\t\t{\n\t\t\t\t get { return _<%= GetPropertyName(column) %>; }\n\t             set { _<%= GetPropertyName(column) %> = value; }\n\t\t\t}\n\t\t<%\n\t\t}\n\t\t%>\t\n\t}\n}\n<script runat=\"template\">\npublic string GetModelClassName()\n{\n\treturn GetModelClassName(TargetTable);\n}\n\npublic override string GetFileName()\n{\n\treturn this.GetModelClassName(this.TargetTable) + \".cs\";\n}\n\n</script>\n```\n\n获取表中字段名使用的是GetPropertyName(column)，咦，在哪实现了这个东西呢？回去翻一下文件，哦，还有一个ToolsCodeTemplate.cs文一直没管呢。\n\n果然，GetPropertyName(column)在这里。\n\n``` C#\npublic string GetPropertyName(ColumnSchema column)\n{\n\n    return GetNameFromDBFieldName(column);\n}\npublic string GetNameFromDBFieldName(ColumnSchema column)\n{\n\treturn column.Name;\n}\n\n```\n读取列名就是这么简单，那么我们对应写一个函数读取一下列注释，然后再model里面调用一下不好了。\n\n又查了一下资料，\n\n```C#\n    public string GetColumnComment(ColumnSchema column)\n    {\n         return column.Description;\n    }\n\n```\n嗯，理论上这样是可以的...\n然而，我想多了。倒腾了好久，这个属性值都是空的...\ngoogle了一圈之后发现，原来是SchemaExplorer.MySQLSchemaProvider.dll 里面压根没实现读取列注释的实现....\n\n\n不过也有对应的解决方法：\n\n[完美解决CodeSmith无法获取MySQL表及列Description说明注释的方案](http://www.cnblogs.com/LonelyShadow/p/4147743.html)\n\n把DLL替换一下就好了。\n\n最后附上模板连接:[CodeSmith-for-MySQL-Template](https://github.com/liguobao/CodeSmith-for-MySQL-Template)\n\n\n\n注：\n\n1. 模板会把MySQL的表名前三个字符截取掉，建议把表明设置为tbl开头，或者自行修改模板文件。\n2. 想让字段注释生效记得替换SchemaExplorer.MySQLSchemaProvider.dll(替换前记得备份！)\n\n","slug":"CodeSmith-MySQL","published":1,"updated":"2018-05-17T13:36:10.187Z","comments":1,"photos":[],"link":"","_id":"cjhal1fwa0017p631sd6lsm72","content":"<p>对于.NET平台上的代码生成器来说，codesmith是一个非常好的选择。</p>\n<p><br><br>以前在学院实验室用的都是SQL server数据库，老师给的一套codesmith模板用来生成model/DAL/BLL很是方便。<br><br><br>不过后来放弃SQL server 投入MySQL之后，刚开始都是手写SQL，还是很痛苦的。<br><br><br>再后来又去找MySQL codesmith模板,这个对应的资料就不多了。不过最后还是找到了一套不错的，凑合能用。起初也懒，codesmith语法不熟，就没想过去修改一下了。<br><br> 最近又要用到这套东西，于是决定还是去修改一番，更便于使用。</p>\n<p>这个文章就主要讲一下修改过程，顺便说一下codesmith的简单语法。</p>\n<p>先说一下操作步骤：</p>\n<p>把模板的文件夹扔到codesmith模板文件的路径下，接着打开Codesmith，找到刚扔过去的文件夹，选择Main.cst,右键-execute-选择对应的MySQL库-选中表。<br><br>（注：codesmith连接MySQL有问题的话，<br><br>移步这里解决 <a href=\"http://codelover.link/2016/02/25/CodeSmith%E8%BF%9E%E6%8E%A5MySQL%E6%8A%A5%E9%94%99%E2%80%9C%E6%89%BE%E4%B8%8D%E5%88%B0%E8%AF%B7%E6%B1%82%E7%9A%84%20.Net%20Framework%20Data%20Provider%E3%80%82%E5%8F%AF%E8%83%BD%E6%B2%A1%E6%9C%89%E5%AE%89%E8%A3%85%E3%80%82%E2%80%9D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/\">CodeSmith 连接MySQL数据库报“can’t find .net framework data provider”</a>)</p>\n<p>如下图：<br><img src=\"http://a1.qpic.cn/psb?/V13bZOxq1m5DxB/1XlywVcAyPW6y*6sO1QU.gkuidIqPkx.f70JsaijlU0!/b/dIwBAAAAAAAA&amp;bo=MQIcAjECHAIDCSw!&amp;rf=viewer_4\" alt=\"1\"></p>\n<p>然后点击Generate就能顺利生成model/dal/bll了。</p>\n<p>生成代码结构如下：<br><img src=\"http://a3.qpic.cn/psb?/V13bZOxq1m5DxB/ikI1fSxAYklZgi1PmtPVTQqpHcZ0KTQHgN7LrPJaKNo!/b/dG4AAAAAAAAA&amp;bo=fgLGAH4CxgADCSw!&amp;rf=viewer_4\" alt=\"2\"></p>\n<p></p><p>这样操作没什么问题，顺利生成了我们要的model/dal/bll了，然后….我懒嘛。<br>每次都要把表一个个选一次，麻不麻烦啊。然后就想了，能不能改一下模板呢。于是便开始google相关资料了。找到了几个相关文章，参考这就开始改造了。<br>先看看原来的Main.cst里面写了撒。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;%@ CodeTemplate Language=&quot;C#&quot; ResponseEncoding=&quot;UTF-8&quot; </span><br><span class=\"line\">TargetLanguage=&quot;Text&quot; Src=&quot;&quot; Inherits=&quot;&quot; Debug=&quot;False&quot; </span><br><span class=\"line\">Description=&quot;Template description here.&quot; </span><br><span class=\"line\"> Output=&quot;None&quot;%&gt;</span><br><span class=\"line\">&lt;%@ Register Name=&quot;Models&quot; Template=&quot;DBMad.Models.cst&quot; </span><br><span class=\"line\">\tMergeProperties=&quot;False&quot; ExcludeProperties=&quot;&quot; %&gt;\t</span><br><span class=\"line\">&lt;%@ Register Name=&quot;DAL&quot; Template=&quot;DBMad.DAL.cst&quot; </span><br><span class=\"line\">MergeProperties=&quot;False&quot; ExcludeProperties=&quot;&quot; %&gt; </span><br><span class=\"line\">&lt;%@ Register Name=&quot;BLL&quot; Template=&quot;DBMad.BLL.cst&quot; </span><br><span class=\"line\">MergeProperties=&quot;False&quot; ExcludeProperties=&quot;&quot; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%@ Property Name=&quot;SourceTable&quot; </span><br><span class=\"line\">Type=&quot;SchemaExplorer.TableSchema&quot; Optional=&quot;False&quot;%&gt;</span><br><span class=\"line\">&lt;%@ Property Name=&quot;RootNamespace&quot; Default=&quot;Net.Itcast.CN&quot; </span><br><span class=\"line\">Type=&quot;System.String&quot; Optional=&quot;False&quot;%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%@ Assembly Name=&quot;SchemaExplorer&quot; %&gt;</span><br><span class=\"line\">&lt;%@ Assembly Name=&quot;System.Data&quot; %&gt;</span><br><span class=\"line\">&lt;%@ Import Namespace=&quot;SchemaExplorer&quot; %&gt;</span><br><span class=\"line\">&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;</span><br><span class=\"line\">&lt;script runat=&quot;template&quot;&gt;</span><br><span class=\"line\">\tprivate string _outputDirectory = String.Empty;</span><br><span class=\"line\">\t[Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), </span><br><span class=\"line\">\ttypeof(System.Drawing.Design.UITypeEditor))] </span><br><span class=\"line\">\t[Description(&quot;The directory to output the results to.&quot;)]</span><br><span class=\"line\">\tpublic string OutputDirectory </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tget</span><br><span class=\"line\">\t\t&#123;\t\t</span><br><span class=\"line\">\t\t\treturn _outputDirectory;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tset</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tif (value != null &amp;&amp; !value.EndsWith(&quot;\\\\&quot;))</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tvalue += &quot;\\\\&quot;;</span><br><span class=\"line\">\t\t    &#125;</span><br><span class=\"line\">\t\t\t_outputDirectory = value;</span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>这一段基本就是在声明选项以及引用命名空间，表现出来的便是我们看到的下图：</p>\n<p><img src=\"http://a1.qpic.cn/psb?/V13bZOxq1m5DxB/1XlywVcAyPW6y*6sO1QU.gkuidIqPkx.f70JsaijlU0!/b/dIwBAAAAAAAA&amp;bo=MQIcAjECHAIDCSw!&amp;rf=viewer_4\" alt=\"1\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    Models model = this.Create&lt;Models&gt;();</span><br><span class=\"line\">\tmodel.ModelsNamespace = this.RootNamespace+&quot;.Model&quot;;</span><br><span class=\"line\">\tmodel.TargetTable = this.SourceTable;</span><br><span class=\"line\">\tmodel.RenderToFile(this.OutputDirectory+&quot;Model/&quot;+model.GetFileName(),true);</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">   DAL dal = this.Create&lt;DAL&gt;();</span><br><span class=\"line\">   dal.TargetTable = this.SourceTable;</span><br><span class=\"line\">   dal.ModelsNamespace = model.ModelsNamespace;</span><br><span class=\"line\">   dal.DALClassNameSurfix = &quot;DAL&quot;;</span><br><span class=\"line\">   dal.DALNamespace =this.RootNamespace+&quot;.DAL&quot;;</span><br><span class=\"line\">   dal.RenderToFile(this.OutputDirectory+&quot;DAL/&quot;</span><br><span class=\"line\">   +dal.GetFileName(),true);</span><br><span class=\"line\"></span><br><span class=\"line\">   BLL bll = this.Create&lt;BLL&gt;();</span><br><span class=\"line\">   bll.ModelsNamespace = model.ModelsNamespace;</span><br><span class=\"line\">   bll.DALClassNameSurfix = dal.DALClassNameSurfix;</span><br><span class=\"line\">   bll.DALNamespace = dal.DALNamespace;</span><br><span class=\"line\">   bll.BLLClassNameSurfix = &quot;BLL&quot;;</span><br><span class=\"line\">   bll.BLLNamespace = this.RootNamespace+&quot;.BLL&quot;;</span><br><span class=\"line\">   bll.TargetTable = this.SourceTable;</span><br><span class=\"line\">   bll.RenderToFile(this.OutputDirectory+&quot;BLL/&quot;</span><br><span class=\"line\">   +bll.GetFileName(),true);</span><br><span class=\"line\"></span><br><span class=\"line\">   Response.Write(&quot;ok,see &quot;+this.OutputDirectory);</span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>\n<p>这一段就是我们点击Generate之后执行的代码，基本功能就是调用<br>DBMad.Models.cst,DBMad.DAL.cst,DBMad.BLL.cst。<br>因为在上面声明数据源的时候，使用了SchemaExplorer.TableSchema，导致我们选择表的时候不能多选。代码如下：</p>\n<p>&lt;%@ Property Name=”SourceTable” Type=”SchemaExplorer.TableSchema” Optional=”False”%&gt;</p>\n<p>这样一想，这个Main.cst就是一个可以处理单表的生成模板了，我们只要自己写一个可以多选表的模板，然后循环调用这个模板去生成，不就完事了？</p>\n<p>找了一下资料，发现只需要把上面的选项Type改一下，便可以多选表了。</p>\n<p>如下：</p>\n<p>&lt;%@ Property Name=”SourceTables” Type=”SchemaExplorer.TableSchemaCollection” Default=”” Optional=”False” Category=””%&gt; </p>\n<p>整体代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ CodeTemplate Language=&quot;C#&quot; ResponseEncoding=&quot;UTF-8&quot; </span><br><span class=\"line\">TargetLanguage=&quot;Text&quot; Src=&quot;&quot; Inherits=&quot;&quot; Debug=&quot;False&quot; </span><br><span class=\"line\">Description=&quot;Template description here.&quot; Output=&quot;None&quot;%&gt;</span><br><span class=\"line\">&lt;%@ Property Name=&quot;SourceTables&quot; </span><br><span class=\"line\">Type=&quot;SchemaExplorer.TableSchemaCollection&quot; Default=&quot;&quot; </span><br><span class=\"line\">Optional=&quot;False&quot; Category=&quot;&quot;%&gt; </span><br><span class=\"line\">&lt;%@ Register Name=&quot;SE&quot; Template=&quot;CreatSingleTable.cst&quot; </span><br><span class=\"line\">MergeProperties=&quot;False&quot; ExcludeProperties=&quot;&quot; %&gt; </span><br><span class=\"line\">&lt;%@ Property Name=&quot;RootNamespace&quot; Default=&quot;Net.Itcast.CN&quot; </span><br><span class=\"line\">Type=&quot;System.String&quot; Optional=&quot;False&quot;%&gt;</span><br><span class=\"line\">&lt;%@ Assembly Name=&quot;SchemaExplorer&quot; %&gt; </span><br><span class=\"line\">&lt;%@ Assembly Name=&quot;System.Data&quot; %&gt;</span><br><span class=\"line\">&lt;%@ Import Namespace=&quot;SchemaExplorer&quot; %&gt; </span><br><span class=\"line\">&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt; </span><br><span class=\"line\">&lt;%@ Import Namespace=&quot;System.Collections&quot; %&gt; </span><br><span class=\"line\">&lt;script runat=&quot;template&quot;&gt;</span><br><span class=\"line\">\tprivate string _outputDirectory = String.Empty;</span><br><span class=\"line\">\t[Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), </span><br><span class=\"line\">\ttypeof(System.Drawing.Design.UITypeEditor))] </span><br><span class=\"line\">\t[Description(&quot;The directory to output the results to.&quot;)]</span><br><span class=\"line\">\tpublic string OutputDirectory </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tget</span><br><span class=\"line\">\t\t&#123;\t\t</span><br><span class=\"line\">\t\t\treturn _outputDirectory;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tset</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tif (value != null &amp;&amp; !value.EndsWith(&quot;\\\\&quot;))</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tvalue += &quot;\\\\&quot;;</span><br><span class=\"line\">\t\t    &#125;</span><br><span class=\"line\">\t\t\t_outputDirectory = value;</span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;% </span><br><span class=\"line\">foreach(TableSchema ts in SourceTables) </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">SE s = new SE(); </span><br><span class=\"line\">   s.SourceTable = ts; </span><br><span class=\"line\">   s.RootNamespace = RootNamespace;</span><br><span class=\"line\">   s.OutputDirectory = OutputDirectory;</span><br><span class=\"line\">   s.Render(this.Response); </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">%&gt; </span><br><span class=\"line\">&lt;script runat=&quot;template&quot;&gt; </span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>前面一部分还是一样的声明，</p>\n<p>&lt;%@ Property Name=”SourceTables” Type=”SchemaExplorer.TableSchemaCollection” Default=”” Optional=”False” Category=””%&gt; </p>\n<p>这一句把选项类型修改成可多选的（既 集合）。<br>效果如下图：<br><img src=\"http://a2.qpic.cn/psb?/V13bZOxq1m5DxB/CGQI8amVPz7K7Vyb05kp*0ti3mbnPWz4Q5xdUPBQSl0!/b/dHIBAAAAAAAA&amp;bo=MQK0AjECtAIDCSw!&amp;rf=viewer_4\" alt=\"3\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% </span><br><span class=\"line\">foreach(TableSchema ts in SourceTables) </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">SE s = new SE(); </span><br><span class=\"line\">   s.SourceTable = ts; </span><br><span class=\"line\">   s.RootNamespace = RootNamespace;</span><br><span class=\"line\">   s.OutputDirectory = OutputDirectory;</span><br><span class=\"line\">   s.Render(this.Response); </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">%&gt; </span><br><span class=\"line\">&lt;script runat=&quot;template&quot;&gt; </span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>这一段代码便是获取刚得到的表集合，遍历集合然后依次调用之前的单表生成模板。</p>\n<p>到这里差不多已经完成了我要的效果，选择多表，实现一次生成所有的表对应的model/dal/bll。</p>\n<p>这个效果基本就是我要的了，但是后来又发现，model里面的字段居然没有注释，我在建表的时候写了字段注释的呀。</p>\n<p>打开model的cst文件之后发现，模板并没有做注释这个工作。<br>代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ CodeTemplate Language=&quot;C#&quot; TargetLanguage=&quot;C#&quot; </span><br><span class=\"line\">Src=&quot;ToolsCodeTemplate.cs&quot; Inherits=&quot;ToolsCodeTemplate&quot;%&gt;</span><br><span class=\"line\">&lt;%@ Property Name=&quot;TargetTable&quot; Type=&quot;SchemaExplorer.TableSchema&quot; </span><br><span class=\"line\">Category=&quot;Context&quot; Description=&quot;TargetTable that the object is </span><br><span class=\"line\">based on.&quot; %&gt;</span><br><span class=\"line\">&lt;%@ Property Name=&quot;ModelsNamespace&quot; Default=&quot;Model&quot; </span><br><span class=\"line\">Type=&quot;System.String&quot; Category=&quot;Context&quot; Description=&quot;TargetTable </span><br><span class=\"line\">that the object is based on.&quot; %&gt;</span><br><span class=\"line\">&lt;%@ Assembly Name=&quot;SchemaExplorer&quot; %&gt;</span><br><span class=\"line\">&lt;%@ Assembly Name=&quot;System.Data&quot; %&gt;</span><br><span class=\"line\">&lt;%@ Import Namespace=&quot;SchemaExplorer&quot; %&gt;</span><br><span class=\"line\">&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;</span><br><span class=\"line\">&lt;% PrintHeader(); %&gt;</span><br><span class=\"line\">using System;</span><br><span class=\"line\">using System.Collections.Generic;</span><br><span class=\"line\">using System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\">namespace &lt;%= ModelsNamespace %&gt;</span><br><span class=\"line\">&#123;\t</span><br><span class=\"line\">\t[Serializable()]</span><br><span class=\"line\">\tpublic class &lt;%= GetModelClassName() %&gt;</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t    &lt;% </span><br><span class=\"line\">\t\tforeach (ColumnSchema column in TargetTable.Columns)</span><br><span class=\"line\">\t   &#123;</span><br><span class=\"line\">\t\t%&gt;</span><br><span class=\"line\">\t\t\tprivate &lt;%= GetPropertyType(column) %&gt;  _&lt;%= </span><br><span class=\"line\">\t\t\tGetPropertyName(column) %&gt;;\t\t\t</span><br><span class=\"line\">\t\t&lt;%</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t%&gt;</span><br><span class=\"line\">\t    </span><br><span class=\"line\">\t\t&lt;% </span><br><span class=\"line\">\t\tforeach (ColumnSchema column in TargetTable.Columns)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t%&gt;</span><br><span class=\"line\">\t\t\tpublic &lt;%= GetPropertyType(column) %&gt; &lt;%= </span><br><span class=\"line\">\t\t\tGetPropertyName(column) %&gt;</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t get &#123; return _&lt;%= GetPropertyName(column) %&gt;; &#125;</span><br><span class=\"line\">\t             set &#123; _&lt;%= GetPropertyName(column) %&gt; = value; &#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&lt;%</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t%&gt;\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;script runat=&quot;template&quot;&gt;</span><br><span class=\"line\">public string GetModelClassName()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\treturn GetModelClassName(TargetTable);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public override string GetFileName()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\treturn this.GetModelClassName(this.TargetTable) + &quot;.cs&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>获取表中字段名使用的是GetPropertyName(column)，咦，在哪实现了这个东西呢？回去翻一下文件，哦，还有一个ToolsCodeTemplate.cs文一直没管呢。</p>\n<p>果然，GetPropertyName(column)在这里。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public string GetPropertyName(ColumnSchema column)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return GetNameFromDBFieldName(column);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public string GetNameFromDBFieldName(ColumnSchema column)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\treturn column.Name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>读取列名就是这么简单，那么我们对应写一个函数读取一下列注释，然后再model里面调用一下不好了。</p>\n<p>又查了一下资料，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public string GetColumnComment(ColumnSchema column)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     return column.Description;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>嗯，理论上这样是可以的…<br>然而，我想多了。倒腾了好久，这个属性值都是空的…<br>google了一圈之后发现，原来是SchemaExplorer.MySQLSchemaProvider.dll 里面压根没实现读取列注释的实现….</p>\n<p>不过也有对应的解决方法：</p>\n<p><a href=\"http://www.cnblogs.com/LonelyShadow/p/4147743.html\" target=\"_blank\" rel=\"noopener\">完美解决CodeSmith无法获取MySQL表及列Description说明注释的方案</a></p>\n<p>把DLL替换一下就好了。</p>\n<p>最后附上模板连接:<a href=\"https://github.com/liguobao/CodeSmith-for-MySQL-Template\" target=\"_blank\" rel=\"noopener\">CodeSmith-for-MySQL-Template</a></p>\n<p>注：</p>\n<ol>\n<li>模板会把MySQL的表名前三个字符截取掉，建议把表明设置为tbl开头，或者自行修改模板文件。</li>\n<li>想让字段注释生效记得替换SchemaExplorer.MySQLSchemaProvider.dll(替换前记得备份！)</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>对于.NET平台上的代码生成器来说，codesmith是一个非常好的选择。</p>\n<p><br><br>以前在学院实验室用的都是SQL server数据库，老师给的一套codesmith模板用来生成model/DAL/BLL很是方便。<br><br><br>不过后来放弃SQL server 投入MySQL之后，刚开始都是手写SQL，还是很痛苦的。<br><br><br>再后来又去找MySQL codesmith模板,这个对应的资料就不多了。不过最后还是找到了一套不错的，凑合能用。起初也懒，codesmith语法不熟，就没想过去修改一下了。<br><br> 最近又要用到这套东西，于是决定还是去修改一番，更便于使用。</p>\n<p>这个文章就主要讲一下修改过程，顺便说一下codesmith的简单语法。</p>\n<p>先说一下操作步骤：</p>\n<p>把模板的文件夹扔到codesmith模板文件的路径下，接着打开Codesmith，找到刚扔过去的文件夹，选择Main.cst,右键-execute-选择对应的MySQL库-选中表。<br><br>（注：codesmith连接MySQL有问题的话，<br><br>移步这里解决 <a href=\"http://codelover.link/2016/02/25/CodeSmith%E8%BF%9E%E6%8E%A5MySQL%E6%8A%A5%E9%94%99%E2%80%9C%E6%89%BE%E4%B8%8D%E5%88%B0%E8%AF%B7%E6%B1%82%E7%9A%84%20.Net%20Framework%20Data%20Provider%E3%80%82%E5%8F%AF%E8%83%BD%E6%B2%A1%E6%9C%89%E5%AE%89%E8%A3%85%E3%80%82%E2%80%9D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/\">CodeSmith 连接MySQL数据库报“can’t find .net framework data provider”</a>)</p>\n<p>如下图：<br><img src=\"http://a1.qpic.cn/psb?/V13bZOxq1m5DxB/1XlywVcAyPW6y*6sO1QU.gkuidIqPkx.f70JsaijlU0!/b/dIwBAAAAAAAA&amp;bo=MQIcAjECHAIDCSw!&amp;rf=viewer_4\" alt=\"1\"></p>\n<p>然后点击Generate就能顺利生成model/dal/bll了。</p>\n<p>生成代码结构如下：<br><img src=\"http://a3.qpic.cn/psb?/V13bZOxq1m5DxB/ikI1fSxAYklZgi1PmtPVTQqpHcZ0KTQHgN7LrPJaKNo!/b/dG4AAAAAAAAA&amp;bo=fgLGAH4CxgADCSw!&amp;rf=viewer_4\" alt=\"2\"></p>\n<p></p><p>这样操作没什么问题，顺利生成了我们要的model/dal/bll了，然后….我懒嘛。<br>每次都要把表一个个选一次，麻不麻烦啊。然后就想了，能不能改一下模板呢。于是便开始google相关资料了。找到了几个相关文章，参考这就开始改造了。<br>先看看原来的Main.cst里面写了撒。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;%@ CodeTemplate Language=&quot;C#&quot; ResponseEncoding=&quot;UTF-8&quot; </span><br><span class=\"line\">TargetLanguage=&quot;Text&quot; Src=&quot;&quot; Inherits=&quot;&quot; Debug=&quot;False&quot; </span><br><span class=\"line\">Description=&quot;Template description here.&quot; </span><br><span class=\"line\"> Output=&quot;None&quot;%&gt;</span><br><span class=\"line\">&lt;%@ Register Name=&quot;Models&quot; Template=&quot;DBMad.Models.cst&quot; </span><br><span class=\"line\">\tMergeProperties=&quot;False&quot; ExcludeProperties=&quot;&quot; %&gt;\t</span><br><span class=\"line\">&lt;%@ Register Name=&quot;DAL&quot; Template=&quot;DBMad.DAL.cst&quot; </span><br><span class=\"line\">MergeProperties=&quot;False&quot; ExcludeProperties=&quot;&quot; %&gt; </span><br><span class=\"line\">&lt;%@ Register Name=&quot;BLL&quot; Template=&quot;DBMad.BLL.cst&quot; </span><br><span class=\"line\">MergeProperties=&quot;False&quot; ExcludeProperties=&quot;&quot; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%@ Property Name=&quot;SourceTable&quot; </span><br><span class=\"line\">Type=&quot;SchemaExplorer.TableSchema&quot; Optional=&quot;False&quot;%&gt;</span><br><span class=\"line\">&lt;%@ Property Name=&quot;RootNamespace&quot; Default=&quot;Net.Itcast.CN&quot; </span><br><span class=\"line\">Type=&quot;System.String&quot; Optional=&quot;False&quot;%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%@ Assembly Name=&quot;SchemaExplorer&quot; %&gt;</span><br><span class=\"line\">&lt;%@ Assembly Name=&quot;System.Data&quot; %&gt;</span><br><span class=\"line\">&lt;%@ Import Namespace=&quot;SchemaExplorer&quot; %&gt;</span><br><span class=\"line\">&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;</span><br><span class=\"line\">&lt;script runat=&quot;template&quot;&gt;</span><br><span class=\"line\">\tprivate string _outputDirectory = String.Empty;</span><br><span class=\"line\">\t[Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), </span><br><span class=\"line\">\ttypeof(System.Drawing.Design.UITypeEditor))] </span><br><span class=\"line\">\t[Description(&quot;The directory to output the results to.&quot;)]</span><br><span class=\"line\">\tpublic string OutputDirectory </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tget</span><br><span class=\"line\">\t\t&#123;\t\t</span><br><span class=\"line\">\t\t\treturn _outputDirectory;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tset</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tif (value != null &amp;&amp; !value.EndsWith(&quot;\\\\&quot;))</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tvalue += &quot;\\\\&quot;;</span><br><span class=\"line\">\t\t    &#125;</span><br><span class=\"line\">\t\t\t_outputDirectory = value;</span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>这一段基本就是在声明选项以及引用命名空间，表现出来的便是我们看到的下图：</p>\n<p><img src=\"http://a1.qpic.cn/psb?/V13bZOxq1m5DxB/1XlywVcAyPW6y*6sO1QU.gkuidIqPkx.f70JsaijlU0!/b/dIwBAAAAAAAA&amp;bo=MQIcAjECHAIDCSw!&amp;rf=viewer_4\" alt=\"1\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    Models model = this.Create&lt;Models&gt;();</span><br><span class=\"line\">\tmodel.ModelsNamespace = this.RootNamespace+&quot;.Model&quot;;</span><br><span class=\"line\">\tmodel.TargetTable = this.SourceTable;</span><br><span class=\"line\">\tmodel.RenderToFile(this.OutputDirectory+&quot;Model/&quot;+model.GetFileName(),true);</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">   DAL dal = this.Create&lt;DAL&gt;();</span><br><span class=\"line\">   dal.TargetTable = this.SourceTable;</span><br><span class=\"line\">   dal.ModelsNamespace = model.ModelsNamespace;</span><br><span class=\"line\">   dal.DALClassNameSurfix = &quot;DAL&quot;;</span><br><span class=\"line\">   dal.DALNamespace =this.RootNamespace+&quot;.DAL&quot;;</span><br><span class=\"line\">   dal.RenderToFile(this.OutputDirectory+&quot;DAL/&quot;</span><br><span class=\"line\">   +dal.GetFileName(),true);</span><br><span class=\"line\"></span><br><span class=\"line\">   BLL bll = this.Create&lt;BLL&gt;();</span><br><span class=\"line\">   bll.ModelsNamespace = model.ModelsNamespace;</span><br><span class=\"line\">   bll.DALClassNameSurfix = dal.DALClassNameSurfix;</span><br><span class=\"line\">   bll.DALNamespace = dal.DALNamespace;</span><br><span class=\"line\">   bll.BLLClassNameSurfix = &quot;BLL&quot;;</span><br><span class=\"line\">   bll.BLLNamespace = this.RootNamespace+&quot;.BLL&quot;;</span><br><span class=\"line\">   bll.TargetTable = this.SourceTable;</span><br><span class=\"line\">   bll.RenderToFile(this.OutputDirectory+&quot;BLL/&quot;</span><br><span class=\"line\">   +bll.GetFileName(),true);</span><br><span class=\"line\"></span><br><span class=\"line\">   Response.Write(&quot;ok,see &quot;+this.OutputDirectory);</span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>\n<p>这一段就是我们点击Generate之后执行的代码，基本功能就是调用<br>DBMad.Models.cst,DBMad.DAL.cst,DBMad.BLL.cst。<br>因为在上面声明数据源的时候，使用了SchemaExplorer.TableSchema，导致我们选择表的时候不能多选。代码如下：</p>\n<p>&lt;%@ Property Name=”SourceTable” Type=”SchemaExplorer.TableSchema” Optional=”False”%&gt;</p>\n<p>这样一想，这个Main.cst就是一个可以处理单表的生成模板了，我们只要自己写一个可以多选表的模板，然后循环调用这个模板去生成，不就完事了？</p>\n<p>找了一下资料，发现只需要把上面的选项Type改一下，便可以多选表了。</p>\n<p>如下：</p>\n<p>&lt;%@ Property Name=”SourceTables” Type=”SchemaExplorer.TableSchemaCollection” Default=”” Optional=”False” Category=””%&gt; </p>\n<p>整体代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ CodeTemplate Language=&quot;C#&quot; ResponseEncoding=&quot;UTF-8&quot; </span><br><span class=\"line\">TargetLanguage=&quot;Text&quot; Src=&quot;&quot; Inherits=&quot;&quot; Debug=&quot;False&quot; </span><br><span class=\"line\">Description=&quot;Template description here.&quot; Output=&quot;None&quot;%&gt;</span><br><span class=\"line\">&lt;%@ Property Name=&quot;SourceTables&quot; </span><br><span class=\"line\">Type=&quot;SchemaExplorer.TableSchemaCollection&quot; Default=&quot;&quot; </span><br><span class=\"line\">Optional=&quot;False&quot; Category=&quot;&quot;%&gt; </span><br><span class=\"line\">&lt;%@ Register Name=&quot;SE&quot; Template=&quot;CreatSingleTable.cst&quot; </span><br><span class=\"line\">MergeProperties=&quot;False&quot; ExcludeProperties=&quot;&quot; %&gt; </span><br><span class=\"line\">&lt;%@ Property Name=&quot;RootNamespace&quot; Default=&quot;Net.Itcast.CN&quot; </span><br><span class=\"line\">Type=&quot;System.String&quot; Optional=&quot;False&quot;%&gt;</span><br><span class=\"line\">&lt;%@ Assembly Name=&quot;SchemaExplorer&quot; %&gt; </span><br><span class=\"line\">&lt;%@ Assembly Name=&quot;System.Data&quot; %&gt;</span><br><span class=\"line\">&lt;%@ Import Namespace=&quot;SchemaExplorer&quot; %&gt; </span><br><span class=\"line\">&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt; </span><br><span class=\"line\">&lt;%@ Import Namespace=&quot;System.Collections&quot; %&gt; </span><br><span class=\"line\">&lt;script runat=&quot;template&quot;&gt;</span><br><span class=\"line\">\tprivate string _outputDirectory = String.Empty;</span><br><span class=\"line\">\t[Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), </span><br><span class=\"line\">\ttypeof(System.Drawing.Design.UITypeEditor))] </span><br><span class=\"line\">\t[Description(&quot;The directory to output the results to.&quot;)]</span><br><span class=\"line\">\tpublic string OutputDirectory </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tget</span><br><span class=\"line\">\t\t&#123;\t\t</span><br><span class=\"line\">\t\t\treturn _outputDirectory;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tset</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tif (value != null &amp;&amp; !value.EndsWith(&quot;\\\\&quot;))</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tvalue += &quot;\\\\&quot;;</span><br><span class=\"line\">\t\t    &#125;</span><br><span class=\"line\">\t\t\t_outputDirectory = value;</span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;% </span><br><span class=\"line\">foreach(TableSchema ts in SourceTables) </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">SE s = new SE(); </span><br><span class=\"line\">   s.SourceTable = ts; </span><br><span class=\"line\">   s.RootNamespace = RootNamespace;</span><br><span class=\"line\">   s.OutputDirectory = OutputDirectory;</span><br><span class=\"line\">   s.Render(this.Response); </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">%&gt; </span><br><span class=\"line\">&lt;script runat=&quot;template&quot;&gt; </span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>前面一部分还是一样的声明，</p>\n<p>&lt;%@ Property Name=”SourceTables” Type=”SchemaExplorer.TableSchemaCollection” Default=”” Optional=”False” Category=””%&gt; </p>\n<p>这一句把选项类型修改成可多选的（既 集合）。<br>效果如下图：<br><img src=\"http://a2.qpic.cn/psb?/V13bZOxq1m5DxB/CGQI8amVPz7K7Vyb05kp*0ti3mbnPWz4Q5xdUPBQSl0!/b/dHIBAAAAAAAA&amp;bo=MQK0AjECtAIDCSw!&amp;rf=viewer_4\" alt=\"3\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% </span><br><span class=\"line\">foreach(TableSchema ts in SourceTables) </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">SE s = new SE(); </span><br><span class=\"line\">   s.SourceTable = ts; </span><br><span class=\"line\">   s.RootNamespace = RootNamespace;</span><br><span class=\"line\">   s.OutputDirectory = OutputDirectory;</span><br><span class=\"line\">   s.Render(this.Response); </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">%&gt; </span><br><span class=\"line\">&lt;script runat=&quot;template&quot;&gt; </span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>这一段代码便是获取刚得到的表集合，遍历集合然后依次调用之前的单表生成模板。</p>\n<p>到这里差不多已经完成了我要的效果，选择多表，实现一次生成所有的表对应的model/dal/bll。</p>\n<p>这个效果基本就是我要的了，但是后来又发现，model里面的字段居然没有注释，我在建表的时候写了字段注释的呀。</p>\n<p>打开model的cst文件之后发现，模板并没有做注释这个工作。<br>代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ CodeTemplate Language=&quot;C#&quot; TargetLanguage=&quot;C#&quot; </span><br><span class=\"line\">Src=&quot;ToolsCodeTemplate.cs&quot; Inherits=&quot;ToolsCodeTemplate&quot;%&gt;</span><br><span class=\"line\">&lt;%@ Property Name=&quot;TargetTable&quot; Type=&quot;SchemaExplorer.TableSchema&quot; </span><br><span class=\"line\">Category=&quot;Context&quot; Description=&quot;TargetTable that the object is </span><br><span class=\"line\">based on.&quot; %&gt;</span><br><span class=\"line\">&lt;%@ Property Name=&quot;ModelsNamespace&quot; Default=&quot;Model&quot; </span><br><span class=\"line\">Type=&quot;System.String&quot; Category=&quot;Context&quot; Description=&quot;TargetTable </span><br><span class=\"line\">that the object is based on.&quot; %&gt;</span><br><span class=\"line\">&lt;%@ Assembly Name=&quot;SchemaExplorer&quot; %&gt;</span><br><span class=\"line\">&lt;%@ Assembly Name=&quot;System.Data&quot; %&gt;</span><br><span class=\"line\">&lt;%@ Import Namespace=&quot;SchemaExplorer&quot; %&gt;</span><br><span class=\"line\">&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;</span><br><span class=\"line\">&lt;% PrintHeader(); %&gt;</span><br><span class=\"line\">using System;</span><br><span class=\"line\">using System.Collections.Generic;</span><br><span class=\"line\">using System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\">namespace &lt;%= ModelsNamespace %&gt;</span><br><span class=\"line\">&#123;\t</span><br><span class=\"line\">\t[Serializable()]</span><br><span class=\"line\">\tpublic class &lt;%= GetModelClassName() %&gt;</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t    &lt;% </span><br><span class=\"line\">\t\tforeach (ColumnSchema column in TargetTable.Columns)</span><br><span class=\"line\">\t   &#123;</span><br><span class=\"line\">\t\t%&gt;</span><br><span class=\"line\">\t\t\tprivate &lt;%= GetPropertyType(column) %&gt;  _&lt;%= </span><br><span class=\"line\">\t\t\tGetPropertyName(column) %&gt;;\t\t\t</span><br><span class=\"line\">\t\t&lt;%</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t%&gt;</span><br><span class=\"line\">\t    </span><br><span class=\"line\">\t\t&lt;% </span><br><span class=\"line\">\t\tforeach (ColumnSchema column in TargetTable.Columns)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t%&gt;</span><br><span class=\"line\">\t\t\tpublic &lt;%= GetPropertyType(column) %&gt; &lt;%= </span><br><span class=\"line\">\t\t\tGetPropertyName(column) %&gt;</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t get &#123; return _&lt;%= GetPropertyName(column) %&gt;; &#125;</span><br><span class=\"line\">\t             set &#123; _&lt;%= GetPropertyName(column) %&gt; = value; &#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&lt;%</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t%&gt;\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;script runat=&quot;template&quot;&gt;</span><br><span class=\"line\">public string GetModelClassName()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\treturn GetModelClassName(TargetTable);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public override string GetFileName()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\treturn this.GetModelClassName(this.TargetTable) + &quot;.cs&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>获取表中字段名使用的是GetPropertyName(column)，咦，在哪实现了这个东西呢？回去翻一下文件，哦，还有一个ToolsCodeTemplate.cs文一直没管呢。</p>\n<p>果然，GetPropertyName(column)在这里。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public string GetPropertyName(ColumnSchema column)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return GetNameFromDBFieldName(column);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public string GetNameFromDBFieldName(ColumnSchema column)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\treturn column.Name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>读取列名就是这么简单，那么我们对应写一个函数读取一下列注释，然后再model里面调用一下不好了。</p>\n<p>又查了一下资料，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public string GetColumnComment(ColumnSchema column)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     return column.Description;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>嗯，理论上这样是可以的…<br>然而，我想多了。倒腾了好久，这个属性值都是空的…<br>google了一圈之后发现，原来是SchemaExplorer.MySQLSchemaProvider.dll 里面压根没实现读取列注释的实现….</p>\n<p>不过也有对应的解决方法：</p>\n<p><a href=\"http://www.cnblogs.com/LonelyShadow/p/4147743.html\" target=\"_blank\" rel=\"noopener\">完美解决CodeSmith无法获取MySQL表及列Description说明注释的方案</a></p>\n<p>把DLL替换一下就好了。</p>\n<p>最后附上模板连接:<a href=\"https://github.com/liguobao/CodeSmith-for-MySQL-Template\" target=\"_blank\" rel=\"noopener\">CodeSmith-for-MySQL-Template</a></p>\n<p>注：</p>\n<ol>\n<li>模板会把MySQL的表名前三个字符截取掉，建议把表明设置为tbl开头，或者自行修改模板文件。</li>\n<li>想让字段注释生效记得替换SchemaExplorer.MySQLSchemaProvider.dll(替换前记得备份！)</li>\n</ol>\n"},{"layout":"post","title":"CodeSmith 连接MySQL数据库报“can't find .net framework data provider”","date":"2016-10-03T16:00:00.000Z","_content":"\n1、下载 mysql-connector-net 安装\n\n[mysql-connector-net](https://dev.mysql.com/downloads/connector/net/6.9.html)\n\n2、mysql-connector-net 安装完毕之后，到对应的安装目录下，把对应的MySQL .NET dll拷贝到 CodeSmith的bin目录和SchemaProviders目录。\n\n一般DLL所在目录是：\n\nC:\\\\Program Files (x86)\\\\MySQL\\\\MySQL Connector Net 6.9.8\\\\Assemblies\\\\v4.0\n\n\n3、重启CodeSmith生效\n\n\n<br>\n<br>\n\n其余解决方案：\n<br>\n[codesmith无法连接Mysql的解决方法](http://blog.csdn.net/joke01/article/details/9469515)\n\n[codesmith6.5连接Mysql提示“找不到请求的 .Net Framework Data Provider。可能没有安装。”解决方法](http://www.cnblogs.com/tim190/archive/2013/01/18/2866161.html)\n\n\n\n\n","source":"_posts/CodeSmith连接MySQL报错“找不到请求的 .Net Framework Data Provider。可能没有安装。”解决方法.md","raw":"---\nlayout: post\ntitle: CodeSmith 连接MySQL数据库报“can't find .net framework data provider”\ncategory: MySQL\ndate: 2016-10-04\ntags:\n- dotnet\n---\n\n1、下载 mysql-connector-net 安装\n\n[mysql-connector-net](https://dev.mysql.com/downloads/connector/net/6.9.html)\n\n2、mysql-connector-net 安装完毕之后，到对应的安装目录下，把对应的MySQL .NET dll拷贝到 CodeSmith的bin目录和SchemaProviders目录。\n\n一般DLL所在目录是：\n\nC:\\\\Program Files (x86)\\\\MySQL\\\\MySQL Connector Net 6.9.8\\\\Assemblies\\\\v4.0\n\n\n3、重启CodeSmith生效\n\n\n<br>\n<br>\n\n其余解决方案：\n<br>\n[codesmith无法连接Mysql的解决方法](http://blog.csdn.net/joke01/article/details/9469515)\n\n[codesmith6.5连接Mysql提示“找不到请求的 .Net Framework Data Provider。可能没有安装。”解决方法](http://www.cnblogs.com/tim190/archive/2013/01/18/2866161.html)\n\n\n\n\n","slug":"CodeSmith连接MySQL报错“找不到请求的 .Net Framework Data Provider。可能没有安装。”解决方法","published":1,"updated":"2018-05-17T13:36:15.271Z","comments":1,"photos":[],"link":"","_id":"cjhal1fwb001ap631tc5bas2c","content":"<p>1、下载 mysql-connector-net 安装</p>\n<p><a href=\"https://dev.mysql.com/downloads/connector/net/6.9.html\" target=\"_blank\" rel=\"noopener\">mysql-connector-net</a></p>\n<p>2、mysql-connector-net 安装完毕之后，到对应的安装目录下，把对应的MySQL .NET dll拷贝到 CodeSmith的bin目录和SchemaProviders目录。</p>\n<p>一般DLL所在目录是：</p>\n<p>C:\\Program Files (x86)\\MySQL\\MySQL Connector Net 6.9.8\\Assemblies\\v4.0</p>\n<p>3、重启CodeSmith生效</p>\n<p><br><br><br></p>\n<p>其余解决方案：<br><br><br><a href=\"http://blog.csdn.net/joke01/article/details/9469515\" target=\"_blank\" rel=\"noopener\">codesmith无法连接Mysql的解决方法</a></p>\n<p><a href=\"http://www.cnblogs.com/tim190/archive/2013/01/18/2866161.html\" target=\"_blank\" rel=\"noopener\">codesmith6.5连接Mysql提示“找不到请求的 .Net Framework Data Provider。可能没有安装。”解决方法</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>1、下载 mysql-connector-net 安装</p>\n<p><a href=\"https://dev.mysql.com/downloads/connector/net/6.9.html\" target=\"_blank\" rel=\"noopener\">mysql-connector-net</a></p>\n<p>2、mysql-connector-net 安装完毕之后，到对应的安装目录下，把对应的MySQL .NET dll拷贝到 CodeSmith的bin目录和SchemaProviders目录。</p>\n<p>一般DLL所在目录是：</p>\n<p>C:\\Program Files (x86)\\MySQL\\MySQL Connector Net 6.9.8\\Assemblies\\v4.0</p>\n<p>3、重启CodeSmith生效</p>\n<p><br><br><br></p>\n<p>其余解决方案：<br><br><br><a href=\"http://blog.csdn.net/joke01/article/details/9469515\" target=\"_blank\" rel=\"noopener\">codesmith无法连接Mysql的解决方法</a></p>\n<p><a href=\"http://www.cnblogs.com/tim190/archive/2013/01/18/2866161.html\" target=\"_blank\" rel=\"noopener\">codesmith6.5连接Mysql提示“找不到请求的 .Net Framework Data Provider。可能没有安装。”解决方法</a></p>\n"},{"layout":"post","title":"Jexus支持HTTPS协议","date":"2016-10-03T16:00:00.000Z","_content":"\n众所周知，在HTTPS页面请求HTTP资料的时候，现代浏览器会拦截，提示用户是否继续，或者直接拦截，提示都不出来。\n\n最近给自己做了个快速书签工具，点击书签就直接把书签发送到服务器地址，然后保存到我的网站中。\n\n一开始一切都挺正常的，不过遇到了https的网站的时候，就跪掉了。\n\n开始的时候看到HTTPS证书是收费的，想想还是算了，反正凑合能用就是。前几天偶尔看到有一个免费申请HTTPS的开源软件，喵了一下看起来还不错，这几天有空了立马开干。下面有一个教程，我申请证书差不多就是按照这个来处理的。\n\n[用Let’s Encrypt获取免费证书](https://www.paulyang.cn/blog/archives/39?spm=5176.blog2666.yqblogcon1.12.Nu0TgL)\n\n\n关于这个Let's Encrypt，维基百科是这样介绍的：\n\n> Let's Encrypt 是一个将于2015年末推出的数字证书认证机构，将通过旨在消除当前手动创建和安装证书的复杂过程的自动化流程，为安全网站提供免费的SSL/TLS证书。  Let's Encrypt 是由互联网安全研究小组（ISRG，一个公益组织）提供的服务。主要赞助商包括电子前哨基金会，Mozilla基金会，Akamai以及思科。2015年4月9日，ISRG与Linux基金会宣布合作。用以实现这一新的数字证书认证机构的协议被称为自动证书管理环境（ACME）。  GitHub上有这一规范的草案，且提案的一个版本已作为一个Internet草案发布。Let's Encrypt 宣称这一过程将十分简单、自动化并且免费。  2015年8月7日，该服务更新其推出计划，预计将在2015年9月7日当周某时发布首个证书，随后向列入白名单的域名发行少量证书并逐渐扩大发行。若一切按计划进行，该服务预计将在2015年11月16日当周某时全面开始提供.\n\n\n整个项目在Github有代码，主要是通过客户端来为我们的网站生成https证书。\n首先我们先下载客户端，如下：\n```shell\ngit clone https://github.com/letsencrypt/letsencrypt.git\n\n```\n接着进入这个仓库内，执行下面代码：\n```shell\n./letsencrypt-auto certonly -a \nwebroot\\ --webroot-path 网站所在路径(如：/var/www/web/) \\ \n-d 你的域名(如：test.online) -d www.你的域名(如ww.test.online)\n\n```\n这里需要注意的事，我这里为了排版，给上面的命令加了换行，运行这个命令的时候记得把换行符去掉。\n换行符在webroot、-d 前面各有一个。\n\n一切顺利的话，我们在`/etc/letsencrypt/live/域名/`这个目录下能看到四个文件，分别是：\n\n1. 域名证书文件\n2. 签发域名证书的证书链文件\n3. 域名证书+证书链文件\n4. 私钥文件\n\n如下图：\n![letsencrypt文件](http://7xread.com1.z0.glb.clouddn.com/60e4f29a-6da5-40e1-ae32-453a3bbf2455)\n\n接着就是为网站设置证书了。\n\n\nJexus设置HTTPS要更改jws.conf文档以及网站的配置文档。\n\n操作步骤如下：\n\n1. 修改jws.conf\n进入Jexus文件夹中，打开 “jws.conf”，添加下面两句：\n\n```shell\n\tCertificateFile    = /etc/letsencrypt/live/域名/fullchain.pem\n\tCertificateKeyFile = /etc/letsencrypt/live/域名/privkey.pem\n```\n\n修改之后效果图如下：\n![图片描述](http://7xread.com1.z0.glb.clouddn.com/d306d9c5-6391-421d-86fc-053b97d1b489)\n\n\n2. 开启网站的HTTPS功能\n\n进入siteconf/文件夹，找到对应的网站conf文件，\n\n把网站服务端口改为443：\nport=443\n\n启用https：\nUseHttps=true\n\n修改之后的效果图如下：\n![图片描述](http://7xread.com1.z0.glb.clouddn.com/0800dc87-2500-42d2-a3c5-a75a2c819330)\n\n然后重启jexus即可。\n\n完了之后，通过HTTPS即可访问。\n\n最后上一个HTTPS证书的图证明一下这个是可行的。\n![图片描述](http://7xread.com1.z0.glb.clouddn.com/24842774-311e-4e55-a6b5-b88a89edc754)\n\n\n撒花，下次再见。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Jexus支持HTTPS协议.md","raw":"---\nlayout: post\ntitle: Jexus支持HTTPS协议\ncategory: jexus\ndate: 2016-10-04\ntags:\n- dotnet core\n---\n\n众所周知，在HTTPS页面请求HTTP资料的时候，现代浏览器会拦截，提示用户是否继续，或者直接拦截，提示都不出来。\n\n最近给自己做了个快速书签工具，点击书签就直接把书签发送到服务器地址，然后保存到我的网站中。\n\n一开始一切都挺正常的，不过遇到了https的网站的时候，就跪掉了。\n\n开始的时候看到HTTPS证书是收费的，想想还是算了，反正凑合能用就是。前几天偶尔看到有一个免费申请HTTPS的开源软件，喵了一下看起来还不错，这几天有空了立马开干。下面有一个教程，我申请证书差不多就是按照这个来处理的。\n\n[用Let’s Encrypt获取免费证书](https://www.paulyang.cn/blog/archives/39?spm=5176.blog2666.yqblogcon1.12.Nu0TgL)\n\n\n关于这个Let's Encrypt，维基百科是这样介绍的：\n\n> Let's Encrypt 是一个将于2015年末推出的数字证书认证机构，将通过旨在消除当前手动创建和安装证书的复杂过程的自动化流程，为安全网站提供免费的SSL/TLS证书。  Let's Encrypt 是由互联网安全研究小组（ISRG，一个公益组织）提供的服务。主要赞助商包括电子前哨基金会，Mozilla基金会，Akamai以及思科。2015年4月9日，ISRG与Linux基金会宣布合作。用以实现这一新的数字证书认证机构的协议被称为自动证书管理环境（ACME）。  GitHub上有这一规范的草案，且提案的一个版本已作为一个Internet草案发布。Let's Encrypt 宣称这一过程将十分简单、自动化并且免费。  2015年8月7日，该服务更新其推出计划，预计将在2015年9月7日当周某时发布首个证书，随后向列入白名单的域名发行少量证书并逐渐扩大发行。若一切按计划进行，该服务预计将在2015年11月16日当周某时全面开始提供.\n\n\n整个项目在Github有代码，主要是通过客户端来为我们的网站生成https证书。\n首先我们先下载客户端，如下：\n```shell\ngit clone https://github.com/letsencrypt/letsencrypt.git\n\n```\n接着进入这个仓库内，执行下面代码：\n```shell\n./letsencrypt-auto certonly -a \nwebroot\\ --webroot-path 网站所在路径(如：/var/www/web/) \\ \n-d 你的域名(如：test.online) -d www.你的域名(如ww.test.online)\n\n```\n这里需要注意的事，我这里为了排版，给上面的命令加了换行，运行这个命令的时候记得把换行符去掉。\n换行符在webroot、-d 前面各有一个。\n\n一切顺利的话，我们在`/etc/letsencrypt/live/域名/`这个目录下能看到四个文件，分别是：\n\n1. 域名证书文件\n2. 签发域名证书的证书链文件\n3. 域名证书+证书链文件\n4. 私钥文件\n\n如下图：\n![letsencrypt文件](http://7xread.com1.z0.glb.clouddn.com/60e4f29a-6da5-40e1-ae32-453a3bbf2455)\n\n接着就是为网站设置证书了。\n\n\nJexus设置HTTPS要更改jws.conf文档以及网站的配置文档。\n\n操作步骤如下：\n\n1. 修改jws.conf\n进入Jexus文件夹中，打开 “jws.conf”，添加下面两句：\n\n```shell\n\tCertificateFile    = /etc/letsencrypt/live/域名/fullchain.pem\n\tCertificateKeyFile = /etc/letsencrypt/live/域名/privkey.pem\n```\n\n修改之后效果图如下：\n![图片描述](http://7xread.com1.z0.glb.clouddn.com/d306d9c5-6391-421d-86fc-053b97d1b489)\n\n\n2. 开启网站的HTTPS功能\n\n进入siteconf/文件夹，找到对应的网站conf文件，\n\n把网站服务端口改为443：\nport=443\n\n启用https：\nUseHttps=true\n\n修改之后的效果图如下：\n![图片描述](http://7xread.com1.z0.glb.clouddn.com/0800dc87-2500-42d2-a3c5-a75a2c819330)\n\n然后重启jexus即可。\n\n完了之后，通过HTTPS即可访问。\n\n最后上一个HTTPS证书的图证明一下这个是可行的。\n![图片描述](http://7xread.com1.z0.glb.clouddn.com/24842774-311e-4e55-a6b5-b88a89edc754)\n\n\n撒花，下次再见。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Jexus支持HTTPS协议","published":1,"updated":"2018-05-17T13:37:16.906Z","comments":1,"photos":[],"link":"","_id":"cjhal1fwc001ep631g50w9wen","content":"<p>众所周知，在HTTPS页面请求HTTP资料的时候，现代浏览器会拦截，提示用户是否继续，或者直接拦截，提示都不出来。</p>\n<p>最近给自己做了个快速书签工具，点击书签就直接把书签发送到服务器地址，然后保存到我的网站中。</p>\n<p>一开始一切都挺正常的，不过遇到了https的网站的时候，就跪掉了。</p>\n<p>开始的时候看到HTTPS证书是收费的，想想还是算了，反正凑合能用就是。前几天偶尔看到有一个免费申请HTTPS的开源软件，喵了一下看起来还不错，这几天有空了立马开干。下面有一个教程，我申请证书差不多就是按照这个来处理的。</p>\n<p><a href=\"https://www.paulyang.cn/blog/archives/39?spm=5176.blog2666.yqblogcon1.12.Nu0TgL\" target=\"_blank\" rel=\"noopener\">用Let’s Encrypt获取免费证书</a></p>\n<p>关于这个Let’s Encrypt，维基百科是这样介绍的：</p>\n<blockquote>\n<p>Let’s Encrypt 是一个将于2015年末推出的数字证书认证机构，将通过旨在消除当前手动创建和安装证书的复杂过程的自动化流程，为安全网站提供免费的SSL/TLS证书。  Let’s Encrypt 是由互联网安全研究小组（ISRG，一个公益组织）提供的服务。主要赞助商包括电子前哨基金会，Mozilla基金会，Akamai以及思科。2015年4月9日，ISRG与Linux基金会宣布合作。用以实现这一新的数字证书认证机构的协议被称为自动证书管理环境（ACME）。  GitHub上有这一规范的草案，且提案的一个版本已作为一个Internet草案发布。Let’s Encrypt 宣称这一过程将十分简单、自动化并且免费。  2015年8月7日，该服务更新其推出计划，预计将在2015年9月7日当周某时发布首个证书，随后向列入白名单的域名发行少量证书并逐渐扩大发行。若一切按计划进行，该服务预计将在2015年11月16日当周某时全面开始提供.</p>\n</blockquote>\n<p>整个项目在Github有代码，主要是通过客户端来为我们的网站生成https证书。<br>首先我们先下载客户端，如下：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/letsencrypt/letsencrypt.git</span><br></pre></td></tr></table></figure></p>\n<p>接着进入这个仓库内，执行下面代码：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./letsencrypt-auto certonly -a </span><br><span class=\"line\">webroot\\ --webroot-path 网站所在路径(如：/var/www/web/) \\ </span><br><span class=\"line\">-d 你的域名(如：test.online) -d www.你的域名(如ww.test.online)</span><br></pre></td></tr></table></figure></p>\n<p>这里需要注意的事，我这里为了排版，给上面的命令加了换行，运行这个命令的时候记得把换行符去掉。<br>换行符在webroot、-d 前面各有一个。</p>\n<p>一切顺利的话，我们在<code>/etc/letsencrypt/live/域名/</code>这个目录下能看到四个文件，分别是：</p>\n<ol>\n<li>域名证书文件</li>\n<li>签发域名证书的证书链文件</li>\n<li>域名证书+证书链文件</li>\n<li>私钥文件</li>\n</ol>\n<p>如下图：<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/60e4f29a-6da5-40e1-ae32-453a3bbf2455\" alt=\"letsencrypt文件\"></p>\n<p>接着就是为网站设置证书了。</p>\n<p>Jexus设置HTTPS要更改jws.conf文档以及网站的配置文档。</p>\n<p>操作步骤如下：</p>\n<ol>\n<li>修改jws.conf<br>进入Jexus文件夹中，打开 “jws.conf”，添加下面两句：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CertificateFile    = /etc/letsencrypt/live/域名/fullchain.pem</span><br><span class=\"line\">CertificateKeyFile = /etc/letsencrypt/live/域名/privkey.pem</span><br></pre></td></tr></table></figure>\n<p>修改之后效果图如下：<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/d306d9c5-6391-421d-86fc-053b97d1b489\" alt=\"图片描述\"></p>\n<ol start=\"2\">\n<li>开启网站的HTTPS功能</li>\n</ol>\n<p>进入siteconf/文件夹，找到对应的网站conf文件，</p>\n<p>把网站服务端口改为443：<br>port=443</p>\n<p>启用https：<br>UseHttps=true</p>\n<p>修改之后的效果图如下：<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/0800dc87-2500-42d2-a3c5-a75a2c819330\" alt=\"图片描述\"></p>\n<p>然后重启jexus即可。</p>\n<p>完了之后，通过HTTPS即可访问。</p>\n<p>最后上一个HTTPS证书的图证明一下这个是可行的。<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/24842774-311e-4e55-a6b5-b88a89edc754\" alt=\"图片描述\"></p>\n<p>撒花，下次再见。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>众所周知，在HTTPS页面请求HTTP资料的时候，现代浏览器会拦截，提示用户是否继续，或者直接拦截，提示都不出来。</p>\n<p>最近给自己做了个快速书签工具，点击书签就直接把书签发送到服务器地址，然后保存到我的网站中。</p>\n<p>一开始一切都挺正常的，不过遇到了https的网站的时候，就跪掉了。</p>\n<p>开始的时候看到HTTPS证书是收费的，想想还是算了，反正凑合能用就是。前几天偶尔看到有一个免费申请HTTPS的开源软件，喵了一下看起来还不错，这几天有空了立马开干。下面有一个教程，我申请证书差不多就是按照这个来处理的。</p>\n<p><a href=\"https://www.paulyang.cn/blog/archives/39?spm=5176.blog2666.yqblogcon1.12.Nu0TgL\" target=\"_blank\" rel=\"noopener\">用Let’s Encrypt获取免费证书</a></p>\n<p>关于这个Let’s Encrypt，维基百科是这样介绍的：</p>\n<blockquote>\n<p>Let’s Encrypt 是一个将于2015年末推出的数字证书认证机构，将通过旨在消除当前手动创建和安装证书的复杂过程的自动化流程，为安全网站提供免费的SSL/TLS证书。  Let’s Encrypt 是由互联网安全研究小组（ISRG，一个公益组织）提供的服务。主要赞助商包括电子前哨基金会，Mozilla基金会，Akamai以及思科。2015年4月9日，ISRG与Linux基金会宣布合作。用以实现这一新的数字证书认证机构的协议被称为自动证书管理环境（ACME）。  GitHub上有这一规范的草案，且提案的一个版本已作为一个Internet草案发布。Let’s Encrypt 宣称这一过程将十分简单、自动化并且免费。  2015年8月7日，该服务更新其推出计划，预计将在2015年9月7日当周某时发布首个证书，随后向列入白名单的域名发行少量证书并逐渐扩大发行。若一切按计划进行，该服务预计将在2015年11月16日当周某时全面开始提供.</p>\n</blockquote>\n<p>整个项目在Github有代码，主要是通过客户端来为我们的网站生成https证书。<br>首先我们先下载客户端，如下：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/letsencrypt/letsencrypt.git</span><br></pre></td></tr></table></figure></p>\n<p>接着进入这个仓库内，执行下面代码：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./letsencrypt-auto certonly -a </span><br><span class=\"line\">webroot\\ --webroot-path 网站所在路径(如：/var/www/web/) \\ </span><br><span class=\"line\">-d 你的域名(如：test.online) -d www.你的域名(如ww.test.online)</span><br></pre></td></tr></table></figure></p>\n<p>这里需要注意的事，我这里为了排版，给上面的命令加了换行，运行这个命令的时候记得把换行符去掉。<br>换行符在webroot、-d 前面各有一个。</p>\n<p>一切顺利的话，我们在<code>/etc/letsencrypt/live/域名/</code>这个目录下能看到四个文件，分别是：</p>\n<ol>\n<li>域名证书文件</li>\n<li>签发域名证书的证书链文件</li>\n<li>域名证书+证书链文件</li>\n<li>私钥文件</li>\n</ol>\n<p>如下图：<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/60e4f29a-6da5-40e1-ae32-453a3bbf2455\" alt=\"letsencrypt文件\"></p>\n<p>接着就是为网站设置证书了。</p>\n<p>Jexus设置HTTPS要更改jws.conf文档以及网站的配置文档。</p>\n<p>操作步骤如下：</p>\n<ol>\n<li>修改jws.conf<br>进入Jexus文件夹中，打开 “jws.conf”，添加下面两句：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CertificateFile    = /etc/letsencrypt/live/域名/fullchain.pem</span><br><span class=\"line\">CertificateKeyFile = /etc/letsencrypt/live/域名/privkey.pem</span><br></pre></td></tr></table></figure>\n<p>修改之后效果图如下：<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/d306d9c5-6391-421d-86fc-053b97d1b489\" alt=\"图片描述\"></p>\n<ol start=\"2\">\n<li>开启网站的HTTPS功能</li>\n</ol>\n<p>进入siteconf/文件夹，找到对应的网站conf文件，</p>\n<p>把网站服务端口改为443：<br>port=443</p>\n<p>启用https：<br>UseHttps=true</p>\n<p>修改之后的效果图如下：<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/0800dc87-2500-42d2-a3c5-a75a2c819330\" alt=\"图片描述\"></p>\n<p>然后重启jexus即可。</p>\n<p>完了之后，通过HTTPS即可访问。</p>\n<p>最后上一个HTTPS证书的图证明一下这个是可行的。<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/24842774-311e-4e55-a6b5-b88a89edc754\" alt=\"图片描述\"></p>\n<p>撒花，下次再见。</p>\n"},{"layout":"post","title":"ASP.NET Core 启动方式（Hosting）","date":"2016-10-03T16:00:00.000Z","_content":"# ASP.NET Core 启动方式（Hosting）\n\n之前版本的ASP.NET程序必须依赖IIS来启动，而IIS上会为挂载在其中的ASP.NET 注册一个ISAPI filter。每当http请求过来时，IIS则会启动w3wp的worker process来开始整个ASP.NET runtime程序。相信大家都这样的流程都有相应的了解。在.net core之前，ASP.NET的主要场景都是运行在Windows平台的，IIS也就是web server的首选了。虽然也有类似于jexus的linux webserver可用，但是基于mono的.NET 总体还是不够Microsoft 原生的强。\n\n不过到了现在，一切都不同了。\n\n## 新版ASP.NET Core有了.NET Core的支援后已经开始了它的跨平台之旅了，因此ASP.NET Core的启动方式也得开始重新设计以适应新需求了。\n\n### 1、Kestrel 和 IIS platform handler\n\n在 ASP.NET Core 中，整个runtime都是重写过的，所以它和IIS之间的关系也有所改变。而ASP.NET Core为了跨平台，它现在的执行方式就如一般的Console app一样。ASP.NET Core自带一个高性能的I/O组件 - Kestrel，使得它可以不依赖IIS的存在便启动了runtime。不过Kestrel 也只是一个I/O组件，并没有想IIS提供其它的功能来保护和管理ASP.NET 应用程序。ASP.NET Core同样可以通过IIS进行处理。但是如果通过IIS来进行处理的话，这个时候我们便需要一个“中间人”的角色来负责这个功能了。这个“中间人”的名字叫 Http Platform Handler，主要表现在web.config文档中的设置，其中包括启动ASP.NET Core 程序的的路径和名称，需要传入的参数以及一些其他的设置选项。Http Platform Handler的具体设置例子如下：\n\n```csharp\n<system.webServer>\n    <handlers>\n      <add name=\"httpPlatformHandler\" path=\"*\" verb=\"*\"\n      modules=\"httpPlatformHandler\" resourceType=\"Unspecified\"/>\n    </handlers>\n    <httpPlatform processPath=\"WebApp.exe\" arguments=\"\" \n    stdoutLogEnabled=\"false\" startupTimeLimit=\"3600\"/>\n  </system.webServer>\n\n```\n关于Http Platform Handler的相关资料可以看这个链接：\n[http://www.iis.net/downloads/microsoft/httpplatformhandler](http://www.iis.net/downloads/microsoft/httpplatformhandler)\n\n\n从上面的例子可以看出来，ASP.NET Core编译之后便是一个EXE程序，使得你可以直接运行。因此，当HTTP请求进来时，IIS先接受请求，然后根据你设置的web.config的内容将请求转发给WebApp.exe（你的ASP.NET Core程序），然后WebApp.exe开始执行时便会启动Kestrel，接着这个HTTP请求便进入了ASP.NET Core runtime的世界。这样看来，IIS这时候只是一个简单的proxy/forwarder角色。\n\nPS：在我翻译整理这个文章的时候，世界已经发生了变化：下个版本的asp.net core 将会有全新的IIS module来取代Http Platform Handler。\n\n具体详细资料见：[https://github.com/aspnet/IISIntegration/issues/105](https://github.com/aspnet/IISIntegration/issues/105)\n\n\n\n### 2、Main()\nASP.NET Core和其他的.NET 程序一样拥有一个static void Main(),这是整个runtime的进入点。下面看一个样例：\n```csharp\n public static void Main(string[] args)\n        {\n            var host = new WebHostBuilder()\n                .UseServer(\"Microsoft.AspNetCore.Server.Kestrel\")\n                .UseContentRoot(Directory.GetCurrentDirectory())\n                .UseDefaultConfiguration(args)\n                .UseIISPlatformHandlerUrl()\n                .UseStartup<Startup>()\n                .Build();\n\n            host.Run();\n        }\n```\n\nASP.NET Core host engine 的建立者是 WebHostBuilder．\n\n它实质上是一个了 IWebHostBuilder interface，其中 UseServer() 是用于指定使用什么样的 server。\n\n其中 UseServer() 有一个扩展方法UseServer(string assemblyName)。这样的话我们可以直接传入Kestrel的程序集名称:\"Microsoft.AspNetCore.Server.Kestrel\"。当然，这只是其中一种选项。你也可以自己实现一个自己的 server，只要你的 server 实现了 IServerFactory interface 即可。这样的设计提供了一个很大的弹性空间让我们自行选择hosting server（托管服务）。\n\n##### UseContentRoot() \n- 这个扩展方法是让我们指定应用程序的工作目录（working directory），如果我们没有指定的话，则会默认为我们的应用（webapp.exe）所在目录为工作目录。\n\n##### UseDefaultConfiguration() \n- 这个扩展方法使得我们在IWebHostBuilder 建立可以传入一些参数，比如 application key, environment name, server factory location, content root path 等等．因此，当我们在运行 WebApp.exe 的时候，同时可以带入我们需要用到的hosting参数（PS：这样的做法就像运行命令行程序时带入参数，多好玩）。这些参数也可以写在appsettings.json里面通过Configuration来读取。\n所以，UseDefaultConfiguration() 也不一定非要存在于 Main() 之中。（？？？个人不是很理解）\n\nPS：原作者原话，\"如果我沒记错的话，在写这个文章的时候，UseDefaultConfiguration() 已经被改为成了UseDefaultHostingConfiguration()．显然这个名称更能清楚明白．\"(？？？个人还没实践)\n\n\n##### UseIISPlatofmrHandleUrl() \n- 这个 IWebHostBuilder 的 扩展方法比较特殊。如果你要把 ASP.NET Core 放在 IIS 下，这个扩展方法会读取 IIS http platform handler 的 server port 和 application path，用于作为 ASP.NET Core 的启动位置，如 http://localhost:5000/start．如果你沒用 IIS，这个扩展方法对你来说基本是用不上的．\n\n##### UseStartup<>()\n\n- 这是 WebHostBuilder 里相当重要的一个扩展方法。它的方法签名如下：\n\n```csharp\n\npublic static IWebHostBuilder UseStartup<TStartup>\n(this IWebHostBuilder hostBuilder) where TStartup : class\n\n```\n这里你可以很清楚地看到 <> 里面要放的就是一个 class。\n\n在我们这里的范例中，它的名字是 Startup，里面最重要的就是需要定义要使用那些服务(service)以及要使用那些中间件(middleware)。\n\n\n### 3、Startup\n这是一个非常非常重要的class,在ASP.NET Core范例中一般都把它命名成Startup。其实我们把它命名成其他名字也是可以的，或者设定多个Startup。上面的内容可以看到，UseStartup()指定了谁是starup class。然后在Build()便会实例化starup class，之后便执行里面两个重要的方法：ConfigureServices() 和 Configure()。\n\n我们先來看 Startup 的构造函数.\n\n```csharp\n public Startup(IHostingEnvironment env)\n        {\n            // Set up configuration sources.\n            var builder = new ConfigurationBuilder()\n                .AddJsonFile(\"appsettings.json\")\n                .AddJsonFile($\"appsettings.{env.EnvironmentName}.json\", optional: true)\n                .AddEnvironmentVariables();\n            Configuration = builder.Build().ReloadOnChanged(\"appsettings.json\");\n        }\n```\n\nHost engine 在被执行 Build()时已经知道 startup type 是 Startup class，所以在 Build() 的时候会先创建期示例。在我们这里的是调用Startup类带参数的构造函数。\n\n在我们这个例子中选择的是传入IHostingEnvironment示例，它为我们带来了环境变量（EnvironmentName）。\n\n我们这里主要目的是把Configuration实例化。这是一个蛮重要的基础组件，以后会有文章来说明它。\n\n在这里我们特别说明一下，上面的示例代码中，我们执行了两次 AddJsonFile()，而且第二个json file的参数和第一个的还不太一样。这样的目的是为了让开发者可以把开发环境使用的环境参数和其他环境使用的参数有所区别。比如，你使用的开发环境用的是appsettings.json，这个文件只存在于你的电脑中。另一个文档是appsettings.production.json，这是正式环境使用的参数设定文档。第二個 AddJsonFile() 第二個参数是 true，也就是可能不存在的意思。所以若遇到重复名称参数时，appsettings.production.json 会覆盖 appsettings.json 的內容。这样使得开发环境和生产环境得以区分。\n\n接下来，在 IWebHostBuilder 的 Build()里面会执行 host engine 初始化的程序，其中就会去找Startup class里面的两个方法： ConfigureServices() 和 Configure()。\n\n ConfigureSerivces() 是定义了这个 web application 要使用那些服务，然后将这些服务放在 service container (IServiceCollection) 裡面。如下面的样例：\n \n ```csharp\n \n   public void ConfigureServices(IServiceCollection services)\n        {\n            // add entity framework\n            services.AddEntityFramework()\n                    .AddDbContext<BlogsContext>(o => o.UseSqlServer(Configuration[\"Data1:DefaultConnection:ConnectionString\"]))\n             \n            // Add framework services.\n            services.AddMvc();\n        }\n\n```\n\n它定义了entity framework和mvc两个服务。这里所谓的服务（services）的意思也就是通过它们带入更庞大的程序代码。这听起来好像有点搞笑，但也真的如此。像Entity framework 里面有这么多的代码，一定都需要带入许多定义好的物件或者参数，而不只是一个程序的进去点而已，所以services 的目的就是在这里。\n\n\nConfigure() 主要是定义了中间件（middleware）以及它们的顺序．\n\n```csharp\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)\n        {\n            loggerFactory.AddConsole(Configuration.GetSection(\"Logging\"));\n            loggerFactory.AddDebug();\n\n            app.UseStaticFiles();\n\n            app.UseMvcWithDefaultRoute();\n        }\n\n```\n\n\n### 4、Build 和 Run\n最后，在IHostWebBuilder里最后的两个动作便是：Build and Run. \n\n\n##### Build() \n- 这个方法做的工作便是建立 hosting service，把 Startup 中定义的的 services 和 middleware 接收过来，然后确定content root path 和 application name，接着一句前面这些资料再加上Configuration过来的数据来初始化host engine (WebHost.cs)．\n\n##### Run() \n- 这个是启动 host engine 的 扩展方法，它在启动之前加入了一个 CancelKeyPress 的事件．因为在 Run() 方法 中传入入了 CancellationTokenSource() ，让我们有一个方法可以随时中断host engine的执行。\n\n目前的做法就用是 CancelKeyPress 事件，所以你可以按下 Ctrl+C  來中止 host engine 的执行．\n\n比较特別的是，这一段中止的文字说明居然是用 hard code，參考如下:\n\nhost.Run(cts.Token, \"Application started. Press Ctrl+C to shut down.\");\n\n不过这样的话，这里你也不能写中文...\n\n\n全文差不多就这样了，原文在这里：[ASP.NET Core 的啟動方式 (Hosting)](https://dotblogs.com.tw/aspnetshare/2016/03/28/20160327)\n\n感谢ASP.NET Core 資訊分享。\n \n\n\n\n\n```csharp\n\n```","source":"_posts/asp.net core启动方式.md","raw":"---\nlayout: post\ntitle: ASP.NET Core 启动方式（Hosting）\ncategory: dotnet core\ndate: 2016-10-04\ntags:\n- dotnet core\n---\n# ASP.NET Core 启动方式（Hosting）\n\n之前版本的ASP.NET程序必须依赖IIS来启动，而IIS上会为挂载在其中的ASP.NET 注册一个ISAPI filter。每当http请求过来时，IIS则会启动w3wp的worker process来开始整个ASP.NET runtime程序。相信大家都这样的流程都有相应的了解。在.net core之前，ASP.NET的主要场景都是运行在Windows平台的，IIS也就是web server的首选了。虽然也有类似于jexus的linux webserver可用，但是基于mono的.NET 总体还是不够Microsoft 原生的强。\n\n不过到了现在，一切都不同了。\n\n## 新版ASP.NET Core有了.NET Core的支援后已经开始了它的跨平台之旅了，因此ASP.NET Core的启动方式也得开始重新设计以适应新需求了。\n\n### 1、Kestrel 和 IIS platform handler\n\n在 ASP.NET Core 中，整个runtime都是重写过的，所以它和IIS之间的关系也有所改变。而ASP.NET Core为了跨平台，它现在的执行方式就如一般的Console app一样。ASP.NET Core自带一个高性能的I/O组件 - Kestrel，使得它可以不依赖IIS的存在便启动了runtime。不过Kestrel 也只是一个I/O组件，并没有想IIS提供其它的功能来保护和管理ASP.NET 应用程序。ASP.NET Core同样可以通过IIS进行处理。但是如果通过IIS来进行处理的话，这个时候我们便需要一个“中间人”的角色来负责这个功能了。这个“中间人”的名字叫 Http Platform Handler，主要表现在web.config文档中的设置，其中包括启动ASP.NET Core 程序的的路径和名称，需要传入的参数以及一些其他的设置选项。Http Platform Handler的具体设置例子如下：\n\n```csharp\n<system.webServer>\n    <handlers>\n      <add name=\"httpPlatformHandler\" path=\"*\" verb=\"*\"\n      modules=\"httpPlatformHandler\" resourceType=\"Unspecified\"/>\n    </handlers>\n    <httpPlatform processPath=\"WebApp.exe\" arguments=\"\" \n    stdoutLogEnabled=\"false\" startupTimeLimit=\"3600\"/>\n  </system.webServer>\n\n```\n关于Http Platform Handler的相关资料可以看这个链接：\n[http://www.iis.net/downloads/microsoft/httpplatformhandler](http://www.iis.net/downloads/microsoft/httpplatformhandler)\n\n\n从上面的例子可以看出来，ASP.NET Core编译之后便是一个EXE程序，使得你可以直接运行。因此，当HTTP请求进来时，IIS先接受请求，然后根据你设置的web.config的内容将请求转发给WebApp.exe（你的ASP.NET Core程序），然后WebApp.exe开始执行时便会启动Kestrel，接着这个HTTP请求便进入了ASP.NET Core runtime的世界。这样看来，IIS这时候只是一个简单的proxy/forwarder角色。\n\nPS：在我翻译整理这个文章的时候，世界已经发生了变化：下个版本的asp.net core 将会有全新的IIS module来取代Http Platform Handler。\n\n具体详细资料见：[https://github.com/aspnet/IISIntegration/issues/105](https://github.com/aspnet/IISIntegration/issues/105)\n\n\n\n### 2、Main()\nASP.NET Core和其他的.NET 程序一样拥有一个static void Main(),这是整个runtime的进入点。下面看一个样例：\n```csharp\n public static void Main(string[] args)\n        {\n            var host = new WebHostBuilder()\n                .UseServer(\"Microsoft.AspNetCore.Server.Kestrel\")\n                .UseContentRoot(Directory.GetCurrentDirectory())\n                .UseDefaultConfiguration(args)\n                .UseIISPlatformHandlerUrl()\n                .UseStartup<Startup>()\n                .Build();\n\n            host.Run();\n        }\n```\n\nASP.NET Core host engine 的建立者是 WebHostBuilder．\n\n它实质上是一个了 IWebHostBuilder interface，其中 UseServer() 是用于指定使用什么样的 server。\n\n其中 UseServer() 有一个扩展方法UseServer(string assemblyName)。这样的话我们可以直接传入Kestrel的程序集名称:\"Microsoft.AspNetCore.Server.Kestrel\"。当然，这只是其中一种选项。你也可以自己实现一个自己的 server，只要你的 server 实现了 IServerFactory interface 即可。这样的设计提供了一个很大的弹性空间让我们自行选择hosting server（托管服务）。\n\n##### UseContentRoot() \n- 这个扩展方法是让我们指定应用程序的工作目录（working directory），如果我们没有指定的话，则会默认为我们的应用（webapp.exe）所在目录为工作目录。\n\n##### UseDefaultConfiguration() \n- 这个扩展方法使得我们在IWebHostBuilder 建立可以传入一些参数，比如 application key, environment name, server factory location, content root path 等等．因此，当我们在运行 WebApp.exe 的时候，同时可以带入我们需要用到的hosting参数（PS：这样的做法就像运行命令行程序时带入参数，多好玩）。这些参数也可以写在appsettings.json里面通过Configuration来读取。\n所以，UseDefaultConfiguration() 也不一定非要存在于 Main() 之中。（？？？个人不是很理解）\n\nPS：原作者原话，\"如果我沒记错的话，在写这个文章的时候，UseDefaultConfiguration() 已经被改为成了UseDefaultHostingConfiguration()．显然这个名称更能清楚明白．\"(？？？个人还没实践)\n\n\n##### UseIISPlatofmrHandleUrl() \n- 这个 IWebHostBuilder 的 扩展方法比较特殊。如果你要把 ASP.NET Core 放在 IIS 下，这个扩展方法会读取 IIS http platform handler 的 server port 和 application path，用于作为 ASP.NET Core 的启动位置，如 http://localhost:5000/start．如果你沒用 IIS，这个扩展方法对你来说基本是用不上的．\n\n##### UseStartup<>()\n\n- 这是 WebHostBuilder 里相当重要的一个扩展方法。它的方法签名如下：\n\n```csharp\n\npublic static IWebHostBuilder UseStartup<TStartup>\n(this IWebHostBuilder hostBuilder) where TStartup : class\n\n```\n这里你可以很清楚地看到 <> 里面要放的就是一个 class。\n\n在我们这里的范例中，它的名字是 Startup，里面最重要的就是需要定义要使用那些服务(service)以及要使用那些中间件(middleware)。\n\n\n### 3、Startup\n这是一个非常非常重要的class,在ASP.NET Core范例中一般都把它命名成Startup。其实我们把它命名成其他名字也是可以的，或者设定多个Startup。上面的内容可以看到，UseStartup()指定了谁是starup class。然后在Build()便会实例化starup class，之后便执行里面两个重要的方法：ConfigureServices() 和 Configure()。\n\n我们先來看 Startup 的构造函数.\n\n```csharp\n public Startup(IHostingEnvironment env)\n        {\n            // Set up configuration sources.\n            var builder = new ConfigurationBuilder()\n                .AddJsonFile(\"appsettings.json\")\n                .AddJsonFile($\"appsettings.{env.EnvironmentName}.json\", optional: true)\n                .AddEnvironmentVariables();\n            Configuration = builder.Build().ReloadOnChanged(\"appsettings.json\");\n        }\n```\n\nHost engine 在被执行 Build()时已经知道 startup type 是 Startup class，所以在 Build() 的时候会先创建期示例。在我们这里的是调用Startup类带参数的构造函数。\n\n在我们这个例子中选择的是传入IHostingEnvironment示例，它为我们带来了环境变量（EnvironmentName）。\n\n我们这里主要目的是把Configuration实例化。这是一个蛮重要的基础组件，以后会有文章来说明它。\n\n在这里我们特别说明一下，上面的示例代码中，我们执行了两次 AddJsonFile()，而且第二个json file的参数和第一个的还不太一样。这样的目的是为了让开发者可以把开发环境使用的环境参数和其他环境使用的参数有所区别。比如，你使用的开发环境用的是appsettings.json，这个文件只存在于你的电脑中。另一个文档是appsettings.production.json，这是正式环境使用的参数设定文档。第二個 AddJsonFile() 第二個参数是 true，也就是可能不存在的意思。所以若遇到重复名称参数时，appsettings.production.json 会覆盖 appsettings.json 的內容。这样使得开发环境和生产环境得以区分。\n\n接下来，在 IWebHostBuilder 的 Build()里面会执行 host engine 初始化的程序，其中就会去找Startup class里面的两个方法： ConfigureServices() 和 Configure()。\n\n ConfigureSerivces() 是定义了这个 web application 要使用那些服务，然后将这些服务放在 service container (IServiceCollection) 裡面。如下面的样例：\n \n ```csharp\n \n   public void ConfigureServices(IServiceCollection services)\n        {\n            // add entity framework\n            services.AddEntityFramework()\n                    .AddDbContext<BlogsContext>(o => o.UseSqlServer(Configuration[\"Data1:DefaultConnection:ConnectionString\"]))\n             \n            // Add framework services.\n            services.AddMvc();\n        }\n\n```\n\n它定义了entity framework和mvc两个服务。这里所谓的服务（services）的意思也就是通过它们带入更庞大的程序代码。这听起来好像有点搞笑，但也真的如此。像Entity framework 里面有这么多的代码，一定都需要带入许多定义好的物件或者参数，而不只是一个程序的进去点而已，所以services 的目的就是在这里。\n\n\nConfigure() 主要是定义了中间件（middleware）以及它们的顺序．\n\n```csharp\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)\n        {\n            loggerFactory.AddConsole(Configuration.GetSection(\"Logging\"));\n            loggerFactory.AddDebug();\n\n            app.UseStaticFiles();\n\n            app.UseMvcWithDefaultRoute();\n        }\n\n```\n\n\n### 4、Build 和 Run\n最后，在IHostWebBuilder里最后的两个动作便是：Build and Run. \n\n\n##### Build() \n- 这个方法做的工作便是建立 hosting service，把 Startup 中定义的的 services 和 middleware 接收过来，然后确定content root path 和 application name，接着一句前面这些资料再加上Configuration过来的数据来初始化host engine (WebHost.cs)．\n\n##### Run() \n- 这个是启动 host engine 的 扩展方法，它在启动之前加入了一个 CancelKeyPress 的事件．因为在 Run() 方法 中传入入了 CancellationTokenSource() ，让我们有一个方法可以随时中断host engine的执行。\n\n目前的做法就用是 CancelKeyPress 事件，所以你可以按下 Ctrl+C  來中止 host engine 的执行．\n\n比较特別的是，这一段中止的文字说明居然是用 hard code，參考如下:\n\nhost.Run(cts.Token, \"Application started. Press Ctrl+C to shut down.\");\n\n不过这样的话，这里你也不能写中文...\n\n\n全文差不多就这样了，原文在这里：[ASP.NET Core 的啟動方式 (Hosting)](https://dotblogs.com.tw/aspnetshare/2016/03/28/20160327)\n\n感谢ASP.NET Core 資訊分享。\n \n\n\n\n\n```csharp\n\n```","slug":"asp.net core启动方式","published":1,"updated":"2018-05-17T13:34:03.763Z","comments":1,"photos":[],"link":"","_id":"cjhal1fwd001hp631j9o47a8n","content":"<h1 id=\"ASP-NET-Core-启动方式（Hosting）\"><a href=\"#ASP-NET-Core-启动方式（Hosting）\" class=\"headerlink\" title=\"ASP.NET Core 启动方式（Hosting）\"></a>ASP.NET Core 启动方式（Hosting）</h1><p>之前版本的ASP.NET程序必须依赖IIS来启动，而IIS上会为挂载在其中的ASP.NET 注册一个ISAPI filter。每当http请求过来时，IIS则会启动w3wp的worker process来开始整个ASP.NET runtime程序。相信大家都这样的流程都有相应的了解。在.net core之前，ASP.NET的主要场景都是运行在Windows平台的，IIS也就是web server的首选了。虽然也有类似于jexus的linux webserver可用，但是基于mono的.NET 总体还是不够Microsoft 原生的强。</p>\n<p>不过到了现在，一切都不同了。</p>\n<h2 id=\"新版ASP-NET-Core有了-NET-Core的支援后已经开始了它的跨平台之旅了，因此ASP-NET-Core的启动方式也得开始重新设计以适应新需求了。\"><a href=\"#新版ASP-NET-Core有了-NET-Core的支援后已经开始了它的跨平台之旅了，因此ASP-NET-Core的启动方式也得开始重新设计以适应新需求了。\" class=\"headerlink\" title=\"新版ASP.NET Core有了.NET Core的支援后已经开始了它的跨平台之旅了，因此ASP.NET Core的启动方式也得开始重新设计以适应新需求了。\"></a>新版ASP.NET Core有了.NET Core的支援后已经开始了它的跨平台之旅了，因此ASP.NET Core的启动方式也得开始重新设计以适应新需求了。</h2><h3 id=\"1、Kestrel-和-IIS-platform-handler\"><a href=\"#1、Kestrel-和-IIS-platform-handler\" class=\"headerlink\" title=\"1、Kestrel 和 IIS platform handler\"></a>1、Kestrel 和 IIS platform handler</h3><p>在 ASP.NET Core 中，整个runtime都是重写过的，所以它和IIS之间的关系也有所改变。而ASP.NET Core为了跨平台，它现在的执行方式就如一般的Console app一样。ASP.NET Core自带一个高性能的I/O组件 - Kestrel，使得它可以不依赖IIS的存在便启动了runtime。不过Kestrel 也只是一个I/O组件，并没有想IIS提供其它的功能来保护和管理ASP.NET 应用程序。ASP.NET Core同样可以通过IIS进行处理。但是如果通过IIS来进行处理的话，这个时候我们便需要一个“中间人”的角色来负责这个功能了。这个“中间人”的名字叫 Http Platform Handler，主要表现在web.config文档中的设置，其中包括启动ASP.NET Core 程序的的路径和名称，需要传入的参数以及一些其他的设置选项。Http Platform Handler的具体设置例子如下：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;system.webServer&gt;</span><br><span class=\"line\">    &lt;handlers&gt;</span><br><span class=\"line\">      &lt;<span class=\"keyword\">add</span> name=<span class=\"string\">\"httpPlatformHandler\"</span> path=<span class=\"string\">\"*\"</span> verb=<span class=\"string\">\"*\"</span></span><br><span class=\"line\">      modules=<span class=\"string\">\"httpPlatformHandler\"</span> resourceType=<span class=\"string\">\"Unspecified\"</span>/&gt;</span><br><span class=\"line\">    &lt;/handlers&gt;</span><br><span class=\"line\">    &lt;httpPlatform processPath=<span class=\"string\">\"WebApp.exe\"</span> arguments=<span class=\"string\">\"\"</span> </span><br><span class=\"line\">    stdoutLogEnabled=<span class=\"string\">\"false\"</span> startupTimeLimit=<span class=\"string\">\"3600\"</span>/&gt;</span><br><span class=\"line\">  &lt;/system.webServer&gt;</span><br></pre></td></tr></table></figure>\n<p>关于Http Platform Handler的相关资料可以看这个链接：<br><a href=\"http://www.iis.net/downloads/microsoft/httpplatformhandler\" target=\"_blank\" rel=\"noopener\">http://www.iis.net/downloads/microsoft/httpplatformhandler</a></p>\n<p>从上面的例子可以看出来，ASP.NET Core编译之后便是一个EXE程序，使得你可以直接运行。因此，当HTTP请求进来时，IIS先接受请求，然后根据你设置的web.config的内容将请求转发给WebApp.exe（你的ASP.NET Core程序），然后WebApp.exe开始执行时便会启动Kestrel，接着这个HTTP请求便进入了ASP.NET Core runtime的世界。这样看来，IIS这时候只是一个简单的proxy/forwarder角色。</p>\n<p>PS：在我翻译整理这个文章的时候，世界已经发生了变化：下个版本的asp.net core 将会有全新的IIS module来取代Http Platform Handler。</p>\n<p>具体详细资料见：<a href=\"https://github.com/aspnet/IISIntegration/issues/105\" target=\"_blank\" rel=\"noopener\">https://github.com/aspnet/IISIntegration/issues/105</a></p>\n<h3 id=\"2、Main\"><a href=\"#2、Main\" class=\"headerlink\" title=\"2、Main()\"></a>2、Main()</h3><p>ASP.NET Core和其他的.NET 程序一样拥有一个static void Main(),这是整个runtime的进入点。下面看一个样例：<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\">       </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">var</span> host = <span class=\"keyword\">new</span> WebHostBuilder()</span><br><span class=\"line\">               .UseServer(<span class=\"string\">\"Microsoft.AspNetCore.Server.Kestrel\"</span>)</span><br><span class=\"line\">               .UseContentRoot(Directory.GetCurrentDirectory())</span><br><span class=\"line\">               .UseDefaultConfiguration(args)</span><br><span class=\"line\">               .UseIISPlatformHandlerUrl()</span><br><span class=\"line\">               .UseStartup&lt;Startup&gt;()</span><br><span class=\"line\">               .Build();</span><br><span class=\"line\"></span><br><span class=\"line\">           host.Run();</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure></p>\n<p>ASP.NET Core host engine 的建立者是 WebHostBuilder．</p>\n<p>它实质上是一个了 IWebHostBuilder interface，其中 UseServer() 是用于指定使用什么样的 server。</p>\n<p>其中 UseServer() 有一个扩展方法UseServer(string assemblyName)。这样的话我们可以直接传入Kestrel的程序集名称:”Microsoft.AspNetCore.Server.Kestrel”。当然，这只是其中一种选项。你也可以自己实现一个自己的 server，只要你的 server 实现了 IServerFactory interface 即可。这样的设计提供了一个很大的弹性空间让我们自行选择hosting server（托管服务）。</p>\n<h5 id=\"UseContentRoot\"><a href=\"#UseContentRoot\" class=\"headerlink\" title=\"UseContentRoot()\"></a>UseContentRoot()</h5><ul>\n<li>这个扩展方法是让我们指定应用程序的工作目录（working directory），如果我们没有指定的话，则会默认为我们的应用（webapp.exe）所在目录为工作目录。</li>\n</ul>\n<h5 id=\"UseDefaultConfiguration\"><a href=\"#UseDefaultConfiguration\" class=\"headerlink\" title=\"UseDefaultConfiguration()\"></a>UseDefaultConfiguration()</h5><ul>\n<li>这个扩展方法使得我们在IWebHostBuilder 建立可以传入一些参数，比如 application key, environment name, server factory location, content root path 等等．因此，当我们在运行 WebApp.exe 的时候，同时可以带入我们需要用到的hosting参数（PS：这样的做法就像运行命令行程序时带入参数，多好玩）。这些参数也可以写在appsettings.json里面通过Configuration来读取。<br>所以，UseDefaultConfiguration() 也不一定非要存在于 Main() 之中。（？？？个人不是很理解）</li>\n</ul>\n<p>PS：原作者原话，”如果我沒记错的话，在写这个文章的时候，UseDefaultConfiguration() 已经被改为成了UseDefaultHostingConfiguration()．显然这个名称更能清楚明白．”(？？？个人还没实践)</p>\n<h5 id=\"UseIISPlatofmrHandleUrl\"><a href=\"#UseIISPlatofmrHandleUrl\" class=\"headerlink\" title=\"UseIISPlatofmrHandleUrl()\"></a>UseIISPlatofmrHandleUrl()</h5><ul>\n<li>这个 IWebHostBuilder 的 扩展方法比较特殊。如果你要把 ASP.NET Core 放在 IIS 下，这个扩展方法会读取 IIS http platform handler 的 server port 和 application path，用于作为 ASP.NET Core 的启动位置，如 <a href=\"http://localhost:5000/start．如果你沒用\" target=\"_blank\" rel=\"noopener\">http://localhost:5000/start．如果你沒用</a> IIS，这个扩展方法对你来说基本是用不上的．</li>\n</ul>\n<h5 id=\"UseStartup-lt-gt\"><a href=\"#UseStartup-lt-gt\" class=\"headerlink\" title=\"UseStartup&lt;&gt;()\"></a>UseStartup&lt;&gt;()</h5><ul>\n<li>这是 WebHostBuilder 里相当重要的一个扩展方法。它的方法签名如下：</li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IWebHostBuilder UseStartup&lt;TStartup&gt;</span><br><span class=\"line\">(<span class=\"keyword\">this</span> IWebHostBuilder hostBuilder) <span class=\"keyword\">where</span> TStartup : <span class=\"keyword\">class</span></span><br></pre></td></tr></table></figure>\n<p>这里你可以很清楚地看到 &lt;&gt; 里面要放的就是一个 class。</p>\n<p>在我们这里的范例中，它的名字是 Startup，里面最重要的就是需要定义要使用那些服务(service)以及要使用那些中间件(middleware)。</p>\n<h3 id=\"3、Startup\"><a href=\"#3、Startup\" class=\"headerlink\" title=\"3、Startup\"></a>3、Startup</h3><p>这是一个非常非常重要的class,在ASP.NET Core范例中一般都把它命名成Startup。其实我们把它命名成其他名字也是可以的，或者设定多个Startup。上面的内容可以看到，UseStartup()指定了谁是starup class。然后在Build()便会实例化starup class，之后便执行里面两个重要的方法：ConfigureServices() 和 Configure()。</p>\n<p>我们先來看 Startup 的构造函数.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Startup</span>(<span class=\"params\">IHostingEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\">       </span>&#123;</span><br><span class=\"line\">           <span class=\"comment\">// Set up configuration sources.</span></span><br><span class=\"line\">           <span class=\"keyword\">var</span> builder = <span class=\"keyword\">new</span> ConfigurationBuilder()</span><br><span class=\"line\">               .AddJsonFile(<span class=\"string\">\"appsettings.json\"</span>)</span><br><span class=\"line\">               .AddJsonFile(<span class=\"string\">$\"appsettings.<span class=\"subst\">&#123;env.EnvironmentName&#125;</span>.json\"</span>, optional: <span class=\"literal\">true</span>)</span><br><span class=\"line\">               .AddEnvironmentVariables();</span><br><span class=\"line\">           Configuration = builder.Build().ReloadOnChanged(<span class=\"string\">\"appsettings.json\"</span>);</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n<p>Host engine 在被执行 Build()时已经知道 startup type 是 Startup class，所以在 Build() 的时候会先创建期示例。在我们这里的是调用Startup类带参数的构造函数。</p>\n<p>在我们这个例子中选择的是传入IHostingEnvironment示例，它为我们带来了环境变量（EnvironmentName）。</p>\n<p>我们这里主要目的是把Configuration实例化。这是一个蛮重要的基础组件，以后会有文章来说明它。</p>\n<p>在这里我们特别说明一下，上面的示例代码中，我们执行了两次 AddJsonFile()，而且第二个json file的参数和第一个的还不太一样。这样的目的是为了让开发者可以把开发环境使用的环境参数和其他环境使用的参数有所区别。比如，你使用的开发环境用的是appsettings.json，这个文件只存在于你的电脑中。另一个文档是appsettings.production.json，这是正式环境使用的参数设定文档。第二個 AddJsonFile() 第二個参数是 true，也就是可能不存在的意思。所以若遇到重复名称参数时，appsettings.production.json 会覆盖 appsettings.json 的內容。这样使得开发环境和生产环境得以区分。</p>\n<p>接下来，在 IWebHostBuilder 的 Build()里面会执行 host engine 初始化的程序，其中就会去找Startup class里面的两个方法： ConfigureServices() 和 Configure()。</p>\n<p> ConfigureSerivces() 是定义了这个 web application 要使用那些服务，然后将这些服务放在 service container (IServiceCollection) 裡面。如下面的样例：</p>\n <figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\">     </span>&#123;</span><br><span class=\"line\">         <span class=\"comment\">// add entity framework</span></span><br><span class=\"line\">         services.AddEntityFramework()</span><br><span class=\"line\">                 .AddDbContext&lt;BlogsContext&gt;(o =&gt; o.UseSqlServer(Configuration[<span class=\"string\">\"Data1:DefaultConnection:ConnectionString\"</span>]))</span><br><span class=\"line\">          </span><br><span class=\"line\">         <span class=\"comment\">// Add framework services.</span></span><br><span class=\"line\">         services.AddMvc();</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n<p>它定义了entity framework和mvc两个服务。这里所谓的服务（services）的意思也就是通过它们带入更庞大的程序代码。这听起来好像有点搞笑，但也真的如此。像Entity framework 里面有这么多的代码，一定都需要带入许多定义好的物件或者参数，而不只是一个程序的进去点而已，所以services 的目的就是在这里。</p>\n<p>Configure() 主要是定义了中间件（middleware）以及它们的顺序．</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    loggerFactory.AddConsole(Configuration.GetSection(<span class=\"string\">\"Logging\"</span>));</span><br><span class=\"line\">    loggerFactory.AddDebug();</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseStaticFiles();</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseMvcWithDefaultRoute();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、Build-和-Run\"><a href=\"#4、Build-和-Run\" class=\"headerlink\" title=\"4、Build 和 Run\"></a>4、Build 和 Run</h3><p>最后，在IHostWebBuilder里最后的两个动作便是：Build and Run. </p>\n<h5 id=\"Build\"><a href=\"#Build\" class=\"headerlink\" title=\"Build()\"></a>Build()</h5><ul>\n<li>这个方法做的工作便是建立 hosting service，把 Startup 中定义的的 services 和 middleware 接收过来，然后确定content root path 和 application name，接着一句前面这些资料再加上Configuration过来的数据来初始化host engine (WebHost.cs)．</li>\n</ul>\n<h5 id=\"Run\"><a href=\"#Run\" class=\"headerlink\" title=\"Run()\"></a>Run()</h5><ul>\n<li>这个是启动 host engine 的 扩展方法，它在启动之前加入了一个 CancelKeyPress 的事件．因为在 Run() 方法 中传入入了 CancellationTokenSource() ，让我们有一个方法可以随时中断host engine的执行。</li>\n</ul>\n<p>目前的做法就用是 CancelKeyPress 事件，所以你可以按下 Ctrl+C  來中止 host engine 的执行．</p>\n<p>比较特別的是，这一段中止的文字说明居然是用 hard code，參考如下:</p>\n<p>host.Run(cts.Token, “Application started. Press Ctrl+C to shut down.”);</p>\n<p>不过这样的话，这里你也不能写中文…</p>\n<p>全文差不多就这样了，原文在这里：<a href=\"https://dotblogs.com.tw/aspnetshare/2016/03/28/20160327\" target=\"_blank\" rel=\"noopener\">ASP.NET Core 的啟動方式 (Hosting)</a></p>\n<p>感谢ASP.NET Core 資訊分享。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ASP-NET-Core-启动方式（Hosting）\"><a href=\"#ASP-NET-Core-启动方式（Hosting）\" class=\"headerlink\" title=\"ASP.NET Core 启动方式（Hosting）\"></a>ASP.NET Core 启动方式（Hosting）</h1><p>之前版本的ASP.NET程序必须依赖IIS来启动，而IIS上会为挂载在其中的ASP.NET 注册一个ISAPI filter。每当http请求过来时，IIS则会启动w3wp的worker process来开始整个ASP.NET runtime程序。相信大家都这样的流程都有相应的了解。在.net core之前，ASP.NET的主要场景都是运行在Windows平台的，IIS也就是web server的首选了。虽然也有类似于jexus的linux webserver可用，但是基于mono的.NET 总体还是不够Microsoft 原生的强。</p>\n<p>不过到了现在，一切都不同了。</p>\n<h2 id=\"新版ASP-NET-Core有了-NET-Core的支援后已经开始了它的跨平台之旅了，因此ASP-NET-Core的启动方式也得开始重新设计以适应新需求了。\"><a href=\"#新版ASP-NET-Core有了-NET-Core的支援后已经开始了它的跨平台之旅了，因此ASP-NET-Core的启动方式也得开始重新设计以适应新需求了。\" class=\"headerlink\" title=\"新版ASP.NET Core有了.NET Core的支援后已经开始了它的跨平台之旅了，因此ASP.NET Core的启动方式也得开始重新设计以适应新需求了。\"></a>新版ASP.NET Core有了.NET Core的支援后已经开始了它的跨平台之旅了，因此ASP.NET Core的启动方式也得开始重新设计以适应新需求了。</h2><h3 id=\"1、Kestrel-和-IIS-platform-handler\"><a href=\"#1、Kestrel-和-IIS-platform-handler\" class=\"headerlink\" title=\"1、Kestrel 和 IIS platform handler\"></a>1、Kestrel 和 IIS platform handler</h3><p>在 ASP.NET Core 中，整个runtime都是重写过的，所以它和IIS之间的关系也有所改变。而ASP.NET Core为了跨平台，它现在的执行方式就如一般的Console app一样。ASP.NET Core自带一个高性能的I/O组件 - Kestrel，使得它可以不依赖IIS的存在便启动了runtime。不过Kestrel 也只是一个I/O组件，并没有想IIS提供其它的功能来保护和管理ASP.NET 应用程序。ASP.NET Core同样可以通过IIS进行处理。但是如果通过IIS来进行处理的话，这个时候我们便需要一个“中间人”的角色来负责这个功能了。这个“中间人”的名字叫 Http Platform Handler，主要表现在web.config文档中的设置，其中包括启动ASP.NET Core 程序的的路径和名称，需要传入的参数以及一些其他的设置选项。Http Platform Handler的具体设置例子如下：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;system.webServer&gt;</span><br><span class=\"line\">    &lt;handlers&gt;</span><br><span class=\"line\">      &lt;<span class=\"keyword\">add</span> name=<span class=\"string\">\"httpPlatformHandler\"</span> path=<span class=\"string\">\"*\"</span> verb=<span class=\"string\">\"*\"</span></span><br><span class=\"line\">      modules=<span class=\"string\">\"httpPlatformHandler\"</span> resourceType=<span class=\"string\">\"Unspecified\"</span>/&gt;</span><br><span class=\"line\">    &lt;/handlers&gt;</span><br><span class=\"line\">    &lt;httpPlatform processPath=<span class=\"string\">\"WebApp.exe\"</span> arguments=<span class=\"string\">\"\"</span> </span><br><span class=\"line\">    stdoutLogEnabled=<span class=\"string\">\"false\"</span> startupTimeLimit=<span class=\"string\">\"3600\"</span>/&gt;</span><br><span class=\"line\">  &lt;/system.webServer&gt;</span><br></pre></td></tr></table></figure>\n<p>关于Http Platform Handler的相关资料可以看这个链接：<br><a href=\"http://www.iis.net/downloads/microsoft/httpplatformhandler\" target=\"_blank\" rel=\"noopener\">http://www.iis.net/downloads/microsoft/httpplatformhandler</a></p>\n<p>从上面的例子可以看出来，ASP.NET Core编译之后便是一个EXE程序，使得你可以直接运行。因此，当HTTP请求进来时，IIS先接受请求，然后根据你设置的web.config的内容将请求转发给WebApp.exe（你的ASP.NET Core程序），然后WebApp.exe开始执行时便会启动Kestrel，接着这个HTTP请求便进入了ASP.NET Core runtime的世界。这样看来，IIS这时候只是一个简单的proxy/forwarder角色。</p>\n<p>PS：在我翻译整理这个文章的时候，世界已经发生了变化：下个版本的asp.net core 将会有全新的IIS module来取代Http Platform Handler。</p>\n<p>具体详细资料见：<a href=\"https://github.com/aspnet/IISIntegration/issues/105\" target=\"_blank\" rel=\"noopener\">https://github.com/aspnet/IISIntegration/issues/105</a></p>\n<h3 id=\"2、Main\"><a href=\"#2、Main\" class=\"headerlink\" title=\"2、Main()\"></a>2、Main()</h3><p>ASP.NET Core和其他的.NET 程序一样拥有一个static void Main(),这是整个runtime的进入点。下面看一个样例：<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\">       </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">var</span> host = <span class=\"keyword\">new</span> WebHostBuilder()</span><br><span class=\"line\">               .UseServer(<span class=\"string\">\"Microsoft.AspNetCore.Server.Kestrel\"</span>)</span><br><span class=\"line\">               .UseContentRoot(Directory.GetCurrentDirectory())</span><br><span class=\"line\">               .UseDefaultConfiguration(args)</span><br><span class=\"line\">               .UseIISPlatformHandlerUrl()</span><br><span class=\"line\">               .UseStartup&lt;Startup&gt;()</span><br><span class=\"line\">               .Build();</span><br><span class=\"line\"></span><br><span class=\"line\">           host.Run();</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure></p>\n<p>ASP.NET Core host engine 的建立者是 WebHostBuilder．</p>\n<p>它实质上是一个了 IWebHostBuilder interface，其中 UseServer() 是用于指定使用什么样的 server。</p>\n<p>其中 UseServer() 有一个扩展方法UseServer(string assemblyName)。这样的话我们可以直接传入Kestrel的程序集名称:”Microsoft.AspNetCore.Server.Kestrel”。当然，这只是其中一种选项。你也可以自己实现一个自己的 server，只要你的 server 实现了 IServerFactory interface 即可。这样的设计提供了一个很大的弹性空间让我们自行选择hosting server（托管服务）。</p>\n<h5 id=\"UseContentRoot\"><a href=\"#UseContentRoot\" class=\"headerlink\" title=\"UseContentRoot()\"></a>UseContentRoot()</h5><ul>\n<li>这个扩展方法是让我们指定应用程序的工作目录（working directory），如果我们没有指定的话，则会默认为我们的应用（webapp.exe）所在目录为工作目录。</li>\n</ul>\n<h5 id=\"UseDefaultConfiguration\"><a href=\"#UseDefaultConfiguration\" class=\"headerlink\" title=\"UseDefaultConfiguration()\"></a>UseDefaultConfiguration()</h5><ul>\n<li>这个扩展方法使得我们在IWebHostBuilder 建立可以传入一些参数，比如 application key, environment name, server factory location, content root path 等等．因此，当我们在运行 WebApp.exe 的时候，同时可以带入我们需要用到的hosting参数（PS：这样的做法就像运行命令行程序时带入参数，多好玩）。这些参数也可以写在appsettings.json里面通过Configuration来读取。<br>所以，UseDefaultConfiguration() 也不一定非要存在于 Main() 之中。（？？？个人不是很理解）</li>\n</ul>\n<p>PS：原作者原话，”如果我沒记错的话，在写这个文章的时候，UseDefaultConfiguration() 已经被改为成了UseDefaultHostingConfiguration()．显然这个名称更能清楚明白．”(？？？个人还没实践)</p>\n<h5 id=\"UseIISPlatofmrHandleUrl\"><a href=\"#UseIISPlatofmrHandleUrl\" class=\"headerlink\" title=\"UseIISPlatofmrHandleUrl()\"></a>UseIISPlatofmrHandleUrl()</h5><ul>\n<li>这个 IWebHostBuilder 的 扩展方法比较特殊。如果你要把 ASP.NET Core 放在 IIS 下，这个扩展方法会读取 IIS http platform handler 的 server port 和 application path，用于作为 ASP.NET Core 的启动位置，如 <a href=\"http://localhost:5000/start．如果你沒用\" target=\"_blank\" rel=\"noopener\">http://localhost:5000/start．如果你沒用</a> IIS，这个扩展方法对你来说基本是用不上的．</li>\n</ul>\n<h5 id=\"UseStartup-lt-gt\"><a href=\"#UseStartup-lt-gt\" class=\"headerlink\" title=\"UseStartup&lt;&gt;()\"></a>UseStartup&lt;&gt;()</h5><ul>\n<li>这是 WebHostBuilder 里相当重要的一个扩展方法。它的方法签名如下：</li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IWebHostBuilder UseStartup&lt;TStartup&gt;</span><br><span class=\"line\">(<span class=\"keyword\">this</span> IWebHostBuilder hostBuilder) <span class=\"keyword\">where</span> TStartup : <span class=\"keyword\">class</span></span><br></pre></td></tr></table></figure>\n<p>这里你可以很清楚地看到 &lt;&gt; 里面要放的就是一个 class。</p>\n<p>在我们这里的范例中，它的名字是 Startup，里面最重要的就是需要定义要使用那些服务(service)以及要使用那些中间件(middleware)。</p>\n<h3 id=\"3、Startup\"><a href=\"#3、Startup\" class=\"headerlink\" title=\"3、Startup\"></a>3、Startup</h3><p>这是一个非常非常重要的class,在ASP.NET Core范例中一般都把它命名成Startup。其实我们把它命名成其他名字也是可以的，或者设定多个Startup。上面的内容可以看到，UseStartup()指定了谁是starup class。然后在Build()便会实例化starup class，之后便执行里面两个重要的方法：ConfigureServices() 和 Configure()。</p>\n<p>我们先來看 Startup 的构造函数.</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Startup</span>(<span class=\"params\">IHostingEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\">       </span>&#123;</span><br><span class=\"line\">           <span class=\"comment\">// Set up configuration sources.</span></span><br><span class=\"line\">           <span class=\"keyword\">var</span> builder = <span class=\"keyword\">new</span> ConfigurationBuilder()</span><br><span class=\"line\">               .AddJsonFile(<span class=\"string\">\"appsettings.json\"</span>)</span><br><span class=\"line\">               .AddJsonFile(<span class=\"string\">$\"appsettings.<span class=\"subst\">&#123;env.EnvironmentName&#125;</span>.json\"</span>, optional: <span class=\"literal\">true</span>)</span><br><span class=\"line\">               .AddEnvironmentVariables();</span><br><span class=\"line\">           Configuration = builder.Build().ReloadOnChanged(<span class=\"string\">\"appsettings.json\"</span>);</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n<p>Host engine 在被执行 Build()时已经知道 startup type 是 Startup class，所以在 Build() 的时候会先创建期示例。在我们这里的是调用Startup类带参数的构造函数。</p>\n<p>在我们这个例子中选择的是传入IHostingEnvironment示例，它为我们带来了环境变量（EnvironmentName）。</p>\n<p>我们这里主要目的是把Configuration实例化。这是一个蛮重要的基础组件，以后会有文章来说明它。</p>\n<p>在这里我们特别说明一下，上面的示例代码中，我们执行了两次 AddJsonFile()，而且第二个json file的参数和第一个的还不太一样。这样的目的是为了让开发者可以把开发环境使用的环境参数和其他环境使用的参数有所区别。比如，你使用的开发环境用的是appsettings.json，这个文件只存在于你的电脑中。另一个文档是appsettings.production.json，这是正式环境使用的参数设定文档。第二個 AddJsonFile() 第二個参数是 true，也就是可能不存在的意思。所以若遇到重复名称参数时，appsettings.production.json 会覆盖 appsettings.json 的內容。这样使得开发环境和生产环境得以区分。</p>\n<p>接下来，在 IWebHostBuilder 的 Build()里面会执行 host engine 初始化的程序，其中就会去找Startup class里面的两个方法： ConfigureServices() 和 Configure()。</p>\n<p> ConfigureSerivces() 是定义了这个 web application 要使用那些服务，然后将这些服务放在 service container (IServiceCollection) 裡面。如下面的样例：</p>\n <figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\">     </span>&#123;</span><br><span class=\"line\">         <span class=\"comment\">// add entity framework</span></span><br><span class=\"line\">         services.AddEntityFramework()</span><br><span class=\"line\">                 .AddDbContext&lt;BlogsContext&gt;(o =&gt; o.UseSqlServer(Configuration[<span class=\"string\">\"Data1:DefaultConnection:ConnectionString\"</span>]))</span><br><span class=\"line\">          </span><br><span class=\"line\">         <span class=\"comment\">// Add framework services.</span></span><br><span class=\"line\">         services.AddMvc();</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n<p>它定义了entity framework和mvc两个服务。这里所谓的服务（services）的意思也就是通过它们带入更庞大的程序代码。这听起来好像有点搞笑，但也真的如此。像Entity framework 里面有这么多的代码，一定都需要带入许多定义好的物件或者参数，而不只是一个程序的进去点而已，所以services 的目的就是在这里。</p>\n<p>Configure() 主要是定义了中间件（middleware）以及它们的顺序．</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    loggerFactory.AddConsole(Configuration.GetSection(<span class=\"string\">\"Logging\"</span>));</span><br><span class=\"line\">    loggerFactory.AddDebug();</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseStaticFiles();</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseMvcWithDefaultRoute();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、Build-和-Run\"><a href=\"#4、Build-和-Run\" class=\"headerlink\" title=\"4、Build 和 Run\"></a>4、Build 和 Run</h3><p>最后，在IHostWebBuilder里最后的两个动作便是：Build and Run. </p>\n<h5 id=\"Build\"><a href=\"#Build\" class=\"headerlink\" title=\"Build()\"></a>Build()</h5><ul>\n<li>这个方法做的工作便是建立 hosting service，把 Startup 中定义的的 services 和 middleware 接收过来，然后确定content root path 和 application name，接着一句前面这些资料再加上Configuration过来的数据来初始化host engine (WebHost.cs)．</li>\n</ul>\n<h5 id=\"Run\"><a href=\"#Run\" class=\"headerlink\" title=\"Run()\"></a>Run()</h5><ul>\n<li>这个是启动 host engine 的 扩展方法，它在启动之前加入了一个 CancelKeyPress 的事件．因为在 Run() 方法 中传入入了 CancellationTokenSource() ，让我们有一个方法可以随时中断host engine的执行。</li>\n</ul>\n<p>目前的做法就用是 CancelKeyPress 事件，所以你可以按下 Ctrl+C  來中止 host engine 的执行．</p>\n<p>比较特別的是，这一段中止的文字说明居然是用 hard code，參考如下:</p>\n<p>host.Run(cts.Token, “Application started. Press Ctrl+C to shut down.”);</p>\n<p>不过这样的话，这里你也不能写中文…</p>\n<p>全文差不多就这样了，原文在这里：<a href=\"https://dotblogs.com.tw/aspnetshare/2016/03/28/20160327\" target=\"_blank\" rel=\"noopener\">ASP.NET Core 的啟動方式 (Hosting)</a></p>\n<p>感谢ASP.NET Core 資訊分享。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"自动同步git repository脚本","date":"2016-11-24T16:00:00.000Z","_content":"# 自动同步git repository脚本\n\n由于平时偶尔需要merge不同分支代码到正式版本用于发布版本，merge前就需要先把各种分支代码更新到最新，接着再去做merge工作。\n\n经常使用的分支其实不算太多，不过仓库倒是有好几个。来来去去写命令行或者GUI操作多了觉得有点繁琐，就琢磨来写个脚本做吧。\n\nPS：偷懒是人类进步的动力...\n\n找了下资料，无外乎就是bat/sh脚本调用git cmd,之前写过bat命令，所以一开始是走这个思路的。\n\n不料在PATH上配置好了git bin的路径之后，使用git命令没问题了，不过pull rebase的时候提示publickey无效。可是我的publickey一直都在.ssh里面,不存在无效的问题...\n\n懒得纠结，换shell吧。\n\n参考资料：\n\n[请问如何写一个批处理自动打开 gitbash，然后自动执行一系列git命令（windows平台）？](https://www.zhihu.com/question/38962022)\n\n## Show Code\n\n使用shell就更好玩了，直接把git bash运行的命令扔到.sh文件里面就完事了。所以...如下：\n\n```shell\n\nprintf \"Start rebase 58HouseSearch. \\r\\n\"\ncd ./58HouseSearch;\ngit checkout master;\ngit pull --rebase origin master;\nprintf \"Finish Pull Rebase 58HouseSearch release and master.\\r\\n\"\nread -p \"Press any key to continue.\";\ncd ..;\n\nprintf \"Start rebase hexoforblog;\\r\\n\"\ncd ./hexoforblog;\ngit checkout master;\ngit pull --rebase origin master;\ngit checkout master;\nprintf \"Finish Pull Rebase hexoforblog.\\r\\n\"\nread -p \"Press any key to continue.\";\ncd ..;\n\n```\n\n说明：\n\n1. printf 为打印函数，就像C语言那样用就好；\n2. read -p \"Press any key to continue.\"; 这个是接受输入，结合起来可以做更复杂的行为咯。\n3. 输出内容和我们在git bash里面操作是一致的。\n","source":"_posts/auto_rebase_git_repository.md","raw":"---\nlayout: post\ntitle: 自动同步git repository脚本\ncategory: git\ndate: 2016-11-25\ntags:\n- shell\n- git\n---\n# 自动同步git repository脚本\n\n由于平时偶尔需要merge不同分支代码到正式版本用于发布版本，merge前就需要先把各种分支代码更新到最新，接着再去做merge工作。\n\n经常使用的分支其实不算太多，不过仓库倒是有好几个。来来去去写命令行或者GUI操作多了觉得有点繁琐，就琢磨来写个脚本做吧。\n\nPS：偷懒是人类进步的动力...\n\n找了下资料，无外乎就是bat/sh脚本调用git cmd,之前写过bat命令，所以一开始是走这个思路的。\n\n不料在PATH上配置好了git bin的路径之后，使用git命令没问题了，不过pull rebase的时候提示publickey无效。可是我的publickey一直都在.ssh里面,不存在无效的问题...\n\n懒得纠结，换shell吧。\n\n参考资料：\n\n[请问如何写一个批处理自动打开 gitbash，然后自动执行一系列git命令（windows平台）？](https://www.zhihu.com/question/38962022)\n\n## Show Code\n\n使用shell就更好玩了，直接把git bash运行的命令扔到.sh文件里面就完事了。所以...如下：\n\n```shell\n\nprintf \"Start rebase 58HouseSearch. \\r\\n\"\ncd ./58HouseSearch;\ngit checkout master;\ngit pull --rebase origin master;\nprintf \"Finish Pull Rebase 58HouseSearch release and master.\\r\\n\"\nread -p \"Press any key to continue.\";\ncd ..;\n\nprintf \"Start rebase hexoforblog;\\r\\n\"\ncd ./hexoforblog;\ngit checkout master;\ngit pull --rebase origin master;\ngit checkout master;\nprintf \"Finish Pull Rebase hexoforblog.\\r\\n\"\nread -p \"Press any key to continue.\";\ncd ..;\n\n```\n\n说明：\n\n1. printf 为打印函数，就像C语言那样用就好；\n2. read -p \"Press any key to continue.\"; 这个是接受输入，结合起来可以做更复杂的行为咯。\n3. 输出内容和我们在git bash里面操作是一致的。\n","slug":"auto_rebase_git_repository","published":1,"updated":"2018-05-17T12:41:41.173Z","comments":1,"photos":[],"link":"","_id":"cjhal1fwf001mp6310jvgi4x1","content":"<h1 id=\"自动同步git-repository脚本\"><a href=\"#自动同步git-repository脚本\" class=\"headerlink\" title=\"自动同步git repository脚本\"></a>自动同步git repository脚本</h1><p>由于平时偶尔需要merge不同分支代码到正式版本用于发布版本，merge前就需要先把各种分支代码更新到最新，接着再去做merge工作。</p>\n<p>经常使用的分支其实不算太多，不过仓库倒是有好几个。来来去去写命令行或者GUI操作多了觉得有点繁琐，就琢磨来写个脚本做吧。</p>\n<p>PS：偷懒是人类进步的动力…</p>\n<p>找了下资料，无外乎就是bat/sh脚本调用git cmd,之前写过bat命令，所以一开始是走这个思路的。</p>\n<p>不料在PATH上配置好了git bin的路径之后，使用git命令没问题了，不过pull rebase的时候提示publickey无效。可是我的publickey一直都在.ssh里面,不存在无效的问题…</p>\n<p>懒得纠结，换shell吧。</p>\n<p>参考资料：</p>\n<p><a href=\"https://www.zhihu.com/question/38962022\" target=\"_blank\" rel=\"noopener\">请问如何写一个批处理自动打开 gitbash，然后自动执行一系列git命令（windows平台）？</a></p>\n<h2 id=\"Show-Code\"><a href=\"#Show-Code\" class=\"headerlink\" title=\"Show Code\"></a>Show Code</h2><p>使用shell就更好玩了，直接把git bash运行的命令扔到.sh文件里面就完事了。所以…如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">printf \"Start rebase 58HouseSearch. \\r\\n\"</span><br><span class=\"line\">cd ./58HouseSearch;</span><br><span class=\"line\">git checkout master;</span><br><span class=\"line\">git pull --rebase origin master;</span><br><span class=\"line\">printf \"Finish Pull Rebase 58HouseSearch release and master.\\r\\n\"</span><br><span class=\"line\">read -p \"Press any key to continue.\";</span><br><span class=\"line\">cd ..;</span><br><span class=\"line\"></span><br><span class=\"line\">printf \"Start rebase hexoforblog;\\r\\n\"</span><br><span class=\"line\">cd ./hexoforblog;</span><br><span class=\"line\">git checkout master;</span><br><span class=\"line\">git pull --rebase origin master;</span><br><span class=\"line\">git checkout master;</span><br><span class=\"line\">printf \"Finish Pull Rebase hexoforblog.\\r\\n\"</span><br><span class=\"line\">read -p \"Press any key to continue.\";</span><br><span class=\"line\">cd ..;</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ol>\n<li>printf 为打印函数，就像C语言那样用就好；</li>\n<li>read -p “Press any key to continue.”; 这个是接受输入，结合起来可以做更复杂的行为咯。</li>\n<li>输出内容和我们在git bash里面操作是一致的。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"自动同步git-repository脚本\"><a href=\"#自动同步git-repository脚本\" class=\"headerlink\" title=\"自动同步git repository脚本\"></a>自动同步git repository脚本</h1><p>由于平时偶尔需要merge不同分支代码到正式版本用于发布版本，merge前就需要先把各种分支代码更新到最新，接着再去做merge工作。</p>\n<p>经常使用的分支其实不算太多，不过仓库倒是有好几个。来来去去写命令行或者GUI操作多了觉得有点繁琐，就琢磨来写个脚本做吧。</p>\n<p>PS：偷懒是人类进步的动力…</p>\n<p>找了下资料，无外乎就是bat/sh脚本调用git cmd,之前写过bat命令，所以一开始是走这个思路的。</p>\n<p>不料在PATH上配置好了git bin的路径之后，使用git命令没问题了，不过pull rebase的时候提示publickey无效。可是我的publickey一直都在.ssh里面,不存在无效的问题…</p>\n<p>懒得纠结，换shell吧。</p>\n<p>参考资料：</p>\n<p><a href=\"https://www.zhihu.com/question/38962022\" target=\"_blank\" rel=\"noopener\">请问如何写一个批处理自动打开 gitbash，然后自动执行一系列git命令（windows平台）？</a></p>\n<h2 id=\"Show-Code\"><a href=\"#Show-Code\" class=\"headerlink\" title=\"Show Code\"></a>Show Code</h2><p>使用shell就更好玩了，直接把git bash运行的命令扔到.sh文件里面就完事了。所以…如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">printf \"Start rebase 58HouseSearch. \\r\\n\"</span><br><span class=\"line\">cd ./58HouseSearch;</span><br><span class=\"line\">git checkout master;</span><br><span class=\"line\">git pull --rebase origin master;</span><br><span class=\"line\">printf \"Finish Pull Rebase 58HouseSearch release and master.\\r\\n\"</span><br><span class=\"line\">read -p \"Press any key to continue.\";</span><br><span class=\"line\">cd ..;</span><br><span class=\"line\"></span><br><span class=\"line\">printf \"Start rebase hexoforblog;\\r\\n\"</span><br><span class=\"line\">cd ./hexoforblog;</span><br><span class=\"line\">git checkout master;</span><br><span class=\"line\">git pull --rebase origin master;</span><br><span class=\"line\">git checkout master;</span><br><span class=\"line\">printf \"Finish Pull Rebase hexoforblog.\\r\\n\"</span><br><span class=\"line\">read -p \"Press any key to continue.\";</span><br><span class=\"line\">cd ..;</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ol>\n<li>printf 为打印函数，就像C语言那样用就好；</li>\n<li>read -p “Press any key to continue.”; 这个是接受输入，结合起来可以做更复杂的行为咯。</li>\n<li>输出内容和我们在git bash里面操作是一致的。</li>\n</ol>\n"},{"layout":"post","title":"手把手教你用.NET Core写爬虫","date":"2016-12-03T16:00:00.000Z","_content":"# 手把手教你用.NET Core写爬虫\n\n## 写在前面\n\n自从上一个项目[58HouseSearch](https://github.com/liguobao/58HouseSearch)从.NET迁移到.NET core之后，磕磕碰碰磨蹭了一个月才正式上线到新版本。\n然后最近又开了个新坑，搞了个[Dy2018Crawler](http://codelover.win/)用来爬dy2018电影天堂上面的电影资源。这里也借机简单介绍一下如何基于.NET Core写一个爬虫。\nPS：如有偏错，敬请指明...\nPPS:该去电影院还是多去电影院，毕竟美人良时可无价。\n\n## 准备工作（.NET Core准备）\n\n首先，肯定是先安装.NET Core咯。下载及安装教程在这里：[.NET - Powerful Open Source Development](https://www.microsoft.com/net/core)。无论你是Windows、linux还是mac，统统可以玩。\n\n我这里的环境是：Windows10 + VS2015 community updata3 + .NET Core 1.1.0 SDK + .NET Core 1.0.1 tools Preview 2.\n\n理论上，只需要安装一下 .NET Core 1.1.0 SDK 即可开发.NET Core程序，至于用什么工具写代码都无关紧要了。\n\n安装好以上工具之后，在VS2015的新建项目就可以看到.NET Core的模板了。如下图：\n\n![123](https://www.microsoft.com/net/images/screenshots/FileNewProject.png)\n\n为了简单起见，我们创建的时候，直接选择VS .NET Core tools自带的模板。\n\n## 一个爬虫的自我修养\n\n### 分析网页\n\n写爬虫之前，我们首先要先去了解一下即将要爬取的网页数据组成。\n\n具体到网页的话，便是分析我们要抓取的数据在HTML里面是用什么标签抑或有什么样的标记，然后使用这个标记把数据从HTML中提取出来。在我这里的话，用的更多的是HTML标签的ID和CSS属性。\n\n以本文章想要爬取的dy2018.com为例,简单描述一下这个过程。dy2018.com主页如下图：\n\n![123](http://7xrayk.com1.z0.glb.clouddn.com/123.png)\n\n在chrome里面，按F12进入开发者模式，接着如下图使用鼠标选择对应页面数据，然后去分析页面HTML组成。\n\n![234](http://7xrayk.com1.z0.glb.clouddn.com/chromeF12_Select_HTML.png)\n\n接着我们开始分析页面数据:\n\n![123](http://7xrayk.com1.z0.glb.clouddn.com/chrome_dy2018_lstmovie_divclass.png)\n\n![123](http://7xrayk.com1.z0.glb.clouddn.com/chrome_dy2018_a.png)\n\n经过简单分析HTML，我们得到以下结论：\n\n1. www.dy2018.com首页的电影数据存储在一个class为co_content222的div标签里面\n\n2. 电影详情链接为a标签，标签显示文本就是电影名称，URL即详情URL\n\n那么总结下来，我们的工作就是：找到class='co_content222' 的div标签，从里面提取所有的a标签数据。\n\n### 开始写代码...\n\n之前在写[58HouseSearch项目迁移到asp.net core](https://zhuanlan.zhihu.com/p/22764927)简单提过AngleSharp库，一个基于.NET（C#）开发的专门为解析xHTML源码的DLL组件。\n\n1. AngleSharp主页在这里：[https://anglesharp.github.io/](https://anglesharp.github.io/)，\n\n2. 博客园文章：[解析HTML利器AngleSharp介绍](http://www.cnblogs.com/pandait/p/AngleSharp.html)，\n\n3. Nuget地址:[Nuget AngleSharp](https://www.nuget.org/packages/AngleSharp) 安装命令：Install-Package AngleSharp\n\n#### 获取电影列表数据\n\n``` csharp\n  private static HtmlParser htmlParser = new HtmlParser();\n\n   private  ConcurrentDictionary<string, MovieInfo> _cdMovieInfo = new ConcurrentDictionary<string, MovieInfo>();\n  private void AddToHotMovieList()\n        {\n            //此操作不阻塞当前其他操作，所以使用Task\n            // _cdMovieInfo 为线程安全字典，存储了当期所有的电影数据\n            Task.Factory.StartNew(()=> \n            {\n                try\n                {\n                    //通过URL获取HTML\n                    var htmlDoc = HTTPHelper.GetHTMLByURL(\"http://www.dy2018.com/\");\n                    //HTML 解析成 IDocument\n                    var dom = htmlParser.Parse(htmlDoc);\n                    //从dom中提取所有class='co_content222'的div标签\n                    //QuerySelectorAll方法接受 选择器语法 \n                    var lstDivInfo = dom.QuerySelectorAll(\"div.co_content222\");\n                    if (lstDivInfo != null)\n                    {\n                        //前三个DIV为新电影\n                        foreach (var divInfo in lstDivInfo.Take(3))\n                        {\n                            //获取div中所有的a标签且a标签中含有\"/i/\"的\n                            //Contains(\"/i/\") 条件的过滤是因为在测试中发现这一块div中的a标签有可能是广告链接\n                            divInfo.QuerySelectorAll(\"a\").Where(a => a.GetAttribute(\"href\").Contains(\"/i/\")).ToList().ForEach(\n                            a =>\n                            {\n                                //拼接成完整链接\n                                var onlineURL = \"http://www.dy2018.com\" + a.GetAttribute(\"href\");\n                                //看一下是否已经存在于现有数据中\n                                if (!_cdMovieInfo.ContainsKey(onlineURL))\n                                {\n                                    //获取电影的详细信息\n                                    MovieInfo movieInfo = FillMovieInfoFormWeb(a, onlineURL);\n                                    //下载链接不为空才添加到现有数据\n                                    if (movieInfo.XunLeiDownLoadURLList != null && movieInfo.XunLeiDownLoadURLList.Count != 0)\n                                    {\n                                         _cdMovieInfo.TryAdd(movieInfo.Dy2018OnlineUrl, movieInfo);\n                                    }\n                                }\n                            });\n                        }\n                    }\n\n                }\n                catch(Exception ex)\n                {\n\n                }\n            });\n        }\n\n```\n\n### 获取电影详细信息\n\n```csharp\n private MovieInfo FillMovieInfoFormWeb(AngleSharp.Dom.IElement a, string onlineURL)\n        {\n            var movieHTML = HTTPHelper.GetHTMLByURL(onlineURL);\n            var movieDoc = htmlParser.Parse(movieHTML);\n            //http://www.dy2018.com/i/97462.html 分析过程见上，不再赘述\n            //电影的详细介绍 在id为Zoom的标签中\n            var zoom = movieDoc.GetElementById(\"Zoom\");\n            //下载链接在 bgcolor='#fdfddf'的td中，有可能有多个链接\n            var lstDownLoadURL = movieDoc.QuerySelectorAll(\"[bgcolor='#fdfddf']\");\n            //发布时间 在class='updatetime'的span标签中\n            var updatetime = movieDoc.QuerySelector(\"span.updatetime\"); var pubDate = DateTime.Now;\n            if(updatetime!=null && !string.IsNullOrEmpty(updatetime.InnerHtml))\n            {\n                //内容带有“发布时间：”字样，replace成\"\"之后再去转换，转换失败不影响流程\n                DateTime.TryParse(updatetime.InnerHtml.Replace(\"发布时间：\", \"\"), out pubDate);\n            }\n\n            var movieInfo = new MovieInfo()\n            {\n                //InnerHtml中可能还包含font标签，做多一个Replace\n                MovieName = a.InnerHtml.Replace(\"<font color=\\\"#0c9000\\\">\",\"\").Replace(\"<font color=\\\"\t#0c9000\\\">\",\"\").Replace(\"</font>\", \"\"),\n                Dy2018OnlineUrl = onlineURL,\n                MovieIntro = zoom != null ? WebUtility.HtmlEncode(zoom.InnerHtml) : \"暂无介绍...\",//可能没有简介，虽然好像不怎么可能\n                XunLeiDownLoadURLList = lstDownLoadURL != null ?\n                lstDownLoadURL.Select(d => d.FirstElementChild.InnerHtml).ToList() : null,//可能没有下载链接\n                PubDate = pubDate,\n            };\n            return movieInfo;\n        }\n```\n\n### HTTPHelper\n\n这边有个小坑，dy2018网页编码格式是GB2312,.NET Core默认不支持GB2312，使用Encoding.GetEncoding(\"GB2312\")的时候会抛出异常。\n\n解决方案是手动安装System.Text.Encoding.CodePages包(Install-Package System.Text.Encoding.CodePages),\n\n然后在Starup.cs的Configure方法中加入Encoding.RegisterProvider(CodePagesEncodingProvider.Instance),接着就可以正常使用Encoding.GetEncoding(\"GB2312\")了。\n\n```csharp\nusing System;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Text;\n\nnamespace Dy2018Crawler\n{\n    public class HTTPHelper\n    {\n\n        public static HttpClient Client { get; } = new HttpClient();\n\n        public static string GetHTMLByURL(string url)\n        {\n            try\n            {\n                System.Net.WebRequest wRequest = System.Net.WebRequest.Create(url);\n                wRequest.ContentType = \"text/html; charset=gb2312\";\n\n                wRequest.Method = \"get\";\n                wRequest.UseDefaultCredentials = true;\n                // Get the response instance.\n                var task = wRequest.GetResponseAsync();\n                System.Net.WebResponse wResp = task.Result;\n                System.IO.Stream respStream = wResp.GetResponseStream();\n                //dy2018这个网站编码方式是GB2312,\n                using (System.IO.StreamReader reader = new System.IO.StreamReader(respStream, Encoding.GetEncoding(\"GB2312\")))\n                {\n                    return reader.ReadToEnd();\n                }\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(ex.ToString());\n                return string.Empty;\n            }\n        }\n       \n    }\n\n\n}\n\n```\n\n### 定时任务的实现\n\n定时任务我这里使用的是[Pomelo.AspNetCore.TimedJob](https://www.nuget.org/packages/Pomelo.AspNetCore.TimedJob/1.1.0-rtm-10026)。\n\nPomelo.AspNetCore.TimedJob是一个.NET Core实现的定时任务job库，支持毫秒级定时任务、从数据库读取定时配置、同步异步定时任务等功能。\n\n由.NET Core社区大神兼前微软MVP[AmamiyaYuuko](https://www.nuget.org/profiles/AmamiyaYuuko)(入职微软之后就卸任MVP...)开发维护，不过好像没有开源，回头问下看看能不能开源掉。\n\nnuget上有各种版本，按需自取。地址：https://www.nuget.org/packages/Pomelo.AspNetCore.TimedJob/1.1.0-rtm-10026\n\n作者自己的介绍文章：[Timed Job - Pomelo扩展包系列](http://www.1234.sh/post/pomelo-extensions-timed-jobs)\n\n### Startup.cs相关代码\n\n我这边使用的话，首先肯定是先安装对应的包：Install-Package Pomelo.AspNetCore.TimedJob -Pre\n\n然后在Startup.cs的ConfigureServices函数里面添加Service,在Configure函数里面Use一下。\n\n```csharp\n        // This method gets called by the runtime. Use this method to add services to the container.\n        public void ConfigureServices(IServiceCollection services)\n        {\n            // Add framework services.\n            services.AddMvc();\n            //Add TimedJob services\n            services.AddTimedJob();\n        }\n        \n         public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)\n        {\n            //使用TimedJob\n            app.UseTimedJob();\n\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n                app.UseBrowserLink();\n            }\n            else\n            {\n                app.UseExceptionHandler(\"/Home/Error\");\n            }\n\n            app.UseStaticFiles();\n\n            app.UseMvc(routes =>\n            {\n                routes.MapRoute(\n                    name: \"default\",\n                    template: \"{controller=Home}/{action=Index}/{id?}\");\n            });\n            Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);\n        }\n```\n\n#### Job相关代码\n\n接着新建一个类，明明为XXXJob.cs,引用命名空间using Pomelo.AspNetCore.TimedJob，XXXJob继承于Job，添加以下代码。\n\n```C#\n    public class AutoGetMovieListJob:Job\n    {\n        // Begin 起始时间；Interval执行时间间隔，单位是毫秒，建议使用以下格式，此处为3小时；SkipWhileExecuting是否等待上一个执行完成，true为等待；\n        [Invoke(Begin = \"2016-11-29 22:10\", Interval = 1000 * 3600*3, SkipWhileExecuting =true)]\n        public void Run()\n        {\n             //Job要执行的逻辑代码\n             \n            //LogHelper.Info(\"Start crawling\");\n            //AddToLatestMovieList(100);\n            //AddToHotMovieList();\n            //LogHelper.Info(\"Finish crawling\");\n        }\n   }\n\n```\n\n## 项目发布相关\n\n### 新增runtimes节点\n\n使用VS2015新建的模板工程，project.json配置默认是没有runtimes节点的.\n\n我们想要发布到非Windows平台的时候，需要手动配置一下此节点以便生成。\n\n```javascript\n\n    \"runtimes\": {\n    \"win7-x64\": {},\n    \"win7-x86\": {},\n    \"osx.10.10-x64\": {},\n    \"osx.10.11-x64\": {},\n    \"ubuntu.14.04-x64\": {}\n  }\n\n```\n\n### 删除/注释scripts节点\n\n生成时会调用node.js脚本构建前端代码，这个不能确保每个环境都有bower存在...注释完事。\n\n```javascript\n\n    //\"scripts\": {\n    //  \"prepublish\": [ \"bower install\", \"dotnet bundle\" ],\n    //  \"postpublish\": [ \"dotnet publish-iis --publish-folder %publish:OutputPath% --framework %publish:FullTargetFramework%\" ]\n    //},\n```\n\n### 删除/注释dependencies节点里面的type\n\n```javascript\n\"dependencies\": {\n    \"Microsoft.NETCore.App\": {\n      \"version\": \"1.1.0\"\n      //\"type\": \"platform\"\n    },\n```\n\nproject.json的相关配置说明可以看下这个官方文档：[Project.json-file](https://github.com/aspnet/Home/wiki/Project.json-file),\n或者张善友老师的文章[.NET Core系列 ： 2 、project.json 这葫芦里卖的什么药](http://www.cnblogs.com/shanyou/p/5693453.html)\n\n### 开发编译发布\n\n```sh\n//还原各种包文件\ndotnet restore;\n\n//发布到C:\\code\\website\\Dy2018Crawler文件夹\ndotnet publish -r ubuntu.14.04-x64 -c Release -o \"C:\\code\\website\\Dy2018Crawler\";\n\n```\n\n最后，照旧开源......以上代码都在下面找到：\n\nGayhub地址：[https://github.com/liguobao/Dy2018Crawler](https://github.com/liguobao/Dy2018Crawler)\n\n在线地址：[http://codelover.win/](http://codelover.win/)\n\nPS:回头写个爬片大家滋持不啊...\n","source":"_posts/how_to_make_crawler_base_netcore.md","raw":"---\nlayout: post\ntitle: 手把手教你用.NET Core写爬虫\ncategory: asp.net core\ndate: 2016-12-04 00:00:00\ntags:\n- asp.net core\n- crawler\n---\n# 手把手教你用.NET Core写爬虫\n\n## 写在前面\n\n自从上一个项目[58HouseSearch](https://github.com/liguobao/58HouseSearch)从.NET迁移到.NET core之后，磕磕碰碰磨蹭了一个月才正式上线到新版本。\n然后最近又开了个新坑，搞了个[Dy2018Crawler](http://codelover.win/)用来爬dy2018电影天堂上面的电影资源。这里也借机简单介绍一下如何基于.NET Core写一个爬虫。\nPS：如有偏错，敬请指明...\nPPS:该去电影院还是多去电影院，毕竟美人良时可无价。\n\n## 准备工作（.NET Core准备）\n\n首先，肯定是先安装.NET Core咯。下载及安装教程在这里：[.NET - Powerful Open Source Development](https://www.microsoft.com/net/core)。无论你是Windows、linux还是mac，统统可以玩。\n\n我这里的环境是：Windows10 + VS2015 community updata3 + .NET Core 1.1.0 SDK + .NET Core 1.0.1 tools Preview 2.\n\n理论上，只需要安装一下 .NET Core 1.1.0 SDK 即可开发.NET Core程序，至于用什么工具写代码都无关紧要了。\n\n安装好以上工具之后，在VS2015的新建项目就可以看到.NET Core的模板了。如下图：\n\n![123](https://www.microsoft.com/net/images/screenshots/FileNewProject.png)\n\n为了简单起见，我们创建的时候，直接选择VS .NET Core tools自带的模板。\n\n## 一个爬虫的自我修养\n\n### 分析网页\n\n写爬虫之前，我们首先要先去了解一下即将要爬取的网页数据组成。\n\n具体到网页的话，便是分析我们要抓取的数据在HTML里面是用什么标签抑或有什么样的标记，然后使用这个标记把数据从HTML中提取出来。在我这里的话，用的更多的是HTML标签的ID和CSS属性。\n\n以本文章想要爬取的dy2018.com为例,简单描述一下这个过程。dy2018.com主页如下图：\n\n![123](http://7xrayk.com1.z0.glb.clouddn.com/123.png)\n\n在chrome里面，按F12进入开发者模式，接着如下图使用鼠标选择对应页面数据，然后去分析页面HTML组成。\n\n![234](http://7xrayk.com1.z0.glb.clouddn.com/chromeF12_Select_HTML.png)\n\n接着我们开始分析页面数据:\n\n![123](http://7xrayk.com1.z0.glb.clouddn.com/chrome_dy2018_lstmovie_divclass.png)\n\n![123](http://7xrayk.com1.z0.glb.clouddn.com/chrome_dy2018_a.png)\n\n经过简单分析HTML，我们得到以下结论：\n\n1. www.dy2018.com首页的电影数据存储在一个class为co_content222的div标签里面\n\n2. 电影详情链接为a标签，标签显示文本就是电影名称，URL即详情URL\n\n那么总结下来，我们的工作就是：找到class='co_content222' 的div标签，从里面提取所有的a标签数据。\n\n### 开始写代码...\n\n之前在写[58HouseSearch项目迁移到asp.net core](https://zhuanlan.zhihu.com/p/22764927)简单提过AngleSharp库，一个基于.NET（C#）开发的专门为解析xHTML源码的DLL组件。\n\n1. AngleSharp主页在这里：[https://anglesharp.github.io/](https://anglesharp.github.io/)，\n\n2. 博客园文章：[解析HTML利器AngleSharp介绍](http://www.cnblogs.com/pandait/p/AngleSharp.html)，\n\n3. Nuget地址:[Nuget AngleSharp](https://www.nuget.org/packages/AngleSharp) 安装命令：Install-Package AngleSharp\n\n#### 获取电影列表数据\n\n``` csharp\n  private static HtmlParser htmlParser = new HtmlParser();\n\n   private  ConcurrentDictionary<string, MovieInfo> _cdMovieInfo = new ConcurrentDictionary<string, MovieInfo>();\n  private void AddToHotMovieList()\n        {\n            //此操作不阻塞当前其他操作，所以使用Task\n            // _cdMovieInfo 为线程安全字典，存储了当期所有的电影数据\n            Task.Factory.StartNew(()=> \n            {\n                try\n                {\n                    //通过URL获取HTML\n                    var htmlDoc = HTTPHelper.GetHTMLByURL(\"http://www.dy2018.com/\");\n                    //HTML 解析成 IDocument\n                    var dom = htmlParser.Parse(htmlDoc);\n                    //从dom中提取所有class='co_content222'的div标签\n                    //QuerySelectorAll方法接受 选择器语法 \n                    var lstDivInfo = dom.QuerySelectorAll(\"div.co_content222\");\n                    if (lstDivInfo != null)\n                    {\n                        //前三个DIV为新电影\n                        foreach (var divInfo in lstDivInfo.Take(3))\n                        {\n                            //获取div中所有的a标签且a标签中含有\"/i/\"的\n                            //Contains(\"/i/\") 条件的过滤是因为在测试中发现这一块div中的a标签有可能是广告链接\n                            divInfo.QuerySelectorAll(\"a\").Where(a => a.GetAttribute(\"href\").Contains(\"/i/\")).ToList().ForEach(\n                            a =>\n                            {\n                                //拼接成完整链接\n                                var onlineURL = \"http://www.dy2018.com\" + a.GetAttribute(\"href\");\n                                //看一下是否已经存在于现有数据中\n                                if (!_cdMovieInfo.ContainsKey(onlineURL))\n                                {\n                                    //获取电影的详细信息\n                                    MovieInfo movieInfo = FillMovieInfoFormWeb(a, onlineURL);\n                                    //下载链接不为空才添加到现有数据\n                                    if (movieInfo.XunLeiDownLoadURLList != null && movieInfo.XunLeiDownLoadURLList.Count != 0)\n                                    {\n                                         _cdMovieInfo.TryAdd(movieInfo.Dy2018OnlineUrl, movieInfo);\n                                    }\n                                }\n                            });\n                        }\n                    }\n\n                }\n                catch(Exception ex)\n                {\n\n                }\n            });\n        }\n\n```\n\n### 获取电影详细信息\n\n```csharp\n private MovieInfo FillMovieInfoFormWeb(AngleSharp.Dom.IElement a, string onlineURL)\n        {\n            var movieHTML = HTTPHelper.GetHTMLByURL(onlineURL);\n            var movieDoc = htmlParser.Parse(movieHTML);\n            //http://www.dy2018.com/i/97462.html 分析过程见上，不再赘述\n            //电影的详细介绍 在id为Zoom的标签中\n            var zoom = movieDoc.GetElementById(\"Zoom\");\n            //下载链接在 bgcolor='#fdfddf'的td中，有可能有多个链接\n            var lstDownLoadURL = movieDoc.QuerySelectorAll(\"[bgcolor='#fdfddf']\");\n            //发布时间 在class='updatetime'的span标签中\n            var updatetime = movieDoc.QuerySelector(\"span.updatetime\"); var pubDate = DateTime.Now;\n            if(updatetime!=null && !string.IsNullOrEmpty(updatetime.InnerHtml))\n            {\n                //内容带有“发布时间：”字样，replace成\"\"之后再去转换，转换失败不影响流程\n                DateTime.TryParse(updatetime.InnerHtml.Replace(\"发布时间：\", \"\"), out pubDate);\n            }\n\n            var movieInfo = new MovieInfo()\n            {\n                //InnerHtml中可能还包含font标签，做多一个Replace\n                MovieName = a.InnerHtml.Replace(\"<font color=\\\"#0c9000\\\">\",\"\").Replace(\"<font color=\\\"\t#0c9000\\\">\",\"\").Replace(\"</font>\", \"\"),\n                Dy2018OnlineUrl = onlineURL,\n                MovieIntro = zoom != null ? WebUtility.HtmlEncode(zoom.InnerHtml) : \"暂无介绍...\",//可能没有简介，虽然好像不怎么可能\n                XunLeiDownLoadURLList = lstDownLoadURL != null ?\n                lstDownLoadURL.Select(d => d.FirstElementChild.InnerHtml).ToList() : null,//可能没有下载链接\n                PubDate = pubDate,\n            };\n            return movieInfo;\n        }\n```\n\n### HTTPHelper\n\n这边有个小坑，dy2018网页编码格式是GB2312,.NET Core默认不支持GB2312，使用Encoding.GetEncoding(\"GB2312\")的时候会抛出异常。\n\n解决方案是手动安装System.Text.Encoding.CodePages包(Install-Package System.Text.Encoding.CodePages),\n\n然后在Starup.cs的Configure方法中加入Encoding.RegisterProvider(CodePagesEncodingProvider.Instance),接着就可以正常使用Encoding.GetEncoding(\"GB2312\")了。\n\n```csharp\nusing System;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Text;\n\nnamespace Dy2018Crawler\n{\n    public class HTTPHelper\n    {\n\n        public static HttpClient Client { get; } = new HttpClient();\n\n        public static string GetHTMLByURL(string url)\n        {\n            try\n            {\n                System.Net.WebRequest wRequest = System.Net.WebRequest.Create(url);\n                wRequest.ContentType = \"text/html; charset=gb2312\";\n\n                wRequest.Method = \"get\";\n                wRequest.UseDefaultCredentials = true;\n                // Get the response instance.\n                var task = wRequest.GetResponseAsync();\n                System.Net.WebResponse wResp = task.Result;\n                System.IO.Stream respStream = wResp.GetResponseStream();\n                //dy2018这个网站编码方式是GB2312,\n                using (System.IO.StreamReader reader = new System.IO.StreamReader(respStream, Encoding.GetEncoding(\"GB2312\")))\n                {\n                    return reader.ReadToEnd();\n                }\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(ex.ToString());\n                return string.Empty;\n            }\n        }\n       \n    }\n\n\n}\n\n```\n\n### 定时任务的实现\n\n定时任务我这里使用的是[Pomelo.AspNetCore.TimedJob](https://www.nuget.org/packages/Pomelo.AspNetCore.TimedJob/1.1.0-rtm-10026)。\n\nPomelo.AspNetCore.TimedJob是一个.NET Core实现的定时任务job库，支持毫秒级定时任务、从数据库读取定时配置、同步异步定时任务等功能。\n\n由.NET Core社区大神兼前微软MVP[AmamiyaYuuko](https://www.nuget.org/profiles/AmamiyaYuuko)(入职微软之后就卸任MVP...)开发维护，不过好像没有开源，回头问下看看能不能开源掉。\n\nnuget上有各种版本，按需自取。地址：https://www.nuget.org/packages/Pomelo.AspNetCore.TimedJob/1.1.0-rtm-10026\n\n作者自己的介绍文章：[Timed Job - Pomelo扩展包系列](http://www.1234.sh/post/pomelo-extensions-timed-jobs)\n\n### Startup.cs相关代码\n\n我这边使用的话，首先肯定是先安装对应的包：Install-Package Pomelo.AspNetCore.TimedJob -Pre\n\n然后在Startup.cs的ConfigureServices函数里面添加Service,在Configure函数里面Use一下。\n\n```csharp\n        // This method gets called by the runtime. Use this method to add services to the container.\n        public void ConfigureServices(IServiceCollection services)\n        {\n            // Add framework services.\n            services.AddMvc();\n            //Add TimedJob services\n            services.AddTimedJob();\n        }\n        \n         public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)\n        {\n            //使用TimedJob\n            app.UseTimedJob();\n\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n                app.UseBrowserLink();\n            }\n            else\n            {\n                app.UseExceptionHandler(\"/Home/Error\");\n            }\n\n            app.UseStaticFiles();\n\n            app.UseMvc(routes =>\n            {\n                routes.MapRoute(\n                    name: \"default\",\n                    template: \"{controller=Home}/{action=Index}/{id?}\");\n            });\n            Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);\n        }\n```\n\n#### Job相关代码\n\n接着新建一个类，明明为XXXJob.cs,引用命名空间using Pomelo.AspNetCore.TimedJob，XXXJob继承于Job，添加以下代码。\n\n```C#\n    public class AutoGetMovieListJob:Job\n    {\n        // Begin 起始时间；Interval执行时间间隔，单位是毫秒，建议使用以下格式，此处为3小时；SkipWhileExecuting是否等待上一个执行完成，true为等待；\n        [Invoke(Begin = \"2016-11-29 22:10\", Interval = 1000 * 3600*3, SkipWhileExecuting =true)]\n        public void Run()\n        {\n             //Job要执行的逻辑代码\n             \n            //LogHelper.Info(\"Start crawling\");\n            //AddToLatestMovieList(100);\n            //AddToHotMovieList();\n            //LogHelper.Info(\"Finish crawling\");\n        }\n   }\n\n```\n\n## 项目发布相关\n\n### 新增runtimes节点\n\n使用VS2015新建的模板工程，project.json配置默认是没有runtimes节点的.\n\n我们想要发布到非Windows平台的时候，需要手动配置一下此节点以便生成。\n\n```javascript\n\n    \"runtimes\": {\n    \"win7-x64\": {},\n    \"win7-x86\": {},\n    \"osx.10.10-x64\": {},\n    \"osx.10.11-x64\": {},\n    \"ubuntu.14.04-x64\": {}\n  }\n\n```\n\n### 删除/注释scripts节点\n\n生成时会调用node.js脚本构建前端代码，这个不能确保每个环境都有bower存在...注释完事。\n\n```javascript\n\n    //\"scripts\": {\n    //  \"prepublish\": [ \"bower install\", \"dotnet bundle\" ],\n    //  \"postpublish\": [ \"dotnet publish-iis --publish-folder %publish:OutputPath% --framework %publish:FullTargetFramework%\" ]\n    //},\n```\n\n### 删除/注释dependencies节点里面的type\n\n```javascript\n\"dependencies\": {\n    \"Microsoft.NETCore.App\": {\n      \"version\": \"1.1.0\"\n      //\"type\": \"platform\"\n    },\n```\n\nproject.json的相关配置说明可以看下这个官方文档：[Project.json-file](https://github.com/aspnet/Home/wiki/Project.json-file),\n或者张善友老师的文章[.NET Core系列 ： 2 、project.json 这葫芦里卖的什么药](http://www.cnblogs.com/shanyou/p/5693453.html)\n\n### 开发编译发布\n\n```sh\n//还原各种包文件\ndotnet restore;\n\n//发布到C:\\code\\website\\Dy2018Crawler文件夹\ndotnet publish -r ubuntu.14.04-x64 -c Release -o \"C:\\code\\website\\Dy2018Crawler\";\n\n```\n\n最后，照旧开源......以上代码都在下面找到：\n\nGayhub地址：[https://github.com/liguobao/Dy2018Crawler](https://github.com/liguobao/Dy2018Crawler)\n\n在线地址：[http://codelover.win/](http://codelover.win/)\n\nPS:回头写个爬片大家滋持不啊...\n","slug":"how_to_make_crawler_base_netcore","published":1,"updated":"2018-05-17T12:41:41.173Z","comments":1,"photos":[],"link":"","_id":"cjhal1fwg001pp631udgibqc6","content":"<h1 id=\"手把手教你用-NET-Core写爬虫\"><a href=\"#手把手教你用-NET-Core写爬虫\" class=\"headerlink\" title=\"手把手教你用.NET Core写爬虫\"></a>手把手教你用.NET Core写爬虫</h1><h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>自从上一个项目<a href=\"https://github.com/liguobao/58HouseSearch\" target=\"_blank\" rel=\"noopener\">58HouseSearch</a>从.NET迁移到.NET core之后，磕磕碰碰磨蹭了一个月才正式上线到新版本。<br>然后最近又开了个新坑，搞了个<a href=\"http://codelover.win/\" target=\"_blank\" rel=\"noopener\">Dy2018Crawler</a>用来爬dy2018电影天堂上面的电影资源。这里也借机简单介绍一下如何基于.NET Core写一个爬虫。<br>PS：如有偏错，敬请指明…<br>PPS:该去电影院还是多去电影院，毕竟美人良时可无价。</p>\n<h2 id=\"准备工作（-NET-Core准备）\"><a href=\"#准备工作（-NET-Core准备）\" class=\"headerlink\" title=\"准备工作（.NET Core准备）\"></a>准备工作（.NET Core准备）</h2><p>首先，肯定是先安装.NET Core咯。下载及安装教程在这里：<a href=\"https://www.microsoft.com/net/core\" target=\"_blank\" rel=\"noopener\">.NET - Powerful Open Source Development</a>。无论你是Windows、linux还是mac，统统可以玩。</p>\n<p>我这里的环境是：Windows10 + VS2015 community updata3 + .NET Core 1.1.0 SDK + .NET Core 1.0.1 tools Preview 2.</p>\n<p>理论上，只需要安装一下 .NET Core 1.1.0 SDK 即可开发.NET Core程序，至于用什么工具写代码都无关紧要了。</p>\n<p>安装好以上工具之后，在VS2015的新建项目就可以看到.NET Core的模板了。如下图：</p>\n<p><img src=\"https://www.microsoft.com/net/images/screenshots/FileNewProject.png\" alt=\"123\"></p>\n<p>为了简单起见，我们创建的时候，直接选择VS .NET Core tools自带的模板。</p>\n<h2 id=\"一个爬虫的自我修养\"><a href=\"#一个爬虫的自我修养\" class=\"headerlink\" title=\"一个爬虫的自我修养\"></a>一个爬虫的自我修养</h2><h3 id=\"分析网页\"><a href=\"#分析网页\" class=\"headerlink\" title=\"分析网页\"></a>分析网页</h3><p>写爬虫之前，我们首先要先去了解一下即将要爬取的网页数据组成。</p>\n<p>具体到网页的话，便是分析我们要抓取的数据在HTML里面是用什么标签抑或有什么样的标记，然后使用这个标记把数据从HTML中提取出来。在我这里的话，用的更多的是HTML标签的ID和CSS属性。</p>\n<p>以本文章想要爬取的dy2018.com为例,简单描述一下这个过程。dy2018.com主页如下图：</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/123.png\" alt=\"123\"></p>\n<p>在chrome里面，按F12进入开发者模式，接着如下图使用鼠标选择对应页面数据，然后去分析页面HTML组成。</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/chromeF12_Select_HTML.png\" alt=\"234\"></p>\n<p>接着我们开始分析页面数据:</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/chrome_dy2018_lstmovie_divclass.png\" alt=\"123\"></p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/chrome_dy2018_a.png\" alt=\"123\"></p>\n<p>经过简单分析HTML，我们得到以下结论：</p>\n<ol>\n<li><p><a href=\"http://www.dy2018.com首页的电影数据存储在一个class为co_content222的div标签里面\" target=\"_blank\" rel=\"noopener\">www.dy2018.com首页的电影数据存储在一个class为co_content222的div标签里面</a></p>\n</li>\n<li><p>电影详情链接为a标签，标签显示文本就是电影名称，URL即详情URL</p>\n</li>\n</ol>\n<p>那么总结下来，我们的工作就是：找到class=’co_content222’ 的div标签，从里面提取所有的a标签数据。</p>\n<h3 id=\"开始写代码…\"><a href=\"#开始写代码…\" class=\"headerlink\" title=\"开始写代码…\"></a>开始写代码…</h3><p>之前在写<a href=\"https://zhuanlan.zhihu.com/p/22764927\" target=\"_blank\" rel=\"noopener\">58HouseSearch项目迁移到asp.net core</a>简单提过AngleSharp库，一个基于.NET（C#）开发的专门为解析xHTML源码的DLL组件。</p>\n<ol>\n<li><p>AngleSharp主页在这里：<a href=\"https://anglesharp.github.io/\" target=\"_blank\" rel=\"noopener\">https://anglesharp.github.io/</a>，</p>\n</li>\n<li><p>博客园文章：<a href=\"http://www.cnblogs.com/pandait/p/AngleSharp.html\" target=\"_blank\" rel=\"noopener\">解析HTML利器AngleSharp介绍</a>，</p>\n</li>\n<li><p>Nuget地址:<a href=\"https://www.nuget.org/packages/AngleSharp\" target=\"_blank\" rel=\"noopener\">Nuget AngleSharp</a> 安装命令：Install-Package AngleSharp</p>\n</li>\n</ol>\n<h4 id=\"获取电影列表数据\"><a href=\"#获取电影列表数据\" class=\"headerlink\" title=\"获取电影列表数据\"></a>获取电影列表数据</h4><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> HtmlParser htmlParser = <span class=\"keyword\">new</span> HtmlParser();</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">private</span>  ConcurrentDictionary&lt;<span class=\"keyword\">string</span>, MovieInfo&gt; _cdMovieInfo = <span class=\"keyword\">new</span> ConcurrentDictionary&lt;<span class=\"keyword\">string</span>, MovieInfo&gt;();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">AddToHotMovieList</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">//此操作不阻塞当前其他操作，所以使用Task</span></span><br><span class=\"line\">          <span class=\"comment\">// _cdMovieInfo 为线程安全字典，存储了当期所有的电影数据</span></span><br><span class=\"line\">          Task.Factory.StartNew(()=&gt; </span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"keyword\">try</span></span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  <span class=\"comment\">//通过URL获取HTML</span></span><br><span class=\"line\">                  <span class=\"keyword\">var</span> htmlDoc = HTTPHelper.GetHTMLByURL(<span class=\"string\">\"http://www.dy2018.com/\"</span>);</span><br><span class=\"line\">                  <span class=\"comment\">//HTML 解析成 IDocument</span></span><br><span class=\"line\">                  <span class=\"keyword\">var</span> dom = htmlParser.Parse(htmlDoc);</span><br><span class=\"line\">                  <span class=\"comment\">//从dom中提取所有class='co_content222'的div标签</span></span><br><span class=\"line\">                  <span class=\"comment\">//QuerySelectorAll方法接受 选择器语法 </span></span><br><span class=\"line\">                  <span class=\"keyword\">var</span> lstDivInfo = dom.QuerySelectorAll(<span class=\"string\">\"div.co_content222\"</span>);</span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (lstDivInfo != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                      <span class=\"comment\">//前三个DIV为新电影</span></span><br><span class=\"line\">                      <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> divInfo <span class=\"keyword\">in</span> lstDivInfo.Take(<span class=\"number\">3</span>))</span><br><span class=\"line\">                      &#123;</span><br><span class=\"line\">                          <span class=\"comment\">//获取div中所有的a标签且a标签中含有\"/i/\"的</span></span><br><span class=\"line\">                          <span class=\"comment\">//Contains(\"/i/\") 条件的过滤是因为在测试中发现这一块div中的a标签有可能是广告链接</span></span><br><span class=\"line\">                          divInfo.QuerySelectorAll(<span class=\"string\">\"a\"</span>).Where(a =&gt; a.GetAttribute(<span class=\"string\">\"href\"</span>).Contains(<span class=\"string\">\"/i/\"</span>)).ToList().ForEach(</span><br><span class=\"line\">                          a =&gt;</span><br><span class=\"line\">                          &#123;</span><br><span class=\"line\">                              <span class=\"comment\">//拼接成完整链接</span></span><br><span class=\"line\">                              <span class=\"keyword\">var</span> onlineURL = <span class=\"string\">\"http://www.dy2018.com\"</span> + a.GetAttribute(<span class=\"string\">\"href\"</span>);</span><br><span class=\"line\">                              <span class=\"comment\">//看一下是否已经存在于现有数据中</span></span><br><span class=\"line\">                              <span class=\"keyword\">if</span> (!_cdMovieInfo.ContainsKey(onlineURL))</span><br><span class=\"line\">                              &#123;</span><br><span class=\"line\">                                  <span class=\"comment\">//获取电影的详细信息</span></span><br><span class=\"line\">                                  MovieInfo movieInfo = FillMovieInfoFormWeb(a, onlineURL);</span><br><span class=\"line\">                                  <span class=\"comment\">//下载链接不为空才添加到现有数据</span></span><br><span class=\"line\">                                  <span class=\"keyword\">if</span> (movieInfo.XunLeiDownLoadURLList != <span class=\"literal\">null</span> &amp;&amp; movieInfo.XunLeiDownLoadURLList.Count != <span class=\"number\">0</span>)</span><br><span class=\"line\">                                  &#123;</span><br><span class=\"line\">                                       _cdMovieInfo.TryAdd(movieInfo.Dy2018OnlineUrl, movieInfo);</span><br><span class=\"line\">                                  &#125;</span><br><span class=\"line\">                              &#125;</span><br><span class=\"line\">                          &#125;);</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">catch</span>(Exception ex)</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取电影详细信息\"><a href=\"#获取电影详细信息\" class=\"headerlink\" title=\"获取电影详细信息\"></a>获取电影详细信息</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> MovieInfo <span class=\"title\">FillMovieInfoFormWeb</span>(<span class=\"params\">AngleSharp.Dom.IElement a, <span class=\"keyword\">string</span> onlineURL</span>)</span></span><br><span class=\"line\"><span class=\"function\">       </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">var</span> movieHTML = HTTPHelper.GetHTMLByURL(onlineURL);</span><br><span class=\"line\">           <span class=\"keyword\">var</span> movieDoc = htmlParser.Parse(movieHTML);</span><br><span class=\"line\">           <span class=\"comment\">//http://www.dy2018.com/i/97462.html 分析过程见上，不再赘述</span></span><br><span class=\"line\">           <span class=\"comment\">//电影的详细介绍 在id为Zoom的标签中</span></span><br><span class=\"line\">           <span class=\"keyword\">var</span> zoom = movieDoc.GetElementById(<span class=\"string\">\"Zoom\"</span>);</span><br><span class=\"line\">           <span class=\"comment\">//下载链接在 bgcolor='#fdfddf'的td中，有可能有多个链接</span></span><br><span class=\"line\">           <span class=\"keyword\">var</span> lstDownLoadURL = movieDoc.QuerySelectorAll(<span class=\"string\">\"[bgcolor='#fdfddf']\"</span>);</span><br><span class=\"line\">           <span class=\"comment\">//发布时间 在class='updatetime'的span标签中</span></span><br><span class=\"line\">           <span class=\"keyword\">var</span> updatetime = movieDoc.QuerySelector(<span class=\"string\">\"span.updatetime\"</span>); <span class=\"keyword\">var</span> pubDate = DateTime.Now;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(updatetime!=<span class=\"literal\">null</span> &amp;&amp; !<span class=\"keyword\">string</span>.IsNullOrEmpty(updatetime.InnerHtml))</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"comment\">//内容带有“发布时间：”字样，replace成\"\"之后再去转换，转换失败不影响流程</span></span><br><span class=\"line\">               DateTime.TryParse(updatetime.InnerHtml.Replace(<span class=\"string\">\"发布时间：\"</span>, <span class=\"string\">\"\"</span>), <span class=\"keyword\">out</span> pubDate);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">var</span> movieInfo = <span class=\"keyword\">new</span> MovieInfo()</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"comment\">//InnerHtml中可能还包含font标签，做多一个Replace</span></span><br><span class=\"line\">               MovieName = a.InnerHtml.Replace(<span class=\"string\">\"&lt;font color=\\\"#0c9000\\\"&gt;\"</span>,<span class=\"string\">\"\"</span>).Replace(<span class=\"string\">\"&lt;font color=\\\"\t#0c9000\\\"&gt;\"</span>,<span class=\"string\">\"\"</span>).Replace(<span class=\"string\">\"&lt;/font&gt;\"</span>, <span class=\"string\">\"\"</span>),</span><br><span class=\"line\">               Dy2018OnlineUrl = onlineURL,</span><br><span class=\"line\">               MovieIntro = zoom != <span class=\"literal\">null</span> ? WebUtility.HtmlEncode(zoom.InnerHtml) : <span class=\"string\">\"暂无介绍...\"</span>,<span class=\"comment\">//可能没有简介，虽然好像不怎么可能</span></span><br><span class=\"line\">               XunLeiDownLoadURLList = lstDownLoadURL != <span class=\"literal\">null</span> ?</span><br><span class=\"line\">               lstDownLoadURL.Select(d =&gt; d.FirstElementChild.InnerHtml).ToList() : <span class=\"literal\">null</span>,<span class=\"comment\">//可能没有下载链接</span></span><br><span class=\"line\">               PubDate = pubDate,</span><br><span class=\"line\">           &#125;;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> movieInfo;</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"HTTPHelper\"><a href=\"#HTTPHelper\" class=\"headerlink\" title=\"HTTPHelper\"></a>HTTPHelper</h3><p>这边有个小坑，dy2018网页编码格式是GB2312,.NET Core默认不支持GB2312，使用Encoding.GetEncoding(“GB2312”)的时候会抛出异常。</p>\n<p>解决方案是手动安装System.Text.Encoding.CodePages包(Install-Package System.Text.Encoding.CodePages),</p>\n<p>然后在Starup.cs的Configure方法中加入Encoding.RegisterProvider(CodePagesEncodingProvider.Instance),接着就可以正常使用Encoding.GetEncoding(“GB2312”)了。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Net.Http;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Net.Http.Headers;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Dy2018Crawler</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HTTPHelper</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> HttpClient Client &#123; <span class=\"keyword\">get</span>; &#125; = <span class=\"keyword\">new</span> HttpClient();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">GetHTMLByURL</span>(<span class=\"params\"><span class=\"keyword\">string</span> url</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                System.Net.WebRequest wRequest = System.Net.WebRequest.Create(url);</span><br><span class=\"line\">                wRequest.ContentType = <span class=\"string\">\"text/html; charset=gb2312\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                wRequest.Method = <span class=\"string\">\"get\"</span>;</span><br><span class=\"line\">                wRequest.UseDefaultCredentials = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"comment\">// Get the response instance.</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> task = wRequest.GetResponseAsync();</span><br><span class=\"line\">                System.Net.WebResponse wResp = task.Result;</span><br><span class=\"line\">                System.IO.Stream respStream = wResp.GetResponseStream();</span><br><span class=\"line\">                <span class=\"comment\">//dy2018这个网站编码方式是GB2312,</span></span><br><span class=\"line\">                <span class=\"keyword\">using</span> (System.IO.StreamReader reader = <span class=\"keyword\">new</span> System.IO.StreamReader(respStream, Encoding.GetEncoding(<span class=\"string\">\"GB2312\"</span>)))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> reader.ReadToEnd();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> (Exception ex)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Console.WriteLine(ex.ToString());</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"定时任务的实现\"><a href=\"#定时任务的实现\" class=\"headerlink\" title=\"定时任务的实现\"></a>定时任务的实现</h3><p>定时任务我这里使用的是<a href=\"https://www.nuget.org/packages/Pomelo.AspNetCore.TimedJob/1.1.0-rtm-10026\" target=\"_blank\" rel=\"noopener\">Pomelo.AspNetCore.TimedJob</a>。</p>\n<p>Pomelo.AspNetCore.TimedJob是一个.NET Core实现的定时任务job库，支持毫秒级定时任务、从数据库读取定时配置、同步异步定时任务等功能。</p>\n<p>由.NET Core社区大神兼前微软MVP<a href=\"https://www.nuget.org/profiles/AmamiyaYuuko\" target=\"_blank\" rel=\"noopener\">AmamiyaYuuko</a>(入职微软之后就卸任MVP…)开发维护，不过好像没有开源，回头问下看看能不能开源掉。</p>\n<p>nuget上有各种版本，按需自取。地址：<a href=\"https://www.nuget.org/packages/Pomelo.AspNetCore.TimedJob/1.1.0-rtm-10026\" target=\"_blank\" rel=\"noopener\">https://www.nuget.org/packages/Pomelo.AspNetCore.TimedJob/1.1.0-rtm-10026</a></p>\n<p>作者自己的介绍文章：<a href=\"http://www.1234.sh/post/pomelo-extensions-timed-jobs\" target=\"_blank\" rel=\"noopener\">Timed Job - Pomelo扩展包系列</a></p>\n<h3 id=\"Startup-cs相关代码\"><a href=\"#Startup-cs相关代码\" class=\"headerlink\" title=\"Startup.cs相关代码\"></a>Startup.cs相关代码</h3><p>我这边使用的话，首先肯定是先安装对应的包：Install-Package Pomelo.AspNetCore.TimedJob -Pre</p>\n<p>然后在Startup.cs的ConfigureServices函数里面添加Service,在Configure函数里面Use一下。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This method gets called by the runtime. Use this method to add services to the container.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Add framework services.</span></span><br><span class=\"line\">    services.AddMvc();</span><br><span class=\"line\">    <span class=\"comment\">//Add TimedJob services</span></span><br><span class=\"line\">    services.AddTimedJob();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//使用TimedJob</span></span><br><span class=\"line\">    app.UseTimedJob();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (env.IsDevelopment())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        app.UseDeveloperExceptionPage();</span><br><span class=\"line\">        app.UseBrowserLink();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        app.UseExceptionHandler(<span class=\"string\">\"/Home/Error\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseStaticFiles();</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseMvc(routes =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        routes.MapRoute(</span><br><span class=\"line\">            name: <span class=\"string\">\"default\"</span>,</span><br><span class=\"line\">            template: <span class=\"string\">\"&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Job相关代码\"><a href=\"#Job相关代码\" class=\"headerlink\" title=\"Job相关代码\"></a>Job相关代码</h4><p>接着新建一个类，明明为XXXJob.cs,引用命名空间using Pomelo.AspNetCore.TimedJob，XXXJob继承于Job，添加以下代码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> public class AutoGetMovieListJob:Job</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">     // Begin 起始时间；Interval执行时间间隔，单位是毫秒，建议使用以下格式，此处为3小时；SkipWhileExecuting是否等待上一个执行完成，true为等待；</span><br><span class=\"line\">     [Invoke(Begin = &quot;2016-11-29 22:10&quot;, Interval = 1000 * 3600*3, SkipWhileExecuting =true)]</span><br><span class=\"line\">     public void Run()</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">          //Job要执行的逻辑代码</span><br><span class=\"line\">          </span><br><span class=\"line\">         //LogHelper.Info(&quot;Start crawling&quot;);</span><br><span class=\"line\">         //AddToLatestMovieList(100);</span><br><span class=\"line\">         //AddToHotMovieList();</span><br><span class=\"line\">         //LogHelper.Info(&quot;Finish crawling&quot;);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"项目发布相关\"><a href=\"#项目发布相关\" class=\"headerlink\" title=\"项目发布相关\"></a>项目发布相关</h2><h3 id=\"新增runtimes节点\"><a href=\"#新增runtimes节点\" class=\"headerlink\" title=\"新增runtimes节点\"></a>新增runtimes节点</h3><p>使用VS2015新建的模板工程，project.json配置默认是没有runtimes节点的.</p>\n<p>我们想要发布到非Windows平台的时候，需要手动配置一下此节点以便生成。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">\"runtimes\"</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"win7-x64\"</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"string\">\"win7-x86\"</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"string\">\"osx.10.10-x64\"</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"string\">\"osx.10.11-x64\"</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"string\">\"ubuntu.14.04-x64\"</span>: &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除-注释scripts节点\"><a href=\"#删除-注释scripts节点\" class=\"headerlink\" title=\"删除/注释scripts节点\"></a>删除/注释scripts节点</h3><p>生成时会调用node.js脚本构建前端代码，这个不能确保每个环境都有bower存在…注释完事。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\"scripts\": &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//  \"prepublish\": [ \"bower install\", \"dotnet bundle\" ],</span></span><br><span class=\"line\"><span class=\"comment\">//  \"postpublish\": [ \"dotnet publish-iis --publish-folder %publish:OutputPath% --framework %publish:FullTargetFramework%\" ]</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;,</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"删除-注释dependencies节点里面的type\"><a href=\"#删除-注释dependencies节点里面的type\" class=\"headerlink\" title=\"删除/注释dependencies节点里面的type\"></a>删除/注释dependencies节点里面的type</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"Microsoft.NETCore.App\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.1.0\"</span></span><br><span class=\"line\">      <span class=\"comment\">//\"type\": \"platform\"</span></span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n<p>project.json的相关配置说明可以看下这个官方文档：<a href=\"https://github.com/aspnet/Home/wiki/Project.json-file\" target=\"_blank\" rel=\"noopener\">Project.json-file</a>,<br>或者张善友老师的文章<a href=\"http://www.cnblogs.com/shanyou/p/5693453.html\" target=\"_blank\" rel=\"noopener\">.NET Core系列 ： 2 、project.json 这葫芦里卖的什么药</a></p>\n<h3 id=\"开发编译发布\"><a href=\"#开发编译发布\" class=\"headerlink\" title=\"开发编译发布\"></a>开发编译发布</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//还原各种包文件</span><br><span class=\"line\">dotnet restore;</span><br><span class=\"line\"></span><br><span class=\"line\">//发布到C:\\code\\website\\Dy2018Crawler文件夹</span><br><span class=\"line\">dotnet publish -r ubuntu.14.04-x64 -c Release -o <span class=\"string\">\"C:\\code\\website\\Dy2018Crawler\"</span>;</span><br></pre></td></tr></table></figure>\n<p>最后，照旧开源……以上代码都在下面找到：</p>\n<p>Gayhub地址：<a href=\"https://github.com/liguobao/Dy2018Crawler\" target=\"_blank\" rel=\"noopener\">https://github.com/liguobao/Dy2018Crawler</a></p>\n<p>在线地址：<a href=\"http://codelover.win/\" target=\"_blank\" rel=\"noopener\">http://codelover.win/</a></p>\n<p>PS:回头写个爬片大家滋持不啊…</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"手把手教你用-NET-Core写爬虫\"><a href=\"#手把手教你用-NET-Core写爬虫\" class=\"headerlink\" title=\"手把手教你用.NET Core写爬虫\"></a>手把手教你用.NET Core写爬虫</h1><h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>自从上一个项目<a href=\"https://github.com/liguobao/58HouseSearch\" target=\"_blank\" rel=\"noopener\">58HouseSearch</a>从.NET迁移到.NET core之后，磕磕碰碰磨蹭了一个月才正式上线到新版本。<br>然后最近又开了个新坑，搞了个<a href=\"http://codelover.win/\" target=\"_blank\" rel=\"noopener\">Dy2018Crawler</a>用来爬dy2018电影天堂上面的电影资源。这里也借机简单介绍一下如何基于.NET Core写一个爬虫。<br>PS：如有偏错，敬请指明…<br>PPS:该去电影院还是多去电影院，毕竟美人良时可无价。</p>\n<h2 id=\"准备工作（-NET-Core准备）\"><a href=\"#准备工作（-NET-Core准备）\" class=\"headerlink\" title=\"准备工作（.NET Core准备）\"></a>准备工作（.NET Core准备）</h2><p>首先，肯定是先安装.NET Core咯。下载及安装教程在这里：<a href=\"https://www.microsoft.com/net/core\" target=\"_blank\" rel=\"noopener\">.NET - Powerful Open Source Development</a>。无论你是Windows、linux还是mac，统统可以玩。</p>\n<p>我这里的环境是：Windows10 + VS2015 community updata3 + .NET Core 1.1.0 SDK + .NET Core 1.0.1 tools Preview 2.</p>\n<p>理论上，只需要安装一下 .NET Core 1.1.0 SDK 即可开发.NET Core程序，至于用什么工具写代码都无关紧要了。</p>\n<p>安装好以上工具之后，在VS2015的新建项目就可以看到.NET Core的模板了。如下图：</p>\n<p><img src=\"https://www.microsoft.com/net/images/screenshots/FileNewProject.png\" alt=\"123\"></p>\n<p>为了简单起见，我们创建的时候，直接选择VS .NET Core tools自带的模板。</p>\n<h2 id=\"一个爬虫的自我修养\"><a href=\"#一个爬虫的自我修养\" class=\"headerlink\" title=\"一个爬虫的自我修养\"></a>一个爬虫的自我修养</h2><h3 id=\"分析网页\"><a href=\"#分析网页\" class=\"headerlink\" title=\"分析网页\"></a>分析网页</h3><p>写爬虫之前，我们首先要先去了解一下即将要爬取的网页数据组成。</p>\n<p>具体到网页的话，便是分析我们要抓取的数据在HTML里面是用什么标签抑或有什么样的标记，然后使用这个标记把数据从HTML中提取出来。在我这里的话，用的更多的是HTML标签的ID和CSS属性。</p>\n<p>以本文章想要爬取的dy2018.com为例,简单描述一下这个过程。dy2018.com主页如下图：</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/123.png\" alt=\"123\"></p>\n<p>在chrome里面，按F12进入开发者模式，接着如下图使用鼠标选择对应页面数据，然后去分析页面HTML组成。</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/chromeF12_Select_HTML.png\" alt=\"234\"></p>\n<p>接着我们开始分析页面数据:</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/chrome_dy2018_lstmovie_divclass.png\" alt=\"123\"></p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/chrome_dy2018_a.png\" alt=\"123\"></p>\n<p>经过简单分析HTML，我们得到以下结论：</p>\n<ol>\n<li><p><a href=\"http://www.dy2018.com首页的电影数据存储在一个class为co_content222的div标签里面\" target=\"_blank\" rel=\"noopener\">www.dy2018.com首页的电影数据存储在一个class为co_content222的div标签里面</a></p>\n</li>\n<li><p>电影详情链接为a标签，标签显示文本就是电影名称，URL即详情URL</p>\n</li>\n</ol>\n<p>那么总结下来，我们的工作就是：找到class=’co_content222’ 的div标签，从里面提取所有的a标签数据。</p>\n<h3 id=\"开始写代码…\"><a href=\"#开始写代码…\" class=\"headerlink\" title=\"开始写代码…\"></a>开始写代码…</h3><p>之前在写<a href=\"https://zhuanlan.zhihu.com/p/22764927\" target=\"_blank\" rel=\"noopener\">58HouseSearch项目迁移到asp.net core</a>简单提过AngleSharp库，一个基于.NET（C#）开发的专门为解析xHTML源码的DLL组件。</p>\n<ol>\n<li><p>AngleSharp主页在这里：<a href=\"https://anglesharp.github.io/\" target=\"_blank\" rel=\"noopener\">https://anglesharp.github.io/</a>，</p>\n</li>\n<li><p>博客园文章：<a href=\"http://www.cnblogs.com/pandait/p/AngleSharp.html\" target=\"_blank\" rel=\"noopener\">解析HTML利器AngleSharp介绍</a>，</p>\n</li>\n<li><p>Nuget地址:<a href=\"https://www.nuget.org/packages/AngleSharp\" target=\"_blank\" rel=\"noopener\">Nuget AngleSharp</a> 安装命令：Install-Package AngleSharp</p>\n</li>\n</ol>\n<h4 id=\"获取电影列表数据\"><a href=\"#获取电影列表数据\" class=\"headerlink\" title=\"获取电影列表数据\"></a>获取电影列表数据</h4><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> HtmlParser htmlParser = <span class=\"keyword\">new</span> HtmlParser();</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">private</span>  ConcurrentDictionary&lt;<span class=\"keyword\">string</span>, MovieInfo&gt; _cdMovieInfo = <span class=\"keyword\">new</span> ConcurrentDictionary&lt;<span class=\"keyword\">string</span>, MovieInfo&gt;();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">AddToHotMovieList</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">//此操作不阻塞当前其他操作，所以使用Task</span></span><br><span class=\"line\">          <span class=\"comment\">// _cdMovieInfo 为线程安全字典，存储了当期所有的电影数据</span></span><br><span class=\"line\">          Task.Factory.StartNew(()=&gt; </span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"keyword\">try</span></span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  <span class=\"comment\">//通过URL获取HTML</span></span><br><span class=\"line\">                  <span class=\"keyword\">var</span> htmlDoc = HTTPHelper.GetHTMLByURL(<span class=\"string\">\"http://www.dy2018.com/\"</span>);</span><br><span class=\"line\">                  <span class=\"comment\">//HTML 解析成 IDocument</span></span><br><span class=\"line\">                  <span class=\"keyword\">var</span> dom = htmlParser.Parse(htmlDoc);</span><br><span class=\"line\">                  <span class=\"comment\">//从dom中提取所有class='co_content222'的div标签</span></span><br><span class=\"line\">                  <span class=\"comment\">//QuerySelectorAll方法接受 选择器语法 </span></span><br><span class=\"line\">                  <span class=\"keyword\">var</span> lstDivInfo = dom.QuerySelectorAll(<span class=\"string\">\"div.co_content222\"</span>);</span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (lstDivInfo != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                      <span class=\"comment\">//前三个DIV为新电影</span></span><br><span class=\"line\">                      <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> divInfo <span class=\"keyword\">in</span> lstDivInfo.Take(<span class=\"number\">3</span>))</span><br><span class=\"line\">                      &#123;</span><br><span class=\"line\">                          <span class=\"comment\">//获取div中所有的a标签且a标签中含有\"/i/\"的</span></span><br><span class=\"line\">                          <span class=\"comment\">//Contains(\"/i/\") 条件的过滤是因为在测试中发现这一块div中的a标签有可能是广告链接</span></span><br><span class=\"line\">                          divInfo.QuerySelectorAll(<span class=\"string\">\"a\"</span>).Where(a =&gt; a.GetAttribute(<span class=\"string\">\"href\"</span>).Contains(<span class=\"string\">\"/i/\"</span>)).ToList().ForEach(</span><br><span class=\"line\">                          a =&gt;</span><br><span class=\"line\">                          &#123;</span><br><span class=\"line\">                              <span class=\"comment\">//拼接成完整链接</span></span><br><span class=\"line\">                              <span class=\"keyword\">var</span> onlineURL = <span class=\"string\">\"http://www.dy2018.com\"</span> + a.GetAttribute(<span class=\"string\">\"href\"</span>);</span><br><span class=\"line\">                              <span class=\"comment\">//看一下是否已经存在于现有数据中</span></span><br><span class=\"line\">                              <span class=\"keyword\">if</span> (!_cdMovieInfo.ContainsKey(onlineURL))</span><br><span class=\"line\">                              &#123;</span><br><span class=\"line\">                                  <span class=\"comment\">//获取电影的详细信息</span></span><br><span class=\"line\">                                  MovieInfo movieInfo = FillMovieInfoFormWeb(a, onlineURL);</span><br><span class=\"line\">                                  <span class=\"comment\">//下载链接不为空才添加到现有数据</span></span><br><span class=\"line\">                                  <span class=\"keyword\">if</span> (movieInfo.XunLeiDownLoadURLList != <span class=\"literal\">null</span> &amp;&amp; movieInfo.XunLeiDownLoadURLList.Count != <span class=\"number\">0</span>)</span><br><span class=\"line\">                                  &#123;</span><br><span class=\"line\">                                       _cdMovieInfo.TryAdd(movieInfo.Dy2018OnlineUrl, movieInfo);</span><br><span class=\"line\">                                  &#125;</span><br><span class=\"line\">                              &#125;</span><br><span class=\"line\">                          &#125;);</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">catch</span>(Exception ex)</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取电影详细信息\"><a href=\"#获取电影详细信息\" class=\"headerlink\" title=\"获取电影详细信息\"></a>获取电影详细信息</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> MovieInfo <span class=\"title\">FillMovieInfoFormWeb</span>(<span class=\"params\">AngleSharp.Dom.IElement a, <span class=\"keyword\">string</span> onlineURL</span>)</span></span><br><span class=\"line\"><span class=\"function\">       </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">var</span> movieHTML = HTTPHelper.GetHTMLByURL(onlineURL);</span><br><span class=\"line\">           <span class=\"keyword\">var</span> movieDoc = htmlParser.Parse(movieHTML);</span><br><span class=\"line\">           <span class=\"comment\">//http://www.dy2018.com/i/97462.html 分析过程见上，不再赘述</span></span><br><span class=\"line\">           <span class=\"comment\">//电影的详细介绍 在id为Zoom的标签中</span></span><br><span class=\"line\">           <span class=\"keyword\">var</span> zoom = movieDoc.GetElementById(<span class=\"string\">\"Zoom\"</span>);</span><br><span class=\"line\">           <span class=\"comment\">//下载链接在 bgcolor='#fdfddf'的td中，有可能有多个链接</span></span><br><span class=\"line\">           <span class=\"keyword\">var</span> lstDownLoadURL = movieDoc.QuerySelectorAll(<span class=\"string\">\"[bgcolor='#fdfddf']\"</span>);</span><br><span class=\"line\">           <span class=\"comment\">//发布时间 在class='updatetime'的span标签中</span></span><br><span class=\"line\">           <span class=\"keyword\">var</span> updatetime = movieDoc.QuerySelector(<span class=\"string\">\"span.updatetime\"</span>); <span class=\"keyword\">var</span> pubDate = DateTime.Now;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(updatetime!=<span class=\"literal\">null</span> &amp;&amp; !<span class=\"keyword\">string</span>.IsNullOrEmpty(updatetime.InnerHtml))</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"comment\">//内容带有“发布时间：”字样，replace成\"\"之后再去转换，转换失败不影响流程</span></span><br><span class=\"line\">               DateTime.TryParse(updatetime.InnerHtml.Replace(<span class=\"string\">\"发布时间：\"</span>, <span class=\"string\">\"\"</span>), <span class=\"keyword\">out</span> pubDate);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">var</span> movieInfo = <span class=\"keyword\">new</span> MovieInfo()</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"comment\">//InnerHtml中可能还包含font标签，做多一个Replace</span></span><br><span class=\"line\">               MovieName = a.InnerHtml.Replace(<span class=\"string\">\"&lt;font color=\\\"#0c9000\\\"&gt;\"</span>,<span class=\"string\">\"\"</span>).Replace(<span class=\"string\">\"&lt;font color=\\\"\t#0c9000\\\"&gt;\"</span>,<span class=\"string\">\"\"</span>).Replace(<span class=\"string\">\"&lt;/font&gt;\"</span>, <span class=\"string\">\"\"</span>),</span><br><span class=\"line\">               Dy2018OnlineUrl = onlineURL,</span><br><span class=\"line\">               MovieIntro = zoom != <span class=\"literal\">null</span> ? WebUtility.HtmlEncode(zoom.InnerHtml) : <span class=\"string\">\"暂无介绍...\"</span>,<span class=\"comment\">//可能没有简介，虽然好像不怎么可能</span></span><br><span class=\"line\">               XunLeiDownLoadURLList = lstDownLoadURL != <span class=\"literal\">null</span> ?</span><br><span class=\"line\">               lstDownLoadURL.Select(d =&gt; d.FirstElementChild.InnerHtml).ToList() : <span class=\"literal\">null</span>,<span class=\"comment\">//可能没有下载链接</span></span><br><span class=\"line\">               PubDate = pubDate,</span><br><span class=\"line\">           &#125;;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> movieInfo;</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"HTTPHelper\"><a href=\"#HTTPHelper\" class=\"headerlink\" title=\"HTTPHelper\"></a>HTTPHelper</h3><p>这边有个小坑，dy2018网页编码格式是GB2312,.NET Core默认不支持GB2312，使用Encoding.GetEncoding(“GB2312”)的时候会抛出异常。</p>\n<p>解决方案是手动安装System.Text.Encoding.CodePages包(Install-Package System.Text.Encoding.CodePages),</p>\n<p>然后在Starup.cs的Configure方法中加入Encoding.RegisterProvider(CodePagesEncodingProvider.Instance),接着就可以正常使用Encoding.GetEncoding(“GB2312”)了。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Net.Http;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Net.Http.Headers;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Dy2018Crawler</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HTTPHelper</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> HttpClient Client &#123; <span class=\"keyword\">get</span>; &#125; = <span class=\"keyword\">new</span> HttpClient();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">GetHTMLByURL</span>(<span class=\"params\"><span class=\"keyword\">string</span> url</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                System.Net.WebRequest wRequest = System.Net.WebRequest.Create(url);</span><br><span class=\"line\">                wRequest.ContentType = <span class=\"string\">\"text/html; charset=gb2312\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                wRequest.Method = <span class=\"string\">\"get\"</span>;</span><br><span class=\"line\">                wRequest.UseDefaultCredentials = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"comment\">// Get the response instance.</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> task = wRequest.GetResponseAsync();</span><br><span class=\"line\">                System.Net.WebResponse wResp = task.Result;</span><br><span class=\"line\">                System.IO.Stream respStream = wResp.GetResponseStream();</span><br><span class=\"line\">                <span class=\"comment\">//dy2018这个网站编码方式是GB2312,</span></span><br><span class=\"line\">                <span class=\"keyword\">using</span> (System.IO.StreamReader reader = <span class=\"keyword\">new</span> System.IO.StreamReader(respStream, Encoding.GetEncoding(<span class=\"string\">\"GB2312\"</span>)))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> reader.ReadToEnd();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> (Exception ex)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Console.WriteLine(ex.ToString());</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"定时任务的实现\"><a href=\"#定时任务的实现\" class=\"headerlink\" title=\"定时任务的实现\"></a>定时任务的实现</h3><p>定时任务我这里使用的是<a href=\"https://www.nuget.org/packages/Pomelo.AspNetCore.TimedJob/1.1.0-rtm-10026\" target=\"_blank\" rel=\"noopener\">Pomelo.AspNetCore.TimedJob</a>。</p>\n<p>Pomelo.AspNetCore.TimedJob是一个.NET Core实现的定时任务job库，支持毫秒级定时任务、从数据库读取定时配置、同步异步定时任务等功能。</p>\n<p>由.NET Core社区大神兼前微软MVP<a href=\"https://www.nuget.org/profiles/AmamiyaYuuko\" target=\"_blank\" rel=\"noopener\">AmamiyaYuuko</a>(入职微软之后就卸任MVP…)开发维护，不过好像没有开源，回头问下看看能不能开源掉。</p>\n<p>nuget上有各种版本，按需自取。地址：<a href=\"https://www.nuget.org/packages/Pomelo.AspNetCore.TimedJob/1.1.0-rtm-10026\" target=\"_blank\" rel=\"noopener\">https://www.nuget.org/packages/Pomelo.AspNetCore.TimedJob/1.1.0-rtm-10026</a></p>\n<p>作者自己的介绍文章：<a href=\"http://www.1234.sh/post/pomelo-extensions-timed-jobs\" target=\"_blank\" rel=\"noopener\">Timed Job - Pomelo扩展包系列</a></p>\n<h3 id=\"Startup-cs相关代码\"><a href=\"#Startup-cs相关代码\" class=\"headerlink\" title=\"Startup.cs相关代码\"></a>Startup.cs相关代码</h3><p>我这边使用的话，首先肯定是先安装对应的包：Install-Package Pomelo.AspNetCore.TimedJob -Pre</p>\n<p>然后在Startup.cs的ConfigureServices函数里面添加Service,在Configure函数里面Use一下。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This method gets called by the runtime. Use this method to add services to the container.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Add framework services.</span></span><br><span class=\"line\">    services.AddMvc();</span><br><span class=\"line\">    <span class=\"comment\">//Add TimedJob services</span></span><br><span class=\"line\">    services.AddTimedJob();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//使用TimedJob</span></span><br><span class=\"line\">    app.UseTimedJob();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (env.IsDevelopment())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        app.UseDeveloperExceptionPage();</span><br><span class=\"line\">        app.UseBrowserLink();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        app.UseExceptionHandler(<span class=\"string\">\"/Home/Error\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseStaticFiles();</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseMvc(routes =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        routes.MapRoute(</span><br><span class=\"line\">            name: <span class=\"string\">\"default\"</span>,</span><br><span class=\"line\">            template: <span class=\"string\">\"&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Job相关代码\"><a href=\"#Job相关代码\" class=\"headerlink\" title=\"Job相关代码\"></a>Job相关代码</h4><p>接着新建一个类，明明为XXXJob.cs,引用命名空间using Pomelo.AspNetCore.TimedJob，XXXJob继承于Job，添加以下代码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> public class AutoGetMovieListJob:Job</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">     // Begin 起始时间；Interval执行时间间隔，单位是毫秒，建议使用以下格式，此处为3小时；SkipWhileExecuting是否等待上一个执行完成，true为等待；</span><br><span class=\"line\">     [Invoke(Begin = &quot;2016-11-29 22:10&quot;, Interval = 1000 * 3600*3, SkipWhileExecuting =true)]</span><br><span class=\"line\">     public void Run()</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">          //Job要执行的逻辑代码</span><br><span class=\"line\">          </span><br><span class=\"line\">         //LogHelper.Info(&quot;Start crawling&quot;);</span><br><span class=\"line\">         //AddToLatestMovieList(100);</span><br><span class=\"line\">         //AddToHotMovieList();</span><br><span class=\"line\">         //LogHelper.Info(&quot;Finish crawling&quot;);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"项目发布相关\"><a href=\"#项目发布相关\" class=\"headerlink\" title=\"项目发布相关\"></a>项目发布相关</h2><h3 id=\"新增runtimes节点\"><a href=\"#新增runtimes节点\" class=\"headerlink\" title=\"新增runtimes节点\"></a>新增runtimes节点</h3><p>使用VS2015新建的模板工程，project.json配置默认是没有runtimes节点的.</p>\n<p>我们想要发布到非Windows平台的时候，需要手动配置一下此节点以便生成。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">\"runtimes\"</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"win7-x64\"</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"string\">\"win7-x86\"</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"string\">\"osx.10.10-x64\"</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"string\">\"osx.10.11-x64\"</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"string\">\"ubuntu.14.04-x64\"</span>: &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除-注释scripts节点\"><a href=\"#删除-注释scripts节点\" class=\"headerlink\" title=\"删除/注释scripts节点\"></a>删除/注释scripts节点</h3><p>生成时会调用node.js脚本构建前端代码，这个不能确保每个环境都有bower存在…注释完事。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\"scripts\": &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//  \"prepublish\": [ \"bower install\", \"dotnet bundle\" ],</span></span><br><span class=\"line\"><span class=\"comment\">//  \"postpublish\": [ \"dotnet publish-iis --publish-folder %publish:OutputPath% --framework %publish:FullTargetFramework%\" ]</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;,</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"删除-注释dependencies节点里面的type\"><a href=\"#删除-注释dependencies节点里面的type\" class=\"headerlink\" title=\"删除/注释dependencies节点里面的type\"></a>删除/注释dependencies节点里面的type</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"Microsoft.NETCore.App\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.1.0\"</span></span><br><span class=\"line\">      <span class=\"comment\">//\"type\": \"platform\"</span></span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n<p>project.json的相关配置说明可以看下这个官方文档：<a href=\"https://github.com/aspnet/Home/wiki/Project.json-file\" target=\"_blank\" rel=\"noopener\">Project.json-file</a>,<br>或者张善友老师的文章<a href=\"http://www.cnblogs.com/shanyou/p/5693453.html\" target=\"_blank\" rel=\"noopener\">.NET Core系列 ： 2 、project.json 这葫芦里卖的什么药</a></p>\n<h3 id=\"开发编译发布\"><a href=\"#开发编译发布\" class=\"headerlink\" title=\"开发编译发布\"></a>开发编译发布</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//还原各种包文件</span><br><span class=\"line\">dotnet restore;</span><br><span class=\"line\"></span><br><span class=\"line\">//发布到C:\\code\\website\\Dy2018Crawler文件夹</span><br><span class=\"line\">dotnet publish -r ubuntu.14.04-x64 -c Release -o <span class=\"string\">\"C:\\code\\website\\Dy2018Crawler\"</span>;</span><br></pre></td></tr></table></figure>\n<p>最后，照旧开源……以上代码都在下面找到：</p>\n<p>Gayhub地址：<a href=\"https://github.com/liguobao/Dy2018Crawler\" target=\"_blank\" rel=\"noopener\">https://github.com/liguobao/Dy2018Crawler</a></p>\n<p>在线地址：<a href=\"http://codelover.win/\" target=\"_blank\" rel=\"noopener\">http://codelover.win/</a></p>\n<p>PS:回头写个爬片大家滋持不啊…</p>\n"},{"layout":"post","title":"可能是一份没什么用的爬虫代理IP指南","date":"2016-10-03T16:00:00.000Z","_content":"##写在前面\n\n做爬虫的小伙伴一般都绕不过代理IP这个问题.\n\nPS:如果还没遇到被封IP的场景，要不就是你量太小人家懒得理你，要不就是人家压根不在乎...\n\n爬虫用户自己是没有能力维护一系列的代理服务器和代理IP的，这个成本实在有点高了。\n所以公用代理服务器应运而生,现在几大云服务商家都提供代理IP服务，一般论个买...\n\n同时网上也有很多代理IP共享网站，会把一些免费的代理IP放出来给大家用。\n大家都是做爬虫的，那么，是不是可以先把代理IP网站的数据爬一遍？\n所以可以看到不少的爬代理IP的爬虫，如[突破反爬虫的利器——开源IP代理池](https://zhuanlan.zhihu.com/p/23928595)之类的项目。\n这些项目都能达到抓取代理IP数据的目的，很多时候也够用了。\n\n然而在使用过程中我们发现了一些问题：\n1. 网站公布的代理IP不一定是可用的。可能代理服务器挂了，可能IP无效了...等等之类的。\n2. 代理IP是部分可用的。某代理IP可用代理访问百度，但是代理访问谷歌的时候就GG了。\n3. 代理连通性是好的，但是已经被访问站识别为代理IP返回验证码或者辣鸡数据。\n\n\n## proxyipcenter的解决方案\n\n出于以上种种的原因，按耐不住的dalao(@[virjar](https://www.zhihu.com/people/virjar))开始自己动手撸了。\n\n于是，[proxyipcenter](http://git.oschina.net/virjar/proxyipcenter)出来了。\n\n这个项目做了什么东西呢？\ndalao是这样写的：\n>\n>DungProxy是一个代理IP服务,他包括一个代理IP资源server端和一系列适配中心IP资源得客户端。\n>\n>server负责代理IP资源的收集维护。\n>\n>client则是一系列方便用户使用得API,他屏蔽了代理IP下载、代理IP选取、IP绑定、IP切换等比较复杂逻辑。用户只需要引入client即可方便使用代理IP服务\n\n简单来说：\n\nserver是一个代理IP爬虫，同时负责简单的数据清洗。\n\nclient本质是一个代理IP池，获取数据源之后，基于需要代理访问的网站在本地维护一个代理IP池供爬虫使用。\n\n以下内容转载自[http://git.oschina.net/virjar/proxyipcenter](http://git.oschina.net/virjar/proxyipcenter/edit/master/doc/server/deploy/README.md),\n并已获得相关授权。(PS:dalao写的太好了，我都懒得重新写一遍了...问过dalao之后直接转载过来算了。)\n\n## proxyipcenter server\n\nDrungProxy的代理IP都是从互联网收集,他是架设在一个高度不可用的资源上面的服务。server会负责对这些资源进行清洗、校验、打分,最终输出可以被客户端使用的IP资源。IP资源从入库到最终判定可用生命流程如下\n1. IP抓取\n    server监听了很多代理IP网站,这些网站包括国内外十几家,有意思的是drungProxy的IP爬虫是一系列网站模版。五六行配置即可实现一个简单的网站模版,然后我们有一个上层调度模块将会负责调起模版进行数据抓取。\n2. IP消重\n需要消重的原因是程序运行到一定时间之后,大量IP都是数据库里面已经存在的了,这个时候如果在数据库进行消重逻辑将会导致大量数据库读写,实际上我们的服务器是一个1块钱的腾讯云(曾经是),看起来是撑不住这么大的请求的(平均每天可以有10K量级)。最后在入库前设置了一个bloomFilter消重模块,能够高效的检测资源是否被入库过。\n3. 位置信息完善\n这个逻辑不大,通过taobaoIp接口获取地址信息,完善IP资源元数据。[taobaoIP](http://ip.taobao.com/)\n4. IP验证\nIP验证分为好几个步骤。我们的IP总资源有80W,检验一个IP是否可用一般来说需要20秒左右的时间,因为代理IP本身响应比较慢,我们会把超时时间设置得比较长。所以可以计算一下80W数据走一轮将要消耗得时间,即使在多线程并行环境下时间也是很多的。为了在一定资源下完成校验,我们设计了如下步骤\n- 端口开启校验,在进行可用性校验前,首先需要检查IP端口是否开启。调研发现大量资源其实端口都不通,所以专门设计一个任务验证端口是否开启,端口开启验证超时时间为5秒。由于大多数资源端口都没有开启,所以大部分资源的校验时间下降到5秒了。\n- 可用性校验,进行可用性校验的需要先进行端口开启校验,系统中端口开启的资源大概3W,所以校验可用性的总资源有3W左右。可用性校验存在如下问题,很多代理IP其实不是代理网站,想他发送请求最终不是我们预期的数据,比如他返回给我们一个代理IP认证网页。所以我们不能根据是否能够请求到数据来判定IP是否可用。我们的做法是在公网放置一个API接口,然后控制代理IP访问我们自己的接口,如果能够拿到符合我们接口的预期数据,那么认为IP可用。\n- domain可用该校验,可用性校验通过之后IP还不是真正可用,悲伤的发现代理IP是和域名相关的。所以同一个IP在不同域名下表现可能不一样。所以我们维护了一个域名IP池,这里面存储各个域名下可用IP\n5. IP分发\nIP分发是根据客户请求分配可用IP。分发逻辑现在还没有完全完善,但是已经实现了最迫切和有校的分发方案。分发逻辑设计是:先尝试查询domainIP池,再根据其他请求参数做条件匹配,再查询系统可用IP,再随机选择可用填充。四个步骤如果有一个步骤得到的IP超过请求参数期待数目,则不进行接下来的动作。\n\n### IP验证模型\n再IP验证的时候,我们设计了一个模型用来确定哪些IP应该优先验证。模型描述如下:长期可用IP检测频率低,长期不可用IP检测评率低。不稳定IP和刚加入的IP检测频率高。我们使用优先队列来实现这个逻辑,所有IP根据分值放在不同优先队列中,每次校验的时候再不同优先队列中拿出一定资源进行校验(不同优先级拿出的资源数目不一样,高优先级的对象拿出更多资源),对于同一个优先队列,我们根据最后验证时间排序。使上次更新时间最久的资源被优先选择。\n### 分发去重\n分发资源的时候,设计去重问题,也就是根据相同条件,每次分发得到的IP很大可能会重复。为了规避这个问题,每次分发都会相应的下发一个资源签名,他会记录分发过的IP。在下次请求的时候,客户端需要带上这个签名,服务器会根据签名过滤,同时会重新对新分发的IP资源做再次签名.\n\n## server部署\nserver端使用java编写,使用maven管理项目,使用mysql作为数据库。相关技术包括springMVC,spring,tomcat,mybatis,guava,fastjson,httpclient等。\n运行server的方式很简单\n1. 在项目根目录执行maven命令(需要提前安装maven,maven安装方式略)```mvn install -Dmaven.test.skip=true```\n2. 在server目录执行maven命令 ```mvn tomcat7:run```\n\n### server配置\n直接运行项目使用的是我们的默认数据库,同时使用的是默认配置。实际上server存在一些配置用来设置运行参数。合理的运行参数能够合理使用机器资源以及达到更好的运行效果。\n项目主要有两个配置文件需要配置:\n1. mysql.properties 用来配置数据库信息\n2. config.properties 配置其他启动参数,主要需要关注里面几个url地址,还有 system.thread.*的参数项。system.thread*用于指定某一种类型的任务执行的线程数,如果数据小于1,则这个模块不会启动。但是如果这个模块接收到了任务请求,那么他会转发到其他服务器上面(也就是上面的两个forward相关的url,没办法服务器都是腊鸡服务器  )\n\n其他的应该没有了把,哦对了,项目存在多个profile,也就是resources.local,resources.beta,resources.prod等。他们叫做profile,是maven里面的概念,默认是resources.local生效的。如果想使用其他profile下面的配置,则增加 -Pprofile参数,如运行server ```mvn -Pskyee clean tomcat7:run```\n\n### server接口事例\n[http://115.159.40.202:8080/proxyipcenter/av?usedSign=&checkUrl=http%3A%2F%2Ffree-proxy-list.net%2F&domain=free-proxy-list.net&num=10](http://115.159.40.202:8080/proxyipcenter/av?usedSign=&checkUrl=http%3A%2F%2Ffree-proxy-list.net%2F&domain=free-proxy-list.net&num=10)\n````\n{\n     \"data\": {\n         \"data\": [\n             {\n                 \"id\": 257,\n                 \"ip\": \"203.192.12.148\",\n                 \"proxyIp\": \"203.192.12.149\",\n                 \"port\": 80,\n                 \"ipValue\": 3418360980,\n                 \"country\": \"中国\",\n                 \"area\": \"华北\",\n                 \"region\": \"北京市\",\n                 \"city\": \"北京市\",\n                 \"isp\": \"\",\n                 \"countryId\": \"CN\",\n                 \"areaId\": \"100000\",\n                 \"regionId\": \"110000\",\n                 \"cityId\": \"110100\",\n                 \"ispId\": \"-1\",\n                 \"transperent\": 2,\n                 \"speed\": 104,\n                 \"type\": 1,\n                 \"connectionScore\": 1310,\n                 \"availbelScore\": 8,\n                 \"connectionScoreDate\": 1475641264000,\n                 \"availbelScoreDate\": 1475646860000,\n                 \"createtime\": 1473840886000,\n                 \"lostheader\": false\n             },\n             {\n                 \"id\": 654,\n                 \"ip\": \"120.55.245.47\",\n                 \"proxyIp\": \"112.124.119.21\",\n                 \"port\": 80,\n                 \"ipValue\": 2016933167,\n                 \"country\": \"中国\",\n                 \"area\": \"华东\",\n                 \"region\": \"浙江省\",\n                 \"city\": \"杭州市\",\n                 \"isp\": \"阿里云\",\n                 \"countryId\": \"CN\",\n                 \"areaId\": \"300000\",\n                 \"regionId\": \"330000\",\n                 \"cityId\": \"330100\",\n                 \"ispId\": \"1000323\",\n                 \"transperent\": 2,\n                 \"speed\": 83,\n                 \"type\": 1,\n                 \"connectionScore\": 1429,\n                 \"availbelScore\": 2,\n                 \"connectionScoreDate\": 1475659905000,\n                 \"availbelScoreDate\": 1475630273000,\n                 \"createtime\": 1473840884000,\n                 \"lostheader\": false\n             },\n             {\n                 \"id\": 2489,\n                 \"ip\": \"124.193.33.233\",\n                 \"proxyIp\": \"124.193.33.233\",\n                 \"port\": 3128,\n                 \"ipValue\": 2093031913,\n                 \"country\": \"中国\",\n                 \"area\": \"华北\",\n                 \"region\": \"北京市\",\n                 \"city\": \"北京市\",\n                 \"isp\": \"鹏博士\",\n                 \"countryId\": \"CN\",\n                 \"areaId\": \"100000\",\n                 \"regionId\": \"110000\",\n                 \"cityId\": \"110100\",\n                 \"ispId\": \"1000143\",\n                 \"transperent\": 2,\n                 \"speed\": 3390,\n                 \"type\": 1,\n                 \"connectionScore\": 310,\n                 \"availbelScore\": 2,\n                 \"connectionScoreDate\": 1475657685000,\n                 \"availbelScoreDate\": 1475661878000,\n                 \"createtime\": 1473839334000,\n                 \"lostheader\": false\n             },\n             {\n                 \"id\": 5004,\n                 \"ip\": \"203.192.12.146\",\n                 \"proxyIp\": \"203.192.12.149\",\n                 \"port\": 80,\n                 \"ipValue\": 3418360978,\n                 \"country\": \"中国\",\n                 \"area\": \"华北\",\n                 \"region\": \"北京市\",\n                 \"city\": \"北京市\",\n                 \"isp\": \"\",\n                 \"countryId\": \"CN\",\n                 \"areaId\": \"100000\",\n                 \"regionId\": \"110000\",\n                 \"cityId\": \"110100\",\n                 \"ispId\": \"-1\",\n                 \"transperent\": 2,\n                 \"speed\": 161,\n                 \"type\": 1,\n                 \"connectionScore\": 1291,\n                 \"availbelScore\": 10,\n                 \"connectionScoreDate\": 1475638336000,\n                 \"availbelScoreDate\": 1475636727000,\n                 \"createtime\": 1473840882000,\n                 \"lostheader\": false\n             },\n             {\n                 \"id\": 5421,\n                 \"ip\": \"221.237.155.64\",\n                 \"proxyIp\": \"221.237.155.64\",\n                 \"port\": 9797,\n                 \"ipValue\": 3723336512,\n                 \"country\": \"中国\",\n                 \"area\": \"西南\",\n                 \"region\": \"四川省\",\n                 \"city\": \"成都市\",\n                 \"isp\": \"电信\",\n                 \"countryId\": \"CN\",\n                 \"areaId\": \"500000\",\n                 \"regionId\": \"510000\",\n                 \"cityId\": \"510100\",\n                 \"ispId\": \"100017\",\n                 \"transperent\": 2,\n                 \"speed\": 3238,\n                 \"type\": 1,\n                 \"connectionScore\": 119,\n                 \"availbelScore\": -1,\n                 \"connectionScoreDate\": 1475611973000,\n                 \"availbelScoreDate\": 1475629954000,\n                 \"createtime\": 1473840773000,\n                 \"lostheader\": false\n             },\n             {\n                 \"id\": 8722,\n                 \"ip\": \"58.243.0.162\",\n                 \"proxyIp\": \"58.243.0.162\",\n                 \"port\": 9999,\n                 \"ipValue\": 989003938,\n                 \"country\": \"中国\",\n                 \"area\": \"华东\",\n                 \"region\": \"安徽省\",\n                 \"city\": \"安庆市\",\n                 \"isp\": \"联通\",\n                 \"countryId\": \"CN\",\n                 \"areaId\": \"300000\",\n                 \"regionId\": \"340000\",\n                 \"cityId\": \"340800\",\n                 \"ispId\": \"100026\",\n                 \"transperent\": 2,\n                 \"speed\": 5143,\n                 \"type\": 1,\n                 \"connectionScore\": 154,\n                 \"availbelScore\": -3,\n                 \"connectionScoreDate\": 1475665673000,\n                 \"availbelScoreDate\": 1475614147000,\n                 \"createtime\": 1473839836000,\n                 \"lostheader\": false\n             },\n             {\n                 \"id\": 11698,\n                 \"ip\": \"218.7.170.190\",\n                 \"proxyIp\": \"218.7.170.190\",\n                 \"port\": 3128,\n                 \"ipValue\": 3657935550,\n                 \"country\": \"中国\",\n                 \"area\": \"东北\",\n                 \"region\": \"黑龙江省\",\n                 \"city\": \"绥化市\",\n                 \"isp\": \"联通\",\n                 \"countryId\": \"CN\",\n                 \"areaId\": \"200000\",\n                 \"regionId\": \"230000\",\n                 \"cityId\": \"231200\",\n                 \"ispId\": \"100026\",\n                 \"transperent\": 2,\n                 \"speed\": 3145,\n                 \"type\": 1,\n                 \"connectionScore\": 317,\n                 \"availbelScore\": -1,\n                 \"connectionScoreDate\": 1475642001000,\n                 \"availbelScoreDate\": 1475524810000,\n                 \"createtime\": 1473839128000,\n                 \"lostheader\": false\n             },\n             {\n                 \"id\": 13318,\n                 \"ip\": \"220.249.185.178\",\n                 \"proxyIp\": \"220.249.185.178\",\n                 \"port\": 9999,\n                 \"ipValue\": 3707353522,\n                 \"country\": \"中国\",\n                 \"area\": \"华东\",\n                 \"region\": \"福建省\",\n                 \"city\": \"福州市\",\n                 \"isp\": \"联通\",\n                 \"countryId\": \"CN\",\n                 \"areaId\": \"300000\",\n                 \"regionId\": \"350000\",\n                 \"cityId\": \"350100\",\n                 \"ispId\": \"100026\",\n                 \"transperent\": 2,\n                 \"speed\": 5094,\n                 \"type\": 1,\n                 \"connectionScore\": 129,\n                 \"availbelScore\": -1,\n                 \"connectionScoreDate\": 1475615670000,\n                 \"availbelScoreDate\": 1475585178000,\n                 \"createtime\": 1473840539000,\n                 \"lostheader\": false\n             },\n             {\n                 \"id\": 57033,\n                 \"ip\": \"210.245.25.228\",\n                 \"proxyIp\": \"210.245.25.228\",\n                 \"port\": 3128,\n                 \"ipValue\": 3539278308,\n                 \"country\": \"越南\",\n                 \"area\": \"\",\n                 \"region\": \"\",\n                 \"city\": \"\",\n                 \"isp\": \"\",\n                 \"countryId\": \"VN\",\n                 \"areaId\": \"\",\n                 \"regionId\": \"\",\n                 \"cityId\": \"\",\n                 \"ispId\": \"\",\n                 \"transperent\": 2,\n                 \"speed\": 1024,\n                 \"type\": 1,\n                 \"connectionScore\": 488,\n                 \"availbelScore\": 36,\n                 \"connectionScoreDate\": 1475635386000,\n                 \"availbelScoreDate\": 1475630473000,\n                 \"createtime\": 1473836572000,\n                 \"lostheader\": false\n             },\n             {\n                 \"id\": 124334,\n                 \"ip\": \"60.194.72.253\",\n                 \"proxyIp\": \"60.194.72.253\",\n                 \"port\": 3128,\n                 \"ipValue\": 1019365629,\n                 \"country\": \"中国\",\n                 \"area\": \"华北\",\n                 \"region\": \"北京市\",\n                 \"city\": \"北京市\",\n                 \"isp\": \"鹏博士\",\n                 \"countryId\": \"CN\",\n                 \"areaId\": \"100000\",\n                 \"regionId\": \"110000\",\n                 \"cityId\": \"110100\",\n                 \"ispId\": \"1000143\",\n                 \"transperent\": 2,\n                 \"speed\": 2366,\n                 \"type\": 1,\n                 \"connectionScore\": 610,\n                 \"availbelScore\": 16,\n                 \"connectionScoreDate\": 1475643516000,\n                 \"availbelScoreDate\": 1475631080000,\n                 \"createtime\": 1473839561000,\n                 \"lostheader\": false\n             }\n         ],\n         \"num\": 10,\n         \"sign\": \"9999#C99+999#9B99B99999##Y9999+9999999999999999999999t9999s99999999s9999999999999999999999999999#99999999999999GB999999999G9999s9s99999#9999999999Y9+999##99999999+99999999999999+999999999999B999+Y9999G9+99999999999YB99999999999999999999999+99Y999999999B9999G999s99G999999999#99999#9Y999s999999999#B99999999999999999999+999999Y9999999Y9999999999999Y9999Y999999999999999\"\n     },\n     \"status\": true\n }\n````\n\n\n\n\n## proxyipcenter client\n### [client 设计文档](http://git.oschina.net/virjar/proxyipcenter/blob/master/doc/client/design/README.md)\n### [client 使用文档](http://git.oschina.net/virjar/proxyipcenter/blob/master/doc/client/userGuide/README.md)\n\nclient运行原理\n这里讲述IP池的设计相关,如果您仅仅是为了使用dunproxy-client,则不必关心本文内容\n\nclient就是一个代理IP池的实现,IP池的设计基于两个点:\n\n1. 代理IP都是不稳定的,不可靠的,需要一个机制来切换IP,尽可能使用高质量IP。\n\n2. IP和环境关系很大,同一个IP在不同的机器下访问不同的目标网站,其可用性表现都是不一样的\n\n## 使用IpPoolAPI获取IP资源\n\n### 获取IP\n获取一个IP的方式是这样的 ``IpPool.getInstance().bind(domain, accessUrl);`` \n- 第一个参数是域名,可以传递null,传递null提取accessUrl schema里面的host\n- 第二个参数是你当前需要访问的url, 可以为null,为null时domain不能为空\n\n曾经有一个绑定用户的功能,使得同一个账户每次获取的IP相同,后来觉得是过度设计,因为对于抓取场景,切换IP是很普通的需求,而且貌似没有多少server会检查常用IP。就算有也是小众需求,本框架不必支持\n\n### 记录IP使用\n每当使用IP的时候,需要记录一次IP使用,也就是将IP实例的使用次数加一,用于打分机制计算IP的使用分值,评估IP可用性\n方式如下:``com.virjar.dungproxy.client.model.AvProxy.recordUsage``\n\n### 记录IP使用失败\n每当IP使用失败的时候,需要记录IP使用失败,也就是将IP实例的失败次数加一,用于打分机制计算IP的使用分值,评估IP可用性\n方式如下:``com.virjar.dungproxy.client.model.AvProxy.recordFailed()``\n\n### IP下线\nIP下线很简单,拿到IP实例,这样调用``com.virjar.dungproxy.client.model.AvProxy.offline()``。\n一般情况不建议这么做,因为IP池会自动检查IP是否应该下线,IP池可以定制各种策略。当时,有些时候IP池的检查机制比较缓慢,而上层业务可以明确知道本IP不可用,这个时候可以使用本API强制下线\n\n\n### 销毁IP池实例\nIP池是单例的,同时里面维护了两个任务线程,在业务完成的时候,需要销毁IP池才能终止内部线程。同时也会执行一些收尾工作,如将可用IP dump。\n销毁方式是:``com.virjar.dungproxy.client.ippool.IpPool.destroy``\n\n\n### 其他\nIP池有其他很多扩展点,但是目前接口没有开发完成,待后续完善\n\n\n\n\n## TODO 几个主流语言的客户端\n\n1. .NET/.NET core client (辣鸡楼主还没动手...)\n2. Python client(另外一个大佬好像忘了这事了...)\n3. Golang client(可能还是辣鸡楼主动手...)\n\n\n\n\n\n\n\n\n","source":"_posts/ipproy_for_crawler.md","raw":"---\nlayout: post\ntitle: 可能是一份没什么用的爬虫代理IP指南\ncategory: ipproxy\ndate: 2016-10-04 00:00:00\ntags:\n- Java\n- 开源\n---\n##写在前面\n\n做爬虫的小伙伴一般都绕不过代理IP这个问题.\n\nPS:如果还没遇到被封IP的场景，要不就是你量太小人家懒得理你，要不就是人家压根不在乎...\n\n爬虫用户自己是没有能力维护一系列的代理服务器和代理IP的，这个成本实在有点高了。\n所以公用代理服务器应运而生,现在几大云服务商家都提供代理IP服务，一般论个买...\n\n同时网上也有很多代理IP共享网站，会把一些免费的代理IP放出来给大家用。\n大家都是做爬虫的，那么，是不是可以先把代理IP网站的数据爬一遍？\n所以可以看到不少的爬代理IP的爬虫，如[突破反爬虫的利器——开源IP代理池](https://zhuanlan.zhihu.com/p/23928595)之类的项目。\n这些项目都能达到抓取代理IP数据的目的，很多时候也够用了。\n\n然而在使用过程中我们发现了一些问题：\n1. 网站公布的代理IP不一定是可用的。可能代理服务器挂了，可能IP无效了...等等之类的。\n2. 代理IP是部分可用的。某代理IP可用代理访问百度，但是代理访问谷歌的时候就GG了。\n3. 代理连通性是好的，但是已经被访问站识别为代理IP返回验证码或者辣鸡数据。\n\n\n## proxyipcenter的解决方案\n\n出于以上种种的原因，按耐不住的dalao(@[virjar](https://www.zhihu.com/people/virjar))开始自己动手撸了。\n\n于是，[proxyipcenter](http://git.oschina.net/virjar/proxyipcenter)出来了。\n\n这个项目做了什么东西呢？\ndalao是这样写的：\n>\n>DungProxy是一个代理IP服务,他包括一个代理IP资源server端和一系列适配中心IP资源得客户端。\n>\n>server负责代理IP资源的收集维护。\n>\n>client则是一系列方便用户使用得API,他屏蔽了代理IP下载、代理IP选取、IP绑定、IP切换等比较复杂逻辑。用户只需要引入client即可方便使用代理IP服务\n\n简单来说：\n\nserver是一个代理IP爬虫，同时负责简单的数据清洗。\n\nclient本质是一个代理IP池，获取数据源之后，基于需要代理访问的网站在本地维护一个代理IP池供爬虫使用。\n\n以下内容转载自[http://git.oschina.net/virjar/proxyipcenter](http://git.oschina.net/virjar/proxyipcenter/edit/master/doc/server/deploy/README.md),\n并已获得相关授权。(PS:dalao写的太好了，我都懒得重新写一遍了...问过dalao之后直接转载过来算了。)\n\n## proxyipcenter server\n\nDrungProxy的代理IP都是从互联网收集,他是架设在一个高度不可用的资源上面的服务。server会负责对这些资源进行清洗、校验、打分,最终输出可以被客户端使用的IP资源。IP资源从入库到最终判定可用生命流程如下\n1. IP抓取\n    server监听了很多代理IP网站,这些网站包括国内外十几家,有意思的是drungProxy的IP爬虫是一系列网站模版。五六行配置即可实现一个简单的网站模版,然后我们有一个上层调度模块将会负责调起模版进行数据抓取。\n2. IP消重\n需要消重的原因是程序运行到一定时间之后,大量IP都是数据库里面已经存在的了,这个时候如果在数据库进行消重逻辑将会导致大量数据库读写,实际上我们的服务器是一个1块钱的腾讯云(曾经是),看起来是撑不住这么大的请求的(平均每天可以有10K量级)。最后在入库前设置了一个bloomFilter消重模块,能够高效的检测资源是否被入库过。\n3. 位置信息完善\n这个逻辑不大,通过taobaoIp接口获取地址信息,完善IP资源元数据。[taobaoIP](http://ip.taobao.com/)\n4. IP验证\nIP验证分为好几个步骤。我们的IP总资源有80W,检验一个IP是否可用一般来说需要20秒左右的时间,因为代理IP本身响应比较慢,我们会把超时时间设置得比较长。所以可以计算一下80W数据走一轮将要消耗得时间,即使在多线程并行环境下时间也是很多的。为了在一定资源下完成校验,我们设计了如下步骤\n- 端口开启校验,在进行可用性校验前,首先需要检查IP端口是否开启。调研发现大量资源其实端口都不通,所以专门设计一个任务验证端口是否开启,端口开启验证超时时间为5秒。由于大多数资源端口都没有开启,所以大部分资源的校验时间下降到5秒了。\n- 可用性校验,进行可用性校验的需要先进行端口开启校验,系统中端口开启的资源大概3W,所以校验可用性的总资源有3W左右。可用性校验存在如下问题,很多代理IP其实不是代理网站,想他发送请求最终不是我们预期的数据,比如他返回给我们一个代理IP认证网页。所以我们不能根据是否能够请求到数据来判定IP是否可用。我们的做法是在公网放置一个API接口,然后控制代理IP访问我们自己的接口,如果能够拿到符合我们接口的预期数据,那么认为IP可用。\n- domain可用该校验,可用性校验通过之后IP还不是真正可用,悲伤的发现代理IP是和域名相关的。所以同一个IP在不同域名下表现可能不一样。所以我们维护了一个域名IP池,这里面存储各个域名下可用IP\n5. IP分发\nIP分发是根据客户请求分配可用IP。分发逻辑现在还没有完全完善,但是已经实现了最迫切和有校的分发方案。分发逻辑设计是:先尝试查询domainIP池,再根据其他请求参数做条件匹配,再查询系统可用IP,再随机选择可用填充。四个步骤如果有一个步骤得到的IP超过请求参数期待数目,则不进行接下来的动作。\n\n### IP验证模型\n再IP验证的时候,我们设计了一个模型用来确定哪些IP应该优先验证。模型描述如下:长期可用IP检测频率低,长期不可用IP检测评率低。不稳定IP和刚加入的IP检测频率高。我们使用优先队列来实现这个逻辑,所有IP根据分值放在不同优先队列中,每次校验的时候再不同优先队列中拿出一定资源进行校验(不同优先级拿出的资源数目不一样,高优先级的对象拿出更多资源),对于同一个优先队列,我们根据最后验证时间排序。使上次更新时间最久的资源被优先选择。\n### 分发去重\n分发资源的时候,设计去重问题,也就是根据相同条件,每次分发得到的IP很大可能会重复。为了规避这个问题,每次分发都会相应的下发一个资源签名,他会记录分发过的IP。在下次请求的时候,客户端需要带上这个签名,服务器会根据签名过滤,同时会重新对新分发的IP资源做再次签名.\n\n## server部署\nserver端使用java编写,使用maven管理项目,使用mysql作为数据库。相关技术包括springMVC,spring,tomcat,mybatis,guava,fastjson,httpclient等。\n运行server的方式很简单\n1. 在项目根目录执行maven命令(需要提前安装maven,maven安装方式略)```mvn install -Dmaven.test.skip=true```\n2. 在server目录执行maven命令 ```mvn tomcat7:run```\n\n### server配置\n直接运行项目使用的是我们的默认数据库,同时使用的是默认配置。实际上server存在一些配置用来设置运行参数。合理的运行参数能够合理使用机器资源以及达到更好的运行效果。\n项目主要有两个配置文件需要配置:\n1. mysql.properties 用来配置数据库信息\n2. config.properties 配置其他启动参数,主要需要关注里面几个url地址,还有 system.thread.*的参数项。system.thread*用于指定某一种类型的任务执行的线程数,如果数据小于1,则这个模块不会启动。但是如果这个模块接收到了任务请求,那么他会转发到其他服务器上面(也就是上面的两个forward相关的url,没办法服务器都是腊鸡服务器  )\n\n其他的应该没有了把,哦对了,项目存在多个profile,也就是resources.local,resources.beta,resources.prod等。他们叫做profile,是maven里面的概念,默认是resources.local生效的。如果想使用其他profile下面的配置,则增加 -Pprofile参数,如运行server ```mvn -Pskyee clean tomcat7:run```\n\n### server接口事例\n[http://115.159.40.202:8080/proxyipcenter/av?usedSign=&checkUrl=http%3A%2F%2Ffree-proxy-list.net%2F&domain=free-proxy-list.net&num=10](http://115.159.40.202:8080/proxyipcenter/av?usedSign=&checkUrl=http%3A%2F%2Ffree-proxy-list.net%2F&domain=free-proxy-list.net&num=10)\n````\n{\n     \"data\": {\n         \"data\": [\n             {\n                 \"id\": 257,\n                 \"ip\": \"203.192.12.148\",\n                 \"proxyIp\": \"203.192.12.149\",\n                 \"port\": 80,\n                 \"ipValue\": 3418360980,\n                 \"country\": \"中国\",\n                 \"area\": \"华北\",\n                 \"region\": \"北京市\",\n                 \"city\": \"北京市\",\n                 \"isp\": \"\",\n                 \"countryId\": \"CN\",\n                 \"areaId\": \"100000\",\n                 \"regionId\": \"110000\",\n                 \"cityId\": \"110100\",\n                 \"ispId\": \"-1\",\n                 \"transperent\": 2,\n                 \"speed\": 104,\n                 \"type\": 1,\n                 \"connectionScore\": 1310,\n                 \"availbelScore\": 8,\n                 \"connectionScoreDate\": 1475641264000,\n                 \"availbelScoreDate\": 1475646860000,\n                 \"createtime\": 1473840886000,\n                 \"lostheader\": false\n             },\n             {\n                 \"id\": 654,\n                 \"ip\": \"120.55.245.47\",\n                 \"proxyIp\": \"112.124.119.21\",\n                 \"port\": 80,\n                 \"ipValue\": 2016933167,\n                 \"country\": \"中国\",\n                 \"area\": \"华东\",\n                 \"region\": \"浙江省\",\n                 \"city\": \"杭州市\",\n                 \"isp\": \"阿里云\",\n                 \"countryId\": \"CN\",\n                 \"areaId\": \"300000\",\n                 \"regionId\": \"330000\",\n                 \"cityId\": \"330100\",\n                 \"ispId\": \"1000323\",\n                 \"transperent\": 2,\n                 \"speed\": 83,\n                 \"type\": 1,\n                 \"connectionScore\": 1429,\n                 \"availbelScore\": 2,\n                 \"connectionScoreDate\": 1475659905000,\n                 \"availbelScoreDate\": 1475630273000,\n                 \"createtime\": 1473840884000,\n                 \"lostheader\": false\n             },\n             {\n                 \"id\": 2489,\n                 \"ip\": \"124.193.33.233\",\n                 \"proxyIp\": \"124.193.33.233\",\n                 \"port\": 3128,\n                 \"ipValue\": 2093031913,\n                 \"country\": \"中国\",\n                 \"area\": \"华北\",\n                 \"region\": \"北京市\",\n                 \"city\": \"北京市\",\n                 \"isp\": \"鹏博士\",\n                 \"countryId\": \"CN\",\n                 \"areaId\": \"100000\",\n                 \"regionId\": \"110000\",\n                 \"cityId\": \"110100\",\n                 \"ispId\": \"1000143\",\n                 \"transperent\": 2,\n                 \"speed\": 3390,\n                 \"type\": 1,\n                 \"connectionScore\": 310,\n                 \"availbelScore\": 2,\n                 \"connectionScoreDate\": 1475657685000,\n                 \"availbelScoreDate\": 1475661878000,\n                 \"createtime\": 1473839334000,\n                 \"lostheader\": false\n             },\n             {\n                 \"id\": 5004,\n                 \"ip\": \"203.192.12.146\",\n                 \"proxyIp\": \"203.192.12.149\",\n                 \"port\": 80,\n                 \"ipValue\": 3418360978,\n                 \"country\": \"中国\",\n                 \"area\": \"华北\",\n                 \"region\": \"北京市\",\n                 \"city\": \"北京市\",\n                 \"isp\": \"\",\n                 \"countryId\": \"CN\",\n                 \"areaId\": \"100000\",\n                 \"regionId\": \"110000\",\n                 \"cityId\": \"110100\",\n                 \"ispId\": \"-1\",\n                 \"transperent\": 2,\n                 \"speed\": 161,\n                 \"type\": 1,\n                 \"connectionScore\": 1291,\n                 \"availbelScore\": 10,\n                 \"connectionScoreDate\": 1475638336000,\n                 \"availbelScoreDate\": 1475636727000,\n                 \"createtime\": 1473840882000,\n                 \"lostheader\": false\n             },\n             {\n                 \"id\": 5421,\n                 \"ip\": \"221.237.155.64\",\n                 \"proxyIp\": \"221.237.155.64\",\n                 \"port\": 9797,\n                 \"ipValue\": 3723336512,\n                 \"country\": \"中国\",\n                 \"area\": \"西南\",\n                 \"region\": \"四川省\",\n                 \"city\": \"成都市\",\n                 \"isp\": \"电信\",\n                 \"countryId\": \"CN\",\n                 \"areaId\": \"500000\",\n                 \"regionId\": \"510000\",\n                 \"cityId\": \"510100\",\n                 \"ispId\": \"100017\",\n                 \"transperent\": 2,\n                 \"speed\": 3238,\n                 \"type\": 1,\n                 \"connectionScore\": 119,\n                 \"availbelScore\": -1,\n                 \"connectionScoreDate\": 1475611973000,\n                 \"availbelScoreDate\": 1475629954000,\n                 \"createtime\": 1473840773000,\n                 \"lostheader\": false\n             },\n             {\n                 \"id\": 8722,\n                 \"ip\": \"58.243.0.162\",\n                 \"proxyIp\": \"58.243.0.162\",\n                 \"port\": 9999,\n                 \"ipValue\": 989003938,\n                 \"country\": \"中国\",\n                 \"area\": \"华东\",\n                 \"region\": \"安徽省\",\n                 \"city\": \"安庆市\",\n                 \"isp\": \"联通\",\n                 \"countryId\": \"CN\",\n                 \"areaId\": \"300000\",\n                 \"regionId\": \"340000\",\n                 \"cityId\": \"340800\",\n                 \"ispId\": \"100026\",\n                 \"transperent\": 2,\n                 \"speed\": 5143,\n                 \"type\": 1,\n                 \"connectionScore\": 154,\n                 \"availbelScore\": -3,\n                 \"connectionScoreDate\": 1475665673000,\n                 \"availbelScoreDate\": 1475614147000,\n                 \"createtime\": 1473839836000,\n                 \"lostheader\": false\n             },\n             {\n                 \"id\": 11698,\n                 \"ip\": \"218.7.170.190\",\n                 \"proxyIp\": \"218.7.170.190\",\n                 \"port\": 3128,\n                 \"ipValue\": 3657935550,\n                 \"country\": \"中国\",\n                 \"area\": \"东北\",\n                 \"region\": \"黑龙江省\",\n                 \"city\": \"绥化市\",\n                 \"isp\": \"联通\",\n                 \"countryId\": \"CN\",\n                 \"areaId\": \"200000\",\n                 \"regionId\": \"230000\",\n                 \"cityId\": \"231200\",\n                 \"ispId\": \"100026\",\n                 \"transperent\": 2,\n                 \"speed\": 3145,\n                 \"type\": 1,\n                 \"connectionScore\": 317,\n                 \"availbelScore\": -1,\n                 \"connectionScoreDate\": 1475642001000,\n                 \"availbelScoreDate\": 1475524810000,\n                 \"createtime\": 1473839128000,\n                 \"lostheader\": false\n             },\n             {\n                 \"id\": 13318,\n                 \"ip\": \"220.249.185.178\",\n                 \"proxyIp\": \"220.249.185.178\",\n                 \"port\": 9999,\n                 \"ipValue\": 3707353522,\n                 \"country\": \"中国\",\n                 \"area\": \"华东\",\n                 \"region\": \"福建省\",\n                 \"city\": \"福州市\",\n                 \"isp\": \"联通\",\n                 \"countryId\": \"CN\",\n                 \"areaId\": \"300000\",\n                 \"regionId\": \"350000\",\n                 \"cityId\": \"350100\",\n                 \"ispId\": \"100026\",\n                 \"transperent\": 2,\n                 \"speed\": 5094,\n                 \"type\": 1,\n                 \"connectionScore\": 129,\n                 \"availbelScore\": -1,\n                 \"connectionScoreDate\": 1475615670000,\n                 \"availbelScoreDate\": 1475585178000,\n                 \"createtime\": 1473840539000,\n                 \"lostheader\": false\n             },\n             {\n                 \"id\": 57033,\n                 \"ip\": \"210.245.25.228\",\n                 \"proxyIp\": \"210.245.25.228\",\n                 \"port\": 3128,\n                 \"ipValue\": 3539278308,\n                 \"country\": \"越南\",\n                 \"area\": \"\",\n                 \"region\": \"\",\n                 \"city\": \"\",\n                 \"isp\": \"\",\n                 \"countryId\": \"VN\",\n                 \"areaId\": \"\",\n                 \"regionId\": \"\",\n                 \"cityId\": \"\",\n                 \"ispId\": \"\",\n                 \"transperent\": 2,\n                 \"speed\": 1024,\n                 \"type\": 1,\n                 \"connectionScore\": 488,\n                 \"availbelScore\": 36,\n                 \"connectionScoreDate\": 1475635386000,\n                 \"availbelScoreDate\": 1475630473000,\n                 \"createtime\": 1473836572000,\n                 \"lostheader\": false\n             },\n             {\n                 \"id\": 124334,\n                 \"ip\": \"60.194.72.253\",\n                 \"proxyIp\": \"60.194.72.253\",\n                 \"port\": 3128,\n                 \"ipValue\": 1019365629,\n                 \"country\": \"中国\",\n                 \"area\": \"华北\",\n                 \"region\": \"北京市\",\n                 \"city\": \"北京市\",\n                 \"isp\": \"鹏博士\",\n                 \"countryId\": \"CN\",\n                 \"areaId\": \"100000\",\n                 \"regionId\": \"110000\",\n                 \"cityId\": \"110100\",\n                 \"ispId\": \"1000143\",\n                 \"transperent\": 2,\n                 \"speed\": 2366,\n                 \"type\": 1,\n                 \"connectionScore\": 610,\n                 \"availbelScore\": 16,\n                 \"connectionScoreDate\": 1475643516000,\n                 \"availbelScoreDate\": 1475631080000,\n                 \"createtime\": 1473839561000,\n                 \"lostheader\": false\n             }\n         ],\n         \"num\": 10,\n         \"sign\": \"9999#C99+999#9B99B99999##Y9999+9999999999999999999999t9999s99999999s9999999999999999999999999999#99999999999999GB999999999G9999s9s99999#9999999999Y9+999##99999999+99999999999999+999999999999B999+Y9999G9+99999999999YB99999999999999999999999+99Y999999999B9999G999s99G999999999#99999#9Y999s999999999#B99999999999999999999+999999Y9999999Y9999999999999Y9999Y999999999999999\"\n     },\n     \"status\": true\n }\n````\n\n\n\n\n## proxyipcenter client\n### [client 设计文档](http://git.oschina.net/virjar/proxyipcenter/blob/master/doc/client/design/README.md)\n### [client 使用文档](http://git.oschina.net/virjar/proxyipcenter/blob/master/doc/client/userGuide/README.md)\n\nclient运行原理\n这里讲述IP池的设计相关,如果您仅仅是为了使用dunproxy-client,则不必关心本文内容\n\nclient就是一个代理IP池的实现,IP池的设计基于两个点:\n\n1. 代理IP都是不稳定的,不可靠的,需要一个机制来切换IP,尽可能使用高质量IP。\n\n2. IP和环境关系很大,同一个IP在不同的机器下访问不同的目标网站,其可用性表现都是不一样的\n\n## 使用IpPoolAPI获取IP资源\n\n### 获取IP\n获取一个IP的方式是这样的 ``IpPool.getInstance().bind(domain, accessUrl);`` \n- 第一个参数是域名,可以传递null,传递null提取accessUrl schema里面的host\n- 第二个参数是你当前需要访问的url, 可以为null,为null时domain不能为空\n\n曾经有一个绑定用户的功能,使得同一个账户每次获取的IP相同,后来觉得是过度设计,因为对于抓取场景,切换IP是很普通的需求,而且貌似没有多少server会检查常用IP。就算有也是小众需求,本框架不必支持\n\n### 记录IP使用\n每当使用IP的时候,需要记录一次IP使用,也就是将IP实例的使用次数加一,用于打分机制计算IP的使用分值,评估IP可用性\n方式如下:``com.virjar.dungproxy.client.model.AvProxy.recordUsage``\n\n### 记录IP使用失败\n每当IP使用失败的时候,需要记录IP使用失败,也就是将IP实例的失败次数加一,用于打分机制计算IP的使用分值,评估IP可用性\n方式如下:``com.virjar.dungproxy.client.model.AvProxy.recordFailed()``\n\n### IP下线\nIP下线很简单,拿到IP实例,这样调用``com.virjar.dungproxy.client.model.AvProxy.offline()``。\n一般情况不建议这么做,因为IP池会自动检查IP是否应该下线,IP池可以定制各种策略。当时,有些时候IP池的检查机制比较缓慢,而上层业务可以明确知道本IP不可用,这个时候可以使用本API强制下线\n\n\n### 销毁IP池实例\nIP池是单例的,同时里面维护了两个任务线程,在业务完成的时候,需要销毁IP池才能终止内部线程。同时也会执行一些收尾工作,如将可用IP dump。\n销毁方式是:``com.virjar.dungproxy.client.ippool.IpPool.destroy``\n\n\n### 其他\nIP池有其他很多扩展点,但是目前接口没有开发完成,待后续完善\n\n\n\n\n## TODO 几个主流语言的客户端\n\n1. .NET/.NET core client (辣鸡楼主还没动手...)\n2. Python client(另外一个大佬好像忘了这事了...)\n3. Golang client(可能还是辣鸡楼主动手...)\n\n\n\n\n\n\n\n\n","slug":"ipproy_for_crawler","published":1,"updated":"2018-05-17T13:36:25.214Z","comments":1,"photos":[],"link":"","_id":"cjhal1fwi001up63113t9rzsd","content":"<p>##写在前面</p>\n<p>做爬虫的小伙伴一般都绕不过代理IP这个问题.</p>\n<p>PS:如果还没遇到被封IP的场景，要不就是你量太小人家懒得理你，要不就是人家压根不在乎…</p>\n<p>爬虫用户自己是没有能力维护一系列的代理服务器和代理IP的，这个成本实在有点高了。<br>所以公用代理服务器应运而生,现在几大云服务商家都提供代理IP服务，一般论个买…</p>\n<p>同时网上也有很多代理IP共享网站，会把一些免费的代理IP放出来给大家用。<br>大家都是做爬虫的，那么，是不是可以先把代理IP网站的数据爬一遍？<br>所以可以看到不少的爬代理IP的爬虫，如<a href=\"https://zhuanlan.zhihu.com/p/23928595\" target=\"_blank\" rel=\"noopener\">突破反爬虫的利器——开源IP代理池</a>之类的项目。<br>这些项目都能达到抓取代理IP数据的目的，很多时候也够用了。</p>\n<p>然而在使用过程中我们发现了一些问题：</p>\n<ol>\n<li>网站公布的代理IP不一定是可用的。可能代理服务器挂了，可能IP无效了…等等之类的。</li>\n<li>代理IP是部分可用的。某代理IP可用代理访问百度，但是代理访问谷歌的时候就GG了。</li>\n<li>代理连通性是好的，但是已经被访问站识别为代理IP返回验证码或者辣鸡数据。</li>\n</ol>\n<h2 id=\"proxyipcenter的解决方案\"><a href=\"#proxyipcenter的解决方案\" class=\"headerlink\" title=\"proxyipcenter的解决方案\"></a>proxyipcenter的解决方案</h2><p>出于以上种种的原因，按耐不住的dalao(@<a href=\"https://www.zhihu.com/people/virjar\" target=\"_blank\" rel=\"noopener\">virjar</a>)开始自己动手撸了。</p>\n<p>于是，<a href=\"http://git.oschina.net/virjar/proxyipcenter\" target=\"_blank\" rel=\"noopener\">proxyipcenter</a>出来了。</p>\n<p>这个项目做了什么东西呢？<br>dalao是这样写的：</p>\n<blockquote>\n<p>DungProxy是一个代理IP服务,他包括一个代理IP资源server端和一系列适配中心IP资源得客户端。</p>\n<p>server负责代理IP资源的收集维护。</p>\n<p>client则是一系列方便用户使用得API,他屏蔽了代理IP下载、代理IP选取、IP绑定、IP切换等比较复杂逻辑。用户只需要引入client即可方便使用代理IP服务</p>\n</blockquote>\n<p>简单来说：</p>\n<p>server是一个代理IP爬虫，同时负责简单的数据清洗。</p>\n<p>client本质是一个代理IP池，获取数据源之后，基于需要代理访问的网站在本地维护一个代理IP池供爬虫使用。</p>\n<p>以下内容转载自<a href=\"http://git.oschina.net/virjar/proxyipcenter/edit/master/doc/server/deploy/README.md\" target=\"_blank\" rel=\"noopener\">http://git.oschina.net/virjar/proxyipcenter</a>,<br>并已获得相关授权。(PS:dalao写的太好了，我都懒得重新写一遍了…问过dalao之后直接转载过来算了。)</p>\n<h2 id=\"proxyipcenter-server\"><a href=\"#proxyipcenter-server\" class=\"headerlink\" title=\"proxyipcenter server\"></a>proxyipcenter server</h2><p>DrungProxy的代理IP都是从互联网收集,他是架设在一个高度不可用的资源上面的服务。server会负责对这些资源进行清洗、校验、打分,最终输出可以被客户端使用的IP资源。IP资源从入库到最终判定可用生命流程如下</p>\n<ol>\n<li>IP抓取<br> server监听了很多代理IP网站,这些网站包括国内外十几家,有意思的是drungProxy的IP爬虫是一系列网站模版。五六行配置即可实现一个简单的网站模版,然后我们有一个上层调度模块将会负责调起模版进行数据抓取。</li>\n<li>IP消重<br>需要消重的原因是程序运行到一定时间之后,大量IP都是数据库里面已经存在的了,这个时候如果在数据库进行消重逻辑将会导致大量数据库读写,实际上我们的服务器是一个1块钱的腾讯云(曾经是),看起来是撑不住这么大的请求的(平均每天可以有10K量级)。最后在入库前设置了一个bloomFilter消重模块,能够高效的检测资源是否被入库过。</li>\n<li>位置信息完善<br>这个逻辑不大,通过taobaoIp接口获取地址信息,完善IP资源元数据。<a href=\"http://ip.taobao.com/\" target=\"_blank\" rel=\"noopener\">taobaoIP</a></li>\n<li>IP验证<br>IP验证分为好几个步骤。我们的IP总资源有80W,检验一个IP是否可用一般来说需要20秒左右的时间,因为代理IP本身响应比较慢,我们会把超时时间设置得比较长。所以可以计算一下80W数据走一轮将要消耗得时间,即使在多线程并行环境下时间也是很多的。为了在一定资源下完成校验,我们设计了如下步骤</li>\n</ol>\n<ul>\n<li>端口开启校验,在进行可用性校验前,首先需要检查IP端口是否开启。调研发现大量资源其实端口都不通,所以专门设计一个任务验证端口是否开启,端口开启验证超时时间为5秒。由于大多数资源端口都没有开启,所以大部分资源的校验时间下降到5秒了。</li>\n<li>可用性校验,进行可用性校验的需要先进行端口开启校验,系统中端口开启的资源大概3W,所以校验可用性的总资源有3W左右。可用性校验存在如下问题,很多代理IP其实不是代理网站,想他发送请求最终不是我们预期的数据,比如他返回给我们一个代理IP认证网页。所以我们不能根据是否能够请求到数据来判定IP是否可用。我们的做法是在公网放置一个API接口,然后控制代理IP访问我们自己的接口,如果能够拿到符合我们接口的预期数据,那么认为IP可用。</li>\n<li>domain可用该校验,可用性校验通过之后IP还不是真正可用,悲伤的发现代理IP是和域名相关的。所以同一个IP在不同域名下表现可能不一样。所以我们维护了一个域名IP池,这里面存储各个域名下可用IP</li>\n</ul>\n<ol start=\"5\">\n<li>IP分发<br>IP分发是根据客户请求分配可用IP。分发逻辑现在还没有完全完善,但是已经实现了最迫切和有校的分发方案。分发逻辑设计是:先尝试查询domainIP池,再根据其他请求参数做条件匹配,再查询系统可用IP,再随机选择可用填充。四个步骤如果有一个步骤得到的IP超过请求参数期待数目,则不进行接下来的动作。</li>\n</ol>\n<h3 id=\"IP验证模型\"><a href=\"#IP验证模型\" class=\"headerlink\" title=\"IP验证模型\"></a>IP验证模型</h3><p>再IP验证的时候,我们设计了一个模型用来确定哪些IP应该优先验证。模型描述如下:长期可用IP检测频率低,长期不可用IP检测评率低。不稳定IP和刚加入的IP检测频率高。我们使用优先队列来实现这个逻辑,所有IP根据分值放在不同优先队列中,每次校验的时候再不同优先队列中拿出一定资源进行校验(不同优先级拿出的资源数目不一样,高优先级的对象拿出更多资源),对于同一个优先队列,我们根据最后验证时间排序。使上次更新时间最久的资源被优先选择。</p>\n<h3 id=\"分发去重\"><a href=\"#分发去重\" class=\"headerlink\" title=\"分发去重\"></a>分发去重</h3><p>分发资源的时候,设计去重问题,也就是根据相同条件,每次分发得到的IP很大可能会重复。为了规避这个问题,每次分发都会相应的下发一个资源签名,他会记录分发过的IP。在下次请求的时候,客户端需要带上这个签名,服务器会根据签名过滤,同时会重新对新分发的IP资源做再次签名.</p>\n<h2 id=\"server部署\"><a href=\"#server部署\" class=\"headerlink\" title=\"server部署\"></a>server部署</h2><p>server端使用java编写,使用maven管理项目,使用mysql作为数据库。相关技术包括springMVC,spring,tomcat,mybatis,guava,fastjson,httpclient等。<br>运行server的方式很简单</p>\n<ol>\n<li>在项目根目录执行maven命令(需要提前安装maven,maven安装方式略)<figure class=\"highlight plain\"><figcaption><span>install -Dmaven.test.skip</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2. 在server目录执行maven命令 ```mvn tomcat7:run</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"server配置\"><a href=\"#server配置\" class=\"headerlink\" title=\"server配置\"></a>server配置</h3><p>直接运行项目使用的是我们的默认数据库,同时使用的是默认配置。实际上server存在一些配置用来设置运行参数。合理的运行参数能够合理使用机器资源以及达到更好的运行效果。<br>项目主要有两个配置文件需要配置:</p>\n<ol>\n<li>mysql.properties 用来配置数据库信息</li>\n<li>config.properties 配置其他启动参数,主要需要关注里面几个url地址,还有 system.thread.<em>的参数项。system.thread</em>用于指定某一种类型的任务执行的线程数,如果数据小于1,则这个模块不会启动。但是如果这个模块接收到了任务请求,那么他会转发到其他服务器上面(也就是上面的两个forward相关的url,没办法服务器都是腊鸡服务器  )</li>\n</ol>\n<p>其他的应该没有了把,哦对了,项目存在多个profile,也就是resources.local,resources.beta,resources.prod等。他们叫做profile,是maven里面的概念,默认是resources.local生效的。如果想使用其他profile下面的配置,则增加 -Pprofile参数,如运行server <figure class=\"highlight plain\"><figcaption><span>-Pskyee clean tomcat7:run```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### server接口事例</span><br><span class=\"line\">[http://115.159.40.202:8080/proxyipcenter/av?usedSign=&amp;checkUrl=http%3A%2F%2Ffree-proxy-list.net%2F&amp;domain=free-proxy-list.net&amp;num=10](http://115.159.40.202:8080/proxyipcenter/av?usedSign=&amp;checkUrl=http%3A%2F%2Ffree-proxy-list.net%2F&amp;domain=free-proxy-list.net&amp;num=10)</span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure></p>\n<p>{<br>     “data”: {<br>         “data”: [<br>             {<br>                 “id”: 257,<br>                 “ip”: “203.192.12.148”,<br>                 “proxyIp”: “203.192.12.149”,<br>                 “port”: 80,<br>                 “ipValue”: 3418360980,<br>                 “country”: “中国”,<br>                 “area”: “华北”,<br>                 “region”: “北京市”,<br>                 “city”: “北京市”,<br>                 “isp”: “”,<br>                 “countryId”: “CN”,<br>                 “areaId”: “100000”,<br>                 “regionId”: “110000”,<br>                 “cityId”: “110100”,<br>                 “ispId”: “-1”,<br>                 “transperent”: 2,<br>                 “speed”: 104,<br>                 “type”: 1,<br>                 “connectionScore”: 1310,<br>                 “availbelScore”: 8,<br>                 “connectionScoreDate”: 1475641264000,<br>                 “availbelScoreDate”: 1475646860000,<br>                 “createtime”: 1473840886000,<br>                 “lostheader”: false<br>             },<br>             {<br>                 “id”: 654,<br>                 “ip”: “120.55.245.47”,<br>                 “proxyIp”: “112.124.119.21”,<br>                 “port”: 80,<br>                 “ipValue”: 2016933167,<br>                 “country”: “中国”,<br>                 “area”: “华东”,<br>                 “region”: “浙江省”,<br>                 “city”: “杭州市”,<br>                 “isp”: “阿里云”,<br>                 “countryId”: “CN”,<br>                 “areaId”: “300000”,<br>                 “regionId”: “330000”,<br>                 “cityId”: “330100”,<br>                 “ispId”: “1000323”,<br>                 “transperent”: 2,<br>                 “speed”: 83,<br>                 “type”: 1,<br>                 “connectionScore”: 1429,<br>                 “availbelScore”: 2,<br>                 “connectionScoreDate”: 1475659905000,<br>                 “availbelScoreDate”: 1475630273000,<br>                 “createtime”: 1473840884000,<br>                 “lostheader”: false<br>             },<br>             {<br>                 “id”: 2489,<br>                 “ip”: “124.193.33.233”,<br>                 “proxyIp”: “124.193.33.233”,<br>                 “port”: 3128,<br>                 “ipValue”: 2093031913,<br>                 “country”: “中国”,<br>                 “area”: “华北”,<br>                 “region”: “北京市”,<br>                 “city”: “北京市”,<br>                 “isp”: “鹏博士”,<br>                 “countryId”: “CN”,<br>                 “areaId”: “100000”,<br>                 “regionId”: “110000”,<br>                 “cityId”: “110100”,<br>                 “ispId”: “1000143”,<br>                 “transperent”: 2,<br>                 “speed”: 3390,<br>                 “type”: 1,<br>                 “connectionScore”: 310,<br>                 “availbelScore”: 2,<br>                 “connectionScoreDate”: 1475657685000,<br>                 “availbelScoreDate”: 1475661878000,<br>                 “createtime”: 1473839334000,<br>                 “lostheader”: false<br>             },<br>             {<br>                 “id”: 5004,<br>                 “ip”: “203.192.12.146”,<br>                 “proxyIp”: “203.192.12.149”,<br>                 “port”: 80,<br>                 “ipValue”: 3418360978,<br>                 “country”: “中国”,<br>                 “area”: “华北”,<br>                 “region”: “北京市”,<br>                 “city”: “北京市”,<br>                 “isp”: “”,<br>                 “countryId”: “CN”,<br>                 “areaId”: “100000”,<br>                 “regionId”: “110000”,<br>                 “cityId”: “110100”,<br>                 “ispId”: “-1”,<br>                 “transperent”: 2,<br>                 “speed”: 161,<br>                 “type”: 1,<br>                 “connectionScore”: 1291,<br>                 “availbelScore”: 10,<br>                 “connectionScoreDate”: 1475638336000,<br>                 “availbelScoreDate”: 1475636727000,<br>                 “createtime”: 1473840882000,<br>                 “lostheader”: false<br>             },<br>             {<br>                 “id”: 5421,<br>                 “ip”: “221.237.155.64”,<br>                 “proxyIp”: “221.237.155.64”,<br>                 “port”: 9797,<br>                 “ipValue”: 3723336512,<br>                 “country”: “中国”,<br>                 “area”: “西南”,<br>                 “region”: “四川省”,<br>                 “city”: “成都市”,<br>                 “isp”: “电信”,<br>                 “countryId”: “CN”,<br>                 “areaId”: “500000”,<br>                 “regionId”: “510000”,<br>                 “cityId”: “510100”,<br>                 “ispId”: “100017”,<br>                 “transperent”: 2,<br>                 “speed”: 3238,<br>                 “type”: 1,<br>                 “connectionScore”: 119,<br>                 “availbelScore”: -1,<br>                 “connectionScoreDate”: 1475611973000,<br>                 “availbelScoreDate”: 1475629954000,<br>                 “createtime”: 1473840773000,<br>                 “lostheader”: false<br>             },<br>             {<br>                 “id”: 8722,<br>                 “ip”: “58.243.0.162”,<br>                 “proxyIp”: “58.243.0.162”,<br>                 “port”: 9999,<br>                 “ipValue”: 989003938,<br>                 “country”: “中国”,<br>                 “area”: “华东”,<br>                 “region”: “安徽省”,<br>                 “city”: “安庆市”,<br>                 “isp”: “联通”,<br>                 “countryId”: “CN”,<br>                 “areaId”: “300000”,<br>                 “regionId”: “340000”,<br>                 “cityId”: “340800”,<br>                 “ispId”: “100026”,<br>                 “transperent”: 2,<br>                 “speed”: 5143,<br>                 “type”: 1,<br>                 “connectionScore”: 154,<br>                 “availbelScore”: -3,<br>                 “connectionScoreDate”: 1475665673000,<br>                 “availbelScoreDate”: 1475614147000,<br>                 “createtime”: 1473839836000,<br>                 “lostheader”: false<br>             },<br>             {<br>                 “id”: 11698,<br>                 “ip”: “218.7.170.190”,<br>                 “proxyIp”: “218.7.170.190”,<br>                 “port”: 3128,<br>                 “ipValue”: 3657935550,<br>                 “country”: “中国”,<br>                 “area”: “东北”,<br>                 “region”: “黑龙江省”,<br>                 “city”: “绥化市”,<br>                 “isp”: “联通”,<br>                 “countryId”: “CN”,<br>                 “areaId”: “200000”,<br>                 “regionId”: “230000”,<br>                 “cityId”: “231200”,<br>                 “ispId”: “100026”,<br>                 “transperent”: 2,<br>                 “speed”: 3145,<br>                 “type”: 1,<br>                 “connectionScore”: 317,<br>                 “availbelScore”: -1,<br>                 “connectionScoreDate”: 1475642001000,<br>                 “availbelScoreDate”: 1475524810000,<br>                 “createtime”: 1473839128000,<br>                 “lostheader”: false<br>             },<br>             {<br>                 “id”: 13318,<br>                 “ip”: “220.249.185.178”,<br>                 “proxyIp”: “220.249.185.178”,<br>                 “port”: 9999,<br>                 “ipValue”: 3707353522,<br>                 “country”: “中国”,<br>                 “area”: “华东”,<br>                 “region”: “福建省”,<br>                 “city”: “福州市”,<br>                 “isp”: “联通”,<br>                 “countryId”: “CN”,<br>                 “areaId”: “300000”,<br>                 “regionId”: “350000”,<br>                 “cityId”: “350100”,<br>                 “ispId”: “100026”,<br>                 “transperent”: 2,<br>                 “speed”: 5094,<br>                 “type”: 1,<br>                 “connectionScore”: 129,<br>                 “availbelScore”: -1,<br>                 “connectionScoreDate”: 1475615670000,<br>                 “availbelScoreDate”: 1475585178000,<br>                 “createtime”: 1473840539000,<br>                 “lostheader”: false<br>             },<br>             {<br>                 “id”: 57033,<br>                 “ip”: “210.245.25.228”,<br>                 “proxyIp”: “210.245.25.228”,<br>                 “port”: 3128,<br>                 “ipValue”: 3539278308,<br>                 “country”: “越南”,<br>                 “area”: “”,<br>                 “region”: “”,<br>                 “city”: “”,<br>                 “isp”: “”,<br>                 “countryId”: “VN”,<br>                 “areaId”: “”,<br>                 “regionId”: “”,<br>                 “cityId”: “”,<br>                 “ispId”: “”,<br>                 “transperent”: 2,<br>                 “speed”: 1024,<br>                 “type”: 1,<br>                 “connectionScore”: 488,<br>                 “availbelScore”: 36,<br>                 “connectionScoreDate”: 1475635386000,<br>                 “availbelScoreDate”: 1475630473000,<br>                 “createtime”: 1473836572000,<br>                 “lostheader”: false<br>             },<br>             {<br>                 “id”: 124334,<br>                 “ip”: “60.194.72.253”,<br>                 “proxyIp”: “60.194.72.253”,<br>                 “port”: 3128,<br>                 “ipValue”: 1019365629,<br>                 “country”: “中国”,<br>                 “area”: “华北”,<br>                 “region”: “北京市”,<br>                 “city”: “北京市”,<br>                 “isp”: “鹏博士”,<br>                 “countryId”: “CN”,<br>                 “areaId”: “100000”,<br>                 “regionId”: “110000”,<br>                 “cityId”: “110100”,<br>                 “ispId”: “1000143”,<br>                 “transperent”: 2,<br>                 “speed”: 2366,<br>                 “type”: 1,<br>                 “connectionScore”: 610,<br>                 “availbelScore”: 16,<br>                 “connectionScoreDate”: 1475643516000,<br>                 “availbelScoreDate”: 1475631080000,<br>                 “createtime”: 1473839561000,<br>                 “lostheader”: false<br>             }<br>         ],<br>         “num”: 10,<br>         “sign”: “9999#C99+999#9B99B99999##Y9999+9999999999999999999999t9999s99999999s9999999999999999999999999999#99999999999999GB999999999G9999s9s99999#9999999999Y9+999##99999999+99999999999999+999999999999B999+Y9999G9+99999999999YB99999999999999999999999+99Y999999999B9999G999s99G999999999#99999#9Y999s999999999#B99999999999999999999+999999Y9999999Y9999999999999Y9999Y999999999999999”<br>     },<br>     “status”: true<br> }<br><code></code></p>\n<h2 id=\"proxyipcenter-client\"><a href=\"#proxyipcenter-client\" class=\"headerlink\" title=\"proxyipcenter client\"></a>proxyipcenter client</h2><h3 id=\"client-设计文档\"><a href=\"#client-设计文档\" class=\"headerlink\" title=\"client 设计文档\"></a><a href=\"http://git.oschina.net/virjar/proxyipcenter/blob/master/doc/client/design/README.md\" target=\"_blank\" rel=\"noopener\">client 设计文档</a></h3><h3 id=\"client-使用文档\"><a href=\"#client-使用文档\" class=\"headerlink\" title=\"client 使用文档\"></a><a href=\"http://git.oschina.net/virjar/proxyipcenter/blob/master/doc/client/userGuide/README.md\" target=\"_blank\" rel=\"noopener\">client 使用文档</a></h3><p>client运行原理<br>这里讲述IP池的设计相关,如果您仅仅是为了使用dunproxy-client,则不必关心本文内容</p>\n<p>client就是一个代理IP池的实现,IP池的设计基于两个点:</p>\n<ol>\n<li><p>代理IP都是不稳定的,不可靠的,需要一个机制来切换IP,尽可能使用高质量IP。</p>\n</li>\n<li><p>IP和环境关系很大,同一个IP在不同的机器下访问不同的目标网站,其可用性表现都是不一样的</p>\n</li>\n</ol>\n<h2 id=\"使用IpPoolAPI获取IP资源\"><a href=\"#使用IpPoolAPI获取IP资源\" class=\"headerlink\" title=\"使用IpPoolAPI获取IP资源\"></a>使用IpPoolAPI获取IP资源</h2><h3 id=\"获取IP\"><a href=\"#获取IP\" class=\"headerlink\" title=\"获取IP\"></a>获取IP</h3><p>获取一个IP的方式是这样的 <code>IpPool.getInstance().bind(domain, accessUrl);</code> </p>\n<ul>\n<li>第一个参数是域名,可以传递null,传递null提取accessUrl schema里面的host</li>\n<li>第二个参数是你当前需要访问的url, 可以为null,为null时domain不能为空</li>\n</ul>\n<p>曾经有一个绑定用户的功能,使得同一个账户每次获取的IP相同,后来觉得是过度设计,因为对于抓取场景,切换IP是很普通的需求,而且貌似没有多少server会检查常用IP。就算有也是小众需求,本框架不必支持</p>\n<h3 id=\"记录IP使用\"><a href=\"#记录IP使用\" class=\"headerlink\" title=\"记录IP使用\"></a>记录IP使用</h3><p>每当使用IP的时候,需要记录一次IP使用,也就是将IP实例的使用次数加一,用于打分机制计算IP的使用分值,评估IP可用性<br>方式如下:<code>com.virjar.dungproxy.client.model.AvProxy.recordUsage</code></p>\n<h3 id=\"记录IP使用失败\"><a href=\"#记录IP使用失败\" class=\"headerlink\" title=\"记录IP使用失败\"></a>记录IP使用失败</h3><p>每当IP使用失败的时候,需要记录IP使用失败,也就是将IP实例的失败次数加一,用于打分机制计算IP的使用分值,评估IP可用性<br>方式如下:<code>com.virjar.dungproxy.client.model.AvProxy.recordFailed()</code></p>\n<h3 id=\"IP下线\"><a href=\"#IP下线\" class=\"headerlink\" title=\"IP下线\"></a>IP下线</h3><p>IP下线很简单,拿到IP实例,这样调用<code>com.virjar.dungproxy.client.model.AvProxy.offline()</code>。<br>一般情况不建议这么做,因为IP池会自动检查IP是否应该下线,IP池可以定制各种策略。当时,有些时候IP池的检查机制比较缓慢,而上层业务可以明确知道本IP不可用,这个时候可以使用本API强制下线</p>\n<h3 id=\"销毁IP池实例\"><a href=\"#销毁IP池实例\" class=\"headerlink\" title=\"销毁IP池实例\"></a>销毁IP池实例</h3><p>IP池是单例的,同时里面维护了两个任务线程,在业务完成的时候,需要销毁IP池才能终止内部线程。同时也会执行一些收尾工作,如将可用IP dump。<br>销毁方式是:<code>com.virjar.dungproxy.client.ippool.IpPool.destroy</code></p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>IP池有其他很多扩展点,但是目前接口没有开发完成,待后续完善</p>\n<h2 id=\"TODO-几个主流语言的客户端\"><a href=\"#TODO-几个主流语言的客户端\" class=\"headerlink\" title=\"TODO 几个主流语言的客户端\"></a>TODO 几个主流语言的客户端</h2><ol>\n<li>.NET/.NET core client (辣鸡楼主还没动手…)</li>\n<li>Python client(另外一个大佬好像忘了这事了…)</li>\n<li>Golang client(可能还是辣鸡楼主动手…)</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>##写在前面</p>\n<p>做爬虫的小伙伴一般都绕不过代理IP这个问题.</p>\n<p>PS:如果还没遇到被封IP的场景，要不就是你量太小人家懒得理你，要不就是人家压根不在乎…</p>\n<p>爬虫用户自己是没有能力维护一系列的代理服务器和代理IP的，这个成本实在有点高了。<br>所以公用代理服务器应运而生,现在几大云服务商家都提供代理IP服务，一般论个买…</p>\n<p>同时网上也有很多代理IP共享网站，会把一些免费的代理IP放出来给大家用。<br>大家都是做爬虫的，那么，是不是可以先把代理IP网站的数据爬一遍？<br>所以可以看到不少的爬代理IP的爬虫，如<a href=\"https://zhuanlan.zhihu.com/p/23928595\" target=\"_blank\" rel=\"noopener\">突破反爬虫的利器——开源IP代理池</a>之类的项目。<br>这些项目都能达到抓取代理IP数据的目的，很多时候也够用了。</p>\n<p>然而在使用过程中我们发现了一些问题：</p>\n<ol>\n<li>网站公布的代理IP不一定是可用的。可能代理服务器挂了，可能IP无效了…等等之类的。</li>\n<li>代理IP是部分可用的。某代理IP可用代理访问百度，但是代理访问谷歌的时候就GG了。</li>\n<li>代理连通性是好的，但是已经被访问站识别为代理IP返回验证码或者辣鸡数据。</li>\n</ol>\n<h2 id=\"proxyipcenter的解决方案\"><a href=\"#proxyipcenter的解决方案\" class=\"headerlink\" title=\"proxyipcenter的解决方案\"></a>proxyipcenter的解决方案</h2><p>出于以上种种的原因，按耐不住的dalao(@<a href=\"https://www.zhihu.com/people/virjar\" target=\"_blank\" rel=\"noopener\">virjar</a>)开始自己动手撸了。</p>\n<p>于是，<a href=\"http://git.oschina.net/virjar/proxyipcenter\" target=\"_blank\" rel=\"noopener\">proxyipcenter</a>出来了。</p>\n<p>这个项目做了什么东西呢？<br>dalao是这样写的：</p>\n<blockquote>\n<p>DungProxy是一个代理IP服务,他包括一个代理IP资源server端和一系列适配中心IP资源得客户端。</p>\n<p>server负责代理IP资源的收集维护。</p>\n<p>client则是一系列方便用户使用得API,他屏蔽了代理IP下载、代理IP选取、IP绑定、IP切换等比较复杂逻辑。用户只需要引入client即可方便使用代理IP服务</p>\n</blockquote>\n<p>简单来说：</p>\n<p>server是一个代理IP爬虫，同时负责简单的数据清洗。</p>\n<p>client本质是一个代理IP池，获取数据源之后，基于需要代理访问的网站在本地维护一个代理IP池供爬虫使用。</p>\n<p>以下内容转载自<a href=\"http://git.oschina.net/virjar/proxyipcenter/edit/master/doc/server/deploy/README.md\" target=\"_blank\" rel=\"noopener\">http://git.oschina.net/virjar/proxyipcenter</a>,<br>并已获得相关授权。(PS:dalao写的太好了，我都懒得重新写一遍了…问过dalao之后直接转载过来算了。)</p>\n<h2 id=\"proxyipcenter-server\"><a href=\"#proxyipcenter-server\" class=\"headerlink\" title=\"proxyipcenter server\"></a>proxyipcenter server</h2><p>DrungProxy的代理IP都是从互联网收集,他是架设在一个高度不可用的资源上面的服务。server会负责对这些资源进行清洗、校验、打分,最终输出可以被客户端使用的IP资源。IP资源从入库到最终判定可用生命流程如下</p>\n<ol>\n<li>IP抓取<br> server监听了很多代理IP网站,这些网站包括国内外十几家,有意思的是drungProxy的IP爬虫是一系列网站模版。五六行配置即可实现一个简单的网站模版,然后我们有一个上层调度模块将会负责调起模版进行数据抓取。</li>\n<li>IP消重<br>需要消重的原因是程序运行到一定时间之后,大量IP都是数据库里面已经存在的了,这个时候如果在数据库进行消重逻辑将会导致大量数据库读写,实际上我们的服务器是一个1块钱的腾讯云(曾经是),看起来是撑不住这么大的请求的(平均每天可以有10K量级)。最后在入库前设置了一个bloomFilter消重模块,能够高效的检测资源是否被入库过。</li>\n<li>位置信息完善<br>这个逻辑不大,通过taobaoIp接口获取地址信息,完善IP资源元数据。<a href=\"http://ip.taobao.com/\" target=\"_blank\" rel=\"noopener\">taobaoIP</a></li>\n<li>IP验证<br>IP验证分为好几个步骤。我们的IP总资源有80W,检验一个IP是否可用一般来说需要20秒左右的时间,因为代理IP本身响应比较慢,我们会把超时时间设置得比较长。所以可以计算一下80W数据走一轮将要消耗得时间,即使在多线程并行环境下时间也是很多的。为了在一定资源下完成校验,我们设计了如下步骤</li>\n</ol>\n<ul>\n<li>端口开启校验,在进行可用性校验前,首先需要检查IP端口是否开启。调研发现大量资源其实端口都不通,所以专门设计一个任务验证端口是否开启,端口开启验证超时时间为5秒。由于大多数资源端口都没有开启,所以大部分资源的校验时间下降到5秒了。</li>\n<li>可用性校验,进行可用性校验的需要先进行端口开启校验,系统中端口开启的资源大概3W,所以校验可用性的总资源有3W左右。可用性校验存在如下问题,很多代理IP其实不是代理网站,想他发送请求最终不是我们预期的数据,比如他返回给我们一个代理IP认证网页。所以我们不能根据是否能够请求到数据来判定IP是否可用。我们的做法是在公网放置一个API接口,然后控制代理IP访问我们自己的接口,如果能够拿到符合我们接口的预期数据,那么认为IP可用。</li>\n<li>domain可用该校验,可用性校验通过之后IP还不是真正可用,悲伤的发现代理IP是和域名相关的。所以同一个IP在不同域名下表现可能不一样。所以我们维护了一个域名IP池,这里面存储各个域名下可用IP</li>\n</ul>\n<ol start=\"5\">\n<li>IP分发<br>IP分发是根据客户请求分配可用IP。分发逻辑现在还没有完全完善,但是已经实现了最迫切和有校的分发方案。分发逻辑设计是:先尝试查询domainIP池,再根据其他请求参数做条件匹配,再查询系统可用IP,再随机选择可用填充。四个步骤如果有一个步骤得到的IP超过请求参数期待数目,则不进行接下来的动作。</li>\n</ol>\n<h3 id=\"IP验证模型\"><a href=\"#IP验证模型\" class=\"headerlink\" title=\"IP验证模型\"></a>IP验证模型</h3><p>再IP验证的时候,我们设计了一个模型用来确定哪些IP应该优先验证。模型描述如下:长期可用IP检测频率低,长期不可用IP检测评率低。不稳定IP和刚加入的IP检测频率高。我们使用优先队列来实现这个逻辑,所有IP根据分值放在不同优先队列中,每次校验的时候再不同优先队列中拿出一定资源进行校验(不同优先级拿出的资源数目不一样,高优先级的对象拿出更多资源),对于同一个优先队列,我们根据最后验证时间排序。使上次更新时间最久的资源被优先选择。</p>\n<h3 id=\"分发去重\"><a href=\"#分发去重\" class=\"headerlink\" title=\"分发去重\"></a>分发去重</h3><p>分发资源的时候,设计去重问题,也就是根据相同条件,每次分发得到的IP很大可能会重复。为了规避这个问题,每次分发都会相应的下发一个资源签名,他会记录分发过的IP。在下次请求的时候,客户端需要带上这个签名,服务器会根据签名过滤,同时会重新对新分发的IP资源做再次签名.</p>\n<h2 id=\"server部署\"><a href=\"#server部署\" class=\"headerlink\" title=\"server部署\"></a>server部署</h2><p>server端使用java编写,使用maven管理项目,使用mysql作为数据库。相关技术包括springMVC,spring,tomcat,mybatis,guava,fastjson,httpclient等。<br>运行server的方式很简单</p>\n<ol>\n<li>在项目根目录执行maven命令(需要提前安装maven,maven安装方式略)<figure class=\"highlight plain\"><figcaption><span>install -Dmaven.test.skip</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2. 在server目录执行maven命令 ```mvn tomcat7:run</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"server配置\"><a href=\"#server配置\" class=\"headerlink\" title=\"server配置\"></a>server配置</h3><p>直接运行项目使用的是我们的默认数据库,同时使用的是默认配置。实际上server存在一些配置用来设置运行参数。合理的运行参数能够合理使用机器资源以及达到更好的运行效果。<br>项目主要有两个配置文件需要配置:</p>\n<ol>\n<li>mysql.properties 用来配置数据库信息</li>\n<li>config.properties 配置其他启动参数,主要需要关注里面几个url地址,还有 system.thread.<em>的参数项。system.thread</em>用于指定某一种类型的任务执行的线程数,如果数据小于1,则这个模块不会启动。但是如果这个模块接收到了任务请求,那么他会转发到其他服务器上面(也就是上面的两个forward相关的url,没办法服务器都是腊鸡服务器  )</li>\n</ol>\n<p>其他的应该没有了把,哦对了,项目存在多个profile,也就是resources.local,resources.beta,resources.prod等。他们叫做profile,是maven里面的概念,默认是resources.local生效的。如果想使用其他profile下面的配置,则增加 -Pprofile参数,如运行server <figure class=\"highlight plain\"><figcaption><span>-Pskyee clean tomcat7:run```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### server接口事例</span><br><span class=\"line\">[http://115.159.40.202:8080/proxyipcenter/av?usedSign=&amp;checkUrl=http%3A%2F%2Ffree-proxy-list.net%2F&amp;domain=free-proxy-list.net&amp;num=10](http://115.159.40.202:8080/proxyipcenter/av?usedSign=&amp;checkUrl=http%3A%2F%2Ffree-proxy-list.net%2F&amp;domain=free-proxy-list.net&amp;num=10)</span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure></p>\n<p>{<br>     “data”: {<br>         “data”: [<br>             {<br>                 “id”: 257,<br>                 “ip”: “203.192.12.148”,<br>                 “proxyIp”: “203.192.12.149”,<br>                 “port”: 80,<br>                 “ipValue”: 3418360980,<br>                 “country”: “中国”,<br>                 “area”: “华北”,<br>                 “region”: “北京市”,<br>                 “city”: “北京市”,<br>                 “isp”: “”,<br>                 “countryId”: “CN”,<br>                 “areaId”: “100000”,<br>                 “regionId”: “110000”,<br>                 “cityId”: “110100”,<br>                 “ispId”: “-1”,<br>                 “transperent”: 2,<br>                 “speed”: 104,<br>                 “type”: 1,<br>                 “connectionScore”: 1310,<br>                 “availbelScore”: 8,<br>                 “connectionScoreDate”: 1475641264000,<br>                 “availbelScoreDate”: 1475646860000,<br>                 “createtime”: 1473840886000,<br>                 “lostheader”: false<br>             },<br>             {<br>                 “id”: 654,<br>                 “ip”: “120.55.245.47”,<br>                 “proxyIp”: “112.124.119.21”,<br>                 “port”: 80,<br>                 “ipValue”: 2016933167,<br>                 “country”: “中国”,<br>                 “area”: “华东”,<br>                 “region”: “浙江省”,<br>                 “city”: “杭州市”,<br>                 “isp”: “阿里云”,<br>                 “countryId”: “CN”,<br>                 “areaId”: “300000”,<br>                 “regionId”: “330000”,<br>                 “cityId”: “330100”,<br>                 “ispId”: “1000323”,<br>                 “transperent”: 2,<br>                 “speed”: 83,<br>                 “type”: 1,<br>                 “connectionScore”: 1429,<br>                 “availbelScore”: 2,<br>                 “connectionScoreDate”: 1475659905000,<br>                 “availbelScoreDate”: 1475630273000,<br>                 “createtime”: 1473840884000,<br>                 “lostheader”: false<br>             },<br>             {<br>                 “id”: 2489,<br>                 “ip”: “124.193.33.233”,<br>                 “proxyIp”: “124.193.33.233”,<br>                 “port”: 3128,<br>                 “ipValue”: 2093031913,<br>                 “country”: “中国”,<br>                 “area”: “华北”,<br>                 “region”: “北京市”,<br>                 “city”: “北京市”,<br>                 “isp”: “鹏博士”,<br>                 “countryId”: “CN”,<br>                 “areaId”: “100000”,<br>                 “regionId”: “110000”,<br>                 “cityId”: “110100”,<br>                 “ispId”: “1000143”,<br>                 “transperent”: 2,<br>                 “speed”: 3390,<br>                 “type”: 1,<br>                 “connectionScore”: 310,<br>                 “availbelScore”: 2,<br>                 “connectionScoreDate”: 1475657685000,<br>                 “availbelScoreDate”: 1475661878000,<br>                 “createtime”: 1473839334000,<br>                 “lostheader”: false<br>             },<br>             {<br>                 “id”: 5004,<br>                 “ip”: “203.192.12.146”,<br>                 “proxyIp”: “203.192.12.149”,<br>                 “port”: 80,<br>                 “ipValue”: 3418360978,<br>                 “country”: “中国”,<br>                 “area”: “华北”,<br>                 “region”: “北京市”,<br>                 “city”: “北京市”,<br>                 “isp”: “”,<br>                 “countryId”: “CN”,<br>                 “areaId”: “100000”,<br>                 “regionId”: “110000”,<br>                 “cityId”: “110100”,<br>                 “ispId”: “-1”,<br>                 “transperent”: 2,<br>                 “speed”: 161,<br>                 “type”: 1,<br>                 “connectionScore”: 1291,<br>                 “availbelScore”: 10,<br>                 “connectionScoreDate”: 1475638336000,<br>                 “availbelScoreDate”: 1475636727000,<br>                 “createtime”: 1473840882000,<br>                 “lostheader”: false<br>             },<br>             {<br>                 “id”: 5421,<br>                 “ip”: “221.237.155.64”,<br>                 “proxyIp”: “221.237.155.64”,<br>                 “port”: 9797,<br>                 “ipValue”: 3723336512,<br>                 “country”: “中国”,<br>                 “area”: “西南”,<br>                 “region”: “四川省”,<br>                 “city”: “成都市”,<br>                 “isp”: “电信”,<br>                 “countryId”: “CN”,<br>                 “areaId”: “500000”,<br>                 “regionId”: “510000”,<br>                 “cityId”: “510100”,<br>                 “ispId”: “100017”,<br>                 “transperent”: 2,<br>                 “speed”: 3238,<br>                 “type”: 1,<br>                 “connectionScore”: 119,<br>                 “availbelScore”: -1,<br>                 “connectionScoreDate”: 1475611973000,<br>                 “availbelScoreDate”: 1475629954000,<br>                 “createtime”: 1473840773000,<br>                 “lostheader”: false<br>             },<br>             {<br>                 “id”: 8722,<br>                 “ip”: “58.243.0.162”,<br>                 “proxyIp”: “58.243.0.162”,<br>                 “port”: 9999,<br>                 “ipValue”: 989003938,<br>                 “country”: “中国”,<br>                 “area”: “华东”,<br>                 “region”: “安徽省”,<br>                 “city”: “安庆市”,<br>                 “isp”: “联通”,<br>                 “countryId”: “CN”,<br>                 “areaId”: “300000”,<br>                 “regionId”: “340000”,<br>                 “cityId”: “340800”,<br>                 “ispId”: “100026”,<br>                 “transperent”: 2,<br>                 “speed”: 5143,<br>                 “type”: 1,<br>                 “connectionScore”: 154,<br>                 “availbelScore”: -3,<br>                 “connectionScoreDate”: 1475665673000,<br>                 “availbelScoreDate”: 1475614147000,<br>                 “createtime”: 1473839836000,<br>                 “lostheader”: false<br>             },<br>             {<br>                 “id”: 11698,<br>                 “ip”: “218.7.170.190”,<br>                 “proxyIp”: “218.7.170.190”,<br>                 “port”: 3128,<br>                 “ipValue”: 3657935550,<br>                 “country”: “中国”,<br>                 “area”: “东北”,<br>                 “region”: “黑龙江省”,<br>                 “city”: “绥化市”,<br>                 “isp”: “联通”,<br>                 “countryId”: “CN”,<br>                 “areaId”: “200000”,<br>                 “regionId”: “230000”,<br>                 “cityId”: “231200”,<br>                 “ispId”: “100026”,<br>                 “transperent”: 2,<br>                 “speed”: 3145,<br>                 “type”: 1,<br>                 “connectionScore”: 317,<br>                 “availbelScore”: -1,<br>                 “connectionScoreDate”: 1475642001000,<br>                 “availbelScoreDate”: 1475524810000,<br>                 “createtime”: 1473839128000,<br>                 “lostheader”: false<br>             },<br>             {<br>                 “id”: 13318,<br>                 “ip”: “220.249.185.178”,<br>                 “proxyIp”: “220.249.185.178”,<br>                 “port”: 9999,<br>                 “ipValue”: 3707353522,<br>                 “country”: “中国”,<br>                 “area”: “华东”,<br>                 “region”: “福建省”,<br>                 “city”: “福州市”,<br>                 “isp”: “联通”,<br>                 “countryId”: “CN”,<br>                 “areaId”: “300000”,<br>                 “regionId”: “350000”,<br>                 “cityId”: “350100”,<br>                 “ispId”: “100026”,<br>                 “transperent”: 2,<br>                 “speed”: 5094,<br>                 “type”: 1,<br>                 “connectionScore”: 129,<br>                 “availbelScore”: -1,<br>                 “connectionScoreDate”: 1475615670000,<br>                 “availbelScoreDate”: 1475585178000,<br>                 “createtime”: 1473840539000,<br>                 “lostheader”: false<br>             },<br>             {<br>                 “id”: 57033,<br>                 “ip”: “210.245.25.228”,<br>                 “proxyIp”: “210.245.25.228”,<br>                 “port”: 3128,<br>                 “ipValue”: 3539278308,<br>                 “country”: “越南”,<br>                 “area”: “”,<br>                 “region”: “”,<br>                 “city”: “”,<br>                 “isp”: “”,<br>                 “countryId”: “VN”,<br>                 “areaId”: “”,<br>                 “regionId”: “”,<br>                 “cityId”: “”,<br>                 “ispId”: “”,<br>                 “transperent”: 2,<br>                 “speed”: 1024,<br>                 “type”: 1,<br>                 “connectionScore”: 488,<br>                 “availbelScore”: 36,<br>                 “connectionScoreDate”: 1475635386000,<br>                 “availbelScoreDate”: 1475630473000,<br>                 “createtime”: 1473836572000,<br>                 “lostheader”: false<br>             },<br>             {<br>                 “id”: 124334,<br>                 “ip”: “60.194.72.253”,<br>                 “proxyIp”: “60.194.72.253”,<br>                 “port”: 3128,<br>                 “ipValue”: 1019365629,<br>                 “country”: “中国”,<br>                 “area”: “华北”,<br>                 “region”: “北京市”,<br>                 “city”: “北京市”,<br>                 “isp”: “鹏博士”,<br>                 “countryId”: “CN”,<br>                 “areaId”: “100000”,<br>                 “regionId”: “110000”,<br>                 “cityId”: “110100”,<br>                 “ispId”: “1000143”,<br>                 “transperent”: 2,<br>                 “speed”: 2366,<br>                 “type”: 1,<br>                 “connectionScore”: 610,<br>                 “availbelScore”: 16,<br>                 “connectionScoreDate”: 1475643516000,<br>                 “availbelScoreDate”: 1475631080000,<br>                 “createtime”: 1473839561000,<br>                 “lostheader”: false<br>             }<br>         ],<br>         “num”: 10,<br>         “sign”: “9999#C99+999#9B99B99999##Y9999+9999999999999999999999t9999s99999999s9999999999999999999999999999#99999999999999GB999999999G9999s9s99999#9999999999Y9+999##99999999+99999999999999+999999999999B999+Y9999G9+99999999999YB99999999999999999999999+99Y999999999B9999G999s99G999999999#99999#9Y999s999999999#B99999999999999999999+999999Y9999999Y9999999999999Y9999Y999999999999999”<br>     },<br>     “status”: true<br> }<br><code></code></p>\n<h2 id=\"proxyipcenter-client\"><a href=\"#proxyipcenter-client\" class=\"headerlink\" title=\"proxyipcenter client\"></a>proxyipcenter client</h2><h3 id=\"client-设计文档\"><a href=\"#client-设计文档\" class=\"headerlink\" title=\"client 设计文档\"></a><a href=\"http://git.oschina.net/virjar/proxyipcenter/blob/master/doc/client/design/README.md\" target=\"_blank\" rel=\"noopener\">client 设计文档</a></h3><h3 id=\"client-使用文档\"><a href=\"#client-使用文档\" class=\"headerlink\" title=\"client 使用文档\"></a><a href=\"http://git.oschina.net/virjar/proxyipcenter/blob/master/doc/client/userGuide/README.md\" target=\"_blank\" rel=\"noopener\">client 使用文档</a></h3><p>client运行原理<br>这里讲述IP池的设计相关,如果您仅仅是为了使用dunproxy-client,则不必关心本文内容</p>\n<p>client就是一个代理IP池的实现,IP池的设计基于两个点:</p>\n<ol>\n<li><p>代理IP都是不稳定的,不可靠的,需要一个机制来切换IP,尽可能使用高质量IP。</p>\n</li>\n<li><p>IP和环境关系很大,同一个IP在不同的机器下访问不同的目标网站,其可用性表现都是不一样的</p>\n</li>\n</ol>\n<h2 id=\"使用IpPoolAPI获取IP资源\"><a href=\"#使用IpPoolAPI获取IP资源\" class=\"headerlink\" title=\"使用IpPoolAPI获取IP资源\"></a>使用IpPoolAPI获取IP资源</h2><h3 id=\"获取IP\"><a href=\"#获取IP\" class=\"headerlink\" title=\"获取IP\"></a>获取IP</h3><p>获取一个IP的方式是这样的 <code>IpPool.getInstance().bind(domain, accessUrl);</code> </p>\n<ul>\n<li>第一个参数是域名,可以传递null,传递null提取accessUrl schema里面的host</li>\n<li>第二个参数是你当前需要访问的url, 可以为null,为null时domain不能为空</li>\n</ul>\n<p>曾经有一个绑定用户的功能,使得同一个账户每次获取的IP相同,后来觉得是过度设计,因为对于抓取场景,切换IP是很普通的需求,而且貌似没有多少server会检查常用IP。就算有也是小众需求,本框架不必支持</p>\n<h3 id=\"记录IP使用\"><a href=\"#记录IP使用\" class=\"headerlink\" title=\"记录IP使用\"></a>记录IP使用</h3><p>每当使用IP的时候,需要记录一次IP使用,也就是将IP实例的使用次数加一,用于打分机制计算IP的使用分值,评估IP可用性<br>方式如下:<code>com.virjar.dungproxy.client.model.AvProxy.recordUsage</code></p>\n<h3 id=\"记录IP使用失败\"><a href=\"#记录IP使用失败\" class=\"headerlink\" title=\"记录IP使用失败\"></a>记录IP使用失败</h3><p>每当IP使用失败的时候,需要记录IP使用失败,也就是将IP实例的失败次数加一,用于打分机制计算IP的使用分值,评估IP可用性<br>方式如下:<code>com.virjar.dungproxy.client.model.AvProxy.recordFailed()</code></p>\n<h3 id=\"IP下线\"><a href=\"#IP下线\" class=\"headerlink\" title=\"IP下线\"></a>IP下线</h3><p>IP下线很简单,拿到IP实例,这样调用<code>com.virjar.dungproxy.client.model.AvProxy.offline()</code>。<br>一般情况不建议这么做,因为IP池会自动检查IP是否应该下线,IP池可以定制各种策略。当时,有些时候IP池的检查机制比较缓慢,而上层业务可以明确知道本IP不可用,这个时候可以使用本API强制下线</p>\n<h3 id=\"销毁IP池实例\"><a href=\"#销毁IP池实例\" class=\"headerlink\" title=\"销毁IP池实例\"></a>销毁IP池实例</h3><p>IP池是单例的,同时里面维护了两个任务线程,在业务完成的时候,需要销毁IP池才能终止内部线程。同时也会执行一些收尾工作,如将可用IP dump。<br>销毁方式是:<code>com.virjar.dungproxy.client.ippool.IpPool.destroy</code></p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>IP池有其他很多扩展点,但是目前接口没有开发完成,待后续完善</p>\n<h2 id=\"TODO-几个主流语言的客户端\"><a href=\"#TODO-几个主流语言的客户端\" class=\"headerlink\" title=\"TODO 几个主流语言的客户端\"></a>TODO 几个主流语言的客户端</h2><ol>\n<li>.NET/.NET core client (辣鸡楼主还没动手…)</li>\n<li>Python client(另外一个大佬好像忘了这事了…)</li>\n<li>Golang client(可能还是辣鸡楼主动手…)</li>\n</ol>\n"},{"layout":"post","title":"使用requirejs编写模块化代码","date":"2016-10-21T16:00:00.000Z","_content":"# 写在前面\n\n最早接触javascript的时候，javascript代码直接扔在script标签里面就完事了。\n\n反正代码不多，交互简单，逻辑不难，和HTML混在一起也未尝不可。\n\n后来交互越来越复杂，代码越多越多了，我们就开始把JS代码独立到了单独的JS文件中。\n\n公共的库引用在前，自己的逻辑代码引用在后，全局变量定义在HTML内部，在独立JS文件中直接使用变量就好。\n\n我们会经常看到下面这种代码：\n\n```\n　　<script src=\"1.js\"></script>\n　　<script src=\"2.js\"></script>\n　　<script src=\"3.js\"></script>\n　　<script src=\"4.js\"></script>\n　　<script src=\"5.js\"></script>\n　　<script src=\"6.js\"></script>\n```\n通过script标签顺序去js管理依赖关系。\n\n阮一峰老师在[Javascript模块化编程（三）：require.js的用法](http://www.ruanyifeng.com/blog/2012/11/require_js.html)\n一文中总结了这样写法的缺点：\n```\n首先，加载的时候，浏览器会停止网页渲染，加载文件越多，网页失去响应的时间就会越长；\n\n其次，由于js文件之间存在依赖关系，因此必须严格保证加载顺序（比如上例的1.js要在2.js的前面），依赖性最大的模块一定要放到最后加载.\n\n当依赖关系很复杂的时候，代码的编写和维护都会变得困难。\n```\n\n而requirejs的诞生便是为了解决这个问题。\n\n### [requirejs](http://requirejs.org/docs/download.html)\n\n在[官网](http://requirejs.org/docs/download.html)把requirejs 下载回来之后。使用一般的方法引入：\n```\n<script src=\"js/require.js\"></script>\n```\n但是这样的方法，还是可能在加载require.js的时候导致网页失去响应。解决方案一般有两种：\n\n1. 把上面的代码放到网页底部\n\n2. 使用异步的方法加载，如下：\n\n```\n<script src=\"js/require.js\" defer async=\"true\" ></script>\n```\n[async属性](http://www.w3school.com.cn/html5/att_script_async.asp) 表明这个文件需要异步加载，避免网页失去响应。\n\n不过IE下不支持这个属性，只支持defer，所以可以把defer也写上。\n\n### 加载主模块\n在上一步，我们已经引入了require了，那么require怎么知道我们究竟要加载什么东西呢？答案是使用data-main属性。\n假设我们的主模块为js/home.js,引入代码应该如下：\n```\n　<script src=\"js/require.js\" data-main=\"js/home\"></script>\n  //require.js默认文件后缀为js，所以home.js可以写成home。\n```\n接下来我使用[58HouseSearch](https://github.com/liguobao/58HouseSearch) 的代码来讲解重构过程。\n\n在此项目里面，重构前大概就是JS变量漫天飞，js文件里面各种函数到处乱放。一开始用起来还没什么，后来加入了更多功能的时候，JS代码维护起来就疼不欲生了。因此托了个小伙伴帮忙使用模块化思想重构了一下JS代码。\n\n上面说了，我们首先需要创建我们的模块，在这个项目里面，主模块叫home.js。\n\nhome.js中我们需要配置一下require.config.\n```\nrequire.config({\n    baseUrl: '/DomainJS/',\n    paths: {\n        jquery: \"lib/jquery-1.11.3.min\",\n        \"AMUI\": \"lib/amazeui.2.7.1.min\",\n        \"jquery.range\": \"lib/jquery.range\",\n        \"es5\": \"lib/es5\",\n        \"mapController\": \"mapController\",\n        \"addToolbar\": \"addToolbar\",\n    },\n    shim: {\n        \"addToolbar\": {\n            deps: [\"jquery\"]\n        },\n        \"jquery.range\": {\n            deps: [\"jquery\"]\n        }\n    }\n});\n\n```\n在这里我主要配置了一下baseURL(所有模块的查找根路径)，paths(名称映射)，shim(\n为那些没有使用define()来声明依赖关系、设置模块的\"浏览器全局变量注入\"型脚本做依赖和导出配置。)\n\n关于require.config的详细内容可以看下下面这些文章：\n\n1. [RequireJS进阶:配置文件的学习](https://segmentfault.com/a/1190000002401665) \n2. [RequireJS进阶:模块的优化及配置的详解](https://segmentfault.com/a/1190000002403806)\n\n配置做完了，我们也可以开始真正写我们的逻辑代码了,我们使用require来加载我们需要的库。\n代码如下：\n\n```\nrequire(['domready!', 'jquery', 'AMUI', 'mapController', 'city', 'commuteGo'], function (doc, $, AMUI, mapController, city, commuteGo) {\n    city.initAllCityInfo();\n    mapController.init();\n\n    $(\"input[name='locationType']\").bind('click', mapController.locationMethodOnChange)\n\n    $(\"input[name='vehicle']\").bind('click', commuteGo.go)\n\n    $('#Get58Data').bind('click', function(e) {\n        e.preventDefault();\n     \n        mapController.Get58DataClick();\n        e.stopPropagation();\n    });\n\n \n    $.ajax({\n        type: \"post\",\n        url: \"../Commom/GetPVCount\",\n        data: { },\n        success: function (result)\n        {\n            if (result.IsSuccess){\n                $(\"#lblPVCount\").text(result.PVCount);\n            }else {\n                $(\"#lblPVCount\").text(0);\n                console.log(result.Error);\n            }\n        }\n    });\n\n    $('#search-offcanvas').offCanvas({ effect: 'overlay' });\n\n    $(\".amap-sug-result\").css(\"z-index\", 9999);\n})\n\n```\n\n忽略function里面的具体逻辑，加载如下：\n```\nrequire(['domready!', 'jquery', 'AMUI', 'mapController', 'city', 'commuteGo'], \nfunction (doc, $, AMUI, mapController, city, commuteGo){\n\n//todo\n\n});\n\n```\n\n第一个参数为一个数组，表示所依赖的模块，此处为['domready!', 'jquery', 'AMUI', 'mapController', 'city', 'commuteGo']；\n\n第二个参数为回调函数，当前面指定的模块都全部加载成功之后，便调用此函数。加载的模块会以参数形式传入此函数，从而在回调函数内部就可以使用这些模块啦。\n\nrequire()异步加载所需模块的时候，此时浏览器并不会失去响应；当前面的模块加载成功之后，执行回调函数才会运行我们的逻辑代码，因此解决了依赖性问题。\n\n讲完了模块加载，我们下面讲一下模块编写。\n\n### AMD模块编写\n\nrequire.js加载的模块的采用的AMD规范。所以我们的模块必须按照AMD的规定来写。\n\n关于AMD规范详情可以看这个文章：[Javascript模块化编程（二）：AMD规范](http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html)\n\n模块有两个情况，不依赖其他模块和依赖其他模块。\n\n#### 不依赖其他模块\n直接define定义，使用function回调。\n\n[58HouseSearch/DomainJS/helper.js](https://github.com/liguobao/58HouseSearch/blob/master/58HouseSearch/DomainJS/helper.js)\n```\ndefine(function () {\n\n    //获取URL中的参数\n    var getQueryString=  function (name) {\n        var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\");\n        var r = window.location.search.substr(1).match(reg);\n        if (r != null) return unescape(r[2]); return null;\n    }\n    return {\n        getQueryString: getQueryString,\n    };\n})\n```\n\n#### 依赖其他模块\ndefine中如同require一样，用数组表明需要加载的模块，function回调。\n\n[58HouseSearch/DomainJS/marker.js](https://github.com/liguobao/58HouseSearch/blob/master/58HouseSearch/DomainJS/marker.js)\n```\ndefine(['mapSignleton', 'city', 'transfer'], function(mapSignleton, city, transfer) {\n    var _map = mapSignleton.map;\n    var _workMarker = null;\n    var _markerArray = [];\n    var load = function(x, y, locationName) {\n        _workMarker = new AMap.Marker({\n            map: _map,\n            title: locationName,\n            icon: 'http://webapi.amap.com/theme/v1.3/markers/n/mark_r.png',\n            position: [x, y]\n        });\n    }\n\n    var add = function(address, rent, href, markBG) {\n        new AMap.Geocoder({\n            city: city.name,\n            radius: 1000\n        }).getLocation(address, function(status, result) {\n\n            if (status === \"complete\" && result.info === 'OK') {\n                var geocode = result.geocodes[0];\n                var rentMarker = new AMap.Marker({\n                    map: _map,\n                    title: address,\n                    icon: markBG ? 'IMG/Little/' + markBG : 'http://webapi.amap.com/theme/v1.3/markers/n/mark_b.png',\n                    position: [geocode.location.getLng(), geocode.location.getLat()]\n                });\n                _markerArray.push(rentMarker);\n\n                rentMarker.content = \"<div><a target = '_blank' href='\" + href + \"'>房源：\" + address + \"  租金：\" + rent + \"</a><div>\"\n                rentMarker.on('click', function(e) {\n                    transfer.add(e, address);\n                });\n            }\n        })\n    };\n\n    var clearArray = function() {\n        if (_markerArray && _markerArray.length > 0) _map.remove(_markerArray);\n        _markerArray = [];\n    }\n\n    var clear = function() {\n        if (_workMarker) {\n            _map.remove(_workMarker);\n        }\n    }\n\n    return {\n        load: load,\n        add: add,\n        clearArray: clearArray,\n        clear: clear\n    };\n});\n\n```\n这样的话，一个供require调用的模块也就写好了。\n\n\n最后感谢小伙伴[Larry Sean](https://www.zhihu.com/people/piratf) 帮忙重构代码。\n\n全文完。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/javascript_requirejs_rf_code.md","raw":"---\nlayout: post\ntitle: 使用requirejs编写模块化代码\ncategory: javascript\ndate: 2016-10-22 00:00:00\ntags:\n- javascript\n- requirejs\n---\n# 写在前面\n\n最早接触javascript的时候，javascript代码直接扔在script标签里面就完事了。\n\n反正代码不多，交互简单，逻辑不难，和HTML混在一起也未尝不可。\n\n后来交互越来越复杂，代码越多越多了，我们就开始把JS代码独立到了单独的JS文件中。\n\n公共的库引用在前，自己的逻辑代码引用在后，全局变量定义在HTML内部，在独立JS文件中直接使用变量就好。\n\n我们会经常看到下面这种代码：\n\n```\n　　<script src=\"1.js\"></script>\n　　<script src=\"2.js\"></script>\n　　<script src=\"3.js\"></script>\n　　<script src=\"4.js\"></script>\n　　<script src=\"5.js\"></script>\n　　<script src=\"6.js\"></script>\n```\n通过script标签顺序去js管理依赖关系。\n\n阮一峰老师在[Javascript模块化编程（三）：require.js的用法](http://www.ruanyifeng.com/blog/2012/11/require_js.html)\n一文中总结了这样写法的缺点：\n```\n首先，加载的时候，浏览器会停止网页渲染，加载文件越多，网页失去响应的时间就会越长；\n\n其次，由于js文件之间存在依赖关系，因此必须严格保证加载顺序（比如上例的1.js要在2.js的前面），依赖性最大的模块一定要放到最后加载.\n\n当依赖关系很复杂的时候，代码的编写和维护都会变得困难。\n```\n\n而requirejs的诞生便是为了解决这个问题。\n\n### [requirejs](http://requirejs.org/docs/download.html)\n\n在[官网](http://requirejs.org/docs/download.html)把requirejs 下载回来之后。使用一般的方法引入：\n```\n<script src=\"js/require.js\"></script>\n```\n但是这样的方法，还是可能在加载require.js的时候导致网页失去响应。解决方案一般有两种：\n\n1. 把上面的代码放到网页底部\n\n2. 使用异步的方法加载，如下：\n\n```\n<script src=\"js/require.js\" defer async=\"true\" ></script>\n```\n[async属性](http://www.w3school.com.cn/html5/att_script_async.asp) 表明这个文件需要异步加载，避免网页失去响应。\n\n不过IE下不支持这个属性，只支持defer，所以可以把defer也写上。\n\n### 加载主模块\n在上一步，我们已经引入了require了，那么require怎么知道我们究竟要加载什么东西呢？答案是使用data-main属性。\n假设我们的主模块为js/home.js,引入代码应该如下：\n```\n　<script src=\"js/require.js\" data-main=\"js/home\"></script>\n  //require.js默认文件后缀为js，所以home.js可以写成home。\n```\n接下来我使用[58HouseSearch](https://github.com/liguobao/58HouseSearch) 的代码来讲解重构过程。\n\n在此项目里面，重构前大概就是JS变量漫天飞，js文件里面各种函数到处乱放。一开始用起来还没什么，后来加入了更多功能的时候，JS代码维护起来就疼不欲生了。因此托了个小伙伴帮忙使用模块化思想重构了一下JS代码。\n\n上面说了，我们首先需要创建我们的模块，在这个项目里面，主模块叫home.js。\n\nhome.js中我们需要配置一下require.config.\n```\nrequire.config({\n    baseUrl: '/DomainJS/',\n    paths: {\n        jquery: \"lib/jquery-1.11.3.min\",\n        \"AMUI\": \"lib/amazeui.2.7.1.min\",\n        \"jquery.range\": \"lib/jquery.range\",\n        \"es5\": \"lib/es5\",\n        \"mapController\": \"mapController\",\n        \"addToolbar\": \"addToolbar\",\n    },\n    shim: {\n        \"addToolbar\": {\n            deps: [\"jquery\"]\n        },\n        \"jquery.range\": {\n            deps: [\"jquery\"]\n        }\n    }\n});\n\n```\n在这里我主要配置了一下baseURL(所有模块的查找根路径)，paths(名称映射)，shim(\n为那些没有使用define()来声明依赖关系、设置模块的\"浏览器全局变量注入\"型脚本做依赖和导出配置。)\n\n关于require.config的详细内容可以看下下面这些文章：\n\n1. [RequireJS进阶:配置文件的学习](https://segmentfault.com/a/1190000002401665) \n2. [RequireJS进阶:模块的优化及配置的详解](https://segmentfault.com/a/1190000002403806)\n\n配置做完了，我们也可以开始真正写我们的逻辑代码了,我们使用require来加载我们需要的库。\n代码如下：\n\n```\nrequire(['domready!', 'jquery', 'AMUI', 'mapController', 'city', 'commuteGo'], function (doc, $, AMUI, mapController, city, commuteGo) {\n    city.initAllCityInfo();\n    mapController.init();\n\n    $(\"input[name='locationType']\").bind('click', mapController.locationMethodOnChange)\n\n    $(\"input[name='vehicle']\").bind('click', commuteGo.go)\n\n    $('#Get58Data').bind('click', function(e) {\n        e.preventDefault();\n     \n        mapController.Get58DataClick();\n        e.stopPropagation();\n    });\n\n \n    $.ajax({\n        type: \"post\",\n        url: \"../Commom/GetPVCount\",\n        data: { },\n        success: function (result)\n        {\n            if (result.IsSuccess){\n                $(\"#lblPVCount\").text(result.PVCount);\n            }else {\n                $(\"#lblPVCount\").text(0);\n                console.log(result.Error);\n            }\n        }\n    });\n\n    $('#search-offcanvas').offCanvas({ effect: 'overlay' });\n\n    $(\".amap-sug-result\").css(\"z-index\", 9999);\n})\n\n```\n\n忽略function里面的具体逻辑，加载如下：\n```\nrequire(['domready!', 'jquery', 'AMUI', 'mapController', 'city', 'commuteGo'], \nfunction (doc, $, AMUI, mapController, city, commuteGo){\n\n//todo\n\n});\n\n```\n\n第一个参数为一个数组，表示所依赖的模块，此处为['domready!', 'jquery', 'AMUI', 'mapController', 'city', 'commuteGo']；\n\n第二个参数为回调函数，当前面指定的模块都全部加载成功之后，便调用此函数。加载的模块会以参数形式传入此函数，从而在回调函数内部就可以使用这些模块啦。\n\nrequire()异步加载所需模块的时候，此时浏览器并不会失去响应；当前面的模块加载成功之后，执行回调函数才会运行我们的逻辑代码，因此解决了依赖性问题。\n\n讲完了模块加载，我们下面讲一下模块编写。\n\n### AMD模块编写\n\nrequire.js加载的模块的采用的AMD规范。所以我们的模块必须按照AMD的规定来写。\n\n关于AMD规范详情可以看这个文章：[Javascript模块化编程（二）：AMD规范](http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html)\n\n模块有两个情况，不依赖其他模块和依赖其他模块。\n\n#### 不依赖其他模块\n直接define定义，使用function回调。\n\n[58HouseSearch/DomainJS/helper.js](https://github.com/liguobao/58HouseSearch/blob/master/58HouseSearch/DomainJS/helper.js)\n```\ndefine(function () {\n\n    //获取URL中的参数\n    var getQueryString=  function (name) {\n        var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\");\n        var r = window.location.search.substr(1).match(reg);\n        if (r != null) return unescape(r[2]); return null;\n    }\n    return {\n        getQueryString: getQueryString,\n    };\n})\n```\n\n#### 依赖其他模块\ndefine中如同require一样，用数组表明需要加载的模块，function回调。\n\n[58HouseSearch/DomainJS/marker.js](https://github.com/liguobao/58HouseSearch/blob/master/58HouseSearch/DomainJS/marker.js)\n```\ndefine(['mapSignleton', 'city', 'transfer'], function(mapSignleton, city, transfer) {\n    var _map = mapSignleton.map;\n    var _workMarker = null;\n    var _markerArray = [];\n    var load = function(x, y, locationName) {\n        _workMarker = new AMap.Marker({\n            map: _map,\n            title: locationName,\n            icon: 'http://webapi.amap.com/theme/v1.3/markers/n/mark_r.png',\n            position: [x, y]\n        });\n    }\n\n    var add = function(address, rent, href, markBG) {\n        new AMap.Geocoder({\n            city: city.name,\n            radius: 1000\n        }).getLocation(address, function(status, result) {\n\n            if (status === \"complete\" && result.info === 'OK') {\n                var geocode = result.geocodes[0];\n                var rentMarker = new AMap.Marker({\n                    map: _map,\n                    title: address,\n                    icon: markBG ? 'IMG/Little/' + markBG : 'http://webapi.amap.com/theme/v1.3/markers/n/mark_b.png',\n                    position: [geocode.location.getLng(), geocode.location.getLat()]\n                });\n                _markerArray.push(rentMarker);\n\n                rentMarker.content = \"<div><a target = '_blank' href='\" + href + \"'>房源：\" + address + \"  租金：\" + rent + \"</a><div>\"\n                rentMarker.on('click', function(e) {\n                    transfer.add(e, address);\n                });\n            }\n        })\n    };\n\n    var clearArray = function() {\n        if (_markerArray && _markerArray.length > 0) _map.remove(_markerArray);\n        _markerArray = [];\n    }\n\n    var clear = function() {\n        if (_workMarker) {\n            _map.remove(_workMarker);\n        }\n    }\n\n    return {\n        load: load,\n        add: add,\n        clearArray: clearArray,\n        clear: clear\n    };\n});\n\n```\n这样的话，一个供require调用的模块也就写好了。\n\n\n最后感谢小伙伴[Larry Sean](https://www.zhihu.com/people/piratf) 帮忙重构代码。\n\n全文完。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"javascript_requirejs_rf_code","published":1,"updated":"2018-05-17T13:36:33.845Z","comments":1,"photos":[],"link":"","_id":"cjhal1fwk001xp631134yq8jd","content":"<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><p>最早接触javascript的时候，javascript代码直接扔在script标签里面就完事了。</p>\n<p>反正代码不多，交互简单，逻辑不难，和HTML混在一起也未尝不可。</p>\n<p>后来交互越来越复杂，代码越多越多了，我们就开始把JS代码独立到了单独的JS文件中。</p>\n<p>公共的库引用在前，自己的逻辑代码引用在后，全局变量定义在HTML内部，在独立JS文件中直接使用变量就好。</p>\n<p>我们会经常看到下面这种代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　&lt;script src=&quot;1.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">　　&lt;script src=&quot;2.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">　　&lt;script src=&quot;3.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">　　&lt;script src=&quot;4.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">　　&lt;script src=&quot;5.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">　　&lt;script src=&quot;6.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>通过script标签顺序去js管理依赖关系。</p>\n<p>阮一峰老师在<a href=\"http://www.ruanyifeng.com/blog/2012/11/require_js.html\" target=\"_blank\" rel=\"noopener\">Javascript模块化编程（三）：require.js的用法</a><br>一文中总结了这样写法的缺点：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">首先，加载的时候，浏览器会停止网页渲染，加载文件越多，网页失去响应的时间就会越长；</span><br><span class=\"line\"></span><br><span class=\"line\">其次，由于js文件之间存在依赖关系，因此必须严格保证加载顺序（比如上例的1.js要在2.js的前面），依赖性最大的模块一定要放到最后加载.</span><br><span class=\"line\"></span><br><span class=\"line\">当依赖关系很复杂的时候，代码的编写和维护都会变得困难。</span><br></pre></td></tr></table></figure></p>\n<p>而requirejs的诞生便是为了解决这个问题。</p>\n<h3 id=\"requirejs\"><a href=\"#requirejs\" class=\"headerlink\" title=\"requirejs\"></a><a href=\"http://requirejs.org/docs/download.html\" target=\"_blank\" rel=\"noopener\">requirejs</a></h3><p>在<a href=\"http://requirejs.org/docs/download.html\" target=\"_blank\" rel=\"noopener\">官网</a>把requirejs 下载回来之后。使用一般的方法引入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;js/require.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>但是这样的方法，还是可能在加载require.js的时候导致网页失去响应。解决方案一般有两种：</p>\n<ol>\n<li><p>把上面的代码放到网页底部</p>\n</li>\n<li><p>使用异步的方法加载，如下：</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;js/require.js&quot; defer async=&quot;true&quot; &gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://www.w3school.com.cn/html5/att_script_async.asp\" target=\"_blank\" rel=\"noopener\">async属性</a> 表明这个文件需要异步加载，避免网页失去响应。</p>\n<p>不过IE下不支持这个属性，只支持defer，所以可以把defer也写上。</p>\n<h3 id=\"加载主模块\"><a href=\"#加载主模块\" class=\"headerlink\" title=\"加载主模块\"></a>加载主模块</h3><p>在上一步，我们已经引入了require了，那么require怎么知道我们究竟要加载什么东西呢？答案是使用data-main属性。<br>假设我们的主模块为js/home.js,引入代码应该如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　&lt;script src=&quot;js/require.js&quot; data-main=&quot;js/home&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">//require.js默认文件后缀为js，所以home.js可以写成home。</span><br></pre></td></tr></table></figure></p>\n<p>接下来我使用<a href=\"https://github.com/liguobao/58HouseSearch\" target=\"_blank\" rel=\"noopener\">58HouseSearch</a> 的代码来讲解重构过程。</p>\n<p>在此项目里面，重构前大概就是JS变量漫天飞，js文件里面各种函数到处乱放。一开始用起来还没什么，后来加入了更多功能的时候，JS代码维护起来就疼不欲生了。因此托了个小伙伴帮忙使用模块化思想重构了一下JS代码。</p>\n<p>上面说了，我们首先需要创建我们的模块，在这个项目里面，主模块叫home.js。</p>\n<p>home.js中我们需要配置一下require.config.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require.config(&#123;</span><br><span class=\"line\">    baseUrl: &apos;/DomainJS/&apos;,</span><br><span class=\"line\">    paths: &#123;</span><br><span class=\"line\">        jquery: &quot;lib/jquery-1.11.3.min&quot;,</span><br><span class=\"line\">        &quot;AMUI&quot;: &quot;lib/amazeui.2.7.1.min&quot;,</span><br><span class=\"line\">        &quot;jquery.range&quot;: &quot;lib/jquery.range&quot;,</span><br><span class=\"line\">        &quot;es5&quot;: &quot;lib/es5&quot;,</span><br><span class=\"line\">        &quot;mapController&quot;: &quot;mapController&quot;,</span><br><span class=\"line\">        &quot;addToolbar&quot;: &quot;addToolbar&quot;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    shim: &#123;</span><br><span class=\"line\">        &quot;addToolbar&quot;: &#123;</span><br><span class=\"line\">            deps: [&quot;jquery&quot;]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;jquery.range&quot;: &#123;</span><br><span class=\"line\">            deps: [&quot;jquery&quot;]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>在这里我主要配置了一下baseURL(所有模块的查找根路径)，paths(名称映射)，shim(<br>为那些没有使用define()来声明依赖关系、设置模块的”浏览器全局变量注入”型脚本做依赖和导出配置。)</p>\n<p>关于require.config的详细内容可以看下下面这些文章：</p>\n<ol>\n<li><a href=\"https://segmentfault.com/a/1190000002401665\" target=\"_blank\" rel=\"noopener\">RequireJS进阶:配置文件的学习</a> </li>\n<li><a href=\"https://segmentfault.com/a/1190000002403806\" target=\"_blank\" rel=\"noopener\">RequireJS进阶:模块的优化及配置的详解</a></li>\n</ol>\n<p>配置做完了，我们也可以开始真正写我们的逻辑代码了,我们使用require来加载我们需要的库。<br>代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require([&apos;domready!&apos;, &apos;jquery&apos;, &apos;AMUI&apos;, &apos;mapController&apos;, &apos;city&apos;, &apos;commuteGo&apos;], function (doc, $, AMUI, mapController, city, commuteGo) &#123;</span><br><span class=\"line\">    city.initAllCityInfo();</span><br><span class=\"line\">    mapController.init();</span><br><span class=\"line\"></span><br><span class=\"line\">    $(&quot;input[name=&apos;locationType&apos;]&quot;).bind(&apos;click&apos;, mapController.locationMethodOnChange)</span><br><span class=\"line\"></span><br><span class=\"line\">    $(&quot;input[name=&apos;vehicle&apos;]&quot;).bind(&apos;click&apos;, commuteGo.go)</span><br><span class=\"line\"></span><br><span class=\"line\">    $(&apos;#Get58Data&apos;).bind(&apos;click&apos;, function(e) &#123;</span><br><span class=\"line\">        e.preventDefault();</span><br><span class=\"line\">     </span><br><span class=\"line\">        mapController.Get58DataClick();</span><br><span class=\"line\">        e.stopPropagation();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        type: &quot;post&quot;,</span><br><span class=\"line\">        url: &quot;../Commom/GetPVCount&quot;,</span><br><span class=\"line\">        data: &#123; &#125;,</span><br><span class=\"line\">        success: function (result)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if (result.IsSuccess)&#123;</span><br><span class=\"line\">                $(&quot;#lblPVCount&quot;).text(result.PVCount);</span><br><span class=\"line\">            &#125;else &#123;</span><br><span class=\"line\">                $(&quot;#lblPVCount&quot;).text(0);</span><br><span class=\"line\">                console.log(result.Error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    $(&apos;#search-offcanvas&apos;).offCanvas(&#123; effect: &apos;overlay&apos; &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    $(&quot;.amap-sug-result&quot;).css(&quot;z-index&quot;, 9999);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>忽略function里面的具体逻辑，加载如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require([&apos;domready!&apos;, &apos;jquery&apos;, &apos;AMUI&apos;, &apos;mapController&apos;, &apos;city&apos;, &apos;commuteGo&apos;], </span><br><span class=\"line\">function (doc, $, AMUI, mapController, city, commuteGo)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">//todo</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>第一个参数为一个数组，表示所依赖的模块，此处为[‘domready!’, ‘jquery’, ‘AMUI’, ‘mapController’, ‘city’, ‘commuteGo’]；</p>\n<p>第二个参数为回调函数，当前面指定的模块都全部加载成功之后，便调用此函数。加载的模块会以参数形式传入此函数，从而在回调函数内部就可以使用这些模块啦。</p>\n<p>require()异步加载所需模块的时候，此时浏览器并不会失去响应；当前面的模块加载成功之后，执行回调函数才会运行我们的逻辑代码，因此解决了依赖性问题。</p>\n<p>讲完了模块加载，我们下面讲一下模块编写。</p>\n<h3 id=\"AMD模块编写\"><a href=\"#AMD模块编写\" class=\"headerlink\" title=\"AMD模块编写\"></a>AMD模块编写</h3><p>require.js加载的模块的采用的AMD规范。所以我们的模块必须按照AMD的规定来写。</p>\n<p>关于AMD规范详情可以看这个文章：<a href=\"http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html\" target=\"_blank\" rel=\"noopener\">Javascript模块化编程（二）：AMD规范</a></p>\n<p>模块有两个情况，不依赖其他模块和依赖其他模块。</p>\n<h4 id=\"不依赖其他模块\"><a href=\"#不依赖其他模块\" class=\"headerlink\" title=\"不依赖其他模块\"></a>不依赖其他模块</h4><p>直接define定义，使用function回调。</p>\n<p><a href=\"https://github.com/liguobao/58HouseSearch/blob/master/58HouseSearch/DomainJS/helper.js\" target=\"_blank\" rel=\"noopener\">58HouseSearch/DomainJS/helper.js</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(function () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    //获取URL中的参数</span><br><span class=\"line\">    var getQueryString=  function (name) &#123;</span><br><span class=\"line\">        var reg = new RegExp(&quot;(^|&amp;)&quot; + name + &quot;=([^&amp;]*)(&amp;|$)&quot;);</span><br><span class=\"line\">        var r = window.location.search.substr(1).match(reg);</span><br><span class=\"line\">        if (r != null) return unescape(r[2]); return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        getQueryString: getQueryString,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"依赖其他模块\"><a href=\"#依赖其他模块\" class=\"headerlink\" title=\"依赖其他模块\"></a>依赖其他模块</h4><p>define中如同require一样，用数组表明需要加载的模块，function回调。</p>\n<p><a href=\"https://github.com/liguobao/58HouseSearch/blob/master/58HouseSearch/DomainJS/marker.js\" target=\"_blank\" rel=\"noopener\">58HouseSearch/DomainJS/marker.js</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define([&apos;mapSignleton&apos;, &apos;city&apos;, &apos;transfer&apos;], function(mapSignleton, city, transfer) &#123;</span><br><span class=\"line\">    var _map = mapSignleton.map;</span><br><span class=\"line\">    var _workMarker = null;</span><br><span class=\"line\">    var _markerArray = [];</span><br><span class=\"line\">    var load = function(x, y, locationName) &#123;</span><br><span class=\"line\">        _workMarker = new AMap.Marker(&#123;</span><br><span class=\"line\">            map: _map,</span><br><span class=\"line\">            title: locationName,</span><br><span class=\"line\">            icon: &apos;http://webapi.amap.com/theme/v1.3/markers/n/mark_r.png&apos;,</span><br><span class=\"line\">            position: [x, y]</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    var add = function(address, rent, href, markBG) &#123;</span><br><span class=\"line\">        new AMap.Geocoder(&#123;</span><br><span class=\"line\">            city: city.name,</span><br><span class=\"line\">            radius: 1000</span><br><span class=\"line\">        &#125;).getLocation(address, function(status, result) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            if (status === &quot;complete&quot; &amp;&amp; result.info === &apos;OK&apos;) &#123;</span><br><span class=\"line\">                var geocode = result.geocodes[0];</span><br><span class=\"line\">                var rentMarker = new AMap.Marker(&#123;</span><br><span class=\"line\">                    map: _map,</span><br><span class=\"line\">                    title: address,</span><br><span class=\"line\">                    icon: markBG ? &apos;IMG/Little/&apos; + markBG : &apos;http://webapi.amap.com/theme/v1.3/markers/n/mark_b.png&apos;,</span><br><span class=\"line\">                    position: [geocode.location.getLng(), geocode.location.getLat()]</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                _markerArray.push(rentMarker);</span><br><span class=\"line\"></span><br><span class=\"line\">                rentMarker.content = &quot;&lt;div&gt;&lt;a target = &apos;_blank&apos; href=&apos;&quot; + href + &quot;&apos;&gt;房源：&quot; + address + &quot;  租金：&quot; + rent + &quot;&lt;/a&gt;&lt;div&gt;&quot;</span><br><span class=\"line\">                rentMarker.on(&apos;click&apos;, function(e) &#123;</span><br><span class=\"line\">                    transfer.add(e, address);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    var clearArray = function() &#123;</span><br><span class=\"line\">        if (_markerArray &amp;&amp; _markerArray.length &gt; 0) _map.remove(_markerArray);</span><br><span class=\"line\">        _markerArray = [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    var clear = function() &#123;</span><br><span class=\"line\">        if (_workMarker) &#123;</span><br><span class=\"line\">            _map.remove(_workMarker);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        load: load,</span><br><span class=\"line\">        add: add,</span><br><span class=\"line\">        clearArray: clearArray,</span><br><span class=\"line\">        clear: clear</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>这样的话，一个供require调用的模块也就写好了。</p>\n<p>最后感谢小伙伴<a href=\"https://www.zhihu.com/people/piratf\" target=\"_blank\" rel=\"noopener\">Larry Sean</a> 帮忙重构代码。</p>\n<p>全文完。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><p>最早接触javascript的时候，javascript代码直接扔在script标签里面就完事了。</p>\n<p>反正代码不多，交互简单，逻辑不难，和HTML混在一起也未尝不可。</p>\n<p>后来交互越来越复杂，代码越多越多了，我们就开始把JS代码独立到了单独的JS文件中。</p>\n<p>公共的库引用在前，自己的逻辑代码引用在后，全局变量定义在HTML内部，在独立JS文件中直接使用变量就好。</p>\n<p>我们会经常看到下面这种代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　&lt;script src=&quot;1.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">　　&lt;script src=&quot;2.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">　　&lt;script src=&quot;3.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">　　&lt;script src=&quot;4.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">　　&lt;script src=&quot;5.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">　　&lt;script src=&quot;6.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>通过script标签顺序去js管理依赖关系。</p>\n<p>阮一峰老师在<a href=\"http://www.ruanyifeng.com/blog/2012/11/require_js.html\" target=\"_blank\" rel=\"noopener\">Javascript模块化编程（三）：require.js的用法</a><br>一文中总结了这样写法的缺点：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">首先，加载的时候，浏览器会停止网页渲染，加载文件越多，网页失去响应的时间就会越长；</span><br><span class=\"line\"></span><br><span class=\"line\">其次，由于js文件之间存在依赖关系，因此必须严格保证加载顺序（比如上例的1.js要在2.js的前面），依赖性最大的模块一定要放到最后加载.</span><br><span class=\"line\"></span><br><span class=\"line\">当依赖关系很复杂的时候，代码的编写和维护都会变得困难。</span><br></pre></td></tr></table></figure></p>\n<p>而requirejs的诞生便是为了解决这个问题。</p>\n<h3 id=\"requirejs\"><a href=\"#requirejs\" class=\"headerlink\" title=\"requirejs\"></a><a href=\"http://requirejs.org/docs/download.html\" target=\"_blank\" rel=\"noopener\">requirejs</a></h3><p>在<a href=\"http://requirejs.org/docs/download.html\" target=\"_blank\" rel=\"noopener\">官网</a>把requirejs 下载回来之后。使用一般的方法引入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;js/require.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>但是这样的方法，还是可能在加载require.js的时候导致网页失去响应。解决方案一般有两种：</p>\n<ol>\n<li><p>把上面的代码放到网页底部</p>\n</li>\n<li><p>使用异步的方法加载，如下：</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;js/require.js&quot; defer async=&quot;true&quot; &gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://www.w3school.com.cn/html5/att_script_async.asp\" target=\"_blank\" rel=\"noopener\">async属性</a> 表明这个文件需要异步加载，避免网页失去响应。</p>\n<p>不过IE下不支持这个属性，只支持defer，所以可以把defer也写上。</p>\n<h3 id=\"加载主模块\"><a href=\"#加载主模块\" class=\"headerlink\" title=\"加载主模块\"></a>加载主模块</h3><p>在上一步，我们已经引入了require了，那么require怎么知道我们究竟要加载什么东西呢？答案是使用data-main属性。<br>假设我们的主模块为js/home.js,引入代码应该如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　&lt;script src=&quot;js/require.js&quot; data-main=&quot;js/home&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">//require.js默认文件后缀为js，所以home.js可以写成home。</span><br></pre></td></tr></table></figure></p>\n<p>接下来我使用<a href=\"https://github.com/liguobao/58HouseSearch\" target=\"_blank\" rel=\"noopener\">58HouseSearch</a> 的代码来讲解重构过程。</p>\n<p>在此项目里面，重构前大概就是JS变量漫天飞，js文件里面各种函数到处乱放。一开始用起来还没什么，后来加入了更多功能的时候，JS代码维护起来就疼不欲生了。因此托了个小伙伴帮忙使用模块化思想重构了一下JS代码。</p>\n<p>上面说了，我们首先需要创建我们的模块，在这个项目里面，主模块叫home.js。</p>\n<p>home.js中我们需要配置一下require.config.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require.config(&#123;</span><br><span class=\"line\">    baseUrl: &apos;/DomainJS/&apos;,</span><br><span class=\"line\">    paths: &#123;</span><br><span class=\"line\">        jquery: &quot;lib/jquery-1.11.3.min&quot;,</span><br><span class=\"line\">        &quot;AMUI&quot;: &quot;lib/amazeui.2.7.1.min&quot;,</span><br><span class=\"line\">        &quot;jquery.range&quot;: &quot;lib/jquery.range&quot;,</span><br><span class=\"line\">        &quot;es5&quot;: &quot;lib/es5&quot;,</span><br><span class=\"line\">        &quot;mapController&quot;: &quot;mapController&quot;,</span><br><span class=\"line\">        &quot;addToolbar&quot;: &quot;addToolbar&quot;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    shim: &#123;</span><br><span class=\"line\">        &quot;addToolbar&quot;: &#123;</span><br><span class=\"line\">            deps: [&quot;jquery&quot;]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;jquery.range&quot;: &#123;</span><br><span class=\"line\">            deps: [&quot;jquery&quot;]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>在这里我主要配置了一下baseURL(所有模块的查找根路径)，paths(名称映射)，shim(<br>为那些没有使用define()来声明依赖关系、设置模块的”浏览器全局变量注入”型脚本做依赖和导出配置。)</p>\n<p>关于require.config的详细内容可以看下下面这些文章：</p>\n<ol>\n<li><a href=\"https://segmentfault.com/a/1190000002401665\" target=\"_blank\" rel=\"noopener\">RequireJS进阶:配置文件的学习</a> </li>\n<li><a href=\"https://segmentfault.com/a/1190000002403806\" target=\"_blank\" rel=\"noopener\">RequireJS进阶:模块的优化及配置的详解</a></li>\n</ol>\n<p>配置做完了，我们也可以开始真正写我们的逻辑代码了,我们使用require来加载我们需要的库。<br>代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require([&apos;domready!&apos;, &apos;jquery&apos;, &apos;AMUI&apos;, &apos;mapController&apos;, &apos;city&apos;, &apos;commuteGo&apos;], function (doc, $, AMUI, mapController, city, commuteGo) &#123;</span><br><span class=\"line\">    city.initAllCityInfo();</span><br><span class=\"line\">    mapController.init();</span><br><span class=\"line\"></span><br><span class=\"line\">    $(&quot;input[name=&apos;locationType&apos;]&quot;).bind(&apos;click&apos;, mapController.locationMethodOnChange)</span><br><span class=\"line\"></span><br><span class=\"line\">    $(&quot;input[name=&apos;vehicle&apos;]&quot;).bind(&apos;click&apos;, commuteGo.go)</span><br><span class=\"line\"></span><br><span class=\"line\">    $(&apos;#Get58Data&apos;).bind(&apos;click&apos;, function(e) &#123;</span><br><span class=\"line\">        e.preventDefault();</span><br><span class=\"line\">     </span><br><span class=\"line\">        mapController.Get58DataClick();</span><br><span class=\"line\">        e.stopPropagation();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        type: &quot;post&quot;,</span><br><span class=\"line\">        url: &quot;../Commom/GetPVCount&quot;,</span><br><span class=\"line\">        data: &#123; &#125;,</span><br><span class=\"line\">        success: function (result)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if (result.IsSuccess)&#123;</span><br><span class=\"line\">                $(&quot;#lblPVCount&quot;).text(result.PVCount);</span><br><span class=\"line\">            &#125;else &#123;</span><br><span class=\"line\">                $(&quot;#lblPVCount&quot;).text(0);</span><br><span class=\"line\">                console.log(result.Error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    $(&apos;#search-offcanvas&apos;).offCanvas(&#123; effect: &apos;overlay&apos; &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    $(&quot;.amap-sug-result&quot;).css(&quot;z-index&quot;, 9999);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>忽略function里面的具体逻辑，加载如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require([&apos;domready!&apos;, &apos;jquery&apos;, &apos;AMUI&apos;, &apos;mapController&apos;, &apos;city&apos;, &apos;commuteGo&apos;], </span><br><span class=\"line\">function (doc, $, AMUI, mapController, city, commuteGo)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">//todo</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>第一个参数为一个数组，表示所依赖的模块，此处为[‘domready!’, ‘jquery’, ‘AMUI’, ‘mapController’, ‘city’, ‘commuteGo’]；</p>\n<p>第二个参数为回调函数，当前面指定的模块都全部加载成功之后，便调用此函数。加载的模块会以参数形式传入此函数，从而在回调函数内部就可以使用这些模块啦。</p>\n<p>require()异步加载所需模块的时候，此时浏览器并不会失去响应；当前面的模块加载成功之后，执行回调函数才会运行我们的逻辑代码，因此解决了依赖性问题。</p>\n<p>讲完了模块加载，我们下面讲一下模块编写。</p>\n<h3 id=\"AMD模块编写\"><a href=\"#AMD模块编写\" class=\"headerlink\" title=\"AMD模块编写\"></a>AMD模块编写</h3><p>require.js加载的模块的采用的AMD规范。所以我们的模块必须按照AMD的规定来写。</p>\n<p>关于AMD规范详情可以看这个文章：<a href=\"http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html\" target=\"_blank\" rel=\"noopener\">Javascript模块化编程（二）：AMD规范</a></p>\n<p>模块有两个情况，不依赖其他模块和依赖其他模块。</p>\n<h4 id=\"不依赖其他模块\"><a href=\"#不依赖其他模块\" class=\"headerlink\" title=\"不依赖其他模块\"></a>不依赖其他模块</h4><p>直接define定义，使用function回调。</p>\n<p><a href=\"https://github.com/liguobao/58HouseSearch/blob/master/58HouseSearch/DomainJS/helper.js\" target=\"_blank\" rel=\"noopener\">58HouseSearch/DomainJS/helper.js</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(function () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    //获取URL中的参数</span><br><span class=\"line\">    var getQueryString=  function (name) &#123;</span><br><span class=\"line\">        var reg = new RegExp(&quot;(^|&amp;)&quot; + name + &quot;=([^&amp;]*)(&amp;|$)&quot;);</span><br><span class=\"line\">        var r = window.location.search.substr(1).match(reg);</span><br><span class=\"line\">        if (r != null) return unescape(r[2]); return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        getQueryString: getQueryString,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"依赖其他模块\"><a href=\"#依赖其他模块\" class=\"headerlink\" title=\"依赖其他模块\"></a>依赖其他模块</h4><p>define中如同require一样，用数组表明需要加载的模块，function回调。</p>\n<p><a href=\"https://github.com/liguobao/58HouseSearch/blob/master/58HouseSearch/DomainJS/marker.js\" target=\"_blank\" rel=\"noopener\">58HouseSearch/DomainJS/marker.js</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define([&apos;mapSignleton&apos;, &apos;city&apos;, &apos;transfer&apos;], function(mapSignleton, city, transfer) &#123;</span><br><span class=\"line\">    var _map = mapSignleton.map;</span><br><span class=\"line\">    var _workMarker = null;</span><br><span class=\"line\">    var _markerArray = [];</span><br><span class=\"line\">    var load = function(x, y, locationName) &#123;</span><br><span class=\"line\">        _workMarker = new AMap.Marker(&#123;</span><br><span class=\"line\">            map: _map,</span><br><span class=\"line\">            title: locationName,</span><br><span class=\"line\">            icon: &apos;http://webapi.amap.com/theme/v1.3/markers/n/mark_r.png&apos;,</span><br><span class=\"line\">            position: [x, y]</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    var add = function(address, rent, href, markBG) &#123;</span><br><span class=\"line\">        new AMap.Geocoder(&#123;</span><br><span class=\"line\">            city: city.name,</span><br><span class=\"line\">            radius: 1000</span><br><span class=\"line\">        &#125;).getLocation(address, function(status, result) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            if (status === &quot;complete&quot; &amp;&amp; result.info === &apos;OK&apos;) &#123;</span><br><span class=\"line\">                var geocode = result.geocodes[0];</span><br><span class=\"line\">                var rentMarker = new AMap.Marker(&#123;</span><br><span class=\"line\">                    map: _map,</span><br><span class=\"line\">                    title: address,</span><br><span class=\"line\">                    icon: markBG ? &apos;IMG/Little/&apos; + markBG : &apos;http://webapi.amap.com/theme/v1.3/markers/n/mark_b.png&apos;,</span><br><span class=\"line\">                    position: [geocode.location.getLng(), geocode.location.getLat()]</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                _markerArray.push(rentMarker);</span><br><span class=\"line\"></span><br><span class=\"line\">                rentMarker.content = &quot;&lt;div&gt;&lt;a target = &apos;_blank&apos; href=&apos;&quot; + href + &quot;&apos;&gt;房源：&quot; + address + &quot;  租金：&quot; + rent + &quot;&lt;/a&gt;&lt;div&gt;&quot;</span><br><span class=\"line\">                rentMarker.on(&apos;click&apos;, function(e) &#123;</span><br><span class=\"line\">                    transfer.add(e, address);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    var clearArray = function() &#123;</span><br><span class=\"line\">        if (_markerArray &amp;&amp; _markerArray.length &gt; 0) _map.remove(_markerArray);</span><br><span class=\"line\">        _markerArray = [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    var clear = function() &#123;</span><br><span class=\"line\">        if (_workMarker) &#123;</span><br><span class=\"line\">            _map.remove(_workMarker);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        load: load,</span><br><span class=\"line\">        add: add,</span><br><span class=\"line\">        clearArray: clearArray,</span><br><span class=\"line\">        clear: clear</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>这样的话，一个供require调用的模块也就写好了。</p>\n<p>最后感谢小伙伴<a href=\"https://www.zhihu.com/people/piratf\" target=\"_blank\" rel=\"noopener\">Larry Sean</a> 帮忙重构代码。</p>\n<p>全文完。</p>\n"},{"layout":"post","title":"手把手教你用Jenkins自动发布dotnet core网站","date":"2018-05-07T16:00:00.000Z","_content":"# Jenkins部分\n\n首先,我们要有个Jenkins咯,下载链接:[https://jenkins.io/download/](https://jenkins.io/download/)\n\n我们安装官网教程安装好jenkins,安装教程略....\n\n嗯?不是说好手把手么?你妹的.\n\n好好好,我们还是来手把手教程好了.\n\n## 首先安装JDK8\n\n添加安装源之后直接apt-get install就好,下面是ubuntu的安装命令,其他系统自己玩一下就好.\n\n```sh\n\nsudo add-apt-repository ppa:webupd8team/java\n\nsudo apt-get update\n\nsudo apt-get install oracle-java8-installer\n\n```\n\n## 下载jenkins.war + 启动Jenkins\n\n下载链接:[http://mirrors.jenkins.io/war-stable/](http://mirrors.jenkins.io/war-stable/)\n\n在这里面找最新的下载,我当前最新的应该是[2.107.2](http://mirrors.jenkins.io/war-stable/2.107.2/jenkins.war)\n\n下载好了jenkins.war之后,在当前目录创建一个jenkins-home文件夹,设置JENKINS_HOME环境变量为jenkins-home(不设置也可以,默认在~/.jenkins)\n\n```sh\n\nwget http://mirrors.jenkins.io/war-stable/2.107.2/jenkins.war;\nmkdir ~/jenkins-home;\nexport JENKINS_HOME=~/jenkins-home;\ntmux;\njava -jar jenkins.war\n\n```\n\n一般建议开个后台进程来跑jenkins,免得终端退出之后jenkins就死掉了.\n\n所以上面我先打开了tmux之后再跑java -jar jenkins.war.\n\n如下图:\n![jenkins启动](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%886.53.24.png)\n\n接着\b留意一下initialAdminPassword的输出\n\n```log\n\nJenkins initial setup is required. An admin user has been created and a password generated.\nPlease use the following password to proceed to installation:\n\nXXXXXXXXXXXXXX\n\nThis may also be found at: /root/jenkins-home/secrets/initialAdminPassword\n```\n\n这个时候访问当前主机的8080端口已经可以看到jenkins正在启动了,稍等片刻就可以看到jenkins登录页.\n\n这个时候把上面的XXXXXXXXXXXXXX复制出来,输进去点击\b继续配置jenkins账号密码信息之类的.\n\n\b![配置jenkins](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%886.58.58.png)\n\n接着安装默认插件.\n\n![安装插件](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%887.00.12.png)\n\n这里估计也要等几分钟不等,看你的机器性能和网络速度.\n\n安装好了之后会进入配置登录账号密码,安装提示配置就完事.\n\n最后\b进入jenkins页面是这样的.\n![jenkins](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%887.02.42.png)\n\n\b到现在我们已经把jenkins跑起来了,也有了一些常用的插件.\n\n我们先去把dotnet core docker 编译发布相关的东西弄好之后再回来继续做jenkins任务.\n\n## dotnet core docker 打包\n\n在项目目录下新建Dockerfile文件,内容如下:\n\n```docker\n\nFROM microsoft/aspnetcore-build:2.0 AS build-env\nWORKDIR /app\n\n# copy csproj and restore as distinct layers\nCOPY *.csproj ./\nRUN dotnet restore\n\n# copy everything else and build\nCOPY . ./\nRUN dotnet publish -c Release -o out\n\n# build runtime image\nFROM microsoft/aspnetcore:2.0\nWORKDIR /app\nCOPY --from=build-env /app/out .\nENTRYPOINT [\"dotnet\", \"你的dotnet core程序.dll\"]\n\n```\n\n这个Dockerfile基本就是把当前目录的\b文件\b拷贝到aspnetcore-build镜像中,再里面编译好之后再发布到aspnetcore:2.0\b镜像\b中,\n\n最后指定运行你的dotnet core程序\n\n来源:[https://github.com/DaoCloud/dotnet-docker-samples](https://github.com/DaoCloud/dotnet-docker-samples)\n\n## docker build + run 脚本(非必须,可以使用jenkins中脚本编译替代)\n\n以[HouseCrawler.Web](https://github.com/liguobao/58HouseSearch/blob/master/HouseCrawler.Core/HouseCrawler.Web/)为例,\n\n```sh\n\n#!/bin/sh\nimage_version=`date +%Y%m%d%H%M`;\necho $image_version;\ncd ~/code/58HouseSearch/HouseCrawler.Core/HouseCrawler.Web;\ngit pull --rebase origin master;\ndocker stop house-web;\ndocker rm house-web;\ndocker build -t house-web:$image_version .;\ndocker images;\ndocker run -p 8080:80 -v ~/docker-data/house-web/appsettings.json:/app/appsettings.json -v ~/docker-data/house-web/NLogFile/:/app/NLogFile  --restart=always --name house-web -d house-web:$image_version;\ndocker logs house-web;\n\n```\n\n通过上面这个build+run脚本,我们已经把dotnet core程序编译好了,并且打包成了docker images,还直接跑起来了.\n\n但是我们想要的应该是自动化编译部署,而且上面我们都把jenkins跑起来了,所以....\n\n## jenkins job配置\n\n### 新建Job\n\n打开jenkins首页,左侧选择\"新建任务\"(newJob),如下图:\n\n![newJob](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%889.10.00.png)\n\n给新的job取个名字,然后选择\"构建自由风格的软件项目\",如图:\n\n![构建自由风格的软件项目](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%889.12.27.png)\n\n### 添加源码仓库\n\n确认之后进入Job配置页面,源码管理里面选择git,如图:\n![源码管理](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%889.14.06.png)\n\n如果git仓库是需要权限的话需要配置一下权限,我一般简单粗暴直接把jenkins主机的公钥添加到git仓库里面,所以这里直接配置成'From the Jenkins master ~/.ssh',也可以用账号密码访问等等的.\n\n![git仓库权限配置](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%889.16.09.png)\n\n\"Branch Specifier (blank for 'any')\t\"默认master分支,根据自己的需求填入不同的分支.\n\n构建触发器和构建环境先跳过,我们不管,待会弄.\n\n### 构建\n\n点击\"添加构建步骤\",选择\"Execute shell\",然后能看到如下图:\n![Execute shell](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%889.22.45.png)\n\n还记得我们上一步的脚本么?修改一下源码路径再放进去.\n\n```sh\n# 切换到源码目录,对应在jenkins-home的workspace下面\ncd ~jenkins-home/workspace/项目名称/Dockerfile所在目录;\nimage_version=`date +%Y%m%d%H%M`;\necho $image_version;\n# 停止之前的docker container\ndocker stop house-web;\n# 删除这个container\ndocker rm house-web;\n# build镜像并且打上tag\ndocker build -t house-web:$image_version .;\ndocker images;\n# 把刚刚build出来的镜像跑起来\ndocker run -p 8080:80 -v ~/docker-data/house-web/appsettings.json:/app/appsettings.json -v ~/docker-data/house-web/NLogFile/:/app/NLogFile  --restart=always --name house-web -d house-web:$image_version;\ndocker logs house-web;\n```\n\n如果jenkins主机和程序运行主机不在一台机器上,建议直接在把上面的脚本放在运行主机上,命名成 start_XXX.sh.\n\n上面的命令直接就是成了\n\n```sh\nssh username@发布主机的IP '~/start_XXX.sh'\n```\n\nps:记得在jenkins主机配置[ssh免登陆](https://blog.csdn.net/wind520/article/details/38421359)\n\n### 构建触发器\n\n构建触发器就是我们选择什么时候来触发构建任务,有几种方案可以做.\n\n1. 使用 Build periodically,定时 or 隔N久去拉一次代码构建\n2. Poll SCM：定时检查源码变更（根据SCM软件的版本号）,如果有变化就去执行构建\n3. GitHub hook trigger for GITScm polling 或者其他Git平台提供的webhook\n4. 安装Generic Webhook Trigger插件之后,使用其他平台的webhook来触发构建任务.\n\n我这里选择第4种方案,安装Generic Webhook Trigger插件,下面马上回告诉你为什么这样做的.\n\nGeneric Webhook Trigger插件在\"系统管理-管理插件-可选插件\"里面直接搜\"Generic Webhook Trigger\"安装就可以.\n\n从上一步的构建步骤里面的脚本中我们就知道,其实我们现在要不就在jenkins主机上docker build,要不就在发布目标主机上build,\n\nbuild过程比较慢而且还会产生镜像在本机or目标主机上,docker images也没有被管理起来.\n\n有什么好的办法么?嗯,还真有.直接用阿里云\"容器镜像服务\"来构建镜像\n\n### 使用阿里云-容器镜像服务\n\n首先登录阿里云,然后进入容器镜像服务,地址是[https://cr.console.aliyun.com/](https://cr.console.aliyun.com/)\n\n首次进入估计需要创建一个命名空间,一般用公司名或者你的名字就完事.\n\n接着选择\"创建镜像仓库\".\n\n![创建镜像仓库](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%889.51.25.png)\n\n选地区-选命名空间-填仓库名称(就是镜像名称)-填摘要-设置代码源(支持GitHub/阿里云code/Bitbucket/私有Gitlab/本地Git等等,给个授权就完事)\n\n![选地区](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%889.54.10.png)\n\n构建设置选择\"代码变更时自动构建镜像\",然后选一下构建分支为你想要的分支,填入Dockerfile在源码中的路径,然后保存\n![构建分支](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%889.57.50.png)\n\n接着我们进入管理平台看一下.\n\n![aliyun-构建](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%8810.00.51.png)\n\n点击一下\"立即构建\",然后查看一下日志.\n![build 日志](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%8810.02.00.png)\n\n![构建成功](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%8810.02.49.png)\n\n这个时候,我们用docker pull registry-internal.cn-hangzhou.aliyuncs.com/你的命名空间/你的镜像名称 就可以拉到这个阿里云build成功的镜像了.\n\n镜像build的问题解决了,那么我们怎么自动把镜像发布到我们的运行主机呢?\n\n这时候webhook又出来了.\n\n### jenkins webhook触发配置\n\n我们看阿里云镜像构建服务里面,有一项是webhook的,官方介绍在这里:[阿里云-webhook管理](https://help.aliyun.com/document_detail/60949.html?spm=5176.8351553.0.0.645319912fjxim)\n\n![阿里云-webhook管理](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%8810.08.45.png)\n\n这里就需要填入我们的webhook地址,还记得前面我无端端选择的第四种方案,然后让大家跟着安装的Generic Webhook Trigger插件么?\n\n我们就是用这货来为我们提供webhook API.\n\n理一下流程:\n\ngit仓库代码变化 ->阿里云容器构建服务启动 -> 构建好镜像之后触发webhook -> jenkins收到阿里云的webhook之后触发job执行部署脚本 ->部署脚本使用阿里云镜像run起来 ->完事.\n\n我们继续配置Generic Webhook Trigger.\n\nGeneric Webhook Trigger支持的命名触发URL格式是这样的:\n\n``` http\nhttp://jenkins登录用户名:token授权码@jenkins IP:8080/generic-webhook-trigger/invoke?token=触发器名称\n```\n\njenkins登录名和token在\"账号-设置-API Token-Show API Token...\"里面能看到,找出来之后填到上面去就可以.\n\n最后一个token参数其实就是\"构建触发器\"中\"触发远程构建\"的参数,建议使用job名字.这里的配置大概是这样的:\n\n![触发远程构建](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%8810.21.13.png)\n\n最后我们还需要在jenkins全局安全设置中取消勾选“防止跨站点请求伪造（Prevent Cross Site Request Forgery exploits)\"选项,这样阿里云webhook才能过得来.\n\n手动在浏览器中访问一下http://jenkins登录用户名:token授权码@jenkins IP:8080/generic-webhook-trigger/invoke?token=触发器名称\n如果对应的jenkins Job能正常开始执行,说明整个流程已经ok了.\n\n最后我们回到上面\"阿里云-容器镜像服务-对应镜像仓库-webhook-添加记录\"\n![webhook-添加记录](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%8810.27.02.png)\n\nPS:webhook名称不要带特殊字符or \"-\"之类的,不然一直保存失败而且还不会提示你是因为名字不合法,下午被这个坑了半个小时.\n\n到这里,我们基本大功告成了.\n\n最后我们再改一下jenkins的脚本,不在本地build docker了,直接拿\b阿里云镜像服务构建出来的镜像跑就可以.\n\n```sh\n# 停止之前的docker container\ndocker stop house-web;\n# 删除这个container\ndocker rm house-web;\ndocker pull 你的阿里云镜像地址;\n# 把刚刚build出来的镜像跑起来\ndocker run --restart=always --name 你的contianer名称 你的阿里云镜像地址;\n\n```\n\n### 总结一下我们做了什么\n\n1. 搭建jenkins\n2. 编写Dockerfile文件,直接编译发布+打包成docker镜像+部署脚本\n3. \b\b\b使用阿里云-容器构建服务构建docker镜像,\b构建成功后使用webhook通知jenkins\n4. \b配置jenkins webhook触发器,触发部署脚本\n5. 其他项目/语言其实也基本一样的操作,区别只在于\bDockerfile的编写\n6. 完事...","source":"_posts/jenkins-dotnetcore.md","raw":"---\nlayout: post\ntitle: 手把手教你用Jenkins自动发布dotnet core网站\ncategory: dotnet core\ndate: 2018-05-08\ntags:\n- dotnet core\n- Jenkins\n- docker\n---\n# Jenkins部分\n\n首先,我们要有个Jenkins咯,下载链接:[https://jenkins.io/download/](https://jenkins.io/download/)\n\n我们安装官网教程安装好jenkins,安装教程略....\n\n嗯?不是说好手把手么?你妹的.\n\n好好好,我们还是来手把手教程好了.\n\n## 首先安装JDK8\n\n添加安装源之后直接apt-get install就好,下面是ubuntu的安装命令,其他系统自己玩一下就好.\n\n```sh\n\nsudo add-apt-repository ppa:webupd8team/java\n\nsudo apt-get update\n\nsudo apt-get install oracle-java8-installer\n\n```\n\n## 下载jenkins.war + 启动Jenkins\n\n下载链接:[http://mirrors.jenkins.io/war-stable/](http://mirrors.jenkins.io/war-stable/)\n\n在这里面找最新的下载,我当前最新的应该是[2.107.2](http://mirrors.jenkins.io/war-stable/2.107.2/jenkins.war)\n\n下载好了jenkins.war之后,在当前目录创建一个jenkins-home文件夹,设置JENKINS_HOME环境变量为jenkins-home(不设置也可以,默认在~/.jenkins)\n\n```sh\n\nwget http://mirrors.jenkins.io/war-stable/2.107.2/jenkins.war;\nmkdir ~/jenkins-home;\nexport JENKINS_HOME=~/jenkins-home;\ntmux;\njava -jar jenkins.war\n\n```\n\n一般建议开个后台进程来跑jenkins,免得终端退出之后jenkins就死掉了.\n\n所以上面我先打开了tmux之后再跑java -jar jenkins.war.\n\n如下图:\n![jenkins启动](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%886.53.24.png)\n\n接着\b留意一下initialAdminPassword的输出\n\n```log\n\nJenkins initial setup is required. An admin user has been created and a password generated.\nPlease use the following password to proceed to installation:\n\nXXXXXXXXXXXXXX\n\nThis may also be found at: /root/jenkins-home/secrets/initialAdminPassword\n```\n\n这个时候访问当前主机的8080端口已经可以看到jenkins正在启动了,稍等片刻就可以看到jenkins登录页.\n\n这个时候把上面的XXXXXXXXXXXXXX复制出来,输进去点击\b继续配置jenkins账号密码信息之类的.\n\n\b![配置jenkins](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%886.58.58.png)\n\n接着安装默认插件.\n\n![安装插件](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%887.00.12.png)\n\n这里估计也要等几分钟不等,看你的机器性能和网络速度.\n\n安装好了之后会进入配置登录账号密码,安装提示配置就完事.\n\n最后\b进入jenkins页面是这样的.\n![jenkins](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%887.02.42.png)\n\n\b到现在我们已经把jenkins跑起来了,也有了一些常用的插件.\n\n我们先去把dotnet core docker 编译发布相关的东西弄好之后再回来继续做jenkins任务.\n\n## dotnet core docker 打包\n\n在项目目录下新建Dockerfile文件,内容如下:\n\n```docker\n\nFROM microsoft/aspnetcore-build:2.0 AS build-env\nWORKDIR /app\n\n# copy csproj and restore as distinct layers\nCOPY *.csproj ./\nRUN dotnet restore\n\n# copy everything else and build\nCOPY . ./\nRUN dotnet publish -c Release -o out\n\n# build runtime image\nFROM microsoft/aspnetcore:2.0\nWORKDIR /app\nCOPY --from=build-env /app/out .\nENTRYPOINT [\"dotnet\", \"你的dotnet core程序.dll\"]\n\n```\n\n这个Dockerfile基本就是把当前目录的\b文件\b拷贝到aspnetcore-build镜像中,再里面编译好之后再发布到aspnetcore:2.0\b镜像\b中,\n\n最后指定运行你的dotnet core程序\n\n来源:[https://github.com/DaoCloud/dotnet-docker-samples](https://github.com/DaoCloud/dotnet-docker-samples)\n\n## docker build + run 脚本(非必须,可以使用jenkins中脚本编译替代)\n\n以[HouseCrawler.Web](https://github.com/liguobao/58HouseSearch/blob/master/HouseCrawler.Core/HouseCrawler.Web/)为例,\n\n```sh\n\n#!/bin/sh\nimage_version=`date +%Y%m%d%H%M`;\necho $image_version;\ncd ~/code/58HouseSearch/HouseCrawler.Core/HouseCrawler.Web;\ngit pull --rebase origin master;\ndocker stop house-web;\ndocker rm house-web;\ndocker build -t house-web:$image_version .;\ndocker images;\ndocker run -p 8080:80 -v ~/docker-data/house-web/appsettings.json:/app/appsettings.json -v ~/docker-data/house-web/NLogFile/:/app/NLogFile  --restart=always --name house-web -d house-web:$image_version;\ndocker logs house-web;\n\n```\n\n通过上面这个build+run脚本,我们已经把dotnet core程序编译好了,并且打包成了docker images,还直接跑起来了.\n\n但是我们想要的应该是自动化编译部署,而且上面我们都把jenkins跑起来了,所以....\n\n## jenkins job配置\n\n### 新建Job\n\n打开jenkins首页,左侧选择\"新建任务\"(newJob),如下图:\n\n![newJob](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%889.10.00.png)\n\n给新的job取个名字,然后选择\"构建自由风格的软件项目\",如图:\n\n![构建自由风格的软件项目](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%889.12.27.png)\n\n### 添加源码仓库\n\n确认之后进入Job配置页面,源码管理里面选择git,如图:\n![源码管理](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%889.14.06.png)\n\n如果git仓库是需要权限的话需要配置一下权限,我一般简单粗暴直接把jenkins主机的公钥添加到git仓库里面,所以这里直接配置成'From the Jenkins master ~/.ssh',也可以用账号密码访问等等的.\n\n![git仓库权限配置](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%889.16.09.png)\n\n\"Branch Specifier (blank for 'any')\t\"默认master分支,根据自己的需求填入不同的分支.\n\n构建触发器和构建环境先跳过,我们不管,待会弄.\n\n### 构建\n\n点击\"添加构建步骤\",选择\"Execute shell\",然后能看到如下图:\n![Execute shell](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%889.22.45.png)\n\n还记得我们上一步的脚本么?修改一下源码路径再放进去.\n\n```sh\n# 切换到源码目录,对应在jenkins-home的workspace下面\ncd ~jenkins-home/workspace/项目名称/Dockerfile所在目录;\nimage_version=`date +%Y%m%d%H%M`;\necho $image_version;\n# 停止之前的docker container\ndocker stop house-web;\n# 删除这个container\ndocker rm house-web;\n# build镜像并且打上tag\ndocker build -t house-web:$image_version .;\ndocker images;\n# 把刚刚build出来的镜像跑起来\ndocker run -p 8080:80 -v ~/docker-data/house-web/appsettings.json:/app/appsettings.json -v ~/docker-data/house-web/NLogFile/:/app/NLogFile  --restart=always --name house-web -d house-web:$image_version;\ndocker logs house-web;\n```\n\n如果jenkins主机和程序运行主机不在一台机器上,建议直接在把上面的脚本放在运行主机上,命名成 start_XXX.sh.\n\n上面的命令直接就是成了\n\n```sh\nssh username@发布主机的IP '~/start_XXX.sh'\n```\n\nps:记得在jenkins主机配置[ssh免登陆](https://blog.csdn.net/wind520/article/details/38421359)\n\n### 构建触发器\n\n构建触发器就是我们选择什么时候来触发构建任务,有几种方案可以做.\n\n1. 使用 Build periodically,定时 or 隔N久去拉一次代码构建\n2. Poll SCM：定时检查源码变更（根据SCM软件的版本号）,如果有变化就去执行构建\n3. GitHub hook trigger for GITScm polling 或者其他Git平台提供的webhook\n4. 安装Generic Webhook Trigger插件之后,使用其他平台的webhook来触发构建任务.\n\n我这里选择第4种方案,安装Generic Webhook Trigger插件,下面马上回告诉你为什么这样做的.\n\nGeneric Webhook Trigger插件在\"系统管理-管理插件-可选插件\"里面直接搜\"Generic Webhook Trigger\"安装就可以.\n\n从上一步的构建步骤里面的脚本中我们就知道,其实我们现在要不就在jenkins主机上docker build,要不就在发布目标主机上build,\n\nbuild过程比较慢而且还会产生镜像在本机or目标主机上,docker images也没有被管理起来.\n\n有什么好的办法么?嗯,还真有.直接用阿里云\"容器镜像服务\"来构建镜像\n\n### 使用阿里云-容器镜像服务\n\n首先登录阿里云,然后进入容器镜像服务,地址是[https://cr.console.aliyun.com/](https://cr.console.aliyun.com/)\n\n首次进入估计需要创建一个命名空间,一般用公司名或者你的名字就完事.\n\n接着选择\"创建镜像仓库\".\n\n![创建镜像仓库](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%889.51.25.png)\n\n选地区-选命名空间-填仓库名称(就是镜像名称)-填摘要-设置代码源(支持GitHub/阿里云code/Bitbucket/私有Gitlab/本地Git等等,给个授权就完事)\n\n![选地区](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%889.54.10.png)\n\n构建设置选择\"代码变更时自动构建镜像\",然后选一下构建分支为你想要的分支,填入Dockerfile在源码中的路径,然后保存\n![构建分支](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%889.57.50.png)\n\n接着我们进入管理平台看一下.\n\n![aliyun-构建](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%8810.00.51.png)\n\n点击一下\"立即构建\",然后查看一下日志.\n![build 日志](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%8810.02.00.png)\n\n![构建成功](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%8810.02.49.png)\n\n这个时候,我们用docker pull registry-internal.cn-hangzhou.aliyuncs.com/你的命名空间/你的镜像名称 就可以拉到这个阿里云build成功的镜像了.\n\n镜像build的问题解决了,那么我们怎么自动把镜像发布到我们的运行主机呢?\n\n这时候webhook又出来了.\n\n### jenkins webhook触发配置\n\n我们看阿里云镜像构建服务里面,有一项是webhook的,官方介绍在这里:[阿里云-webhook管理](https://help.aliyun.com/document_detail/60949.html?spm=5176.8351553.0.0.645319912fjxim)\n\n![阿里云-webhook管理](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%8810.08.45.png)\n\n这里就需要填入我们的webhook地址,还记得前面我无端端选择的第四种方案,然后让大家跟着安装的Generic Webhook Trigger插件么?\n\n我们就是用这货来为我们提供webhook API.\n\n理一下流程:\n\ngit仓库代码变化 ->阿里云容器构建服务启动 -> 构建好镜像之后触发webhook -> jenkins收到阿里云的webhook之后触发job执行部署脚本 ->部署脚本使用阿里云镜像run起来 ->完事.\n\n我们继续配置Generic Webhook Trigger.\n\nGeneric Webhook Trigger支持的命名触发URL格式是这样的:\n\n``` http\nhttp://jenkins登录用户名:token授权码@jenkins IP:8080/generic-webhook-trigger/invoke?token=触发器名称\n```\n\njenkins登录名和token在\"账号-设置-API Token-Show API Token...\"里面能看到,找出来之后填到上面去就可以.\n\n最后一个token参数其实就是\"构建触发器\"中\"触发远程构建\"的参数,建议使用job名字.这里的配置大概是这样的:\n\n![触发远程构建](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%8810.21.13.png)\n\n最后我们还需要在jenkins全局安全设置中取消勾选“防止跨站点请求伪造（Prevent Cross Site Request Forgery exploits)\"选项,这样阿里云webhook才能过得来.\n\n手动在浏览器中访问一下http://jenkins登录用户名:token授权码@jenkins IP:8080/generic-webhook-trigger/invoke?token=触发器名称\n如果对应的jenkins Job能正常开始执行,说明整个流程已经ok了.\n\n最后我们回到上面\"阿里云-容器镜像服务-对应镜像仓库-webhook-添加记录\"\n![webhook-添加记录](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%8810.27.02.png)\n\nPS:webhook名称不要带特殊字符or \"-\"之类的,不然一直保存失败而且还不会提示你是因为名字不合法,下午被这个坑了半个小时.\n\n到这里,我们基本大功告成了.\n\n最后我们再改一下jenkins的脚本,不在本地build docker了,直接拿\b阿里云镜像服务构建出来的镜像跑就可以.\n\n```sh\n# 停止之前的docker container\ndocker stop house-web;\n# 删除这个container\ndocker rm house-web;\ndocker pull 你的阿里云镜像地址;\n# 把刚刚build出来的镜像跑起来\ndocker run --restart=always --name 你的contianer名称 你的阿里云镜像地址;\n\n```\n\n### 总结一下我们做了什么\n\n1. 搭建jenkins\n2. 编写Dockerfile文件,直接编译发布+打包成docker镜像+部署脚本\n3. \b\b\b使用阿里云-容器构建服务构建docker镜像,\b构建成功后使用webhook通知jenkins\n4. \b配置jenkins webhook触发器,触发部署脚本\n5. 其他项目/语言其实也基本一样的操作,区别只在于\bDockerfile的编写\n6. 完事...","slug":"jenkins-dotnetcore","published":1,"updated":"2018-05-17T13:36:57.264Z","comments":1,"photos":[],"link":"","_id":"cjhal1fwm0020p631yytq8nq1","content":"<h1 id=\"Jenkins部分\"><a href=\"#Jenkins部分\" class=\"headerlink\" title=\"Jenkins部分\"></a>Jenkins部分</h1><p>首先,我们要有个Jenkins咯,下载链接:<a href=\"https://jenkins.io/download/\" target=\"_blank\" rel=\"noopener\">https://jenkins.io/download/</a></p>\n<p>我们安装官网教程安装好jenkins,安装教程略….</p>\n<p>嗯?不是说好手把手么?你妹的.</p>\n<p>好好好,我们还是来手把手教程好了.</p>\n<h2 id=\"首先安装JDK8\"><a href=\"#首先安装JDK8\" class=\"headerlink\" title=\"首先安装JDK8\"></a>首先安装JDK8</h2><p>添加安装源之后直接apt-get install就好,下面是ubuntu的安装命令,其他系统自己玩一下就好.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">sudo add-apt-repository ppa:webupd8team/java</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install oracle-java8-installer</span><br></pre></td></tr></table></figure>\n<h2 id=\"下载jenkins-war-启动Jenkins\"><a href=\"#下载jenkins-war-启动Jenkins\" class=\"headerlink\" title=\"下载jenkins.war + 启动Jenkins\"></a>下载jenkins.war + 启动Jenkins</h2><p>下载链接:<a href=\"http://mirrors.jenkins.io/war-stable/\" target=\"_blank\" rel=\"noopener\">http://mirrors.jenkins.io/war-stable/</a></p>\n<p>在这里面找最新的下载,我当前最新的应该是<a href=\"http://mirrors.jenkins.io/war-stable/2.107.2/jenkins.war\" target=\"_blank\" rel=\"noopener\">2.107.2</a></p>\n<p>下载好了jenkins.war之后,在当前目录创建一个jenkins-home文件夹,设置JENKINS_HOME环境变量为jenkins-home(不设置也可以,默认在~/.jenkins)</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">wget http://mirrors.jenkins.io/war-stable/2.107.2/jenkins.war;</span><br><span class=\"line\">mkdir ~/jenkins-home;</span><br><span class=\"line\"><span class=\"built_in\">export</span> JENKINS_HOME=~/jenkins-home;</span><br><span class=\"line\">tmux;</span><br><span class=\"line\">java -jar jenkins.war</span><br></pre></td></tr></table></figure>\n<p>一般建议开个后台进程来跑jenkins,免得终端退出之后jenkins就死掉了.</p>\n<p>所以上面我先打开了tmux之后再跑java -jar jenkins.war.</p>\n<p>如下图:<br><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%886.53.24.png\" alt=\"jenkins启动\"></p>\n<p>接着\b留意一下initialAdminPassword的输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Jenkins initial setup is required. An admin user has been created and a password generated.</span><br><span class=\"line\">Please use the following password to proceed to installation:</span><br><span class=\"line\"></span><br><span class=\"line\">XXXXXXXXXXXXXX</span><br><span class=\"line\"></span><br><span class=\"line\">This may also be found at: /root/jenkins-home/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure>\n<p>这个时候访问当前主机的8080端口已经可以看到jenkins正在启动了,稍等片刻就可以看到jenkins登录页.</p>\n<p>这个时候把上面的XXXXXXXXXXXXXX复制出来,输进去点击\b继续配置jenkins账号密码信息之类的.</p>\n<p>\b<img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%886.58.58.png\" alt=\"配置jenkins\"></p>\n<p>接着安装默认插件.</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%887.00.12.png\" alt=\"安装插件\"></p>\n<p>这里估计也要等几分钟不等,看你的机器性能和网络速度.</p>\n<p>安装好了之后会进入配置登录账号密码,安装提示配置就完事.</p>\n<p>最后\b进入jenkins页面是这样的.<br><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%887.02.42.png\" alt=\"jenkins\"></p>\n<p>\b到现在我们已经把jenkins跑起来了,也有了一些常用的插件.</p>\n<p>我们先去把dotnet core docker 编译发布相关的东西弄好之后再回来继续做jenkins任务.</p>\n<h2 id=\"dotnet-core-docker-打包\"><a href=\"#dotnet-core-docker-打包\" class=\"headerlink\" title=\"dotnet core docker 打包\"></a>dotnet core docker 打包</h2><p>在项目目录下新建Dockerfile文件,内容如下:</p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> microsoft/aspnetcore-build:<span class=\"number\">2.0</span> AS build-<span class=\"keyword\">env</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /app</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># copy csproj and restore as distinct layers</span></span></span><br><span class=\"line\"><span class=\"bash\">COPY *.csproj ./</span></span><br><span class=\"line\"><span class=\"bash\">RUN dotnet restore</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># copy everything else and build</span></span></span><br><span class=\"line\"><span class=\"bash\">COPY . ./</span></span><br><span class=\"line\"><span class=\"bash\">RUN dotnet publish -c Release -o out</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># build runtime image</span></span></span><br><span class=\"line\"><span class=\"bash\">FROM microsoft/aspnetcore:2.0</span></span><br><span class=\"line\"><span class=\"bash\">WORKDIR /app</span></span><br><span class=\"line\"><span class=\"bash\">COPY --from=build-env /app/out .</span></span><br><span class=\"line\"><span class=\"bash\">ENTRYPOINT [<span class=\"string\">\"dotnet\"</span>, <span class=\"string\">\"你的dotnet core程序.dll\"</span>]</span></span><br></pre></td></tr></table></figure>\n<p>这个Dockerfile基本就是把当前目录的\b文件\b拷贝到aspnetcore-build镜像中,再里面编译好之后再发布到aspnetcore:2.0\b镜像\b中,</p>\n<p>最后指定运行你的dotnet core程序</p>\n<p>来源:<a href=\"https://github.com/DaoCloud/dotnet-docker-samples\" target=\"_blank\" rel=\"noopener\">https://github.com/DaoCloud/dotnet-docker-samples</a></p>\n<h2 id=\"docker-build-run-脚本-非必须-可以使用jenkins中脚本编译替代\"><a href=\"#docker-build-run-脚本-非必须-可以使用jenkins中脚本编译替代\" class=\"headerlink\" title=\"docker build + run 脚本(非必须,可以使用jenkins中脚本编译替代)\"></a>docker build + run 脚本(非必须,可以使用jenkins中脚本编译替代)</h2><p>以<a href=\"https://github.com/liguobao/58HouseSearch/blob/master/HouseCrawler.Core/HouseCrawler.Web/\" target=\"_blank\" rel=\"noopener\">HouseCrawler.Web</a>为例,</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\">image_version=`date +%Y%m%d%H%M`;</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$image_version</span>;</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/code/58HouseSearch/HouseCrawler.Core/HouseCrawler.Web;</span><br><span class=\"line\">git pull --rebase origin master;</span><br><span class=\"line\">docker stop house-web;</span><br><span class=\"line\">docker rm house-web;</span><br><span class=\"line\">docker build -t house-web:<span class=\"variable\">$image_version</span> .;</span><br><span class=\"line\">docker images;</span><br><span class=\"line\">docker run -p 8080:80 -v ~/docker-data/house-web/appsettings.json:/app/appsettings.json -v ~/docker-data/house-web/NLogFile/:/app/NLogFile  --restart=always --name house-web -d house-web:<span class=\"variable\">$image_version</span>;</span><br><span class=\"line\">docker logs house-web;</span><br></pre></td></tr></table></figure>\n<p>通过上面这个build+run脚本,我们已经把dotnet core程序编译好了,并且打包成了docker images,还直接跑起来了.</p>\n<p>但是我们想要的应该是自动化编译部署,而且上面我们都把jenkins跑起来了,所以….</p>\n<h2 id=\"jenkins-job配置\"><a href=\"#jenkins-job配置\" class=\"headerlink\" title=\"jenkins job配置\"></a>jenkins job配置</h2><h3 id=\"新建Job\"><a href=\"#新建Job\" class=\"headerlink\" title=\"新建Job\"></a>新建Job</h3><p>打开jenkins首页,左侧选择”新建任务”(newJob),如下图:</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%889.10.00.png\" alt=\"newJob\"></p>\n<p>给新的job取个名字,然后选择”构建自由风格的软件项目”,如图:</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%889.12.27.png\" alt=\"构建自由风格的软件项目\"></p>\n<h3 id=\"添加源码仓库\"><a href=\"#添加源码仓库\" class=\"headerlink\" title=\"添加源码仓库\"></a>添加源码仓库</h3><p>确认之后进入Job配置页面,源码管理里面选择git,如图:<br><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%889.14.06.png\" alt=\"源码管理\"></p>\n<p>如果git仓库是需要权限的话需要配置一下权限,我一般简单粗暴直接把jenkins主机的公钥添加到git仓库里面,所以这里直接配置成’From the Jenkins master ~/.ssh’,也可以用账号密码访问等等的.</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%889.16.09.png\" alt=\"git仓库权限配置\"></p>\n<p>“Branch Specifier (blank for ‘any’)    “默认master分支,根据自己的需求填入不同的分支.</p>\n<p>构建触发器和构建环境先跳过,我们不管,待会弄.</p>\n<h3 id=\"构建\"><a href=\"#构建\" class=\"headerlink\" title=\"构建\"></a>构建</h3><p>点击”添加构建步骤”,选择”Execute shell”,然后能看到如下图:<br><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%889.22.45.png\" alt=\"Execute shell\"></p>\n<p>还记得我们上一步的脚本么?修改一下源码路径再放进去.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 切换到源码目录,对应在jenkins-home的workspace下面</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~jenkins-home/workspace/项目名称/Dockerfile所在目录;</span><br><span class=\"line\">image_version=`date +%Y%m%d%H%M`;</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$image_version</span>;</span><br><span class=\"line\"><span class=\"comment\"># 停止之前的docker container</span></span><br><span class=\"line\">docker stop house-web;</span><br><span class=\"line\"><span class=\"comment\"># 删除这个container</span></span><br><span class=\"line\">docker rm house-web;</span><br><span class=\"line\"><span class=\"comment\"># build镜像并且打上tag</span></span><br><span class=\"line\">docker build -t house-web:<span class=\"variable\">$image_version</span> .;</span><br><span class=\"line\">docker images;</span><br><span class=\"line\"><span class=\"comment\"># 把刚刚build出来的镜像跑起来</span></span><br><span class=\"line\">docker run -p 8080:80 -v ~/docker-data/house-web/appsettings.json:/app/appsettings.json -v ~/docker-data/house-web/NLogFile/:/app/NLogFile  --restart=always --name house-web -d house-web:<span class=\"variable\">$image_version</span>;</span><br><span class=\"line\">docker logs house-web;</span><br></pre></td></tr></table></figure>\n<p>如果jenkins主机和程序运行主机不在一台机器上,建议直接在把上面的脚本放在运行主机上,命名成 start_XXX.sh.</p>\n<p>上面的命令直接就是成了</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh username@发布主机的IP <span class=\"string\">'~/start_XXX.sh'</span></span><br></pre></td></tr></table></figure>\n<p>ps:记得在jenkins主机配置<a href=\"https://blog.csdn.net/wind520/article/details/38421359\" target=\"_blank\" rel=\"noopener\">ssh免登陆</a></p>\n<h3 id=\"构建触发器\"><a href=\"#构建触发器\" class=\"headerlink\" title=\"构建触发器\"></a>构建触发器</h3><p>构建触发器就是我们选择什么时候来触发构建任务,有几种方案可以做.</p>\n<ol>\n<li>使用 Build periodically,定时 or 隔N久去拉一次代码构建</li>\n<li>Poll SCM：定时检查源码变更（根据SCM软件的版本号）,如果有变化就去执行构建</li>\n<li>GitHub hook trigger for GITScm polling 或者其他Git平台提供的webhook</li>\n<li>安装Generic Webhook Trigger插件之后,使用其他平台的webhook来触发构建任务.</li>\n</ol>\n<p>我这里选择第4种方案,安装Generic Webhook Trigger插件,下面马上回告诉你为什么这样做的.</p>\n<p>Generic Webhook Trigger插件在”系统管理-管理插件-可选插件”里面直接搜”Generic Webhook Trigger”安装就可以.</p>\n<p>从上一步的构建步骤里面的脚本中我们就知道,其实我们现在要不就在jenkins主机上docker build,要不就在发布目标主机上build,</p>\n<p>build过程比较慢而且还会产生镜像在本机or目标主机上,docker images也没有被管理起来.</p>\n<p>有什么好的办法么?嗯,还真有.直接用阿里云”容器镜像服务”来构建镜像</p>\n<h3 id=\"使用阿里云-容器镜像服务\"><a href=\"#使用阿里云-容器镜像服务\" class=\"headerlink\" title=\"使用阿里云-容器镜像服务\"></a>使用阿里云-容器镜像服务</h3><p>首先登录阿里云,然后进入容器镜像服务,地址是<a href=\"https://cr.console.aliyun.com/\" target=\"_blank\" rel=\"noopener\">https://cr.console.aliyun.com/</a></p>\n<p>首次进入估计需要创建一个命名空间,一般用公司名或者你的名字就完事.</p>\n<p>接着选择”创建镜像仓库”.</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%889.51.25.png\" alt=\"创建镜像仓库\"></p>\n<p>选地区-选命名空间-填仓库名称(就是镜像名称)-填摘要-设置代码源(支持GitHub/阿里云code/Bitbucket/私有Gitlab/本地Git等等,给个授权就完事)</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%889.54.10.png\" alt=\"选地区\"></p>\n<p>构建设置选择”代码变更时自动构建镜像”,然后选一下构建分支为你想要的分支,填入Dockerfile在源码中的路径,然后保存<br><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%889.57.50.png\" alt=\"构建分支\"></p>\n<p>接着我们进入管理平台看一下.</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%8810.00.51.png\" alt=\"aliyun-构建\"></p>\n<p>点击一下”立即构建”,然后查看一下日志.<br><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%8810.02.00.png\" alt=\"build 日志\"></p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%8810.02.49.png\" alt=\"构建成功\"></p>\n<p>这个时候,我们用docker pull registry-internal.cn-hangzhou.aliyuncs.com/你的命名空间/你的镜像名称 就可以拉到这个阿里云build成功的镜像了.</p>\n<p>镜像build的问题解决了,那么我们怎么自动把镜像发布到我们的运行主机呢?</p>\n<p>这时候webhook又出来了.</p>\n<h3 id=\"jenkins-webhook触发配置\"><a href=\"#jenkins-webhook触发配置\" class=\"headerlink\" title=\"jenkins webhook触发配置\"></a>jenkins webhook触发配置</h3><p>我们看阿里云镜像构建服务里面,有一项是webhook的,官方介绍在这里:<a href=\"https://help.aliyun.com/document_detail/60949.html?spm=5176.8351553.0.0.645319912fjxim\" target=\"_blank\" rel=\"noopener\">阿里云-webhook管理</a></p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%8810.08.45.png\" alt=\"阿里云-webhook管理\"></p>\n<p>这里就需要填入我们的webhook地址,还记得前面我无端端选择的第四种方案,然后让大家跟着安装的Generic Webhook Trigger插件么?</p>\n<p>我们就是用这货来为我们提供webhook API.</p>\n<p>理一下流程:</p>\n<p>git仓库代码变化 -&gt;阿里云容器构建服务启动 -&gt; 构建好镜像之后触发webhook -&gt; jenkins收到阿里云的webhook之后触发job执行部署脚本 -&gt;部署脚本使用阿里云镜像run起来 -&gt;完事.</p>\n<p>我们继续配置Generic Webhook Trigger.</p>\n<p>Generic Webhook Trigger支持的命名触发URL格式是这样的:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://jenkins登录用户名:token授权码@jenkins IP:8080/generic-webhook-trigger/invoke?token=触发器名称</span><br></pre></td></tr></table></figure>\n<p>jenkins登录名和token在”账号-设置-API Token-Show API Token…”里面能看到,找出来之后填到上面去就可以.</p>\n<p>最后一个token参数其实就是”构建触发器”中”触发远程构建”的参数,建议使用job名字.这里的配置大概是这样的:</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%8810.21.13.png\" alt=\"触发远程构建\"></p>\n<p>最后我们还需要在jenkins全局安全设置中取消勾选“防止跨站点请求伪造（Prevent Cross Site Request Forgery exploits)”选项,这样阿里云webhook才能过得来.</p>\n<p>手动在浏览器中访问一下<a href=\"http://jenkins登录用户名:token授权码@jenkins\" target=\"_blank\" rel=\"noopener\">http://jenkins登录用户名:token授权码@jenkins</a> IP:8080/generic-webhook-trigger/invoke?token=触发器名称<br>如果对应的jenkins Job能正常开始执行,说明整个流程已经ok了.</p>\n<p>最后我们回到上面”阿里云-容器镜像服务-对应镜像仓库-webhook-添加记录”<br><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%8810.27.02.png\" alt=\"webhook-添加记录\"></p>\n<p>PS:webhook名称不要带特殊字符or “-“之类的,不然一直保存失败而且还不会提示你是因为名字不合法,下午被这个坑了半个小时.</p>\n<p>到这里,我们基本大功告成了.</p>\n<p>最后我们再改一下jenkins的脚本,不在本地build docker了,直接拿\b阿里云镜像服务构建出来的镜像跑就可以.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 停止之前的docker container</span></span><br><span class=\"line\">docker stop house-web;</span><br><span class=\"line\"><span class=\"comment\"># 删除这个container</span></span><br><span class=\"line\">docker rm house-web;</span><br><span class=\"line\">docker pull 你的阿里云镜像地址;</span><br><span class=\"line\"><span class=\"comment\"># 把刚刚build出来的镜像跑起来</span></span><br><span class=\"line\">docker run --restart=always --name 你的contianer名称 你的阿里云镜像地址;</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结一下我们做了什么\"><a href=\"#总结一下我们做了什么\" class=\"headerlink\" title=\"总结一下我们做了什么\"></a>总结一下我们做了什么</h3><ol>\n<li>搭建jenkins</li>\n<li>编写Dockerfile文件,直接编译发布+打包成docker镜像+部署脚本</li>\n<li>\b\b\b使用阿里云-容器构建服务构建docker镜像,\b构建成功后使用webhook通知jenkins</li>\n<li>\b配置jenkins webhook触发器,触发部署脚本</li>\n<li>其他项目/语言其实也基本一样的操作,区别只在于\bDockerfile的编写</li>\n<li>完事…</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Jenkins部分\"><a href=\"#Jenkins部分\" class=\"headerlink\" title=\"Jenkins部分\"></a>Jenkins部分</h1><p>首先,我们要有个Jenkins咯,下载链接:<a href=\"https://jenkins.io/download/\" target=\"_blank\" rel=\"noopener\">https://jenkins.io/download/</a></p>\n<p>我们安装官网教程安装好jenkins,安装教程略….</p>\n<p>嗯?不是说好手把手么?你妹的.</p>\n<p>好好好,我们还是来手把手教程好了.</p>\n<h2 id=\"首先安装JDK8\"><a href=\"#首先安装JDK8\" class=\"headerlink\" title=\"首先安装JDK8\"></a>首先安装JDK8</h2><p>添加安装源之后直接apt-get install就好,下面是ubuntu的安装命令,其他系统自己玩一下就好.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">sudo add-apt-repository ppa:webupd8team/java</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install oracle-java8-installer</span><br></pre></td></tr></table></figure>\n<h2 id=\"下载jenkins-war-启动Jenkins\"><a href=\"#下载jenkins-war-启动Jenkins\" class=\"headerlink\" title=\"下载jenkins.war + 启动Jenkins\"></a>下载jenkins.war + 启动Jenkins</h2><p>下载链接:<a href=\"http://mirrors.jenkins.io/war-stable/\" target=\"_blank\" rel=\"noopener\">http://mirrors.jenkins.io/war-stable/</a></p>\n<p>在这里面找最新的下载,我当前最新的应该是<a href=\"http://mirrors.jenkins.io/war-stable/2.107.2/jenkins.war\" target=\"_blank\" rel=\"noopener\">2.107.2</a></p>\n<p>下载好了jenkins.war之后,在当前目录创建一个jenkins-home文件夹,设置JENKINS_HOME环境变量为jenkins-home(不设置也可以,默认在~/.jenkins)</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">wget http://mirrors.jenkins.io/war-stable/2.107.2/jenkins.war;</span><br><span class=\"line\">mkdir ~/jenkins-home;</span><br><span class=\"line\"><span class=\"built_in\">export</span> JENKINS_HOME=~/jenkins-home;</span><br><span class=\"line\">tmux;</span><br><span class=\"line\">java -jar jenkins.war</span><br></pre></td></tr></table></figure>\n<p>一般建议开个后台进程来跑jenkins,免得终端退出之后jenkins就死掉了.</p>\n<p>所以上面我先打开了tmux之后再跑java -jar jenkins.war.</p>\n<p>如下图:<br><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%886.53.24.png\" alt=\"jenkins启动\"></p>\n<p>接着\b留意一下initialAdminPassword的输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Jenkins initial setup is required. An admin user has been created and a password generated.</span><br><span class=\"line\">Please use the following password to proceed to installation:</span><br><span class=\"line\"></span><br><span class=\"line\">XXXXXXXXXXXXXX</span><br><span class=\"line\"></span><br><span class=\"line\">This may also be found at: /root/jenkins-home/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure>\n<p>这个时候访问当前主机的8080端口已经可以看到jenkins正在启动了,稍等片刻就可以看到jenkins登录页.</p>\n<p>这个时候把上面的XXXXXXXXXXXXXX复制出来,输进去点击\b继续配置jenkins账号密码信息之类的.</p>\n<p>\b<img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%886.58.58.png\" alt=\"配置jenkins\"></p>\n<p>接着安装默认插件.</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%887.00.12.png\" alt=\"安装插件\"></p>\n<p>这里估计也要等几分钟不等,看你的机器性能和网络速度.</p>\n<p>安装好了之后会进入配置登录账号密码,安装提示配置就完事.</p>\n<p>最后\b进入jenkins页面是这样的.<br><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%887.02.42.png\" alt=\"jenkins\"></p>\n<p>\b到现在我们已经把jenkins跑起来了,也有了一些常用的插件.</p>\n<p>我们先去把dotnet core docker 编译发布相关的东西弄好之后再回来继续做jenkins任务.</p>\n<h2 id=\"dotnet-core-docker-打包\"><a href=\"#dotnet-core-docker-打包\" class=\"headerlink\" title=\"dotnet core docker 打包\"></a>dotnet core docker 打包</h2><p>在项目目录下新建Dockerfile文件,内容如下:</p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> microsoft/aspnetcore-build:<span class=\"number\">2.0</span> AS build-<span class=\"keyword\">env</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /app</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># copy csproj and restore as distinct layers</span></span></span><br><span class=\"line\"><span class=\"bash\">COPY *.csproj ./</span></span><br><span class=\"line\"><span class=\"bash\">RUN dotnet restore</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># copy everything else and build</span></span></span><br><span class=\"line\"><span class=\"bash\">COPY . ./</span></span><br><span class=\"line\"><span class=\"bash\">RUN dotnet publish -c Release -o out</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># build runtime image</span></span></span><br><span class=\"line\"><span class=\"bash\">FROM microsoft/aspnetcore:2.0</span></span><br><span class=\"line\"><span class=\"bash\">WORKDIR /app</span></span><br><span class=\"line\"><span class=\"bash\">COPY --from=build-env /app/out .</span></span><br><span class=\"line\"><span class=\"bash\">ENTRYPOINT [<span class=\"string\">\"dotnet\"</span>, <span class=\"string\">\"你的dotnet core程序.dll\"</span>]</span></span><br></pre></td></tr></table></figure>\n<p>这个Dockerfile基本就是把当前目录的\b文件\b拷贝到aspnetcore-build镜像中,再里面编译好之后再发布到aspnetcore:2.0\b镜像\b中,</p>\n<p>最后指定运行你的dotnet core程序</p>\n<p>来源:<a href=\"https://github.com/DaoCloud/dotnet-docker-samples\" target=\"_blank\" rel=\"noopener\">https://github.com/DaoCloud/dotnet-docker-samples</a></p>\n<h2 id=\"docker-build-run-脚本-非必须-可以使用jenkins中脚本编译替代\"><a href=\"#docker-build-run-脚本-非必须-可以使用jenkins中脚本编译替代\" class=\"headerlink\" title=\"docker build + run 脚本(非必须,可以使用jenkins中脚本编译替代)\"></a>docker build + run 脚本(非必须,可以使用jenkins中脚本编译替代)</h2><p>以<a href=\"https://github.com/liguobao/58HouseSearch/blob/master/HouseCrawler.Core/HouseCrawler.Web/\" target=\"_blank\" rel=\"noopener\">HouseCrawler.Web</a>为例,</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\">image_version=`date +%Y%m%d%H%M`;</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$image_version</span>;</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/code/58HouseSearch/HouseCrawler.Core/HouseCrawler.Web;</span><br><span class=\"line\">git pull --rebase origin master;</span><br><span class=\"line\">docker stop house-web;</span><br><span class=\"line\">docker rm house-web;</span><br><span class=\"line\">docker build -t house-web:<span class=\"variable\">$image_version</span> .;</span><br><span class=\"line\">docker images;</span><br><span class=\"line\">docker run -p 8080:80 -v ~/docker-data/house-web/appsettings.json:/app/appsettings.json -v ~/docker-data/house-web/NLogFile/:/app/NLogFile  --restart=always --name house-web -d house-web:<span class=\"variable\">$image_version</span>;</span><br><span class=\"line\">docker logs house-web;</span><br></pre></td></tr></table></figure>\n<p>通过上面这个build+run脚本,我们已经把dotnet core程序编译好了,并且打包成了docker images,还直接跑起来了.</p>\n<p>但是我们想要的应该是自动化编译部署,而且上面我们都把jenkins跑起来了,所以….</p>\n<h2 id=\"jenkins-job配置\"><a href=\"#jenkins-job配置\" class=\"headerlink\" title=\"jenkins job配置\"></a>jenkins job配置</h2><h3 id=\"新建Job\"><a href=\"#新建Job\" class=\"headerlink\" title=\"新建Job\"></a>新建Job</h3><p>打开jenkins首页,左侧选择”新建任务”(newJob),如下图:</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%889.10.00.png\" alt=\"newJob\"></p>\n<p>给新的job取个名字,然后选择”构建自由风格的软件项目”,如图:</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%889.12.27.png\" alt=\"构建自由风格的软件项目\"></p>\n<h3 id=\"添加源码仓库\"><a href=\"#添加源码仓库\" class=\"headerlink\" title=\"添加源码仓库\"></a>添加源码仓库</h3><p>确认之后进入Job配置页面,源码管理里面选择git,如图:<br><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%889.14.06.png\" alt=\"源码管理\"></p>\n<p>如果git仓库是需要权限的话需要配置一下权限,我一般简单粗暴直接把jenkins主机的公钥添加到git仓库里面,所以这里直接配置成’From the Jenkins master ~/.ssh’,也可以用账号密码访问等等的.</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%889.16.09.png\" alt=\"git仓库权限配置\"></p>\n<p>“Branch Specifier (blank for ‘any’)    “默认master分支,根据自己的需求填入不同的分支.</p>\n<p>构建触发器和构建环境先跳过,我们不管,待会弄.</p>\n<h3 id=\"构建\"><a href=\"#构建\" class=\"headerlink\" title=\"构建\"></a>构建</h3><p>点击”添加构建步骤”,选择”Execute shell”,然后能看到如下图:<br><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%889.22.45.png\" alt=\"Execute shell\"></p>\n<p>还记得我们上一步的脚本么?修改一下源码路径再放进去.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 切换到源码目录,对应在jenkins-home的workspace下面</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~jenkins-home/workspace/项目名称/Dockerfile所在目录;</span><br><span class=\"line\">image_version=`date +%Y%m%d%H%M`;</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$image_version</span>;</span><br><span class=\"line\"><span class=\"comment\"># 停止之前的docker container</span></span><br><span class=\"line\">docker stop house-web;</span><br><span class=\"line\"><span class=\"comment\"># 删除这个container</span></span><br><span class=\"line\">docker rm house-web;</span><br><span class=\"line\"><span class=\"comment\"># build镜像并且打上tag</span></span><br><span class=\"line\">docker build -t house-web:<span class=\"variable\">$image_version</span> .;</span><br><span class=\"line\">docker images;</span><br><span class=\"line\"><span class=\"comment\"># 把刚刚build出来的镜像跑起来</span></span><br><span class=\"line\">docker run -p 8080:80 -v ~/docker-data/house-web/appsettings.json:/app/appsettings.json -v ~/docker-data/house-web/NLogFile/:/app/NLogFile  --restart=always --name house-web -d house-web:<span class=\"variable\">$image_version</span>;</span><br><span class=\"line\">docker logs house-web;</span><br></pre></td></tr></table></figure>\n<p>如果jenkins主机和程序运行主机不在一台机器上,建议直接在把上面的脚本放在运行主机上,命名成 start_XXX.sh.</p>\n<p>上面的命令直接就是成了</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh username@发布主机的IP <span class=\"string\">'~/start_XXX.sh'</span></span><br></pre></td></tr></table></figure>\n<p>ps:记得在jenkins主机配置<a href=\"https://blog.csdn.net/wind520/article/details/38421359\" target=\"_blank\" rel=\"noopener\">ssh免登陆</a></p>\n<h3 id=\"构建触发器\"><a href=\"#构建触发器\" class=\"headerlink\" title=\"构建触发器\"></a>构建触发器</h3><p>构建触发器就是我们选择什么时候来触发构建任务,有几种方案可以做.</p>\n<ol>\n<li>使用 Build periodically,定时 or 隔N久去拉一次代码构建</li>\n<li>Poll SCM：定时检查源码变更（根据SCM软件的版本号）,如果有变化就去执行构建</li>\n<li>GitHub hook trigger for GITScm polling 或者其他Git平台提供的webhook</li>\n<li>安装Generic Webhook Trigger插件之后,使用其他平台的webhook来触发构建任务.</li>\n</ol>\n<p>我这里选择第4种方案,安装Generic Webhook Trigger插件,下面马上回告诉你为什么这样做的.</p>\n<p>Generic Webhook Trigger插件在”系统管理-管理插件-可选插件”里面直接搜”Generic Webhook Trigger”安装就可以.</p>\n<p>从上一步的构建步骤里面的脚本中我们就知道,其实我们现在要不就在jenkins主机上docker build,要不就在发布目标主机上build,</p>\n<p>build过程比较慢而且还会产生镜像在本机or目标主机上,docker images也没有被管理起来.</p>\n<p>有什么好的办法么?嗯,还真有.直接用阿里云”容器镜像服务”来构建镜像</p>\n<h3 id=\"使用阿里云-容器镜像服务\"><a href=\"#使用阿里云-容器镜像服务\" class=\"headerlink\" title=\"使用阿里云-容器镜像服务\"></a>使用阿里云-容器镜像服务</h3><p>首先登录阿里云,然后进入容器镜像服务,地址是<a href=\"https://cr.console.aliyun.com/\" target=\"_blank\" rel=\"noopener\">https://cr.console.aliyun.com/</a></p>\n<p>首次进入估计需要创建一个命名空间,一般用公司名或者你的名字就完事.</p>\n<p>接着选择”创建镜像仓库”.</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%889.51.25.png\" alt=\"创建镜像仓库\"></p>\n<p>选地区-选命名空间-填仓库名称(就是镜像名称)-填摘要-设置代码源(支持GitHub/阿里云code/Bitbucket/私有Gitlab/本地Git等等,给个授权就完事)</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%889.54.10.png\" alt=\"选地区\"></p>\n<p>构建设置选择”代码变更时自动构建镜像”,然后选一下构建分支为你想要的分支,填入Dockerfile在源码中的路径,然后保存<br><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%889.57.50.png\" alt=\"构建分支\"></p>\n<p>接着我们进入管理平台看一下.</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%8810.00.51.png\" alt=\"aliyun-构建\"></p>\n<p>点击一下”立即构建”,然后查看一下日志.<br><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%8810.02.00.png\" alt=\"build 日志\"></p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%8810.02.49.png\" alt=\"构建成功\"></p>\n<p>这个时候,我们用docker pull registry-internal.cn-hangzhou.aliyuncs.com/你的命名空间/你的镜像名称 就可以拉到这个阿里云build成功的镜像了.</p>\n<p>镜像build的问题解决了,那么我们怎么自动把镜像发布到我们的运行主机呢?</p>\n<p>这时候webhook又出来了.</p>\n<h3 id=\"jenkins-webhook触发配置\"><a href=\"#jenkins-webhook触发配置\" class=\"headerlink\" title=\"jenkins webhook触发配置\"></a>jenkins webhook触发配置</h3><p>我们看阿里云镜像构建服务里面,有一项是webhook的,官方介绍在这里:<a href=\"https://help.aliyun.com/document_detail/60949.html?spm=5176.8351553.0.0.645319912fjxim\" target=\"_blank\" rel=\"noopener\">阿里云-webhook管理</a></p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%8810.08.45.png\" alt=\"阿里云-webhook管理\"></p>\n<p>这里就需要填入我们的webhook地址,还记得前面我无端端选择的第四种方案,然后让大家跟着安装的Generic Webhook Trigger插件么?</p>\n<p>我们就是用这货来为我们提供webhook API.</p>\n<p>理一下流程:</p>\n<p>git仓库代码变化 -&gt;阿里云容器构建服务启动 -&gt; 构建好镜像之后触发webhook -&gt; jenkins收到阿里云的webhook之后触发job执行部署脚本 -&gt;部署脚本使用阿里云镜像run起来 -&gt;完事.</p>\n<p>我们继续配置Generic Webhook Trigger.</p>\n<p>Generic Webhook Trigger支持的命名触发URL格式是这样的:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://jenkins登录用户名:token授权码@jenkins IP:8080/generic-webhook-trigger/invoke?token=触发器名称</span><br></pre></td></tr></table></figure>\n<p>jenkins登录名和token在”账号-设置-API Token-Show API Token…”里面能看到,找出来之后填到上面去就可以.</p>\n<p>最后一个token参数其实就是”构建触发器”中”触发远程构建”的参数,建议使用job名字.这里的配置大概是这样的:</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%8810.21.13.png\" alt=\"触发远程构建\"></p>\n<p>最后我们还需要在jenkins全局安全设置中取消勾选“防止跨站点请求伪造（Prevent Cross Site Request Forgery exploits)”选项,这样阿里云webhook才能过得来.</p>\n<p>手动在浏览器中访问一下<a href=\"http://jenkins登录用户名:token授权码@jenkins\" target=\"_blank\" rel=\"noopener\">http://jenkins登录用户名:token授权码@jenkins</a> IP:8080/generic-webhook-trigger/invoke?token=触发器名称<br>如果对应的jenkins Job能正常开始执行,说明整个流程已经ok了.</p>\n<p>最后我们回到上面”阿里云-容器镜像服务-对应镜像仓库-webhook-添加记录”<br><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-06%20%E4%B8%8B%E5%8D%8810.27.02.png\" alt=\"webhook-添加记录\"></p>\n<p>PS:webhook名称不要带特殊字符or “-“之类的,不然一直保存失败而且还不会提示你是因为名字不合法,下午被这个坑了半个小时.</p>\n<p>到这里,我们基本大功告成了.</p>\n<p>最后我们再改一下jenkins的脚本,不在本地build docker了,直接拿\b阿里云镜像服务构建出来的镜像跑就可以.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 停止之前的docker container</span></span><br><span class=\"line\">docker stop house-web;</span><br><span class=\"line\"><span class=\"comment\"># 删除这个container</span></span><br><span class=\"line\">docker rm house-web;</span><br><span class=\"line\">docker pull 你的阿里云镜像地址;</span><br><span class=\"line\"><span class=\"comment\"># 把刚刚build出来的镜像跑起来</span></span><br><span class=\"line\">docker run --restart=always --name 你的contianer名称 你的阿里云镜像地址;</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结一下我们做了什么\"><a href=\"#总结一下我们做了什么\" class=\"headerlink\" title=\"总结一下我们做了什么\"></a>总结一下我们做了什么</h3><ol>\n<li>搭建jenkins</li>\n<li>编写Dockerfile文件,直接编译发布+打包成docker镜像+部署脚本</li>\n<li>\b\b\b使用阿里云-容器构建服务构建docker镜像,\b构建成功后使用webhook通知jenkins</li>\n<li>\b配置jenkins webhook触发器,触发部署脚本</li>\n<li>其他项目/语言其实也基本一样的操作,区别只在于\bDockerfile的编写</li>\n<li>完事…</li>\n</ol>\n"},{"layout":"post","title":"Linux运维相关软件安装配置备忘","date":"2017-03-24T16:00:00.000Z","_content":"# Linux运维相关软件安装配置备忘\n\n## 端口占用相关\n\n```sh\n//查找端口占用情况\n$ netstat -anp | grep \"5000\"\n//干掉某个进程\n$ kill -9 2553\n//后台运行 \n$ nohup command &\n\n```\n\n## 安装SS\n\n```sh\n$ apt-get update\n//安装ss\n$ apt-get install python-pip \n$ pip install shadowsocks\n//运行ss服务端\n$ nohup ssserver -s ip地址 -k 密码 &\n```\n\n## 安装MySQL5.7\n\n```sh\nhttp://tecadmin.net/install-mysql-5-on-ubuntu/\n\n$ sudo apt-get install software-properties-common\n$ sudo add-apt-repository -y ppa:ondrej/mysql-5.7\n$ sudo apt-get update\n$ sudo apt-get install mysql-server\n\n//编辑此处，允许远程登录\n/etc/mysql/my.cnf\n\nbind-address\t\t= 0.0.0.0\n\n//重启MySQL\n$ /etc/init.d/mysql restart\n\n```\n\n## MySQL添加用户\n\n```sh\n//新增用户\ngrant all privileges  on *.* to root@'%' identified by \"root\";\n//立即生效\nflush privileges;\n\n\ngrant select,insert,update,delete,create,drop on  to joe@10.163.225.87 identified by ‘123′;\n\n\ngrant all  on xxxDB.* to xxx@'%';\n\n```\n\n## MySQL提示“Checking for tables which need an upgrade, are corrupt or were not closed cleanly”\n\n操作步骤：\n\n```sh\n$ sudo service mysql stop \n$ sudo /etc/init.d/apparmor reload\n$ sudo service mysql start\n\n\n或者：\n\ndown vote\nThis error occurs due to multiple installations of mysql. Run the command:\n\n$ ps -A|grep mysql\nKill the process by using:\n\n$ sudo pkill mysql\nand then run command:\n\n$ ps -A|grep mysqld\nAlso Kill this process by running:\n\n$ sudo pkill mysqld\nNow you are fully set just run the following commands:\n\n$ service mysql restart\nmysql -u root -p\n\n```\n\n## 7z相关操作\n\n```sh\n//压缩\n$ 7z a -t7z -r manager.7z /home/manager/*\n//解压\n$ 7z X xx.zip\n\n```\n\n## 腾讯云修改密码,允许root登录\n\n```\n$ sudo passwd root\n\n$ sudo vi /etc/ssh/sshd_config\n\n$ sudo service ssh  restart\n\n```\n\n## 开机启动相关\n\n```sh\n//查看开机启动相关程序\n$ ls /etc/rc*\n//安装sysv-rc-conf\n$ sudo apt-get install sysv-rc-conf\n$ sudo sysv-rc-conf \n\n```","source":"_posts/linux-shell.md","raw":"---\nlayout: post\ntitle: Linux运维相关软件安装配置备忘\ncategory: linux\ndate: 2017-03-25\ntags:\n- linux\n- Shell\n---\n# Linux运维相关软件安装配置备忘\n\n## 端口占用相关\n\n```sh\n//查找端口占用情况\n$ netstat -anp | grep \"5000\"\n//干掉某个进程\n$ kill -9 2553\n//后台运行 \n$ nohup command &\n\n```\n\n## 安装SS\n\n```sh\n$ apt-get update\n//安装ss\n$ apt-get install python-pip \n$ pip install shadowsocks\n//运行ss服务端\n$ nohup ssserver -s ip地址 -k 密码 &\n```\n\n## 安装MySQL5.7\n\n```sh\nhttp://tecadmin.net/install-mysql-5-on-ubuntu/\n\n$ sudo apt-get install software-properties-common\n$ sudo add-apt-repository -y ppa:ondrej/mysql-5.7\n$ sudo apt-get update\n$ sudo apt-get install mysql-server\n\n//编辑此处，允许远程登录\n/etc/mysql/my.cnf\n\nbind-address\t\t= 0.0.0.0\n\n//重启MySQL\n$ /etc/init.d/mysql restart\n\n```\n\n## MySQL添加用户\n\n```sh\n//新增用户\ngrant all privileges  on *.* to root@'%' identified by \"root\";\n//立即生效\nflush privileges;\n\n\ngrant select,insert,update,delete,create,drop on  to joe@10.163.225.87 identified by ‘123′;\n\n\ngrant all  on xxxDB.* to xxx@'%';\n\n```\n\n## MySQL提示“Checking for tables which need an upgrade, are corrupt or were not closed cleanly”\n\n操作步骤：\n\n```sh\n$ sudo service mysql stop \n$ sudo /etc/init.d/apparmor reload\n$ sudo service mysql start\n\n\n或者：\n\ndown vote\nThis error occurs due to multiple installations of mysql. Run the command:\n\n$ ps -A|grep mysql\nKill the process by using:\n\n$ sudo pkill mysql\nand then run command:\n\n$ ps -A|grep mysqld\nAlso Kill this process by running:\n\n$ sudo pkill mysqld\nNow you are fully set just run the following commands:\n\n$ service mysql restart\nmysql -u root -p\n\n```\n\n## 7z相关操作\n\n```sh\n//压缩\n$ 7z a -t7z -r manager.7z /home/manager/*\n//解压\n$ 7z X xx.zip\n\n```\n\n## 腾讯云修改密码,允许root登录\n\n```\n$ sudo passwd root\n\n$ sudo vi /etc/ssh/sshd_config\n\n$ sudo service ssh  restart\n\n```\n\n## 开机启动相关\n\n```sh\n//查看开机启动相关程序\n$ ls /etc/rc*\n//安装sysv-rc-conf\n$ sudo apt-get install sysv-rc-conf\n$ sudo sysv-rc-conf \n\n```","slug":"linux-shell","published":1,"updated":"2018-05-17T13:40:54.164Z","_id":"cjhal1fwn0024p631wdz1k9is","comments":1,"photos":[],"link":"","content":"<h1 id=\"Linux运维相关软件安装配置备忘\"><a href=\"#Linux运维相关软件安装配置备忘\" class=\"headerlink\" title=\"Linux运维相关软件安装配置备忘\"></a>Linux运维相关软件安装配置备忘</h1><h2 id=\"端口占用相关\"><a href=\"#端口占用相关\" class=\"headerlink\" title=\"端口占用相关\"></a>端口占用相关</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//查找端口占用情况</span><br><span class=\"line\">$ netstat -anp | grep <span class=\"string\">\"5000\"</span></span><br><span class=\"line\">//干掉某个进程</span><br><span class=\"line\">$ <span class=\"built_in\">kill</span> -9 2553</span><br><span class=\"line\">//后台运行 </span><br><span class=\"line\">$ nohup <span class=\"built_in\">command</span> &amp;</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装SS\"><a href=\"#安装SS\" class=\"headerlink\" title=\"安装SS\"></a>安装SS</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ apt-get update</span><br><span class=\"line\">//安装ss</span><br><span class=\"line\">$ apt-get install python-pip </span><br><span class=\"line\">$ pip install shadowsocks</span><br><span class=\"line\">//运行ss服务端</span><br><span class=\"line\">$ nohup ssserver -s ip地址 -k 密码 &amp;</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装MySQL5-7\"><a href=\"#安装MySQL5-7\" class=\"headerlink\" title=\"安装MySQL5.7\"></a>安装MySQL5.7</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://tecadmin.net/install-mysql-5-on-ubuntu/</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo apt-get install software-properties-common</span><br><span class=\"line\">$ sudo add-apt-repository -y ppa:ondrej/mysql-5.7</span><br><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt-get install mysql-server</span><br><span class=\"line\"></span><br><span class=\"line\">//编辑此处，允许远程登录</span><br><span class=\"line\">/etc/mysql/my.cnf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">bind</span>-address\t\t= 0.0.0.0</span><br><span class=\"line\"></span><br><span class=\"line\">//重启MySQL</span><br><span class=\"line\">$ /etc/init.d/mysql restart</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL添加用户\"><a href=\"#MySQL添加用户\" class=\"headerlink\" title=\"MySQL添加用户\"></a>MySQL添加用户</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//新增用户</span><br><span class=\"line\">grant all privileges  on *.* to root@<span class=\"string\">'%'</span> identified by <span class=\"string\">\"root\"</span>;</span><br><span class=\"line\">//立即生效</span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">grant select,insert,update,delete,create,drop on  to joe@10.163.225.87 identified by ‘123′;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">grant all  on xxxDB.* to xxx@<span class=\"string\">'%'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL提示“Checking-for-tables-which-need-an-upgrade-are-corrupt-or-were-not-closed-cleanly”\"><a href=\"#MySQL提示“Checking-for-tables-which-need-an-upgrade-are-corrupt-or-were-not-closed-cleanly”\" class=\"headerlink\" title=\"MySQL提示“Checking for tables which need an upgrade, are corrupt or were not closed cleanly”\"></a>MySQL提示“Checking for tables which need an upgrade, are corrupt or were not closed cleanly”</h2><p>操作步骤：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo service mysql stop </span><br><span class=\"line\">$ sudo /etc/init.d/apparmor reload</span><br><span class=\"line\">$ sudo service mysql start</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">或者：</span><br><span class=\"line\"></span><br><span class=\"line\">down vote</span><br><span class=\"line\">This error occurs due to multiple installations of mysql. Run the <span class=\"built_in\">command</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">$ ps -A|grep mysql</span><br><span class=\"line\">Kill the process by using:</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo pkill mysql</span><br><span class=\"line\">and <span class=\"keyword\">then</span> run <span class=\"built_in\">command</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">$ ps -A|grep mysqld</span><br><span class=\"line\">Also Kill this process by running:</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo pkill mysqld</span><br><span class=\"line\">Now you are fully <span class=\"built_in\">set</span> just run the following commands:</span><br><span class=\"line\"></span><br><span class=\"line\">$ service mysql restart</span><br><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure>\n<h2 id=\"7z相关操作\"><a href=\"#7z相关操作\" class=\"headerlink\" title=\"7z相关操作\"></a>7z相关操作</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//压缩</span><br><span class=\"line\">$ 7z a -t7z -r manager.7z /home/manager/*</span><br><span class=\"line\">//解压</span><br><span class=\"line\">$ 7z X xx.zip</span><br></pre></td></tr></table></figure>\n<h2 id=\"腾讯云修改密码-允许root登录\"><a href=\"#腾讯云修改密码-允许root登录\" class=\"headerlink\" title=\"腾讯云修改密码,允许root登录\"></a>腾讯云修改密码,允许root登录</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo passwd root</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo vi /etc/ssh/sshd_config</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo service ssh  restart</span><br></pre></td></tr></table></figure>\n<h2 id=\"开机启动相关\"><a href=\"#开机启动相关\" class=\"headerlink\" title=\"开机启动相关\"></a>开机启动相关</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//查看开机启动相关程序</span><br><span class=\"line\">$ ls /etc/rc*</span><br><span class=\"line\">//安装sysv-rc-conf</span><br><span class=\"line\">$ sudo apt-get install sysv-rc-conf</span><br><span class=\"line\">$ sudo sysv-rc-conf</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Linux运维相关软件安装配置备忘\"><a href=\"#Linux运维相关软件安装配置备忘\" class=\"headerlink\" title=\"Linux运维相关软件安装配置备忘\"></a>Linux运维相关软件安装配置备忘</h1><h2 id=\"端口占用相关\"><a href=\"#端口占用相关\" class=\"headerlink\" title=\"端口占用相关\"></a>端口占用相关</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//查找端口占用情况</span><br><span class=\"line\">$ netstat -anp | grep <span class=\"string\">\"5000\"</span></span><br><span class=\"line\">//干掉某个进程</span><br><span class=\"line\">$ <span class=\"built_in\">kill</span> -9 2553</span><br><span class=\"line\">//后台运行 </span><br><span class=\"line\">$ nohup <span class=\"built_in\">command</span> &amp;</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装SS\"><a href=\"#安装SS\" class=\"headerlink\" title=\"安装SS\"></a>安装SS</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ apt-get update</span><br><span class=\"line\">//安装ss</span><br><span class=\"line\">$ apt-get install python-pip </span><br><span class=\"line\">$ pip install shadowsocks</span><br><span class=\"line\">//运行ss服务端</span><br><span class=\"line\">$ nohup ssserver -s ip地址 -k 密码 &amp;</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装MySQL5-7\"><a href=\"#安装MySQL5-7\" class=\"headerlink\" title=\"安装MySQL5.7\"></a>安装MySQL5.7</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://tecadmin.net/install-mysql-5-on-ubuntu/</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo apt-get install software-properties-common</span><br><span class=\"line\">$ sudo add-apt-repository -y ppa:ondrej/mysql-5.7</span><br><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt-get install mysql-server</span><br><span class=\"line\"></span><br><span class=\"line\">//编辑此处，允许远程登录</span><br><span class=\"line\">/etc/mysql/my.cnf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">bind</span>-address\t\t= 0.0.0.0</span><br><span class=\"line\"></span><br><span class=\"line\">//重启MySQL</span><br><span class=\"line\">$ /etc/init.d/mysql restart</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL添加用户\"><a href=\"#MySQL添加用户\" class=\"headerlink\" title=\"MySQL添加用户\"></a>MySQL添加用户</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//新增用户</span><br><span class=\"line\">grant all privileges  on *.* to root@<span class=\"string\">'%'</span> identified by <span class=\"string\">\"root\"</span>;</span><br><span class=\"line\">//立即生效</span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">grant select,insert,update,delete,create,drop on  to joe@10.163.225.87 identified by ‘123′;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">grant all  on xxxDB.* to xxx@<span class=\"string\">'%'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL提示“Checking-for-tables-which-need-an-upgrade-are-corrupt-or-were-not-closed-cleanly”\"><a href=\"#MySQL提示“Checking-for-tables-which-need-an-upgrade-are-corrupt-or-were-not-closed-cleanly”\" class=\"headerlink\" title=\"MySQL提示“Checking for tables which need an upgrade, are corrupt or were not closed cleanly”\"></a>MySQL提示“Checking for tables which need an upgrade, are corrupt or were not closed cleanly”</h2><p>操作步骤：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo service mysql stop </span><br><span class=\"line\">$ sudo /etc/init.d/apparmor reload</span><br><span class=\"line\">$ sudo service mysql start</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">或者：</span><br><span class=\"line\"></span><br><span class=\"line\">down vote</span><br><span class=\"line\">This error occurs due to multiple installations of mysql. Run the <span class=\"built_in\">command</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">$ ps -A|grep mysql</span><br><span class=\"line\">Kill the process by using:</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo pkill mysql</span><br><span class=\"line\">and <span class=\"keyword\">then</span> run <span class=\"built_in\">command</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">$ ps -A|grep mysqld</span><br><span class=\"line\">Also Kill this process by running:</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo pkill mysqld</span><br><span class=\"line\">Now you are fully <span class=\"built_in\">set</span> just run the following commands:</span><br><span class=\"line\"></span><br><span class=\"line\">$ service mysql restart</span><br><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure>\n<h2 id=\"7z相关操作\"><a href=\"#7z相关操作\" class=\"headerlink\" title=\"7z相关操作\"></a>7z相关操作</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//压缩</span><br><span class=\"line\">$ 7z a -t7z -r manager.7z /home/manager/*</span><br><span class=\"line\">//解压</span><br><span class=\"line\">$ 7z X xx.zip</span><br></pre></td></tr></table></figure>\n<h2 id=\"腾讯云修改密码-允许root登录\"><a href=\"#腾讯云修改密码-允许root登录\" class=\"headerlink\" title=\"腾讯云修改密码,允许root登录\"></a>腾讯云修改密码,允许root登录</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo passwd root</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo vi /etc/ssh/sshd_config</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo service ssh  restart</span><br></pre></td></tr></table></figure>\n<h2 id=\"开机启动相关\"><a href=\"#开机启动相关\" class=\"headerlink\" title=\"开机启动相关\"></a>开机启动相关</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//查看开机启动相关程序</span><br><span class=\"line\">$ ls /etc/rc*</span><br><span class=\"line\">//安装sysv-rc-conf</span><br><span class=\"line\">$ sudo apt-get install sysv-rc-conf</span><br><span class=\"line\">$ sudo sysv-rc-conf</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"备忘网站","date":"2016-10-03T16:00:00.000Z","_content":"# 备忘网站\n\n## [Markdown 语法说明 (简体中文版)](http://wowubuntu.com/markdown/)\n\n## [Markdown: Basics （快速入门）](http://wowubuntu.com/markdown/basic.html)\n\n## [使用GitHub和Hexo搭建免费静态Blog(本博客案例)](http://wsgzao.github.io/post/hexo-guide/)\n\n###安装Hexo\n\n```sh\nnpm install hexo-cli -g\nnpm install hexo --save\n\n#如果命令无法运行，可以尝试更换taobao的npm源\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n### 安装Hexo插件\n\n```sh\nnpm install hexo-generator-index --save\nnpm install hexo-generator-archive --save\nnpm install hexo-generator-category --save\nnpm install hexo-generator-tag --save\nnpm install hexo-server --save\nnpm install hexo-deployer-git --save\nnpm install hexo-deployer-heroku --save\nnpm install hexo-deployer-rsync --save\nnpm install hexo-deployer-openshift --save\nnpm install hexo-renderer-marked@0.2 --save\nnpm install hexo-renderer-stylus@0.2 --save\nnpm install hexo-generator-feed@1 --save\nnpm install hexo-generator-sitemap@1 --save\n\n```\n\n## [win下面的git客户端提示FIlename too long解决方法](https://www.mxgw.info/t/filename-too-long-in-git.html)\n\n```sh\ngit config --global core.longpaths true\n```\n\n## [git-ssh 配置和使用](https://segmentfault.com/a/1190000002645623)\n","source":"_posts/memorandum.md","raw":"---\nlayout: post\ntitle: 备忘网站\ncategory: memorandum\ndate: 2016-10-04\ntags:\n- memorandum\n---\n# 备忘网站\n\n## [Markdown 语法说明 (简体中文版)](http://wowubuntu.com/markdown/)\n\n## [Markdown: Basics （快速入门）](http://wowubuntu.com/markdown/basic.html)\n\n## [使用GitHub和Hexo搭建免费静态Blog(本博客案例)](http://wsgzao.github.io/post/hexo-guide/)\n\n###安装Hexo\n\n```sh\nnpm install hexo-cli -g\nnpm install hexo --save\n\n#如果命令无法运行，可以尝试更换taobao的npm源\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n### 安装Hexo插件\n\n```sh\nnpm install hexo-generator-index --save\nnpm install hexo-generator-archive --save\nnpm install hexo-generator-category --save\nnpm install hexo-generator-tag --save\nnpm install hexo-server --save\nnpm install hexo-deployer-git --save\nnpm install hexo-deployer-heroku --save\nnpm install hexo-deployer-rsync --save\nnpm install hexo-deployer-openshift --save\nnpm install hexo-renderer-marked@0.2 --save\nnpm install hexo-renderer-stylus@0.2 --save\nnpm install hexo-generator-feed@1 --save\nnpm install hexo-generator-sitemap@1 --save\n\n```\n\n## [win下面的git客户端提示FIlename too long解决方法](https://www.mxgw.info/t/filename-too-long-in-git.html)\n\n```sh\ngit config --global core.longpaths true\n```\n\n## [git-ssh 配置和使用](https://segmentfault.com/a/1190000002645623)\n","slug":"memorandum","published":1,"updated":"2018-05-17T13:39:24.386Z","comments":1,"photos":[],"link":"","_id":"cjhal1fwo0027p631xtluo050","content":"<h1 id=\"备忘网站\"><a href=\"#备忘网站\" class=\"headerlink\" title=\"备忘网站\"></a>备忘网站</h1><h2 id=\"Markdown-语法说明-简体中文版\"><a href=\"#Markdown-语法说明-简体中文版\" class=\"headerlink\" title=\"Markdown 语法说明 (简体中文版)\"></a><a href=\"http://wowubuntu.com/markdown/\" target=\"_blank\" rel=\"noopener\">Markdown 语法说明 (简体中文版)</a></h2><h2 id=\"Markdown-Basics-（快速入门）\"><a href=\"#Markdown-Basics-（快速入门）\" class=\"headerlink\" title=\"Markdown: Basics （快速入门）\"></a><a href=\"http://wowubuntu.com/markdown/basic.html\" target=\"_blank\" rel=\"noopener\">Markdown: Basics （快速入门）</a></h2><h2 id=\"使用GitHub和Hexo搭建免费静态Blog-本博客案例\"><a href=\"#使用GitHub和Hexo搭建免费静态Blog-本博客案例\" class=\"headerlink\" title=\"使用GitHub和Hexo搭建免费静态Blog(本博客案例)\"></a><a href=\"http://wsgzao.github.io/post/hexo-guide/\" target=\"_blank\" rel=\"noopener\">使用GitHub和Hexo搭建免费静态Blog(本博客案例)</a></h2><p>###安装Hexo</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\">npm install hexo --save</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#如果命令无法运行，可以尝试更换taobao的npm源</span></span><br><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装Hexo插件\"><a href=\"#安装Hexo插件\" class=\"headerlink\" title=\"安装Hexo插件\"></a>安装Hexo插件</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-index --save</span><br><span class=\"line\">npm install hexo-generator-archive --save</span><br><span class=\"line\">npm install hexo-generator-category --save</span><br><span class=\"line\">npm install hexo-generator-tag --save</span><br><span class=\"line\">npm install hexo-server --save</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\">npm install hexo-deployer-heroku --save</span><br><span class=\"line\">npm install hexo-deployer-rsync --save</span><br><span class=\"line\">npm install hexo-deployer-openshift --save</span><br><span class=\"line\">npm install hexo-renderer-marked@0.2 --save</span><br><span class=\"line\">npm install hexo-renderer-stylus@0.2 --save</span><br><span class=\"line\">npm install hexo-generator-feed@1 --save</span><br><span class=\"line\">npm install hexo-generator-sitemap@1 --save</span><br></pre></td></tr></table></figure>\n<h2 id=\"win下面的git客户端提示FIlename-too-long解决方法\"><a href=\"#win下面的git客户端提示FIlename-too-long解决方法\" class=\"headerlink\" title=\"win下面的git客户端提示FIlename too long解决方法\"></a><a href=\"https://www.mxgw.info/t/filename-too-long-in-git.html\" target=\"_blank\" rel=\"noopener\">win下面的git客户端提示FIlename too long解决方法</a></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global core.longpaths <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"git-ssh-配置和使用\"><a href=\"#git-ssh-配置和使用\" class=\"headerlink\" title=\"git-ssh 配置和使用\"></a><a href=\"https://segmentfault.com/a/1190000002645623\" target=\"_blank\" rel=\"noopener\">git-ssh 配置和使用</a></h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"备忘网站\"><a href=\"#备忘网站\" class=\"headerlink\" title=\"备忘网站\"></a>备忘网站</h1><h2 id=\"Markdown-语法说明-简体中文版\"><a href=\"#Markdown-语法说明-简体中文版\" class=\"headerlink\" title=\"Markdown 语法说明 (简体中文版)\"></a><a href=\"http://wowubuntu.com/markdown/\" target=\"_blank\" rel=\"noopener\">Markdown 语法说明 (简体中文版)</a></h2><h2 id=\"Markdown-Basics-（快速入门）\"><a href=\"#Markdown-Basics-（快速入门）\" class=\"headerlink\" title=\"Markdown: Basics （快速入门）\"></a><a href=\"http://wowubuntu.com/markdown/basic.html\" target=\"_blank\" rel=\"noopener\">Markdown: Basics （快速入门）</a></h2><h2 id=\"使用GitHub和Hexo搭建免费静态Blog-本博客案例\"><a href=\"#使用GitHub和Hexo搭建免费静态Blog-本博客案例\" class=\"headerlink\" title=\"使用GitHub和Hexo搭建免费静态Blog(本博客案例)\"></a><a href=\"http://wsgzao.github.io/post/hexo-guide/\" target=\"_blank\" rel=\"noopener\">使用GitHub和Hexo搭建免费静态Blog(本博客案例)</a></h2><p>###安装Hexo</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\">npm install hexo --save</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#如果命令无法运行，可以尝试更换taobao的npm源</span></span><br><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装Hexo插件\"><a href=\"#安装Hexo插件\" class=\"headerlink\" title=\"安装Hexo插件\"></a>安装Hexo插件</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-index --save</span><br><span class=\"line\">npm install hexo-generator-archive --save</span><br><span class=\"line\">npm install hexo-generator-category --save</span><br><span class=\"line\">npm install hexo-generator-tag --save</span><br><span class=\"line\">npm install hexo-server --save</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\">npm install hexo-deployer-heroku --save</span><br><span class=\"line\">npm install hexo-deployer-rsync --save</span><br><span class=\"line\">npm install hexo-deployer-openshift --save</span><br><span class=\"line\">npm install hexo-renderer-marked@0.2 --save</span><br><span class=\"line\">npm install hexo-renderer-stylus@0.2 --save</span><br><span class=\"line\">npm install hexo-generator-feed@1 --save</span><br><span class=\"line\">npm install hexo-generator-sitemap@1 --save</span><br></pre></td></tr></table></figure>\n<h2 id=\"win下面的git客户端提示FIlename-too-long解决方法\"><a href=\"#win下面的git客户端提示FIlename-too-long解决方法\" class=\"headerlink\" title=\"win下面的git客户端提示FIlename too long解决方法\"></a><a href=\"https://www.mxgw.info/t/filename-too-long-in-git.html\" target=\"_blank\" rel=\"noopener\">win下面的git客户端提示FIlename too long解决方法</a></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global core.longpaths <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"git-ssh-配置和使用\"><a href=\"#git-ssh-配置和使用\" class=\"headerlink\" title=\"git-ssh 配置和使用\"></a><a href=\"https://segmentfault.com/a/1190000002645623\" target=\"_blank\" rel=\"noopener\">git-ssh 配置和使用</a></h2>"},{"layout":"post","title":"mono webreques https exception","date":"2016-10-03T16:00:00.000Z","_content":"\n\n前几天在做一个使用URL通过WebRequest请求HTML页面的功能的时候遇到了点坑，程序在开发环境没有任何的问题，部署到linux mono上之后就跪了。代码如下：\n\n```csharp\npublic static string GetHTML(string url)\n{\n    string htmlCode;\n    try\n    {\n        HttpWebRequest webRequest = (System.Net.HttpWebRequest)System.Net.WebRequest.Create(url);\n        webRequest.Timeout = 30000;\n        webRequest.Method = \"GET\";\n        webRequest.UserAgent = \"Mozilla/4.0\";\n        webRequest.Headers.Add(\"Accept-Encoding\", \"gzip, deflate\");\n\n        HttpWebResponse webResponse = (System.Net.HttpWebResponse)webRequest.GetResponse();\n        //获取目标网站的编码格式\n        string contentype = webResponse.Headers[\"Content-Type\"];\n        Regex regex = new Regex(\"charset\\\\s*=\\\\s*[\\\\W]?\\\\s*([\\\\w-]+)\", RegexOptions.IgnoreCase);\n        if (webResponse.ContentEncoding.ToLower() == \"gzip\")//如果使用了GZip则先解压\n        {\n            using (System.IO.Stream streamReceive = webResponse.GetResponseStream())\n            {\n                using (var zipStream = new System.IO.Compression.GZipStream(streamReceive, \n                System.IO.Compression.CompressionMode.Decompress))\n                {\n                    //匹配编码格式\n                    if (regex.IsMatch(contentype))\n                    {\n                        Encoding ending = Encoding.GetEncoding(regex.Match(contentype).Groups[1].Value.Trim());\n                        using (StreamReader sr = new System.IO.StreamReader(zipStream, ending))\n                        {\n                            htmlCode = sr.ReadToEnd();\n                        }\n                    }\n                    else\n                    {\n                        using (StreamReader sr = \n                        new System.IO.StreamReader(zipStream, Encoding.UTF8))\n                        {\n                            htmlCode = sr.ReadToEnd();\n                        }\n                    }\n                }\n            }\n        }\n        else\n        {\n            using (System.IO.Stream streamReceive = webResponse.GetResponseStream())\n            {\n                using (System.IO.StreamReader sr = new System.IO.StreamReader(streamReceive, Encoding.Default))\n                {\n                    htmlCode = sr.ReadToEnd();\n                }\n            }\n        }\n        return htmlCode;\n\n    }catch(Exception ex)\n    {\n        LogHelper.WriteException(\"GetHTML\", ex, new { Url = url });\n        return \"\";\n    }\n\n}\n```\n\n开发环境在Windows10 + VS2013,整个代码跑起来没什么问题。\n\n无论是HTTP还是HTTPS协议，网页HTML一样能获取得到。\n\n网站部署到linux Jexus之后HTTP协议的网站同样可以获取到HTML，遇到HTTPS协议的网站的时候就跪了。\n\n抓到的异常信息如下：\n\n```csharp\n   System.Net.WebException: Error: TrustFailure (The authentication or decryption has failed.) \n   ---> System.IO.IOException: The authentication or decryption has failed.\n   ---> System.IO.IOException: The authentication or decryption has failed. \n   ---> Mono.Security.Protocol.Tls.TlsException:\n   Invalid certificate received from server. Error code: 0xffffffff800b0109\n   at Mono.Security.Protocol.Tls.RecordProtocol.EndReceiveRecord \n   (IAsyncResult asyncResult) <0x41b58d80 + 0x0013e> in <filename unknown>:0 \n   at Mono.Security.Protocol.Tls.SslClientStream.SafeEndReceiveRecord\n   (IAsyncResult ar, Boolean ignoreEmpty) <0x41b58cb0 + 0x00031> in <filename unknown>:0 \n   at Mono.Security.Protocol.Tls.SslClientStream.NegotiateAsyncWorker\n   (IAsyncResult result) <0x41b72a40 + 0x0023f> in <filename unknown>:0 \n   --- End of inner exception stack trace ---\n   at Mono.Security.Protocol.Tls.SslClientStream.EndNegotiateHandshake \n   (IAsyncResult result) <0x41ba07e0 + 0x000f3> in <filename unknown>:0 \n   at Mono.Security.Protocol.Tls.SslStreamBase.AsyncHandshakeCallback \n   (IAsyncResult asyncResult) <0x41ba0540 + 0x00086> in <filename unknown>:0 \n   --- End of inner exception stack trace ---\n   at Mono.Security.Protocol.Tls.SslStreamBase.EndRead \n   (IAsyncResult asyncResult) <0x41b73fd0 + 0x00199> in <filename unknown>:0 \n   at Mono.Net.Security.Private.LegacySslStream.EndAuthenticateAsClient \n   (IAsyncResult asyncResult) <0x41b73f30 + 0x00042> in <filename unknown>:0 \n   at Mono.Net.Security.Private.LegacySslStream.AuthenticateAsClient (System.String targetHost, \n   System.Security.Cryptography.X509Certificates.X509CertificateCollection\n   clientCertificates, SslProtocols enabledSslProtocols,\n   Boolean checkCertificateRevocation) <0x41b6a660 + 0x00055> in <filename unknown>:0 \n   at Mono.Net.Security.MonoTlsStream.CreateStream (System.Byte[] buffer) \n   <0x41b69c30 + 0x00159> in <filename unknown>:0 \n   --- End of inner exception stack trace ---\n   at System.Net.HttpWebRequest.EndGetResponse (IAsyncResult asyncResult) \n   <0x41b67660 + 0x001f9> in <filename unknown>:0 \n   at System.Net.HttpWebRequest.GetResponse () <0x41b60920 + 0x0005a> in <filename unknown>:0 \n   at WebBookmarkUI.Commom.HTTPHelper.GetHTML (System.String url) <0x41b59b70 + 0x00235> \n   in <filename unknown>:0 \n\n```\n\n有空的信息基本就是：\n\n1. Invalid certificate received from server\n2. The authentication or decryption has failed\n\n一开始百思不得其解，为嘛好好的程序在开发环境跑得都好的，到了mono上就挂了，多疑的我还以为是mono的bug。\n今天静下心来去找了一下资料，发现Mono的文档有这个问题的描述，认真读了一遍，又去请教了一番宇内流云大大，终于弄懂了是什么回事。\n先贴一下相关资料：\n\n1. [stackoverflow mono-webrequest-fails-with-https](http://stackoverflow.com/questions/4926676/mono-webrequest-fails-with-https)\n\n2. [mono doc security](http://www.mono-project.com/docs/faq/security/)\n\n\n这个问题是出现的原因是Windows自带了HTPPS的根证书，linux默认则是没有带有根证书的。我们的mono在调用WebRequest去请求HTTPS协议的网站的时候，抛出上上面的异常了。\n\n解决方案也很简单，为linux导入一下HTTPS根证书就好。\n\n在linux服务器上面执行下面这条命令。\n```\nmozroots --import --ask-remove --machine\n\n```\n\n\n然后在网站的Application_Start()里面添加下面代码：\n\n```csharp\n System.Net.ServicePointManager.ServerCertificateValidationCallback +=\n delegate(object sender, System.Security.Cryptography.X509Certificates.X509Certificate certificate,\n System.Security.Cryptography.X509Certificates.X509Chain chain,\n System.Net.Security.SslPolicyErrors sslPolicyErrors)\n{\n    return true; // **** Always accept\n};\n\n```\n\n完事。\n\n这个故事告诉我们，linux干活都是要亲力亲为呀。\n\n\n\n\n\n","source":"_posts/mono-webreques-https-exception.md","raw":"---\nlayout: post\ntitle: mono webreques https exception\ncategory: dotnet\ndate: 2016-10-04\ntags:\n- dotnet\n---\n\n\n前几天在做一个使用URL通过WebRequest请求HTML页面的功能的时候遇到了点坑，程序在开发环境没有任何的问题，部署到linux mono上之后就跪了。代码如下：\n\n```csharp\npublic static string GetHTML(string url)\n{\n    string htmlCode;\n    try\n    {\n        HttpWebRequest webRequest = (System.Net.HttpWebRequest)System.Net.WebRequest.Create(url);\n        webRequest.Timeout = 30000;\n        webRequest.Method = \"GET\";\n        webRequest.UserAgent = \"Mozilla/4.0\";\n        webRequest.Headers.Add(\"Accept-Encoding\", \"gzip, deflate\");\n\n        HttpWebResponse webResponse = (System.Net.HttpWebResponse)webRequest.GetResponse();\n        //获取目标网站的编码格式\n        string contentype = webResponse.Headers[\"Content-Type\"];\n        Regex regex = new Regex(\"charset\\\\s*=\\\\s*[\\\\W]?\\\\s*([\\\\w-]+)\", RegexOptions.IgnoreCase);\n        if (webResponse.ContentEncoding.ToLower() == \"gzip\")//如果使用了GZip则先解压\n        {\n            using (System.IO.Stream streamReceive = webResponse.GetResponseStream())\n            {\n                using (var zipStream = new System.IO.Compression.GZipStream(streamReceive, \n                System.IO.Compression.CompressionMode.Decompress))\n                {\n                    //匹配编码格式\n                    if (regex.IsMatch(contentype))\n                    {\n                        Encoding ending = Encoding.GetEncoding(regex.Match(contentype).Groups[1].Value.Trim());\n                        using (StreamReader sr = new System.IO.StreamReader(zipStream, ending))\n                        {\n                            htmlCode = sr.ReadToEnd();\n                        }\n                    }\n                    else\n                    {\n                        using (StreamReader sr = \n                        new System.IO.StreamReader(zipStream, Encoding.UTF8))\n                        {\n                            htmlCode = sr.ReadToEnd();\n                        }\n                    }\n                }\n            }\n        }\n        else\n        {\n            using (System.IO.Stream streamReceive = webResponse.GetResponseStream())\n            {\n                using (System.IO.StreamReader sr = new System.IO.StreamReader(streamReceive, Encoding.Default))\n                {\n                    htmlCode = sr.ReadToEnd();\n                }\n            }\n        }\n        return htmlCode;\n\n    }catch(Exception ex)\n    {\n        LogHelper.WriteException(\"GetHTML\", ex, new { Url = url });\n        return \"\";\n    }\n\n}\n```\n\n开发环境在Windows10 + VS2013,整个代码跑起来没什么问题。\n\n无论是HTTP还是HTTPS协议，网页HTML一样能获取得到。\n\n网站部署到linux Jexus之后HTTP协议的网站同样可以获取到HTML，遇到HTTPS协议的网站的时候就跪了。\n\n抓到的异常信息如下：\n\n```csharp\n   System.Net.WebException: Error: TrustFailure (The authentication or decryption has failed.) \n   ---> System.IO.IOException: The authentication or decryption has failed.\n   ---> System.IO.IOException: The authentication or decryption has failed. \n   ---> Mono.Security.Protocol.Tls.TlsException:\n   Invalid certificate received from server. Error code: 0xffffffff800b0109\n   at Mono.Security.Protocol.Tls.RecordProtocol.EndReceiveRecord \n   (IAsyncResult asyncResult) <0x41b58d80 + 0x0013e> in <filename unknown>:0 \n   at Mono.Security.Protocol.Tls.SslClientStream.SafeEndReceiveRecord\n   (IAsyncResult ar, Boolean ignoreEmpty) <0x41b58cb0 + 0x00031> in <filename unknown>:0 \n   at Mono.Security.Protocol.Tls.SslClientStream.NegotiateAsyncWorker\n   (IAsyncResult result) <0x41b72a40 + 0x0023f> in <filename unknown>:0 \n   --- End of inner exception stack trace ---\n   at Mono.Security.Protocol.Tls.SslClientStream.EndNegotiateHandshake \n   (IAsyncResult result) <0x41ba07e0 + 0x000f3> in <filename unknown>:0 \n   at Mono.Security.Protocol.Tls.SslStreamBase.AsyncHandshakeCallback \n   (IAsyncResult asyncResult) <0x41ba0540 + 0x00086> in <filename unknown>:0 \n   --- End of inner exception stack trace ---\n   at Mono.Security.Protocol.Tls.SslStreamBase.EndRead \n   (IAsyncResult asyncResult) <0x41b73fd0 + 0x00199> in <filename unknown>:0 \n   at Mono.Net.Security.Private.LegacySslStream.EndAuthenticateAsClient \n   (IAsyncResult asyncResult) <0x41b73f30 + 0x00042> in <filename unknown>:0 \n   at Mono.Net.Security.Private.LegacySslStream.AuthenticateAsClient (System.String targetHost, \n   System.Security.Cryptography.X509Certificates.X509CertificateCollection\n   clientCertificates, SslProtocols enabledSslProtocols,\n   Boolean checkCertificateRevocation) <0x41b6a660 + 0x00055> in <filename unknown>:0 \n   at Mono.Net.Security.MonoTlsStream.CreateStream (System.Byte[] buffer) \n   <0x41b69c30 + 0x00159> in <filename unknown>:0 \n   --- End of inner exception stack trace ---\n   at System.Net.HttpWebRequest.EndGetResponse (IAsyncResult asyncResult) \n   <0x41b67660 + 0x001f9> in <filename unknown>:0 \n   at System.Net.HttpWebRequest.GetResponse () <0x41b60920 + 0x0005a> in <filename unknown>:0 \n   at WebBookmarkUI.Commom.HTTPHelper.GetHTML (System.String url) <0x41b59b70 + 0x00235> \n   in <filename unknown>:0 \n\n```\n\n有空的信息基本就是：\n\n1. Invalid certificate received from server\n2. The authentication or decryption has failed\n\n一开始百思不得其解，为嘛好好的程序在开发环境跑得都好的，到了mono上就挂了，多疑的我还以为是mono的bug。\n今天静下心来去找了一下资料，发现Mono的文档有这个问题的描述，认真读了一遍，又去请教了一番宇内流云大大，终于弄懂了是什么回事。\n先贴一下相关资料：\n\n1. [stackoverflow mono-webrequest-fails-with-https](http://stackoverflow.com/questions/4926676/mono-webrequest-fails-with-https)\n\n2. [mono doc security](http://www.mono-project.com/docs/faq/security/)\n\n\n这个问题是出现的原因是Windows自带了HTPPS的根证书，linux默认则是没有带有根证书的。我们的mono在调用WebRequest去请求HTTPS协议的网站的时候，抛出上上面的异常了。\n\n解决方案也很简单，为linux导入一下HTTPS根证书就好。\n\n在linux服务器上面执行下面这条命令。\n```\nmozroots --import --ask-remove --machine\n\n```\n\n\n然后在网站的Application_Start()里面添加下面代码：\n\n```csharp\n System.Net.ServicePointManager.ServerCertificateValidationCallback +=\n delegate(object sender, System.Security.Cryptography.X509Certificates.X509Certificate certificate,\n System.Security.Cryptography.X509Certificates.X509Chain chain,\n System.Net.Security.SslPolicyErrors sslPolicyErrors)\n{\n    return true; // **** Always accept\n};\n\n```\n\n完事。\n\n这个故事告诉我们，linux干活都是要亲力亲为呀。\n\n\n\n\n\n","slug":"mono-webreques-https-exception","published":1,"updated":"2018-05-17T13:37:11.137Z","comments":1,"photos":[],"link":"","_id":"cjhal1fwq002bp631pjyz7pop","content":"<p>前几天在做一个使用URL通过WebRequest请求HTML页面的功能的时候遇到了点坑，程序在开发环境没有任何的问题，部署到linux mono上之后就跪了。代码如下：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">GetHTML</span>(<span class=\"params\"><span class=\"keyword\">string</span> url</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">string</span> htmlCode;</span><br><span class=\"line\">    <span class=\"keyword\">try</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        HttpWebRequest webRequest = (System.Net.HttpWebRequest)System.Net.WebRequest.Create(url);</span><br><span class=\"line\">        webRequest.Timeout = <span class=\"number\">30000</span>;</span><br><span class=\"line\">        webRequest.Method = <span class=\"string\">\"GET\"</span>;</span><br><span class=\"line\">        webRequest.UserAgent = <span class=\"string\">\"Mozilla/4.0\"</span>;</span><br><span class=\"line\">        webRequest.Headers.Add(<span class=\"string\">\"Accept-Encoding\"</span>, <span class=\"string\">\"gzip, deflate\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        HttpWebResponse webResponse = (System.Net.HttpWebResponse)webRequest.GetResponse();</span><br><span class=\"line\">        <span class=\"comment\">//获取目标网站的编码格式</span></span><br><span class=\"line\">        <span class=\"keyword\">string</span> contentype = webResponse.Headers[<span class=\"string\">\"Content-Type\"</span>];</span><br><span class=\"line\">        Regex regex = <span class=\"keyword\">new</span> Regex(<span class=\"string\">\"charset\\\\s*=\\\\s*[\\\\W]?\\\\s*([\\\\w-]+)\"</span>, RegexOptions.IgnoreCase);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (webResponse.ContentEncoding.ToLower() == <span class=\"string\">\"gzip\"</span>)<span class=\"comment\">//如果使用了GZip则先解压</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (System.IO.Stream streamReceive = webResponse.GetResponseStream())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> zipStream = <span class=\"keyword\">new</span> System.IO.Compression.GZipStream(streamReceive, </span><br><span class=\"line\">                System.IO.Compression.CompressionMode.Decompress))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//匹配编码格式</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (regex.IsMatch(contentype))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        Encoding ending = Encoding.GetEncoding(regex.Match(contentype).Groups[<span class=\"number\">1</span>].Value.Trim());</span><br><span class=\"line\">                        <span class=\"keyword\">using</span> (StreamReader sr = <span class=\"keyword\">new</span> System.IO.StreamReader(zipStream, ending))</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            htmlCode = sr.ReadToEnd();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">using</span> (StreamReader sr = </span><br><span class=\"line\">                        <span class=\"keyword\">new</span> System.IO.StreamReader(zipStream, Encoding.UTF8))</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            htmlCode = sr.ReadToEnd();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (System.IO.Stream streamReceive = webResponse.GetResponseStream())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">using</span> (System.IO.StreamReader sr = <span class=\"keyword\">new</span> System.IO.StreamReader(streamReceive, Encoding.Default))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    htmlCode = sr.ReadToEnd();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> htmlCode;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(Exception ex)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LogHelper.WriteException(<span class=\"string\">\"GetHTML\"</span>, ex, <span class=\"keyword\">new</span> &#123; Url = url &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>开发环境在Windows10 + VS2013,整个代码跑起来没什么问题。</p>\n<p>无论是HTTP还是HTTPS协议，网页HTML一样能获取得到。</p>\n<p>网站部署到linux Jexus之后HTTP协议的网站同样可以获取到HTML，遇到HTTPS协议的网站的时候就跪了。</p>\n<p>抓到的异常信息如下：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.Net.WebException: Error: TrustFailure (The authentication or decryption has failed.) </span><br><span class=\"line\">---&gt; System.IO.IOException: The authentication or decryption has failed.</span><br><span class=\"line\">---&gt; System.IO.IOException: The authentication or decryption has failed. </span><br><span class=\"line\">---&gt; Mono.Security.Protocol.Tls.TlsException:</span><br><span class=\"line\">Invalid certificate received <span class=\"keyword\">from</span> server. Error code: <span class=\"number\">0xffffffff800b0109</span></span><br><span class=\"line\">at Mono.Security.Protocol.Tls.RecordProtocol.EndReceiveRecord </span><br><span class=\"line\">(IAsyncResult asyncResult) &lt;<span class=\"number\">0x41b58d80</span> + <span class=\"number\">0x0013e</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </span><br><span class=\"line\">at Mono.Security.Protocol.Tls.SslClientStream.SafeEndReceiveRecord</span><br><span class=\"line\">(IAsyncResult ar, Boolean ignoreEmpty) &lt;<span class=\"number\">0x41b58cb0</span> + <span class=\"number\">0x00031</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </span><br><span class=\"line\">at Mono.Security.Protocol.Tls.SslClientStream.NegotiateAsyncWorker</span><br><span class=\"line\">(IAsyncResult result) &lt;<span class=\"number\">0x41b72a40</span> + <span class=\"number\">0x0023f</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </span><br><span class=\"line\">--- End of inner exception stack trace ---</span><br><span class=\"line\">at Mono.Security.Protocol.Tls.SslClientStream.EndNegotiateHandshake </span><br><span class=\"line\">(IAsyncResult result) &lt;<span class=\"number\">0x41ba07e0</span> + <span class=\"number\">0x000f3</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </span><br><span class=\"line\">at Mono.Security.Protocol.Tls.SslStreamBase.AsyncHandshakeCallback </span><br><span class=\"line\">(IAsyncResult asyncResult) &lt;<span class=\"number\">0x41ba0540</span> + <span class=\"number\">0x00086</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </span><br><span class=\"line\">--- End of inner exception stack trace ---</span><br><span class=\"line\">at Mono.Security.Protocol.Tls.SslStreamBase.EndRead </span><br><span class=\"line\">(IAsyncResult asyncResult) &lt;<span class=\"number\">0x41b73fd0</span> + <span class=\"number\">0x00199</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </span><br><span class=\"line\">at Mono.Net.Security.Private.LegacySslStream.EndAuthenticateAsClient </span><br><span class=\"line\">(IAsyncResult asyncResult) &lt;<span class=\"number\">0x41b73f30</span> + <span class=\"number\">0x00042</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </span><br><span class=\"line\">at Mono.Net.Security.Private.LegacySslStream.AuthenticateAsClient (System.String targetHost, </span><br><span class=\"line\">System.Security.Cryptography.X509Certificates.X509CertificateCollection</span><br><span class=\"line\">clientCertificates, SslProtocols enabledSslProtocols,</span><br><span class=\"line\">Boolean checkCertificateRevocation) &lt;<span class=\"number\">0x41b6a660</span> + <span class=\"number\">0x00055</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </span><br><span class=\"line\">at Mono.Net.Security.MonoTlsStream.CreateStream (System.Byte[] buffer) </span><br><span class=\"line\">&lt;<span class=\"number\">0x41b69c30</span> + <span class=\"number\">0x00159</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </span><br><span class=\"line\">--- End of inner exception stack trace ---</span><br><span class=\"line\">at System.Net.HttpWebRequest.EndGetResponse (IAsyncResult asyncResult) </span><br><span class=\"line\">&lt;<span class=\"number\">0x41b67660</span> + <span class=\"number\">0x001f9</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </span><br><span class=\"line\">at System.Net.HttpWebRequest.GetResponse () &lt;<span class=\"number\">0x41b60920</span> + <span class=\"number\">0x0005a</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </span><br><span class=\"line\">at WebBookmarkUI.Commom.HTTPHelper.GetHTML (System.String url) &lt;<span class=\"number\">0x41b59b70</span> + <span class=\"number\">0x00235</span>&gt; </span><br><span class=\"line\"><span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>有空的信息基本就是：</p>\n<ol>\n<li>Invalid certificate received from server</li>\n<li>The authentication or decryption has failed</li>\n</ol>\n<p>一开始百思不得其解，为嘛好好的程序在开发环境跑得都好的，到了mono上就挂了，多疑的我还以为是mono的bug。<br>今天静下心来去找了一下资料，发现Mono的文档有这个问题的描述，认真读了一遍，又去请教了一番宇内流云大大，终于弄懂了是什么回事。<br>先贴一下相关资料：</p>\n<ol>\n<li><p><a href=\"http://stackoverflow.com/questions/4926676/mono-webrequest-fails-with-https\" target=\"_blank\" rel=\"noopener\">stackoverflow mono-webrequest-fails-with-https</a></p>\n</li>\n<li><p><a href=\"http://www.mono-project.com/docs/faq/security/\" target=\"_blank\" rel=\"noopener\">mono doc security</a></p>\n</li>\n</ol>\n<p>这个问题是出现的原因是Windows自带了HTPPS的根证书，linux默认则是没有带有根证书的。我们的mono在调用WebRequest去请求HTTPS协议的网站的时候，抛出上上面的异常了。</p>\n<p>解决方案也很简单，为linux导入一下HTTPS根证书就好。</p>\n<p>在linux服务器上面执行下面这条命令。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mozroots --import --ask-remove --machine</span><br></pre></td></tr></table></figure></p>\n<p>然后在网站的Application_Start()里面添加下面代码：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> System.Net.ServicePointManager.ServerCertificateValidationCallback +=</span><br><span class=\"line\"> <span class=\"keyword\">delegate</span>(<span class=\"keyword\">object</span> sender, System.Security.Cryptography.X509Certificates.X509Certificate certificate,</span><br><span class=\"line\"> System.Security.Cryptography.X509Certificates.X509Chain chain,</span><br><span class=\"line\"> System.Net.Security.SslPolicyErrors sslPolicyErrors)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// **** Always accept</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>完事。</p>\n<p>这个故事告诉我们，linux干活都是要亲力亲为呀。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>前几天在做一个使用URL通过WebRequest请求HTML页面的功能的时候遇到了点坑，程序在开发环境没有任何的问题，部署到linux mono上之后就跪了。代码如下：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">GetHTML</span>(<span class=\"params\"><span class=\"keyword\">string</span> url</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">string</span> htmlCode;</span><br><span class=\"line\">    <span class=\"keyword\">try</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        HttpWebRequest webRequest = (System.Net.HttpWebRequest)System.Net.WebRequest.Create(url);</span><br><span class=\"line\">        webRequest.Timeout = <span class=\"number\">30000</span>;</span><br><span class=\"line\">        webRequest.Method = <span class=\"string\">\"GET\"</span>;</span><br><span class=\"line\">        webRequest.UserAgent = <span class=\"string\">\"Mozilla/4.0\"</span>;</span><br><span class=\"line\">        webRequest.Headers.Add(<span class=\"string\">\"Accept-Encoding\"</span>, <span class=\"string\">\"gzip, deflate\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        HttpWebResponse webResponse = (System.Net.HttpWebResponse)webRequest.GetResponse();</span><br><span class=\"line\">        <span class=\"comment\">//获取目标网站的编码格式</span></span><br><span class=\"line\">        <span class=\"keyword\">string</span> contentype = webResponse.Headers[<span class=\"string\">\"Content-Type\"</span>];</span><br><span class=\"line\">        Regex regex = <span class=\"keyword\">new</span> Regex(<span class=\"string\">\"charset\\\\s*=\\\\s*[\\\\W]?\\\\s*([\\\\w-]+)\"</span>, RegexOptions.IgnoreCase);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (webResponse.ContentEncoding.ToLower() == <span class=\"string\">\"gzip\"</span>)<span class=\"comment\">//如果使用了GZip则先解压</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (System.IO.Stream streamReceive = webResponse.GetResponseStream())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> zipStream = <span class=\"keyword\">new</span> System.IO.Compression.GZipStream(streamReceive, </span><br><span class=\"line\">                System.IO.Compression.CompressionMode.Decompress))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//匹配编码格式</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (regex.IsMatch(contentype))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        Encoding ending = Encoding.GetEncoding(regex.Match(contentype).Groups[<span class=\"number\">1</span>].Value.Trim());</span><br><span class=\"line\">                        <span class=\"keyword\">using</span> (StreamReader sr = <span class=\"keyword\">new</span> System.IO.StreamReader(zipStream, ending))</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            htmlCode = sr.ReadToEnd();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">using</span> (StreamReader sr = </span><br><span class=\"line\">                        <span class=\"keyword\">new</span> System.IO.StreamReader(zipStream, Encoding.UTF8))</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            htmlCode = sr.ReadToEnd();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> (System.IO.Stream streamReceive = webResponse.GetResponseStream())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">using</span> (System.IO.StreamReader sr = <span class=\"keyword\">new</span> System.IO.StreamReader(streamReceive, Encoding.Default))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    htmlCode = sr.ReadToEnd();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> htmlCode;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(Exception ex)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LogHelper.WriteException(<span class=\"string\">\"GetHTML\"</span>, ex, <span class=\"keyword\">new</span> &#123; Url = url &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>开发环境在Windows10 + VS2013,整个代码跑起来没什么问题。</p>\n<p>无论是HTTP还是HTTPS协议，网页HTML一样能获取得到。</p>\n<p>网站部署到linux Jexus之后HTTP协议的网站同样可以获取到HTML，遇到HTTPS协议的网站的时候就跪了。</p>\n<p>抓到的异常信息如下：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.Net.WebException: Error: TrustFailure (The authentication or decryption has failed.) </span><br><span class=\"line\">---&gt; System.IO.IOException: The authentication or decryption has failed.</span><br><span class=\"line\">---&gt; System.IO.IOException: The authentication or decryption has failed. </span><br><span class=\"line\">---&gt; Mono.Security.Protocol.Tls.TlsException:</span><br><span class=\"line\">Invalid certificate received <span class=\"keyword\">from</span> server. Error code: <span class=\"number\">0xffffffff800b0109</span></span><br><span class=\"line\">at Mono.Security.Protocol.Tls.RecordProtocol.EndReceiveRecord </span><br><span class=\"line\">(IAsyncResult asyncResult) &lt;<span class=\"number\">0x41b58d80</span> + <span class=\"number\">0x0013e</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </span><br><span class=\"line\">at Mono.Security.Protocol.Tls.SslClientStream.SafeEndReceiveRecord</span><br><span class=\"line\">(IAsyncResult ar, Boolean ignoreEmpty) &lt;<span class=\"number\">0x41b58cb0</span> + <span class=\"number\">0x00031</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </span><br><span class=\"line\">at Mono.Security.Protocol.Tls.SslClientStream.NegotiateAsyncWorker</span><br><span class=\"line\">(IAsyncResult result) &lt;<span class=\"number\">0x41b72a40</span> + <span class=\"number\">0x0023f</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </span><br><span class=\"line\">--- End of inner exception stack trace ---</span><br><span class=\"line\">at Mono.Security.Protocol.Tls.SslClientStream.EndNegotiateHandshake </span><br><span class=\"line\">(IAsyncResult result) &lt;<span class=\"number\">0x41ba07e0</span> + <span class=\"number\">0x000f3</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </span><br><span class=\"line\">at Mono.Security.Protocol.Tls.SslStreamBase.AsyncHandshakeCallback </span><br><span class=\"line\">(IAsyncResult asyncResult) &lt;<span class=\"number\">0x41ba0540</span> + <span class=\"number\">0x00086</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </span><br><span class=\"line\">--- End of inner exception stack trace ---</span><br><span class=\"line\">at Mono.Security.Protocol.Tls.SslStreamBase.EndRead </span><br><span class=\"line\">(IAsyncResult asyncResult) &lt;<span class=\"number\">0x41b73fd0</span> + <span class=\"number\">0x00199</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </span><br><span class=\"line\">at Mono.Net.Security.Private.LegacySslStream.EndAuthenticateAsClient </span><br><span class=\"line\">(IAsyncResult asyncResult) &lt;<span class=\"number\">0x41b73f30</span> + <span class=\"number\">0x00042</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </span><br><span class=\"line\">at Mono.Net.Security.Private.LegacySslStream.AuthenticateAsClient (System.String targetHost, </span><br><span class=\"line\">System.Security.Cryptography.X509Certificates.X509CertificateCollection</span><br><span class=\"line\">clientCertificates, SslProtocols enabledSslProtocols,</span><br><span class=\"line\">Boolean checkCertificateRevocation) &lt;<span class=\"number\">0x41b6a660</span> + <span class=\"number\">0x00055</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </span><br><span class=\"line\">at Mono.Net.Security.MonoTlsStream.CreateStream (System.Byte[] buffer) </span><br><span class=\"line\">&lt;<span class=\"number\">0x41b69c30</span> + <span class=\"number\">0x00159</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </span><br><span class=\"line\">--- End of inner exception stack trace ---</span><br><span class=\"line\">at System.Net.HttpWebRequest.EndGetResponse (IAsyncResult asyncResult) </span><br><span class=\"line\">&lt;<span class=\"number\">0x41b67660</span> + <span class=\"number\">0x001f9</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </span><br><span class=\"line\">at System.Net.HttpWebRequest.GetResponse () &lt;<span class=\"number\">0x41b60920</span> + <span class=\"number\">0x0005a</span>&gt; <span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span> </span><br><span class=\"line\">at WebBookmarkUI.Commom.HTTPHelper.GetHTML (System.String url) &lt;<span class=\"number\">0x41b59b70</span> + <span class=\"number\">0x00235</span>&gt; </span><br><span class=\"line\"><span class=\"keyword\">in</span> &lt;filename unknown&gt;:<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>有空的信息基本就是：</p>\n<ol>\n<li>Invalid certificate received from server</li>\n<li>The authentication or decryption has failed</li>\n</ol>\n<p>一开始百思不得其解，为嘛好好的程序在开发环境跑得都好的，到了mono上就挂了，多疑的我还以为是mono的bug。<br>今天静下心来去找了一下资料，发现Mono的文档有这个问题的描述，认真读了一遍，又去请教了一番宇内流云大大，终于弄懂了是什么回事。<br>先贴一下相关资料：</p>\n<ol>\n<li><p><a href=\"http://stackoverflow.com/questions/4926676/mono-webrequest-fails-with-https\" target=\"_blank\" rel=\"noopener\">stackoverflow mono-webrequest-fails-with-https</a></p>\n</li>\n<li><p><a href=\"http://www.mono-project.com/docs/faq/security/\" target=\"_blank\" rel=\"noopener\">mono doc security</a></p>\n</li>\n</ol>\n<p>这个问题是出现的原因是Windows自带了HTPPS的根证书，linux默认则是没有带有根证书的。我们的mono在调用WebRequest去请求HTTPS协议的网站的时候，抛出上上面的异常了。</p>\n<p>解决方案也很简单，为linux导入一下HTTPS根证书就好。</p>\n<p>在linux服务器上面执行下面这条命令。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mozroots --import --ask-remove --machine</span><br></pre></td></tr></table></figure></p>\n<p>然后在网站的Application_Start()里面添加下面代码：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> System.Net.ServicePointManager.ServerCertificateValidationCallback +=</span><br><span class=\"line\"> <span class=\"keyword\">delegate</span>(<span class=\"keyword\">object</span> sender, System.Security.Cryptography.X509Certificates.X509Certificate certificate,</span><br><span class=\"line\"> System.Security.Cryptography.X509Certificates.X509Chain chain,</span><br><span class=\"line\"> System.Net.Security.SslPolicyErrors sslPolicyErrors)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// **** Always accept</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>完事。</p>\n<p>这个故事告诉我们，linux干活都是要亲力亲为呀。</p>\n"},{"layout":"post","title":"一些有用的脚本","date":"2016-10-03T16:00:00.000Z","_content":"# 一些有用的脚本\n\n## 获取电池使用情况报告(battery-report)-电池历史记录\n\n来源：[获取电池使用情况报告(battery-report)-电池历史记录](http://answers.microsoft.com/zh-hans/windows/wiki/windows_10-performance/%E8%8E%B7%E5%8F%96%E7%94%B5%E6%B1%A0%E4%BD%BF/2d025ee0-8529-45a0-a5ae-46aa5e67f8e8)\n\n1. 点击任务栏搜索框，搜索：POWERSHELL\n2. 鼠标右键点击搜索结果中的“Windows Powershell”，点击“以管理员身份运行”\n\n```csharp\n$HTML=[System.Environment]::GetFolderPath('Desktop')+\"\\\"+(Get-Date -Format 'yyyy-MM-dd')+\"-电池记录.html\";POWERCFG /BATTERYREPORT /OUTPUT \"$HTML\";$TF=Get-Content \"$HTML\";$TF| %{$_.Replace(\"Battery report\",\"电池报告\")}| %{$_.Replace(\"COMPUTER NAME\",\"计算机名\")}| %{$_.Replace(\"SYSTEM PRODUCT NAME\",\"计算机型号\")}| %{$_.Replace(\"OS BUILD\",\"操作系统内部版本\")}| %{$_.Replace(\"PLATFORM ROLE\",\"平台角色\")}| %{$_.Replace(\"CONNECTED STANDBY\",\"InstantGo（连接待机）\")}| %{$_.Replace(\"REPORT TIME\",\"报告时间\")}| %{$_.Replace(\"Installed batteries\",\"已安装的电池\")}| %{$_.Replace(\"Information about each currently installed battery\",\"查看当前已安装电池的信息\")}| %{$_.Replace(\"NAME\",\"名称\")}| %{$_.Replace(\"MANUFACTURER\",\"制造商\")}| %{$_.Replace(\"SERIAL NUMBER\",\"序列号\")}| %{$_.Replace(\"CHEMISTRY\",\"化学成分\")}| %{$_.Replace(\"AT DESIGN CAPACITY\",\"设计容量时\")}| %{$_.Replace(\"DESIGN CAPACITY\",\"设计容量\")}| %{$_.Replace(\"FULL CHARGE CAPACITY\",\"完全充电容量\")}| %{$_.Replace(\"CYCLE COUNT\",\"循环计数\")}| %{$_.Replace(\"Recent usage\",\"最近使用情况\")}| %{$_.Replace(\"Power states over the last 3 days\",\"过去72小时内的电源状态\")}| %{$_.Replace(\"START TIME\",\"开始时间\")}| %{$_.Replace(\"STATE\",\"状态\")}| %{$_.Replace(\"SOURCE\",\"电源\")}| %{$_.Replace(\"CAPACITY REMAINING\",\"剩余容量\")}| %{$_.Replace(\"Battery usage\",\"电池使用情况\")}| %{$_.Replace(\"Battery drains over the last 3 days\",\"过去72小时内的电池消耗\")}| %{$_.Replace(\"DURATION\",\"使用时间\")}| %{$_.Replace(\"ENERGY DRAINED\",\"消耗的能量\")}| %{$_.Replace(\"Usage history\",\"使用历史记录\")}| %{$_.Replace(\"History of system usage on AC and battery\",\"有关交流电源和电池的使用记录\")}| %{$_.Replace(\"BATTERY DURATION\",\"电池使用时间\")}| %{$_.Replace(\"AC DURATION \",\"交流电源使用时间\")}| %{$_.Replace(\"PERIOD\",\"周期\")}| %{$_.Replace(\"ACTIVE\",\"活动\")}| %{$_.Replace(\"Battery capacity history\",\"电池设计容量历史记录\")}| %{$_.Replace(\"Charge capacity history of the system's batteries\",\"电池充电能力历史记录\")}| %{$_.Replace(\"Battery life estimates based on observed drains\",\"以观察到的消耗情况预计电池寿命\")}| %{$_.Replace(\"Battery life estimates\",\"预计电池寿命\")}| %{$_.Replace(\"AT FULL CHARGE\",\"完全充电时\")}| %{$_.Replace(\"Current estimate of battery life based on all observed drains since OS install\",\"以操作系统安装后所有观察到的消耗记录为基础预计的当前电池寿命\")}| %{$_.Replace(\"Since OS install\",\"从操作系统安装后\")}| %{$_.Replace(\"Supported\",\"支持\")}| %{$_.Replace(\"Not supported\",\"不支持\")}| %{$_.Replace(\"BATTERY\",\"电池\")}| %{$_.Replace(\"Suspended\",\"已暂停\")}| %{$_.Replace(\"Active\",\"活动\")}| %{$_.Replace(\"Unspecified\",\"未知\")}| %{$_.Replace(\"Mobile\",\"移动\")}| %{$_.Replace(\"Desktop\",\"桌面\")}| %{$_.Replace(\"Workstation\",\"工作站\")}| %{$_.Replace(\"Report generated\",\"生成当前报告\")}| %{$_.Replace(\"Battery\",\"电池\")}| %{$_.Replace(\"AC\",\"交流电源\")}|Out-File \"$HTML\";pause\n```","source":"_posts/some_script.md","raw":"---\nlayout: post\ntitle: 一些有用的脚本\ncategory: sctripts\ndate: 2016-10-04\ntags:\n- sctripts\n---\n# 一些有用的脚本\n\n## 获取电池使用情况报告(battery-report)-电池历史记录\n\n来源：[获取电池使用情况报告(battery-report)-电池历史记录](http://answers.microsoft.com/zh-hans/windows/wiki/windows_10-performance/%E8%8E%B7%E5%8F%96%E7%94%B5%E6%B1%A0%E4%BD%BF/2d025ee0-8529-45a0-a5ae-46aa5e67f8e8)\n\n1. 点击任务栏搜索框，搜索：POWERSHELL\n2. 鼠标右键点击搜索结果中的“Windows Powershell”，点击“以管理员身份运行”\n\n```csharp\n$HTML=[System.Environment]::GetFolderPath('Desktop')+\"\\\"+(Get-Date -Format 'yyyy-MM-dd')+\"-电池记录.html\";POWERCFG /BATTERYREPORT /OUTPUT \"$HTML\";$TF=Get-Content \"$HTML\";$TF| %{$_.Replace(\"Battery report\",\"电池报告\")}| %{$_.Replace(\"COMPUTER NAME\",\"计算机名\")}| %{$_.Replace(\"SYSTEM PRODUCT NAME\",\"计算机型号\")}| %{$_.Replace(\"OS BUILD\",\"操作系统内部版本\")}| %{$_.Replace(\"PLATFORM ROLE\",\"平台角色\")}| %{$_.Replace(\"CONNECTED STANDBY\",\"InstantGo（连接待机）\")}| %{$_.Replace(\"REPORT TIME\",\"报告时间\")}| %{$_.Replace(\"Installed batteries\",\"已安装的电池\")}| %{$_.Replace(\"Information about each currently installed battery\",\"查看当前已安装电池的信息\")}| %{$_.Replace(\"NAME\",\"名称\")}| %{$_.Replace(\"MANUFACTURER\",\"制造商\")}| %{$_.Replace(\"SERIAL NUMBER\",\"序列号\")}| %{$_.Replace(\"CHEMISTRY\",\"化学成分\")}| %{$_.Replace(\"AT DESIGN CAPACITY\",\"设计容量时\")}| %{$_.Replace(\"DESIGN CAPACITY\",\"设计容量\")}| %{$_.Replace(\"FULL CHARGE CAPACITY\",\"完全充电容量\")}| %{$_.Replace(\"CYCLE COUNT\",\"循环计数\")}| %{$_.Replace(\"Recent usage\",\"最近使用情况\")}| %{$_.Replace(\"Power states over the last 3 days\",\"过去72小时内的电源状态\")}| %{$_.Replace(\"START TIME\",\"开始时间\")}| %{$_.Replace(\"STATE\",\"状态\")}| %{$_.Replace(\"SOURCE\",\"电源\")}| %{$_.Replace(\"CAPACITY REMAINING\",\"剩余容量\")}| %{$_.Replace(\"Battery usage\",\"电池使用情况\")}| %{$_.Replace(\"Battery drains over the last 3 days\",\"过去72小时内的电池消耗\")}| %{$_.Replace(\"DURATION\",\"使用时间\")}| %{$_.Replace(\"ENERGY DRAINED\",\"消耗的能量\")}| %{$_.Replace(\"Usage history\",\"使用历史记录\")}| %{$_.Replace(\"History of system usage on AC and battery\",\"有关交流电源和电池的使用记录\")}| %{$_.Replace(\"BATTERY DURATION\",\"电池使用时间\")}| %{$_.Replace(\"AC DURATION \",\"交流电源使用时间\")}| %{$_.Replace(\"PERIOD\",\"周期\")}| %{$_.Replace(\"ACTIVE\",\"活动\")}| %{$_.Replace(\"Battery capacity history\",\"电池设计容量历史记录\")}| %{$_.Replace(\"Charge capacity history of the system's batteries\",\"电池充电能力历史记录\")}| %{$_.Replace(\"Battery life estimates based on observed drains\",\"以观察到的消耗情况预计电池寿命\")}| %{$_.Replace(\"Battery life estimates\",\"预计电池寿命\")}| %{$_.Replace(\"AT FULL CHARGE\",\"完全充电时\")}| %{$_.Replace(\"Current estimate of battery life based on all observed drains since OS install\",\"以操作系统安装后所有观察到的消耗记录为基础预计的当前电池寿命\")}| %{$_.Replace(\"Since OS install\",\"从操作系统安装后\")}| %{$_.Replace(\"Supported\",\"支持\")}| %{$_.Replace(\"Not supported\",\"不支持\")}| %{$_.Replace(\"BATTERY\",\"电池\")}| %{$_.Replace(\"Suspended\",\"已暂停\")}| %{$_.Replace(\"Active\",\"活动\")}| %{$_.Replace(\"Unspecified\",\"未知\")}| %{$_.Replace(\"Mobile\",\"移动\")}| %{$_.Replace(\"Desktop\",\"桌面\")}| %{$_.Replace(\"Workstation\",\"工作站\")}| %{$_.Replace(\"Report generated\",\"生成当前报告\")}| %{$_.Replace(\"Battery\",\"电池\")}| %{$_.Replace(\"AC\",\"交流电源\")}|Out-File \"$HTML\";pause\n```","slug":"some_script","published":1,"updated":"2018-05-17T13:37:26.833Z","comments":1,"photos":[],"link":"","_id":"cjhal1fwr002ep631aho7mvao","content":"<h1 id=\"一些有用的脚本\"><a href=\"#一些有用的脚本\" class=\"headerlink\" title=\"一些有用的脚本\"></a>一些有用的脚本</h1><h2 id=\"获取电池使用情况报告-battery-report-电池历史记录\"><a href=\"#获取电池使用情况报告-battery-report-电池历史记录\" class=\"headerlink\" title=\"获取电池使用情况报告(battery-report)-电池历史记录\"></a>获取电池使用情况报告(battery-report)-电池历史记录</h2><p>来源：<a href=\"http://answers.microsoft.com/zh-hans/windows/wiki/windows_10-performance/%E8%8E%B7%E5%8F%96%E7%94%B5%E6%B1%A0%E4%BD%BF/2d025ee0-8529-45a0-a5ae-46aa5e67f8e8\" target=\"_blank\" rel=\"noopener\">获取电池使用情况报告(battery-report)-电池历史记录</a></p>\n<ol>\n<li>点击任务栏搜索框，搜索：POWERSHELL</li>\n<li>鼠标右键点击搜索结果中的“Windows Powershell”，点击“以管理员身份运行”</li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$HTML=[System.Environment]::GetFolderPath('Desktop')+\"\\\"+(Get-Date -Format 'yyyy-MM-dd')+\"-电池记录.html\";POWERCFG /BATTERYREPORT /OUTPUT \"$HTML\";$TF=Get-Content \"$HTML\";$TF| %&#123;$_.Replace(\"Battery report\",\"电池报告\")&#125;| %&#123;$_.Replace(\"COMPUTER NAME\",\"计算机名\")&#125;| %&#123;$_.Replace(\"SYSTEM PRODUCT NAME\",\"计算机型号\")&#125;| %&#123;$_.Replace(\"OS BUILD\",\"操作系统内部版本\")&#125;| %&#123;$_.Replace(\"PLATFORM ROLE\",\"平台角色\")&#125;| %&#123;$_.Replace(\"CONNECTED STANDBY\",\"InstantGo（连接待机）\")&#125;| %&#123;$_.Replace(\"REPORT TIME\",\"报告时间\")&#125;| %&#123;$_.Replace(\"Installed batteries\",\"已安装的电池\")&#125;| %&#123;$_.Replace(\"Information about each currently installed battery\",\"查看当前已安装电池的信息\")&#125;| %&#123;$_.Replace(\"NAME\",\"名称\")&#125;| %&#123;$_.Replace(\"MANUFACTURER\",\"制造商\")&#125;| %&#123;$_.Replace(\"SERIAL NUMBER\",\"序列号\")&#125;| %&#123;$_.Replace(\"CHEMISTRY\",\"化学成分\")&#125;| %&#123;$_.Replace(\"AT DESIGN CAPACITY\",\"设计容量时\")&#125;| %&#123;$_.Replace(\"DESIGN CAPACITY\",\"设计容量\")&#125;| %&#123;$_.Replace(\"FULL CHARGE CAPACITY\",\"完全充电容量\")&#125;| %&#123;$_.Replace(\"CYCLE COUNT\",\"循环计数\")&#125;| %&#123;$_.Replace(\"Recent usage\",\"最近使用情况\")&#125;| %&#123;$_.Replace(\"Power states over the last 3 days\",\"过去72小时内的电源状态\")&#125;| %&#123;$_.Replace(\"START TIME\",\"开始时间\")&#125;| %&#123;$_.Replace(\"STATE\",\"状态\")&#125;| %&#123;$_.Replace(\"SOURCE\",\"电源\")&#125;| %&#123;$_.Replace(\"CAPACITY REMAINING\",\"剩余容量\")&#125;| %&#123;$_.Replace(\"Battery usage\",\"电池使用情况\")&#125;| %&#123;$_.Replace(\"Battery drains over the last 3 days\",\"过去72小时内的电池消耗\")&#125;| %&#123;$_.Replace(\"DURATION\",\"使用时间\")&#125;| %&#123;$_.Replace(\"ENERGY DRAINED\",\"消耗的能量\")&#125;| %&#123;$_.Replace(\"Usage history\",\"使用历史记录\")&#125;| %&#123;$_.Replace(\"History of system usage on AC and battery\",\"有关交流电源和电池的使用记录\")&#125;| %&#123;$_.Replace(\"BATTERY DURATION\",\"电池使用时间\")&#125;| %&#123;$_.Replace(\"AC DURATION \",\"交流电源使用时间\")&#125;| %&#123;$_.Replace(\"PERIOD\",\"周期\")&#125;| %&#123;$_.Replace(\"ACTIVE\",\"活动\")&#125;| %&#123;$_.Replace(\"Battery capacity history\",\"电池设计容量历史记录\")&#125;| %&#123;$_.Replace(\"Charge capacity history of the system's batteries\",\"电池充电能力历史记录\")&#125;| %&#123;$_.Replace(\"Battery life estimates based on observed drains\",\"以观察到的消耗情况预计电池寿命\")&#125;| %&#123;$_.Replace(\"Battery life estimates\",\"预计电池寿命\")&#125;| %&#123;$_.Replace(\"AT FULL CHARGE\",\"完全充电时\")&#125;| %&#123;$_.Replace(\"Current estimate of battery life based on all observed drains since OS install\",\"以操作系统安装后所有观察到的消耗记录为基础预计的当前电池寿命\")&#125;| %&#123;$_.Replace(\"Since OS install\",\"从操作系统安装后\")&#125;| %&#123;$_.Replace(\"Supported\",\"支持\")&#125;| %&#123;$_.Replace(\"Not supported\",\"不支持\")&#125;| %&#123;$_.Replace(\"BATTERY\",\"电池\")&#125;| %&#123;$_.Replace(\"Suspended\",\"已暂停\")&#125;| %&#123;$_.Replace(\"Active\",\"活动\")&#125;| %&#123;$_.Replace(\"Unspecified\",\"未知\")&#125;| %&#123;$_.Replace(\"Mobile\",\"移动\")&#125;| %&#123;$_.Replace(\"Desktop\",\"桌面\")&#125;| %&#123;$_.Replace(\"Workstation\",\"工作站\")&#125;| %&#123;$_.Replace(\"Report generated\",\"生成当前报告\")&#125;| %&#123;$_.Replace(\"Battery\",\"电池\")&#125;| %&#123;$_.Replace(\"AC\",\"交流电源\")&#125;|Out-File \"$HTML\";pause</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一些有用的脚本\"><a href=\"#一些有用的脚本\" class=\"headerlink\" title=\"一些有用的脚本\"></a>一些有用的脚本</h1><h2 id=\"获取电池使用情况报告-battery-report-电池历史记录\"><a href=\"#获取电池使用情况报告-battery-report-电池历史记录\" class=\"headerlink\" title=\"获取电池使用情况报告(battery-report)-电池历史记录\"></a>获取电池使用情况报告(battery-report)-电池历史记录</h2><p>来源：<a href=\"http://answers.microsoft.com/zh-hans/windows/wiki/windows_10-performance/%E8%8E%B7%E5%8F%96%E7%94%B5%E6%B1%A0%E4%BD%BF/2d025ee0-8529-45a0-a5ae-46aa5e67f8e8\" target=\"_blank\" rel=\"noopener\">获取电池使用情况报告(battery-report)-电池历史记录</a></p>\n<ol>\n<li>点击任务栏搜索框，搜索：POWERSHELL</li>\n<li>鼠标右键点击搜索结果中的“Windows Powershell”，点击“以管理员身份运行”</li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$HTML=[System.Environment]::GetFolderPath('Desktop')+\"\\\"+(Get-Date -Format 'yyyy-MM-dd')+\"-电池记录.html\";POWERCFG /BATTERYREPORT /OUTPUT \"$HTML\";$TF=Get-Content \"$HTML\";$TF| %&#123;$_.Replace(\"Battery report\",\"电池报告\")&#125;| %&#123;$_.Replace(\"COMPUTER NAME\",\"计算机名\")&#125;| %&#123;$_.Replace(\"SYSTEM PRODUCT NAME\",\"计算机型号\")&#125;| %&#123;$_.Replace(\"OS BUILD\",\"操作系统内部版本\")&#125;| %&#123;$_.Replace(\"PLATFORM ROLE\",\"平台角色\")&#125;| %&#123;$_.Replace(\"CONNECTED STANDBY\",\"InstantGo（连接待机）\")&#125;| %&#123;$_.Replace(\"REPORT TIME\",\"报告时间\")&#125;| %&#123;$_.Replace(\"Installed batteries\",\"已安装的电池\")&#125;| %&#123;$_.Replace(\"Information about each currently installed battery\",\"查看当前已安装电池的信息\")&#125;| %&#123;$_.Replace(\"NAME\",\"名称\")&#125;| %&#123;$_.Replace(\"MANUFACTURER\",\"制造商\")&#125;| %&#123;$_.Replace(\"SERIAL NUMBER\",\"序列号\")&#125;| %&#123;$_.Replace(\"CHEMISTRY\",\"化学成分\")&#125;| %&#123;$_.Replace(\"AT DESIGN CAPACITY\",\"设计容量时\")&#125;| %&#123;$_.Replace(\"DESIGN CAPACITY\",\"设计容量\")&#125;| %&#123;$_.Replace(\"FULL CHARGE CAPACITY\",\"完全充电容量\")&#125;| %&#123;$_.Replace(\"CYCLE COUNT\",\"循环计数\")&#125;| %&#123;$_.Replace(\"Recent usage\",\"最近使用情况\")&#125;| %&#123;$_.Replace(\"Power states over the last 3 days\",\"过去72小时内的电源状态\")&#125;| %&#123;$_.Replace(\"START TIME\",\"开始时间\")&#125;| %&#123;$_.Replace(\"STATE\",\"状态\")&#125;| %&#123;$_.Replace(\"SOURCE\",\"电源\")&#125;| %&#123;$_.Replace(\"CAPACITY REMAINING\",\"剩余容量\")&#125;| %&#123;$_.Replace(\"Battery usage\",\"电池使用情况\")&#125;| %&#123;$_.Replace(\"Battery drains over the last 3 days\",\"过去72小时内的电池消耗\")&#125;| %&#123;$_.Replace(\"DURATION\",\"使用时间\")&#125;| %&#123;$_.Replace(\"ENERGY DRAINED\",\"消耗的能量\")&#125;| %&#123;$_.Replace(\"Usage history\",\"使用历史记录\")&#125;| %&#123;$_.Replace(\"History of system usage on AC and battery\",\"有关交流电源和电池的使用记录\")&#125;| %&#123;$_.Replace(\"BATTERY DURATION\",\"电池使用时间\")&#125;| %&#123;$_.Replace(\"AC DURATION \",\"交流电源使用时间\")&#125;| %&#123;$_.Replace(\"PERIOD\",\"周期\")&#125;| %&#123;$_.Replace(\"ACTIVE\",\"活动\")&#125;| %&#123;$_.Replace(\"Battery capacity history\",\"电池设计容量历史记录\")&#125;| %&#123;$_.Replace(\"Charge capacity history of the system's batteries\",\"电池充电能力历史记录\")&#125;| %&#123;$_.Replace(\"Battery life estimates based on observed drains\",\"以观察到的消耗情况预计电池寿命\")&#125;| %&#123;$_.Replace(\"Battery life estimates\",\"预计电池寿命\")&#125;| %&#123;$_.Replace(\"AT FULL CHARGE\",\"完全充电时\")&#125;| %&#123;$_.Replace(\"Current estimate of battery life based on all observed drains since OS install\",\"以操作系统安装后所有观察到的消耗记录为基础预计的当前电池寿命\")&#125;| %&#123;$_.Replace(\"Since OS install\",\"从操作系统安装后\")&#125;| %&#123;$_.Replace(\"Supported\",\"支持\")&#125;| %&#123;$_.Replace(\"Not supported\",\"不支持\")&#125;| %&#123;$_.Replace(\"BATTERY\",\"电池\")&#125;| %&#123;$_.Replace(\"Suspended\",\"已暂停\")&#125;| %&#123;$_.Replace(\"Active\",\"活动\")&#125;| %&#123;$_.Replace(\"Unspecified\",\"未知\")&#125;| %&#123;$_.Replace(\"Mobile\",\"移动\")&#125;| %&#123;$_.Replace(\"Desktop\",\"桌面\")&#125;| %&#123;$_.Replace(\"Workstation\",\"工作站\")&#125;| %&#123;$_.Replace(\"Report generated\",\"生成当前报告\")&#125;| %&#123;$_.Replace(\"Battery\",\"电池\")&#125;| %&#123;$_.Replace(\"AC\",\"交流电源\")&#125;|Out-File \"$HTML\";pause</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"ASP.NET core 初体验","date":"2016-10-03T16:00:00.000Z","_content":"\n在大神的带领下体验了一下asp.net core，感觉很不错，简单写个手把手教程。\n\n环境要求：VS2015 update2，版本不限。\n\n首先到这里：[https://www.microsoft.com/net/download](https://www.microsoft.com/net/download)\n\n下载.NET Core Install 和SDK Install。\n\n如下图：\n![图一](http://7xread.com1.z0.glb.clouddn.com/5f4576e6-6fa0-4fbb-83c9-009428480e83)\n\n接着无脑安装。\n![图二](http://7xread.com1.z0.glb.clouddn.com/a996d00e-5aa5-4034-96ae-548e35c2ba95)\n\n两个都装完之后环境已经搭好了。不过在VS中还没对应的.NET Core模板。\n我们还需要去下载一个\n[.NET Core Tooling Preview 1 for Visual Studio 2015](https://go.microsoft.com/fwlink/?LinkId=798481)\n\n![图三](http://7xread.com1.z0.glb.clouddn.com/07ec4ff1-64ea-486b-8cb8-99dc400c279a)\n\n这个安装略慢，稍等。\n\n上面的都安装好了之后，打开VS，新建项目，选中web，即可看到asp.net core.\n如下图：\n![图五](http://7xread.com1.z0.glb.clouddn.com/aa3a9677-701e-45f0-90ea-b47b57dcb85e)\n完事....\n下次再来聊asp.net core项目...","source":"_posts/the_first_aspnetcore.md","raw":"---\nlayout: post\ntitle: ASP.NET core 初体验\ncategory: dotnet core\ndate: 2016-10-04\ntags:\n- dotnet core\n---\n\n在大神的带领下体验了一下asp.net core，感觉很不错，简单写个手把手教程。\n\n环境要求：VS2015 update2，版本不限。\n\n首先到这里：[https://www.microsoft.com/net/download](https://www.microsoft.com/net/download)\n\n下载.NET Core Install 和SDK Install。\n\n如下图：\n![图一](http://7xread.com1.z0.glb.clouddn.com/5f4576e6-6fa0-4fbb-83c9-009428480e83)\n\n接着无脑安装。\n![图二](http://7xread.com1.z0.glb.clouddn.com/a996d00e-5aa5-4034-96ae-548e35c2ba95)\n\n两个都装完之后环境已经搭好了。不过在VS中还没对应的.NET Core模板。\n我们还需要去下载一个\n[.NET Core Tooling Preview 1 for Visual Studio 2015](https://go.microsoft.com/fwlink/?LinkId=798481)\n\n![图三](http://7xread.com1.z0.glb.clouddn.com/07ec4ff1-64ea-486b-8cb8-99dc400c279a)\n\n这个安装略慢，稍等。\n\n上面的都安装好了之后，打开VS，新建项目，选中web，即可看到asp.net core.\n如下图：\n![图五](http://7xread.com1.z0.glb.clouddn.com/aa3a9677-701e-45f0-90ea-b47b57dcb85e)\n完事....\n下次再来聊asp.net core项目...","slug":"the_first_aspnetcore","published":1,"updated":"2018-05-17T13:37:36.384Z","comments":1,"photos":[],"link":"","_id":"cjhal1fws002ip631vr4bwzm0","content":"<p>在大神的带领下体验了一下asp.net core，感觉很不错，简单写个手把手教程。</p>\n<p>环境要求：VS2015 update2，版本不限。</p>\n<p>首先到这里：<a href=\"https://www.microsoft.com/net/download\" target=\"_blank\" rel=\"noopener\">https://www.microsoft.com/net/download</a></p>\n<p>下载.NET Core Install 和SDK Install。</p>\n<p>如下图：<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/5f4576e6-6fa0-4fbb-83c9-009428480e83\" alt=\"图一\"></p>\n<p>接着无脑安装。<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/a996d00e-5aa5-4034-96ae-548e35c2ba95\" alt=\"图二\"></p>\n<p>两个都装完之后环境已经搭好了。不过在VS中还没对应的.NET Core模板。<br>我们还需要去下载一个<br><a href=\"https://go.microsoft.com/fwlink/?LinkId=798481\" target=\"_blank\" rel=\"noopener\">.NET Core Tooling Preview 1 for Visual Studio 2015</a></p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/07ec4ff1-64ea-486b-8cb8-99dc400c279a\" alt=\"图三\"></p>\n<p>这个安装略慢，稍等。</p>\n<p>上面的都安装好了之后，打开VS，新建项目，选中web，即可看到asp.net core.<br>如下图：<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/aa3a9677-701e-45f0-90ea-b47b57dcb85e\" alt=\"图五\"><br>完事….<br>下次再来聊asp.net core项目…</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在大神的带领下体验了一下asp.net core，感觉很不错，简单写个手把手教程。</p>\n<p>环境要求：VS2015 update2，版本不限。</p>\n<p>首先到这里：<a href=\"https://www.microsoft.com/net/download\" target=\"_blank\" rel=\"noopener\">https://www.microsoft.com/net/download</a></p>\n<p>下载.NET Core Install 和SDK Install。</p>\n<p>如下图：<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/5f4576e6-6fa0-4fbb-83c9-009428480e83\" alt=\"图一\"></p>\n<p>接着无脑安装。<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/a996d00e-5aa5-4034-96ae-548e35c2ba95\" alt=\"图二\"></p>\n<p>两个都装完之后环境已经搭好了。不过在VS中还没对应的.NET Core模板。<br>我们还需要去下载一个<br><a href=\"https://go.microsoft.com/fwlink/?LinkId=798481\" target=\"_blank\" rel=\"noopener\">.NET Core Tooling Preview 1 for Visual Studio 2015</a></p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/07ec4ff1-64ea-486b-8cb8-99dc400c279a\" alt=\"图三\"></p>\n<p>这个安装略慢，稍等。</p>\n<p>上面的都安装好了之后，打开VS，新建项目，选中web，即可看到asp.net core.<br>如下图：<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/aa3a9677-701e-45f0-90ea-b47b57dcb85e\" alt=\"图五\"><br>完事….<br>下次再来聊asp.net core项目…</p>\n"},{"layout":"post","title":"VS快捷键","date":"2016-10-13T16:00:00.000Z","_content":"\nctrl+s         保存（这个确实很简单，要说常用，这玩意绝对排名第一）\n\nctrl+Shift+S   保存所有VS中打开的所有文件\n\nctrl+O         打开新文件\n\nctrl+Shift+O   打开项目\n\nctrl+Shift+A   当前项目中添加新建项\n\nctrl+F4        关闭当前打开页\n\nctrl+F6        跳到下一个窗口\n\nctrl+Shift+F6  跳到前一个打开的窗口\n\nF12            转到函数定义实现处，或者转到变量定义处（一堆代码中使用这个键确实逻辑会更清晰一点）\n\nctrl+-         这个相对来说跟F12是配套使用的，F12到函数定义，然后返回原代码中继续查看\n\nshift+ctrl+-   相对于上一个步骤，这个可以再次转到函数定义的地方\n\nctrl+tab       页面切换，打开页面过多的话，切换用的还是比较多的\n\nctrl+F         搜索，查找，功能简单粗暴有的时候比很高效\n\nctrl+F3        在选中区域搜索\n\nctrl+K，ctrl+D 整个文档格式化\n\nctrl+K,ctrl+F  格式化选中部分代码\n\nctrl+K，ctrl+C  代码注释\n\nctrl+K，ctrl+U  取消代码注释\n\nctrl+L          删除，删除当前行或者删除选中行\n\nShift+Alt+Enter 当前代码区域全屏，再按一次取消全屏\n\nctrl+M，ctrl+M  写代码都喜欢折叠，折叠之后还是还要打开的，可以试试这个快捷键\n\nctrl+space      代码补全\n\nctrl+Enter      假如现在当前行上面添加代码光标跳到当前行的上一行\n\nctrl+Shift+Enter假如现在当前行下面添加代码光标跳到当前行的下一行\n\nShift+F12       查找函数或者变量的所有引用\n\nctrl+g          查找行，跳转到你想要跳转的行数\n\nctrl+Shift+↑    向上查找引用\n\nctrl+Shift+↓    向下查找引用\n\nShift+Alt+↑    向上画一条直线，通常如果拷贝代码的时候有行号可以这样去除\n\nShift+Alt+↓    向下画一条直线，同上\n\nShift+↑         向上选中代码区域\n\nShift+↓         向下选中代码区域","source":"_posts/visualstudio_shortcut_key.md","raw":"---\nlayout: post\ntitle: VS快捷键\ncategory: memorandum\ndate: 2016-10-14 00:00:00\ntags:\n- Visual Studio\n---\n\nctrl+s         保存（这个确实很简单，要说常用，这玩意绝对排名第一）\n\nctrl+Shift+S   保存所有VS中打开的所有文件\n\nctrl+O         打开新文件\n\nctrl+Shift+O   打开项目\n\nctrl+Shift+A   当前项目中添加新建项\n\nctrl+F4        关闭当前打开页\n\nctrl+F6        跳到下一个窗口\n\nctrl+Shift+F6  跳到前一个打开的窗口\n\nF12            转到函数定义实现处，或者转到变量定义处（一堆代码中使用这个键确实逻辑会更清晰一点）\n\nctrl+-         这个相对来说跟F12是配套使用的，F12到函数定义，然后返回原代码中继续查看\n\nshift+ctrl+-   相对于上一个步骤，这个可以再次转到函数定义的地方\n\nctrl+tab       页面切换，打开页面过多的话，切换用的还是比较多的\n\nctrl+F         搜索，查找，功能简单粗暴有的时候比很高效\n\nctrl+F3        在选中区域搜索\n\nctrl+K，ctrl+D 整个文档格式化\n\nctrl+K,ctrl+F  格式化选中部分代码\n\nctrl+K，ctrl+C  代码注释\n\nctrl+K，ctrl+U  取消代码注释\n\nctrl+L          删除，删除当前行或者删除选中行\n\nShift+Alt+Enter 当前代码区域全屏，再按一次取消全屏\n\nctrl+M，ctrl+M  写代码都喜欢折叠，折叠之后还是还要打开的，可以试试这个快捷键\n\nctrl+space      代码补全\n\nctrl+Enter      假如现在当前行上面添加代码光标跳到当前行的上一行\n\nctrl+Shift+Enter假如现在当前行下面添加代码光标跳到当前行的下一行\n\nShift+F12       查找函数或者变量的所有引用\n\nctrl+g          查找行，跳转到你想要跳转的行数\n\nctrl+Shift+↑    向上查找引用\n\nctrl+Shift+↓    向下查找引用\n\nShift+Alt+↑    向上画一条直线，通常如果拷贝代码的时候有行号可以这样去除\n\nShift+Alt+↓    向下画一条直线，同上\n\nShift+↑         向上选中代码区域\n\nShift+↓         向下选中代码区域","slug":"visualstudio_shortcut_key","published":1,"updated":"2018-05-17T12:41:41.174Z","comments":1,"photos":[],"link":"","_id":"cjhal1fwu002mp631bievxin7","content":"<p>ctrl+s         保存（这个确实很简单，要说常用，这玩意绝对排名第一）</p>\n<p>ctrl+Shift+S   保存所有VS中打开的所有文件</p>\n<p>ctrl+O         打开新文件</p>\n<p>ctrl+Shift+O   打开项目</p>\n<p>ctrl+Shift+A   当前项目中添加新建项</p>\n<p>ctrl+F4        关闭当前打开页</p>\n<p>ctrl+F6        跳到下一个窗口</p>\n<p>ctrl+Shift+F6  跳到前一个打开的窗口</p>\n<p>F12            转到函数定义实现处，或者转到变量定义处（一堆代码中使用这个键确实逻辑会更清晰一点）</p>\n<p>ctrl+-         这个相对来说跟F12是配套使用的，F12到函数定义，然后返回原代码中继续查看</p>\n<p>shift+ctrl+-   相对于上一个步骤，这个可以再次转到函数定义的地方</p>\n<p>ctrl+tab       页面切换，打开页面过多的话，切换用的还是比较多的</p>\n<p>ctrl+F         搜索，查找，功能简单粗暴有的时候比很高效</p>\n<p>ctrl+F3        在选中区域搜索</p>\n<p>ctrl+K，ctrl+D 整个文档格式化</p>\n<p>ctrl+K,ctrl+F  格式化选中部分代码</p>\n<p>ctrl+K，ctrl+C  代码注释</p>\n<p>ctrl+K，ctrl+U  取消代码注释</p>\n<p>ctrl+L          删除，删除当前行或者删除选中行</p>\n<p>Shift+Alt+Enter 当前代码区域全屏，再按一次取消全屏</p>\n<p>ctrl+M，ctrl+M  写代码都喜欢折叠，折叠之后还是还要打开的，可以试试这个快捷键</p>\n<p>ctrl+space      代码补全</p>\n<p>ctrl+Enter      假如现在当前行上面添加代码光标跳到当前行的上一行</p>\n<p>ctrl+Shift+Enter假如现在当前行下面添加代码光标跳到当前行的下一行</p>\n<p>Shift+F12       查找函数或者变量的所有引用</p>\n<p>ctrl+g          查找行，跳转到你想要跳转的行数</p>\n<p>ctrl+Shift+↑    向上查找引用</p>\n<p>ctrl+Shift+↓    向下查找引用</p>\n<p>Shift+Alt+↑    向上画一条直线，通常如果拷贝代码的时候有行号可以这样去除</p>\n<p>Shift+Alt+↓    向下画一条直线，同上</p>\n<p>Shift+↑         向上选中代码区域</p>\n<p>Shift+↓         向下选中代码区域</p>\n","site":{"data":{}},"excerpt":"","more":"<p>ctrl+s         保存（这个确实很简单，要说常用，这玩意绝对排名第一）</p>\n<p>ctrl+Shift+S   保存所有VS中打开的所有文件</p>\n<p>ctrl+O         打开新文件</p>\n<p>ctrl+Shift+O   打开项目</p>\n<p>ctrl+Shift+A   当前项目中添加新建项</p>\n<p>ctrl+F4        关闭当前打开页</p>\n<p>ctrl+F6        跳到下一个窗口</p>\n<p>ctrl+Shift+F6  跳到前一个打开的窗口</p>\n<p>F12            转到函数定义实现处，或者转到变量定义处（一堆代码中使用这个键确实逻辑会更清晰一点）</p>\n<p>ctrl+-         这个相对来说跟F12是配套使用的，F12到函数定义，然后返回原代码中继续查看</p>\n<p>shift+ctrl+-   相对于上一个步骤，这个可以再次转到函数定义的地方</p>\n<p>ctrl+tab       页面切换，打开页面过多的话，切换用的还是比较多的</p>\n<p>ctrl+F         搜索，查找，功能简单粗暴有的时候比很高效</p>\n<p>ctrl+F3        在选中区域搜索</p>\n<p>ctrl+K，ctrl+D 整个文档格式化</p>\n<p>ctrl+K,ctrl+F  格式化选中部分代码</p>\n<p>ctrl+K，ctrl+C  代码注释</p>\n<p>ctrl+K，ctrl+U  取消代码注释</p>\n<p>ctrl+L          删除，删除当前行或者删除选中行</p>\n<p>Shift+Alt+Enter 当前代码区域全屏，再按一次取消全屏</p>\n<p>ctrl+M，ctrl+M  写代码都喜欢折叠，折叠之后还是还要打开的，可以试试这个快捷键</p>\n<p>ctrl+space      代码补全</p>\n<p>ctrl+Enter      假如现在当前行上面添加代码光标跳到当前行的上一行</p>\n<p>ctrl+Shift+Enter假如现在当前行下面添加代码光标跳到当前行的下一行</p>\n<p>Shift+F12       查找函数或者变量的所有引用</p>\n<p>ctrl+g          查找行，跳转到你想要跳转的行数</p>\n<p>ctrl+Shift+↑    向上查找引用</p>\n<p>ctrl+Shift+↓    向下查找引用</p>\n<p>Shift+Alt+↑    向上画一条直线，通常如果拷贝代码的时候有行号可以这样去除</p>\n<p>Shift+Alt+↓    向下画一条直线，同上</p>\n<p>Shift+↑         向上选中代码区域</p>\n<p>Shift+↓         向下选中代码区域</p>\n"},{"layout":"post","title":"用Visual Studio Code Debug世界上最好的语言","date":"2017-03-16T16:00:00.000Z","_content":"# 用Visual Studio Code Debug世界上最好的语言\n\nMac用户看这里:[用Visual Studio Code Debug世界上最好的语言(Mac篇)](https://zhuanlan.zhihu.com/p/37128419)\n\n## 前言\n\n这阵子因缘巧合接手了一个辣鸡项目，是用世界上最好的拍黄片写的，项目基本是另一个小伙伴在撸码，我就兼职打杂和发布做点运维的工作。\n\n然后昨天项目上了测试版之后，一用起来Error满天飞了。让小伙伴查了很久都没有头绪，实在尴尬，只好自己动手了...\n\n作为一个后端狗，虽然知道PHP大体原理和框架，看着项目的业务逻辑也大体知道个所以然，在此之前还是没撸过代码的。\n\n看代码基本是Visual Studio Code或者HBuilder工具，本地跑代码很白痴的在用phpStudy。\n\nError出来了，第一反应就是debug咯...然后问了下小伙伴他以前怎么玩的，答曰：echo。\n\n一口老血都...\n\n查了下谷歌发现，Visual Studio Code + 插件是完全可以用来调试PHP的，所以就撸起了。\n\n## Visual Studio Code + php-debug插件 + phpStudy + xdebug\n\n### 安装Visual Studio Code\n\n首先肯定是先下载[Visual Studio Code](http://code.visualstudio.com/) 咯。\n\n安装好之后，随便在一个文件夹内鼠标“右键”，都能看到Open with code，打开之后如下图：\n\n![Open with code](http://7xread.com1.z0.glb.clouddn.com/b1cee12e-6215-4f04-9dea-3721400e238b)\n\n### 安装Visual Studio Code php-debug插件\n\n装好VS Code之后，接下来是安装一下PHP-Debug插件了。我们在插件商城搜索一下php，排名第二的PHP Debug就是我们要的插件了。\n如下图：\n![PHP-Debug](http://7xread.com1.z0.glb.clouddn.com/3f798ea9-bba9-4768-9f58-14257ddc1999)\n\n装好了之后重启一下vs code即可。\n\n### phpStudy\n\n对于我这种懒人来说，去配置什么PHP运行环境肯定是不愿意的，那么类似的集成环境有么？\n\n小伙伴和我说，你下个[phpStudy](http://www.phpstudy.net/)撸就算了，别去倒腾什么版本了。\n\n然后...\n\n![phpStudy](http://7xread.com1.z0.glb.clouddn.com/6c8ea274-9da5-4168-ba80-f6a0f6e173c3)\n\n下载好了安装完了，打开程序如下图：\n\n![phpStudy](http://7xread.com1.z0.glb.clouddn.com/7d2d12e2-783f-4402-8900-0315905c6948)\n\n看了下功能，其实这个软件就是集成了各种版本的PHP，可以方便切换PHP版本；同时自带一个Apache和MySQL，各种配置管理起来也挺方便的。\n（感觉dalao们应该不怎么会用这么白痴的东西，233...\n\n装好之后，启动一下服务，点击一下phpMyAdmin，看看它打开的网站是否能登录到本地的MySQL数据库。\n\n如果可以，说明PHP环境应该是正常的了；如果有问题，请自行谷歌了...\n\n接着切换PHP版本到意向版本，点击一下运行模式旁边的“切换版本”就可以选择版本了。\n\n### xdebug设置\n\n[xdebug](https://xdebug.org/)是什么呢？\n\n```sh\nXdebug作为PHP调试工具，提供了丰富的调试函数，\n也可将Xdebug安装配置为zend studio、editplus调试PHP的第三方插件，\n\n通过开启自动跟踪(auto_trace)和分析器功能，可以直观的看到PHP源代码的性能数据，\n以便优化PHP代码。\n\n引用自：[PHP调试工具Xdebug安装配置教程]\n(http://www.cnblogs.com/qiantuwuliang/archive/2011/01/23/1942382.html)\n\n```\n\n我们可以在[xdebug.org](https://xdebug.org/)（自备梯子）上面下载到PHP各个版本的xdebug dll使用。\n\n不过当我打开phpStudy的php-ini打算手动开启debug的时候，非常高兴得发现已经phpStudy已自带了对应版本的xdebug，而且路径都配好了。\n\nphpStudy的php.ini在“其他选项-打开配置文件-php-ini”，如下图：\n\n![php.ini](http://7xread.com1.z0.glb.clouddn.com/76b103cd-399c-4bce-a716-098adbd4d212)\n\n把文档拉到最后，看得到xdebug的配置如下：\n\n![xdebug](http://7xread.com1.z0.glb.clouddn.com/00285d82-f76f-4fd8-8ba6-f429de194809)\n\nphpStudy已经帮我们配置好xdebug dll的路径了，我们只需要手动在zend_extension上面添加远程调试和自动启动配置即可，代码如下：\n\n```\n\nxdebug.remote_enable = 1\nxdebug.remote_autostart= 1\n\n```\n\n\n完整配置如下：\n```\n[XDebug]\n;xdebug.profiler_output_dir=\"C:\\phpStudy\\tmp\\xdebug\"\n;xdebug.trace_output_dir=\"C:\\phpStudy\\tmp\\xdebug\"\nxdebug.remote_enable = 1\nxdebug.remote_autostart= 1\n;你的PHP版本的php_xdebug.dll，phpStudy自动设置的\nzend_extension=\"C:\\phpStudy\\php\\php-5.5.38\\ext\\php_xdebug.dll\"\n```\n\n保存文件，重启一下phpStudy服务。\n\n#### Visual Studio Code 设置用户配置和调试配置\n\n这个时候，我们随便在PHP文件夹中打开vs code，vs code会自动提示我们：Cannot validate since no PHP executable is set. Use the setting 'php.validate.executablePath' to configure the PHP executable.\n\n嗯，没有设置PHP执行文件，可以通过设置php.validate.executablePath属性来配置它。\n\n这个在哪配置呢？在“文件-首选项-设置”，打开之后如下图：\n\n\n![php.validate.executablePath](http://7xread.com1.z0.glb.clouddn.com/df4428e9-9ef2-435a-a5f5-ae8bade00a39)\n\n这个php.validate.executablePath对应就是当前phpStudy中运行的php.exe的路径，可以在phpStudy-其他选项菜单-打开文件位置-PHP中找到此路径。\n\n保存好了之后，回到Visual Studio Code界面，转到Debug，选择添加配置，之后选择PHP，生成如下图的launch.json：\n\n![Listen for XDebug](http://7xread.com1.z0.glb.clouddn.com/e1b74467-9142-4a2f-bf5e-89aa2c2e0127)\n\n不用改任何东西，直接开撸...\n\n#### 开启Debug\n\n确保phpStudy启动了，网站也正常运行起来了,然后在Visual Studio Code中启动调试，打上要的断点，接着启动调试。\n\n如下图：\n\n![图片描述](http://7xread.com1.z0.glb.clouddn.com/7ac86cce-edc6-49a6-abb6-44f74c55a027)\n\n接着访问你要调试的页面对应的PHP代码，打上你的断点，华丽丽的Debug出来了...\n\n![异常](http://7xread.com1.z0.glb.clouddn.com/7f7739df-02d4-47e5-8e42-67b9bd9f75ee)\n\n![命中断点](http://7xread.com1.z0.glb.clouddn.com/41913030-362c-45cb-a187-08eed7728e8c)\n\nF10单步调试，F11跳入函数，F5直接运行之类的快捷键自己玩吧。\n\n### 其他运行环境下的配置\n\n基本没什么区别，配置php.ini，下载到对应版本的xdebug.dll，php.validate.executablePath配置正确就完事。\n\n其他参考链接：\n\n1. [ 如何使用XDebug调试php](http://blog.csdn.net/ruihanchen/article/details/7705842)\n\n2. [XAMPP环境下用phpStorm+XDebug进行断点调试的配置](http://www.chenxuanyi.cn/xampp-phpstorm-xdebug.html)\n\n3. [PHPStorm下XDebug配置](http://blog.csdn.net/dc_726/article/details/9905517)\n\n\n#### PS:果然是世界上最好的语言...(逃\n\n","source":"_posts/visualstudiocode_for_php_debug.md","raw":"---\nlayout: post\ntitle: 用Visual Studio Code Debug世界上最好的语言\ncategory: Visual Studio\ndate: 2017-03-17 00:00:00\ntags:\n- Visual Studio\n- PHP\n- Debug\n---\n# 用Visual Studio Code Debug世界上最好的语言\n\nMac用户看这里:[用Visual Studio Code Debug世界上最好的语言(Mac篇)](https://zhuanlan.zhihu.com/p/37128419)\n\n## 前言\n\n这阵子因缘巧合接手了一个辣鸡项目，是用世界上最好的拍黄片写的，项目基本是另一个小伙伴在撸码，我就兼职打杂和发布做点运维的工作。\n\n然后昨天项目上了测试版之后，一用起来Error满天飞了。让小伙伴查了很久都没有头绪，实在尴尬，只好自己动手了...\n\n作为一个后端狗，虽然知道PHP大体原理和框架，看着项目的业务逻辑也大体知道个所以然，在此之前还是没撸过代码的。\n\n看代码基本是Visual Studio Code或者HBuilder工具，本地跑代码很白痴的在用phpStudy。\n\nError出来了，第一反应就是debug咯...然后问了下小伙伴他以前怎么玩的，答曰：echo。\n\n一口老血都...\n\n查了下谷歌发现，Visual Studio Code + 插件是完全可以用来调试PHP的，所以就撸起了。\n\n## Visual Studio Code + php-debug插件 + phpStudy + xdebug\n\n### 安装Visual Studio Code\n\n首先肯定是先下载[Visual Studio Code](http://code.visualstudio.com/) 咯。\n\n安装好之后，随便在一个文件夹内鼠标“右键”，都能看到Open with code，打开之后如下图：\n\n![Open with code](http://7xread.com1.z0.glb.clouddn.com/b1cee12e-6215-4f04-9dea-3721400e238b)\n\n### 安装Visual Studio Code php-debug插件\n\n装好VS Code之后，接下来是安装一下PHP-Debug插件了。我们在插件商城搜索一下php，排名第二的PHP Debug就是我们要的插件了。\n如下图：\n![PHP-Debug](http://7xread.com1.z0.glb.clouddn.com/3f798ea9-bba9-4768-9f58-14257ddc1999)\n\n装好了之后重启一下vs code即可。\n\n### phpStudy\n\n对于我这种懒人来说，去配置什么PHP运行环境肯定是不愿意的，那么类似的集成环境有么？\n\n小伙伴和我说，你下个[phpStudy](http://www.phpstudy.net/)撸就算了，别去倒腾什么版本了。\n\n然后...\n\n![phpStudy](http://7xread.com1.z0.glb.clouddn.com/6c8ea274-9da5-4168-ba80-f6a0f6e173c3)\n\n下载好了安装完了，打开程序如下图：\n\n![phpStudy](http://7xread.com1.z0.glb.clouddn.com/7d2d12e2-783f-4402-8900-0315905c6948)\n\n看了下功能，其实这个软件就是集成了各种版本的PHP，可以方便切换PHP版本；同时自带一个Apache和MySQL，各种配置管理起来也挺方便的。\n（感觉dalao们应该不怎么会用这么白痴的东西，233...\n\n装好之后，启动一下服务，点击一下phpMyAdmin，看看它打开的网站是否能登录到本地的MySQL数据库。\n\n如果可以，说明PHP环境应该是正常的了；如果有问题，请自行谷歌了...\n\n接着切换PHP版本到意向版本，点击一下运行模式旁边的“切换版本”就可以选择版本了。\n\n### xdebug设置\n\n[xdebug](https://xdebug.org/)是什么呢？\n\n```sh\nXdebug作为PHP调试工具，提供了丰富的调试函数，\n也可将Xdebug安装配置为zend studio、editplus调试PHP的第三方插件，\n\n通过开启自动跟踪(auto_trace)和分析器功能，可以直观的看到PHP源代码的性能数据，\n以便优化PHP代码。\n\n引用自：[PHP调试工具Xdebug安装配置教程]\n(http://www.cnblogs.com/qiantuwuliang/archive/2011/01/23/1942382.html)\n\n```\n\n我们可以在[xdebug.org](https://xdebug.org/)（自备梯子）上面下载到PHP各个版本的xdebug dll使用。\n\n不过当我打开phpStudy的php-ini打算手动开启debug的时候，非常高兴得发现已经phpStudy已自带了对应版本的xdebug，而且路径都配好了。\n\nphpStudy的php.ini在“其他选项-打开配置文件-php-ini”，如下图：\n\n![php.ini](http://7xread.com1.z0.glb.clouddn.com/76b103cd-399c-4bce-a716-098adbd4d212)\n\n把文档拉到最后，看得到xdebug的配置如下：\n\n![xdebug](http://7xread.com1.z0.glb.clouddn.com/00285d82-f76f-4fd8-8ba6-f429de194809)\n\nphpStudy已经帮我们配置好xdebug dll的路径了，我们只需要手动在zend_extension上面添加远程调试和自动启动配置即可，代码如下：\n\n```\n\nxdebug.remote_enable = 1\nxdebug.remote_autostart= 1\n\n```\n\n\n完整配置如下：\n```\n[XDebug]\n;xdebug.profiler_output_dir=\"C:\\phpStudy\\tmp\\xdebug\"\n;xdebug.trace_output_dir=\"C:\\phpStudy\\tmp\\xdebug\"\nxdebug.remote_enable = 1\nxdebug.remote_autostart= 1\n;你的PHP版本的php_xdebug.dll，phpStudy自动设置的\nzend_extension=\"C:\\phpStudy\\php\\php-5.5.38\\ext\\php_xdebug.dll\"\n```\n\n保存文件，重启一下phpStudy服务。\n\n#### Visual Studio Code 设置用户配置和调试配置\n\n这个时候，我们随便在PHP文件夹中打开vs code，vs code会自动提示我们：Cannot validate since no PHP executable is set. Use the setting 'php.validate.executablePath' to configure the PHP executable.\n\n嗯，没有设置PHP执行文件，可以通过设置php.validate.executablePath属性来配置它。\n\n这个在哪配置呢？在“文件-首选项-设置”，打开之后如下图：\n\n\n![php.validate.executablePath](http://7xread.com1.z0.glb.clouddn.com/df4428e9-9ef2-435a-a5f5-ae8bade00a39)\n\n这个php.validate.executablePath对应就是当前phpStudy中运行的php.exe的路径，可以在phpStudy-其他选项菜单-打开文件位置-PHP中找到此路径。\n\n保存好了之后，回到Visual Studio Code界面，转到Debug，选择添加配置，之后选择PHP，生成如下图的launch.json：\n\n![Listen for XDebug](http://7xread.com1.z0.glb.clouddn.com/e1b74467-9142-4a2f-bf5e-89aa2c2e0127)\n\n不用改任何东西，直接开撸...\n\n#### 开启Debug\n\n确保phpStudy启动了，网站也正常运行起来了,然后在Visual Studio Code中启动调试，打上要的断点，接着启动调试。\n\n如下图：\n\n![图片描述](http://7xread.com1.z0.glb.clouddn.com/7ac86cce-edc6-49a6-abb6-44f74c55a027)\n\n接着访问你要调试的页面对应的PHP代码，打上你的断点，华丽丽的Debug出来了...\n\n![异常](http://7xread.com1.z0.glb.clouddn.com/7f7739df-02d4-47e5-8e42-67b9bd9f75ee)\n\n![命中断点](http://7xread.com1.z0.glb.clouddn.com/41913030-362c-45cb-a187-08eed7728e8c)\n\nF10单步调试，F11跳入函数，F5直接运行之类的快捷键自己玩吧。\n\n### 其他运行环境下的配置\n\n基本没什么区别，配置php.ini，下载到对应版本的xdebug.dll，php.validate.executablePath配置正确就完事。\n\n其他参考链接：\n\n1. [ 如何使用XDebug调试php](http://blog.csdn.net/ruihanchen/article/details/7705842)\n\n2. [XAMPP环境下用phpStorm+XDebug进行断点调试的配置](http://www.chenxuanyi.cn/xampp-phpstorm-xdebug.html)\n\n3. [PHPStorm下XDebug配置](http://blog.csdn.net/dc_726/article/details/9905517)\n\n\n#### PS:果然是世界上最好的语言...(逃\n\n","slug":"visualstudiocode_for_php_debug","published":1,"updated":"2018-05-21T14:51:51.290Z","_id":"cjhal1fwv002qp631echwdufc","comments":1,"photos":[],"link":"","content":"<h1 id=\"用Visual-Studio-Code-Debug世界上最好的语言\"><a href=\"#用Visual-Studio-Code-Debug世界上最好的语言\" class=\"headerlink\" title=\"用Visual Studio Code Debug世界上最好的语言\"></a>用Visual Studio Code Debug世界上最好的语言</h1><p>Mac用户看这里:<a href=\"https://zhuanlan.zhihu.com/p/37128419\" target=\"_blank\" rel=\"noopener\">用Visual Studio Code Debug世界上最好的语言(Mac篇)</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>这阵子因缘巧合接手了一个辣鸡项目，是用世界上最好的拍黄片写的，项目基本是另一个小伙伴在撸码，我就兼职打杂和发布做点运维的工作。</p>\n<p>然后昨天项目上了测试版之后，一用起来Error满天飞了。让小伙伴查了很久都没有头绪，实在尴尬，只好自己动手了…</p>\n<p>作为一个后端狗，虽然知道PHP大体原理和框架，看着项目的业务逻辑也大体知道个所以然，在此之前还是没撸过代码的。</p>\n<p>看代码基本是Visual Studio Code或者HBuilder工具，本地跑代码很白痴的在用phpStudy。</p>\n<p>Error出来了，第一反应就是debug咯…然后问了下小伙伴他以前怎么玩的，答曰：echo。</p>\n<p>一口老血都…</p>\n<p>查了下谷歌发现，Visual Studio Code + 插件是完全可以用来调试PHP的，所以就撸起了。</p>\n<h2 id=\"Visual-Studio-Code-php-debug插件-phpStudy-xdebug\"><a href=\"#Visual-Studio-Code-php-debug插件-phpStudy-xdebug\" class=\"headerlink\" title=\"Visual Studio Code + php-debug插件 + phpStudy + xdebug\"></a>Visual Studio Code + php-debug插件 + phpStudy + xdebug</h2><h3 id=\"安装Visual-Studio-Code\"><a href=\"#安装Visual-Studio-Code\" class=\"headerlink\" title=\"安装Visual Studio Code\"></a>安装Visual Studio Code</h3><p>首先肯定是先下载<a href=\"http://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">Visual Studio Code</a> 咯。</p>\n<p>安装好之后，随便在一个文件夹内鼠标“右键”，都能看到Open with code，打开之后如下图：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/b1cee12e-6215-4f04-9dea-3721400e238b\" alt=\"Open with code\"></p>\n<h3 id=\"安装Visual-Studio-Code-php-debug插件\"><a href=\"#安装Visual-Studio-Code-php-debug插件\" class=\"headerlink\" title=\"安装Visual Studio Code php-debug插件\"></a>安装Visual Studio Code php-debug插件</h3><p>装好VS Code之后，接下来是安装一下PHP-Debug插件了。我们在插件商城搜索一下php，排名第二的PHP Debug就是我们要的插件了。<br>如下图：<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/3f798ea9-bba9-4768-9f58-14257ddc1999\" alt=\"PHP-Debug\"></p>\n<p>装好了之后重启一下vs code即可。</p>\n<h3 id=\"phpStudy\"><a href=\"#phpStudy\" class=\"headerlink\" title=\"phpStudy\"></a>phpStudy</h3><p>对于我这种懒人来说，去配置什么PHP运行环境肯定是不愿意的，那么类似的集成环境有么？</p>\n<p>小伙伴和我说，你下个<a href=\"http://www.phpstudy.net/\" target=\"_blank\" rel=\"noopener\">phpStudy</a>撸就算了，别去倒腾什么版本了。</p>\n<p>然后…</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/6c8ea274-9da5-4168-ba80-f6a0f6e173c3\" alt=\"phpStudy\"></p>\n<p>下载好了安装完了，打开程序如下图：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/7d2d12e2-783f-4402-8900-0315905c6948\" alt=\"phpStudy\"></p>\n<p>看了下功能，其实这个软件就是集成了各种版本的PHP，可以方便切换PHP版本；同时自带一个Apache和MySQL，各种配置管理起来也挺方便的。<br>（感觉dalao们应该不怎么会用这么白痴的东西，233…</p>\n<p>装好之后，启动一下服务，点击一下phpMyAdmin，看看它打开的网站是否能登录到本地的MySQL数据库。</p>\n<p>如果可以，说明PHP环境应该是正常的了；如果有问题，请自行谷歌了…</p>\n<p>接着切换PHP版本到意向版本，点击一下运行模式旁边的“切换版本”就可以选择版本了。</p>\n<h3 id=\"xdebug设置\"><a href=\"#xdebug设置\" class=\"headerlink\" title=\"xdebug设置\"></a>xdebug设置</h3><p><a href=\"https://xdebug.org/\" target=\"_blank\" rel=\"noopener\">xdebug</a>是什么呢？</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Xdebug作为PHP调试工具，提供了丰富的调试函数，</span><br><span class=\"line\">也可将Xdebug安装配置为zend studio、editplus调试PHP的第三方插件，</span><br><span class=\"line\"></span><br><span class=\"line\">通过开启自动跟踪(auto_trace)和分析器功能，可以直观的看到PHP源代码的性能数据，</span><br><span class=\"line\">以便优化PHP代码。</span><br><span class=\"line\"></span><br><span class=\"line\">引用自：[PHP调试工具Xdebug安装配置教程]</span><br><span class=\"line\">(http://www.cnblogs.com/qiantuwuliang/archive/2011/01/23/1942382.html)</span><br></pre></td></tr></table></figure>\n<p>我们可以在<a href=\"https://xdebug.org/\" target=\"_blank\" rel=\"noopener\">xdebug.org</a>（自备梯子）上面下载到PHP各个版本的xdebug dll使用。</p>\n<p>不过当我打开phpStudy的php-ini打算手动开启debug的时候，非常高兴得发现已经phpStudy已自带了对应版本的xdebug，而且路径都配好了。</p>\n<p>phpStudy的php.ini在“其他选项-打开配置文件-php-ini”，如下图：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/76b103cd-399c-4bce-a716-098adbd4d212\" alt=\"php.ini\"></p>\n<p>把文档拉到最后，看得到xdebug的配置如下：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/00285d82-f76f-4fd8-8ba6-f429de194809\" alt=\"xdebug\"></p>\n<p>phpStudy已经帮我们配置好xdebug dll的路径了，我们只需要手动在zend_extension上面添加远程调试和自动启动配置即可，代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">xdebug.remote_enable = 1</span><br><span class=\"line\">xdebug.remote_autostart= 1</span><br></pre></td></tr></table></figure>\n<p>完整配置如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[XDebug]</span><br><span class=\"line\">;xdebug.profiler_output_dir=&quot;C:\\phpStudy\\tmp\\xdebug&quot;</span><br><span class=\"line\">;xdebug.trace_output_dir=&quot;C:\\phpStudy\\tmp\\xdebug&quot;</span><br><span class=\"line\">xdebug.remote_enable = 1</span><br><span class=\"line\">xdebug.remote_autostart= 1</span><br><span class=\"line\">;你的PHP版本的php_xdebug.dll，phpStudy自动设置的</span><br><span class=\"line\">zend_extension=&quot;C:\\phpStudy\\php\\php-5.5.38\\ext\\php_xdebug.dll&quot;</span><br></pre></td></tr></table></figure></p>\n<p>保存文件，重启一下phpStudy服务。</p>\n<h4 id=\"Visual-Studio-Code-设置用户配置和调试配置\"><a href=\"#Visual-Studio-Code-设置用户配置和调试配置\" class=\"headerlink\" title=\"Visual Studio Code 设置用户配置和调试配置\"></a>Visual Studio Code 设置用户配置和调试配置</h4><p>这个时候，我们随便在PHP文件夹中打开vs code，vs code会自动提示我们：Cannot validate since no PHP executable is set. Use the setting ‘php.validate.executablePath’ to configure the PHP executable.</p>\n<p>嗯，没有设置PHP执行文件，可以通过设置php.validate.executablePath属性来配置它。</p>\n<p>这个在哪配置呢？在“文件-首选项-设置”，打开之后如下图：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/df4428e9-9ef2-435a-a5f5-ae8bade00a39\" alt=\"php.validate.executablePath\"></p>\n<p>这个php.validate.executablePath对应就是当前phpStudy中运行的php.exe的路径，可以在phpStudy-其他选项菜单-打开文件位置-PHP中找到此路径。</p>\n<p>保存好了之后，回到Visual Studio Code界面，转到Debug，选择添加配置，之后选择PHP，生成如下图的launch.json：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/e1b74467-9142-4a2f-bf5e-89aa2c2e0127\" alt=\"Listen for XDebug\"></p>\n<p>不用改任何东西，直接开撸…</p>\n<h4 id=\"开启Debug\"><a href=\"#开启Debug\" class=\"headerlink\" title=\"开启Debug\"></a>开启Debug</h4><p>确保phpStudy启动了，网站也正常运行起来了,然后在Visual Studio Code中启动调试，打上要的断点，接着启动调试。</p>\n<p>如下图：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/7ac86cce-edc6-49a6-abb6-44f74c55a027\" alt=\"图片描述\"></p>\n<p>接着访问你要调试的页面对应的PHP代码，打上你的断点，华丽丽的Debug出来了…</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/7f7739df-02d4-47e5-8e42-67b9bd9f75ee\" alt=\"异常\"></p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/41913030-362c-45cb-a187-08eed7728e8c\" alt=\"命中断点\"></p>\n<p>F10单步调试，F11跳入函数，F5直接运行之类的快捷键自己玩吧。</p>\n<h3 id=\"其他运行环境下的配置\"><a href=\"#其他运行环境下的配置\" class=\"headerlink\" title=\"其他运行环境下的配置\"></a>其他运行环境下的配置</h3><p>基本没什么区别，配置php.ini，下载到对应版本的xdebug.dll，php.validate.executablePath配置正确就完事。</p>\n<p>其他参考链接：</p>\n<ol>\n<li><p><a href=\"http://blog.csdn.net/ruihanchen/article/details/7705842\" target=\"_blank\" rel=\"noopener\"> 如何使用XDebug调试php</a></p>\n</li>\n<li><p><a href=\"http://www.chenxuanyi.cn/xampp-phpstorm-xdebug.html\" target=\"_blank\" rel=\"noopener\">XAMPP环境下用phpStorm+XDebug进行断点调试的配置</a></p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/dc_726/article/details/9905517\" target=\"_blank\" rel=\"noopener\">PHPStorm下XDebug配置</a></p>\n</li>\n</ol>\n<h4 id=\"PS-果然是世界上最好的语言…-逃\"><a href=\"#PS-果然是世界上最好的语言…-逃\" class=\"headerlink\" title=\"PS:果然是世界上最好的语言…(逃\"></a>PS:果然是世界上最好的语言…(逃</h4>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"用Visual-Studio-Code-Debug世界上最好的语言\"><a href=\"#用Visual-Studio-Code-Debug世界上最好的语言\" class=\"headerlink\" title=\"用Visual Studio Code Debug世界上最好的语言\"></a>用Visual Studio Code Debug世界上最好的语言</h1><p>Mac用户看这里:<a href=\"https://zhuanlan.zhihu.com/p/37128419\" target=\"_blank\" rel=\"noopener\">用Visual Studio Code Debug世界上最好的语言(Mac篇)</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>这阵子因缘巧合接手了一个辣鸡项目，是用世界上最好的拍黄片写的，项目基本是另一个小伙伴在撸码，我就兼职打杂和发布做点运维的工作。</p>\n<p>然后昨天项目上了测试版之后，一用起来Error满天飞了。让小伙伴查了很久都没有头绪，实在尴尬，只好自己动手了…</p>\n<p>作为一个后端狗，虽然知道PHP大体原理和框架，看着项目的业务逻辑也大体知道个所以然，在此之前还是没撸过代码的。</p>\n<p>看代码基本是Visual Studio Code或者HBuilder工具，本地跑代码很白痴的在用phpStudy。</p>\n<p>Error出来了，第一反应就是debug咯…然后问了下小伙伴他以前怎么玩的，答曰：echo。</p>\n<p>一口老血都…</p>\n<p>查了下谷歌发现，Visual Studio Code + 插件是完全可以用来调试PHP的，所以就撸起了。</p>\n<h2 id=\"Visual-Studio-Code-php-debug插件-phpStudy-xdebug\"><a href=\"#Visual-Studio-Code-php-debug插件-phpStudy-xdebug\" class=\"headerlink\" title=\"Visual Studio Code + php-debug插件 + phpStudy + xdebug\"></a>Visual Studio Code + php-debug插件 + phpStudy + xdebug</h2><h3 id=\"安装Visual-Studio-Code\"><a href=\"#安装Visual-Studio-Code\" class=\"headerlink\" title=\"安装Visual Studio Code\"></a>安装Visual Studio Code</h3><p>首先肯定是先下载<a href=\"http://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">Visual Studio Code</a> 咯。</p>\n<p>安装好之后，随便在一个文件夹内鼠标“右键”，都能看到Open with code，打开之后如下图：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/b1cee12e-6215-4f04-9dea-3721400e238b\" alt=\"Open with code\"></p>\n<h3 id=\"安装Visual-Studio-Code-php-debug插件\"><a href=\"#安装Visual-Studio-Code-php-debug插件\" class=\"headerlink\" title=\"安装Visual Studio Code php-debug插件\"></a>安装Visual Studio Code php-debug插件</h3><p>装好VS Code之后，接下来是安装一下PHP-Debug插件了。我们在插件商城搜索一下php，排名第二的PHP Debug就是我们要的插件了。<br>如下图：<br><img src=\"http://7xread.com1.z0.glb.clouddn.com/3f798ea9-bba9-4768-9f58-14257ddc1999\" alt=\"PHP-Debug\"></p>\n<p>装好了之后重启一下vs code即可。</p>\n<h3 id=\"phpStudy\"><a href=\"#phpStudy\" class=\"headerlink\" title=\"phpStudy\"></a>phpStudy</h3><p>对于我这种懒人来说，去配置什么PHP运行环境肯定是不愿意的，那么类似的集成环境有么？</p>\n<p>小伙伴和我说，你下个<a href=\"http://www.phpstudy.net/\" target=\"_blank\" rel=\"noopener\">phpStudy</a>撸就算了，别去倒腾什么版本了。</p>\n<p>然后…</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/6c8ea274-9da5-4168-ba80-f6a0f6e173c3\" alt=\"phpStudy\"></p>\n<p>下载好了安装完了，打开程序如下图：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/7d2d12e2-783f-4402-8900-0315905c6948\" alt=\"phpStudy\"></p>\n<p>看了下功能，其实这个软件就是集成了各种版本的PHP，可以方便切换PHP版本；同时自带一个Apache和MySQL，各种配置管理起来也挺方便的。<br>（感觉dalao们应该不怎么会用这么白痴的东西，233…</p>\n<p>装好之后，启动一下服务，点击一下phpMyAdmin，看看它打开的网站是否能登录到本地的MySQL数据库。</p>\n<p>如果可以，说明PHP环境应该是正常的了；如果有问题，请自行谷歌了…</p>\n<p>接着切换PHP版本到意向版本，点击一下运行模式旁边的“切换版本”就可以选择版本了。</p>\n<h3 id=\"xdebug设置\"><a href=\"#xdebug设置\" class=\"headerlink\" title=\"xdebug设置\"></a>xdebug设置</h3><p><a href=\"https://xdebug.org/\" target=\"_blank\" rel=\"noopener\">xdebug</a>是什么呢？</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Xdebug作为PHP调试工具，提供了丰富的调试函数，</span><br><span class=\"line\">也可将Xdebug安装配置为zend studio、editplus调试PHP的第三方插件，</span><br><span class=\"line\"></span><br><span class=\"line\">通过开启自动跟踪(auto_trace)和分析器功能，可以直观的看到PHP源代码的性能数据，</span><br><span class=\"line\">以便优化PHP代码。</span><br><span class=\"line\"></span><br><span class=\"line\">引用自：[PHP调试工具Xdebug安装配置教程]</span><br><span class=\"line\">(http://www.cnblogs.com/qiantuwuliang/archive/2011/01/23/1942382.html)</span><br></pre></td></tr></table></figure>\n<p>我们可以在<a href=\"https://xdebug.org/\" target=\"_blank\" rel=\"noopener\">xdebug.org</a>（自备梯子）上面下载到PHP各个版本的xdebug dll使用。</p>\n<p>不过当我打开phpStudy的php-ini打算手动开启debug的时候，非常高兴得发现已经phpStudy已自带了对应版本的xdebug，而且路径都配好了。</p>\n<p>phpStudy的php.ini在“其他选项-打开配置文件-php-ini”，如下图：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/76b103cd-399c-4bce-a716-098adbd4d212\" alt=\"php.ini\"></p>\n<p>把文档拉到最后，看得到xdebug的配置如下：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/00285d82-f76f-4fd8-8ba6-f429de194809\" alt=\"xdebug\"></p>\n<p>phpStudy已经帮我们配置好xdebug dll的路径了，我们只需要手动在zend_extension上面添加远程调试和自动启动配置即可，代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">xdebug.remote_enable = 1</span><br><span class=\"line\">xdebug.remote_autostart= 1</span><br></pre></td></tr></table></figure>\n<p>完整配置如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[XDebug]</span><br><span class=\"line\">;xdebug.profiler_output_dir=&quot;C:\\phpStudy\\tmp\\xdebug&quot;</span><br><span class=\"line\">;xdebug.trace_output_dir=&quot;C:\\phpStudy\\tmp\\xdebug&quot;</span><br><span class=\"line\">xdebug.remote_enable = 1</span><br><span class=\"line\">xdebug.remote_autostart= 1</span><br><span class=\"line\">;你的PHP版本的php_xdebug.dll，phpStudy自动设置的</span><br><span class=\"line\">zend_extension=&quot;C:\\phpStudy\\php\\php-5.5.38\\ext\\php_xdebug.dll&quot;</span><br></pre></td></tr></table></figure></p>\n<p>保存文件，重启一下phpStudy服务。</p>\n<h4 id=\"Visual-Studio-Code-设置用户配置和调试配置\"><a href=\"#Visual-Studio-Code-设置用户配置和调试配置\" class=\"headerlink\" title=\"Visual Studio Code 设置用户配置和调试配置\"></a>Visual Studio Code 设置用户配置和调试配置</h4><p>这个时候，我们随便在PHP文件夹中打开vs code，vs code会自动提示我们：Cannot validate since no PHP executable is set. Use the setting ‘php.validate.executablePath’ to configure the PHP executable.</p>\n<p>嗯，没有设置PHP执行文件，可以通过设置php.validate.executablePath属性来配置它。</p>\n<p>这个在哪配置呢？在“文件-首选项-设置”，打开之后如下图：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/df4428e9-9ef2-435a-a5f5-ae8bade00a39\" alt=\"php.validate.executablePath\"></p>\n<p>这个php.validate.executablePath对应就是当前phpStudy中运行的php.exe的路径，可以在phpStudy-其他选项菜单-打开文件位置-PHP中找到此路径。</p>\n<p>保存好了之后，回到Visual Studio Code界面，转到Debug，选择添加配置，之后选择PHP，生成如下图的launch.json：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/e1b74467-9142-4a2f-bf5e-89aa2c2e0127\" alt=\"Listen for XDebug\"></p>\n<p>不用改任何东西，直接开撸…</p>\n<h4 id=\"开启Debug\"><a href=\"#开启Debug\" class=\"headerlink\" title=\"开启Debug\"></a>开启Debug</h4><p>确保phpStudy启动了，网站也正常运行起来了,然后在Visual Studio Code中启动调试，打上要的断点，接着启动调试。</p>\n<p>如下图：</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/7ac86cce-edc6-49a6-abb6-44f74c55a027\" alt=\"图片描述\"></p>\n<p>接着访问你要调试的页面对应的PHP代码，打上你的断点，华丽丽的Debug出来了…</p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/7f7739df-02d4-47e5-8e42-67b9bd9f75ee\" alt=\"异常\"></p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/41913030-362c-45cb-a187-08eed7728e8c\" alt=\"命中断点\"></p>\n<p>F10单步调试，F11跳入函数，F5直接运行之类的快捷键自己玩吧。</p>\n<h3 id=\"其他运行环境下的配置\"><a href=\"#其他运行环境下的配置\" class=\"headerlink\" title=\"其他运行环境下的配置\"></a>其他运行环境下的配置</h3><p>基本没什么区别，配置php.ini，下载到对应版本的xdebug.dll，php.validate.executablePath配置正确就完事。</p>\n<p>其他参考链接：</p>\n<ol>\n<li><p><a href=\"http://blog.csdn.net/ruihanchen/article/details/7705842\" target=\"_blank\" rel=\"noopener\"> 如何使用XDebug调试php</a></p>\n</li>\n<li><p><a href=\"http://www.chenxuanyi.cn/xampp-phpstorm-xdebug.html\" target=\"_blank\" rel=\"noopener\">XAMPP环境下用phpStorm+XDebug进行断点调试的配置</a></p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/dc_726/article/details/9905517\" target=\"_blank\" rel=\"noopener\">PHPStorm下XDebug配置</a></p>\n</li>\n</ol>\n<h4 id=\"PS-果然是世界上最好的语言…-逃\"><a href=\"#PS-果然是世界上最好的语言…-逃\" class=\"headerlink\" title=\"PS:果然是世界上最好的语言…(逃\"></a>PS:果然是世界上最好的语言…(逃</h4>"},{"layout":"post","title":"ASP.NET MVC 微信JS-SDK认证","date":"2016-10-31T16:00:00.000Z","_content":"# ASP.NET MVC 微信JS-SDK认证\n\n## 写在前面\n\n前阵子因为有个项目需要做微信自定义分享功能，因而去研究了下微信JS-SDK相关知识。\n\n此文做个简单的记(tu)录(cao)...\n\n## 开始\n\n所有的东西都从文档开始:[微信JSSDK说明文档](http://mp.weixin.qq.com/wiki/11/74ad127cc054f6b80759c40f77ec03db.html)\n\n![分享接口](http://7xread.com1.z0.glb.clouddn.com/44b1232e-9311-4abb-9200-6dd4936d7c47)\n\n项目需要用到的是[分享接口](http://mp.weixin.qq.com/wiki/11/74ad127cc054f6b80759c40f77ec03db.html#.E5.88.86.E4.BA.AB.E6.8E.A5.E5.8F.A3) 不过使用微信JS-SDK之前，需要做JS接口认证。\n\n认证如下：\n\n步骤一：绑定域名\n\n步骤二：引入JS文件\n\n步骤三：通过config接口注入权限验证配置\n\n步骤四：通过ready接口处理成功验证\n\n步骤五：通过error接口处理失败验证\n\n步骤一中允许使用域名/子域名，只要xx.com/xxx.txt或者xx.com/mp/xxx.txt能访问就好。域名认证通过之后，此域名下的所有端口的网站都可以使用JS-SDK。\n\n步骤二没什么问题，略过。\n\n步骤三最磨人，下面单独讲解。\n\n### config接口注入权限验证配置\n\n先来一段说明：\n\n所有需要使用JS-SDK的页面必须先注入配置信息，否则将无法调用\n（同一个url仅需调用一次，对于变化url的SPA的web app可在每次url变化时进行调用,\n目前Android微信客户端不支持pushState的H5新特性，\n所以使用pushState来实现web app的页面会导致签名失败，此问题会在Android6.2中修复）。\n\n```javascript\nwx.config({\n    debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，\n    //若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。\n    appId: '', // 必填，公众号的唯一标识\n    timestamp: , // 必填，生成签名的时间戳\n    nonceStr: '', // 必填，生成签名的随机串\n    signature: '',// 必填，签名，见附录1\n    jsApiList: [] // 必填，需要使用的JS接口列表，所有JS接口列表见附录2\n});\n```\n\n看到这里肯定懵逼了，这是都什么鬼...怎么玩啊。\n\n提示我们去看附录1...看完之后总结如下：\n\n1. 使用config接口注入权限验证配置，重点是生成合法的signatrue\n2. 生成signature需要通过appid和secret获取token\n3. 时间戳和调用接口URL必不可少\n4. 此操作需要服务端完成，不能使用客户端实现\n\n整个过程变成：\n\n1. 通过appid和secret获取access_token，接着使用token获取jsapi_ticket；\n\n2. 拿到jsapi_ticket之后，把jsapi_ticket、时间戳、随机字符串、接口调用页面URL 拼接成完整字符串，使用sha1算法加密得到signature。\n\n3. 最后返回至页面，在wx.config里面填入appid，上一步的时间戳timestamp，上一部的随机字符串、sha1拿到的signature，想要使用的JS接口。\n\n废话少说，直接上代码吧。\n\n### 代码时间\n\n```csharp\n    public class WeiXinController : Controller\n    {\n        public static readonly string appid =\n        System.Web.Configuration.WebConfigurationManager.AppSettings[\"wxappid\"];\n\n        public static readonly string secret =\n        System.Web.Configuration.WebConfigurationManager.AppSettings[\"wxsecret\"];\n\n        public static readonly bool isDedug =\n        System.Web.Configuration.WebConfigurationManager.AppSettings[\"IsDebug\"] ==\"true\";\n\n\n        public static string _ticket = \"\";\n\n        public static DateTime _lastTimestamp;\n\n\n        public ActionResult Info(string url,string noncestr)\n        {\n            if (string.IsNullOrEmpty(_ticket) || \n            _lastTimestamp == null || (_lastTimestamp - DateTime.Now).Milliseconds > 7200)\n            {\n                var resultString = HTTPHelper.GetHTMLByURL(\"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=\"\n                    + appid + \"&secret=\" + secret);\n                dynamic resultValue = JsonConvert.DeserializeObject<dynamic>(resultString);\n                if (resultValue == null || resultValue.access_token == null \n                || resultValue.access_token.Value == null)\n                {\n                    return Json(new { issuccess = false, \n                    error = \"获取token失败\" });\n                }\n                var token = resultValue.access_token.Value;\n\n                resultString = HTTPHelper.GetHTMLByURL\n                (\"https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=\" + \n                token + \"&type=jsapi\");\n                dynamic ticketValue = JsonConvert.DeserializeObject<dynamic>(resultString);\n                if (ticketValue == null || ticketValue.errcode == null\n                || ticketValue.errcode.Value != 0 || ticketValue.ticket == null)\n                    return Json(new { issuccess = false,\n                    error = \"获取ticketValue失败\" });\n                _ticket = ticketValue.ticket.Value;\n                _lastTimestamp = DateTime.Now;\n                var timestamp = GetTimeStamp();\n                var hexString = string.Format(\"jsapi_ticket={0}&noncestr={3}&timestamp={1}&url={2}\",\n                _ticket, timestamp, url,noncestr);\n\n                return Json(new {\n                    issuccess = true, \n                    sha1value = GetSHA1Value(hexString), \n                    timestamp = timestamp, \n                    url = url, \n                    appid = appid, \n                    debug=isDedug,\n                    tiket=_ticket\n                });\n            }\n            else\n            {\n                var timestamp = GetTimeStamp();\n                var hexString = string.Format(\"jsapi_ticket={0}&noncestr=1234567890123456&timestamp={1}&url={2}\",\n                   _ticket, timestamp, url);\n                return Json(new { \n                    issuccess = true, sha1value = GetSHA1Value(hexString),\n                    timestamp = timestamp, url = url,\n                    appid = appid, debug = isDedug,tiket = _ticket\n                });\n            }\n        }\n\n\n        private string GetSHA1Value(string sourceString)\n        {\n            var hash = SHA1.Create().ComputeHash(Encoding.UTF8.GetBytes(sourceString));\n            return string.Join(\"\", \n            hash.Select(b => b.ToString(\"x2\")).ToArray());\n        }\n\n        private static string GetTimeStamp()\n        {\n\n            TimeSpan ts = DateTime.Now - new DateTime(1970, 1, 1, 0, 0, 0, 0);\n\n            return Convert.ToInt64(ts.TotalSeconds).ToString();\n\n        }\n\n    }\n\n    public class HTTPHelper\n    {\n        public static string GetHTMLByURL(string url)\n        {\n            string htmlCode = string.Empty;\n            try\n            {\n                HttpWebRequest webRequest = (System.Net.HttpWebRequest)System.Net.WebRequest.Create(url);\n                webRequest.Timeout = 30000;\n                webRequest.Method = \"GET\";\n                webRequest.UserAgent = \"Mozilla/4.0\";\n                webRequest.Headers.Add(\"Accept-Encoding\", \"gzip, deflate\");\n                HttpWebResponse webResponse = (System.Net.HttpWebResponse)webRequest.GetResponse();\n                //获取目标网站的编码格式\n                string contentype = webResponse.Headers[\"Content-Type\"];\n                Regex regex = new Regex(\"charset\\\\s*=\\\\s*[\\\\W]?\\\\s*([\\\\w-]+)\", RegexOptions.IgnoreCase);\n                if (webResponse.ContentEncoding.ToLower() == \"gzip\")//如果使用了GZip则先解压\n                {\n                    using (System.IO.Stream streamReceive = webResponse.GetResponseStream())\n                    {\n                        using (var zipStream = new System.IO.Compression.GZipStream(streamReceive, System.IO.Compression.CompressionMode.Decompress))\n                        {\n                            //匹配编码格式\n                            if (regex.IsMatch(contentype))\n                            {\n                                Encoding ending = Encoding.GetEncoding\n                                (regex.Match(contentype).Groups[1].Value.Trim());\n                                using (StreamReader sr = new System.IO.StreamReader(zipStream, ending))\n                                {\n                                    htmlCode = sr.ReadToEnd();\n                                }\n                            }\n                            else\n                            {\n                                using (StreamReader sr = new System.IO.StreamReader(zipStream, Encoding.UTF8))\n                                {\n                                    htmlCode = sr.ReadToEnd();\n                                }\n                            }\n                        }\n                    }\n                }\n                else\n                {\n                    using (System.IO.Stream streamReceive = webResponse.GetResponseStream())\n                    {\n                        var encoding = Encoding.Default;\n                        if (contentype.Contains(\"utf\"))\n                            encoding = Encoding.UTF8;\n                        using (System.IO.StreamReader sr = new System.IO.StreamReader(streamReceive, encoding))\n                        {\n                            htmlCode = sr.ReadToEnd();\n                        }\n\n                    }\n                }\n                return htmlCode;\n            }\n            catch (Exception ex)\n            {\n                return \"\";\n            }\n        }\n    }\n\n```\n\nPS：这里要注意缓存一下_ticket（即access_token），照微信文档说的，access_token两个小时内有效，不需要频繁调用。而且获取access_token的接口有调用次数的限制，如果超过了次数，就不允许调用了。\n\nPPS:建议noncestr和URL由前台传入比较适合，使用 var theWebUrl = window.location.href.split('#')[0] 获取URL，noncestr就随意了。\n\nPPPS:遇到诡异的invalid signature的时候，首先检查url参数，然后检查noncestr，再不行重启一下程序获取一个新的token回来继续玩。\n","source":"_posts/webchat_JS_SDK.md","raw":"---\nlayout: post\ntitle: ASP.NET MVC 微信JS-SDK认证\ncategory: dotnet core\ndate: 2016-11-01 00:00:00\ntags:\n- .net\n- javascript\n- \n---\n# ASP.NET MVC 微信JS-SDK认证\n\n## 写在前面\n\n前阵子因为有个项目需要做微信自定义分享功能，因而去研究了下微信JS-SDK相关知识。\n\n此文做个简单的记(tu)录(cao)...\n\n## 开始\n\n所有的东西都从文档开始:[微信JSSDK说明文档](http://mp.weixin.qq.com/wiki/11/74ad127cc054f6b80759c40f77ec03db.html)\n\n![分享接口](http://7xread.com1.z0.glb.clouddn.com/44b1232e-9311-4abb-9200-6dd4936d7c47)\n\n项目需要用到的是[分享接口](http://mp.weixin.qq.com/wiki/11/74ad127cc054f6b80759c40f77ec03db.html#.E5.88.86.E4.BA.AB.E6.8E.A5.E5.8F.A3) 不过使用微信JS-SDK之前，需要做JS接口认证。\n\n认证如下：\n\n步骤一：绑定域名\n\n步骤二：引入JS文件\n\n步骤三：通过config接口注入权限验证配置\n\n步骤四：通过ready接口处理成功验证\n\n步骤五：通过error接口处理失败验证\n\n步骤一中允许使用域名/子域名，只要xx.com/xxx.txt或者xx.com/mp/xxx.txt能访问就好。域名认证通过之后，此域名下的所有端口的网站都可以使用JS-SDK。\n\n步骤二没什么问题，略过。\n\n步骤三最磨人，下面单独讲解。\n\n### config接口注入权限验证配置\n\n先来一段说明：\n\n所有需要使用JS-SDK的页面必须先注入配置信息，否则将无法调用\n（同一个url仅需调用一次，对于变化url的SPA的web app可在每次url变化时进行调用,\n目前Android微信客户端不支持pushState的H5新特性，\n所以使用pushState来实现web app的页面会导致签名失败，此问题会在Android6.2中修复）。\n\n```javascript\nwx.config({\n    debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，\n    //若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。\n    appId: '', // 必填，公众号的唯一标识\n    timestamp: , // 必填，生成签名的时间戳\n    nonceStr: '', // 必填，生成签名的随机串\n    signature: '',// 必填，签名，见附录1\n    jsApiList: [] // 必填，需要使用的JS接口列表，所有JS接口列表见附录2\n});\n```\n\n看到这里肯定懵逼了，这是都什么鬼...怎么玩啊。\n\n提示我们去看附录1...看完之后总结如下：\n\n1. 使用config接口注入权限验证配置，重点是生成合法的signatrue\n2. 生成signature需要通过appid和secret获取token\n3. 时间戳和调用接口URL必不可少\n4. 此操作需要服务端完成，不能使用客户端实现\n\n整个过程变成：\n\n1. 通过appid和secret获取access_token，接着使用token获取jsapi_ticket；\n\n2. 拿到jsapi_ticket之后，把jsapi_ticket、时间戳、随机字符串、接口调用页面URL 拼接成完整字符串，使用sha1算法加密得到signature。\n\n3. 最后返回至页面，在wx.config里面填入appid，上一步的时间戳timestamp，上一部的随机字符串、sha1拿到的signature，想要使用的JS接口。\n\n废话少说，直接上代码吧。\n\n### 代码时间\n\n```csharp\n    public class WeiXinController : Controller\n    {\n        public static readonly string appid =\n        System.Web.Configuration.WebConfigurationManager.AppSettings[\"wxappid\"];\n\n        public static readonly string secret =\n        System.Web.Configuration.WebConfigurationManager.AppSettings[\"wxsecret\"];\n\n        public static readonly bool isDedug =\n        System.Web.Configuration.WebConfigurationManager.AppSettings[\"IsDebug\"] ==\"true\";\n\n\n        public static string _ticket = \"\";\n\n        public static DateTime _lastTimestamp;\n\n\n        public ActionResult Info(string url,string noncestr)\n        {\n            if (string.IsNullOrEmpty(_ticket) || \n            _lastTimestamp == null || (_lastTimestamp - DateTime.Now).Milliseconds > 7200)\n            {\n                var resultString = HTTPHelper.GetHTMLByURL(\"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=\"\n                    + appid + \"&secret=\" + secret);\n                dynamic resultValue = JsonConvert.DeserializeObject<dynamic>(resultString);\n                if (resultValue == null || resultValue.access_token == null \n                || resultValue.access_token.Value == null)\n                {\n                    return Json(new { issuccess = false, \n                    error = \"获取token失败\" });\n                }\n                var token = resultValue.access_token.Value;\n\n                resultString = HTTPHelper.GetHTMLByURL\n                (\"https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=\" + \n                token + \"&type=jsapi\");\n                dynamic ticketValue = JsonConvert.DeserializeObject<dynamic>(resultString);\n                if (ticketValue == null || ticketValue.errcode == null\n                || ticketValue.errcode.Value != 0 || ticketValue.ticket == null)\n                    return Json(new { issuccess = false,\n                    error = \"获取ticketValue失败\" });\n                _ticket = ticketValue.ticket.Value;\n                _lastTimestamp = DateTime.Now;\n                var timestamp = GetTimeStamp();\n                var hexString = string.Format(\"jsapi_ticket={0}&noncestr={3}&timestamp={1}&url={2}\",\n                _ticket, timestamp, url,noncestr);\n\n                return Json(new {\n                    issuccess = true, \n                    sha1value = GetSHA1Value(hexString), \n                    timestamp = timestamp, \n                    url = url, \n                    appid = appid, \n                    debug=isDedug,\n                    tiket=_ticket\n                });\n            }\n            else\n            {\n                var timestamp = GetTimeStamp();\n                var hexString = string.Format(\"jsapi_ticket={0}&noncestr=1234567890123456&timestamp={1}&url={2}\",\n                   _ticket, timestamp, url);\n                return Json(new { \n                    issuccess = true, sha1value = GetSHA1Value(hexString),\n                    timestamp = timestamp, url = url,\n                    appid = appid, debug = isDedug,tiket = _ticket\n                });\n            }\n        }\n\n\n        private string GetSHA1Value(string sourceString)\n        {\n            var hash = SHA1.Create().ComputeHash(Encoding.UTF8.GetBytes(sourceString));\n            return string.Join(\"\", \n            hash.Select(b => b.ToString(\"x2\")).ToArray());\n        }\n\n        private static string GetTimeStamp()\n        {\n\n            TimeSpan ts = DateTime.Now - new DateTime(1970, 1, 1, 0, 0, 0, 0);\n\n            return Convert.ToInt64(ts.TotalSeconds).ToString();\n\n        }\n\n    }\n\n    public class HTTPHelper\n    {\n        public static string GetHTMLByURL(string url)\n        {\n            string htmlCode = string.Empty;\n            try\n            {\n                HttpWebRequest webRequest = (System.Net.HttpWebRequest)System.Net.WebRequest.Create(url);\n                webRequest.Timeout = 30000;\n                webRequest.Method = \"GET\";\n                webRequest.UserAgent = \"Mozilla/4.0\";\n                webRequest.Headers.Add(\"Accept-Encoding\", \"gzip, deflate\");\n                HttpWebResponse webResponse = (System.Net.HttpWebResponse)webRequest.GetResponse();\n                //获取目标网站的编码格式\n                string contentype = webResponse.Headers[\"Content-Type\"];\n                Regex regex = new Regex(\"charset\\\\s*=\\\\s*[\\\\W]?\\\\s*([\\\\w-]+)\", RegexOptions.IgnoreCase);\n                if (webResponse.ContentEncoding.ToLower() == \"gzip\")//如果使用了GZip则先解压\n                {\n                    using (System.IO.Stream streamReceive = webResponse.GetResponseStream())\n                    {\n                        using (var zipStream = new System.IO.Compression.GZipStream(streamReceive, System.IO.Compression.CompressionMode.Decompress))\n                        {\n                            //匹配编码格式\n                            if (regex.IsMatch(contentype))\n                            {\n                                Encoding ending = Encoding.GetEncoding\n                                (regex.Match(contentype).Groups[1].Value.Trim());\n                                using (StreamReader sr = new System.IO.StreamReader(zipStream, ending))\n                                {\n                                    htmlCode = sr.ReadToEnd();\n                                }\n                            }\n                            else\n                            {\n                                using (StreamReader sr = new System.IO.StreamReader(zipStream, Encoding.UTF8))\n                                {\n                                    htmlCode = sr.ReadToEnd();\n                                }\n                            }\n                        }\n                    }\n                }\n                else\n                {\n                    using (System.IO.Stream streamReceive = webResponse.GetResponseStream())\n                    {\n                        var encoding = Encoding.Default;\n                        if (contentype.Contains(\"utf\"))\n                            encoding = Encoding.UTF8;\n                        using (System.IO.StreamReader sr = new System.IO.StreamReader(streamReceive, encoding))\n                        {\n                            htmlCode = sr.ReadToEnd();\n                        }\n\n                    }\n                }\n                return htmlCode;\n            }\n            catch (Exception ex)\n            {\n                return \"\";\n            }\n        }\n    }\n\n```\n\nPS：这里要注意缓存一下_ticket（即access_token），照微信文档说的，access_token两个小时内有效，不需要频繁调用。而且获取access_token的接口有调用次数的限制，如果超过了次数，就不允许调用了。\n\nPPS:建议noncestr和URL由前台传入比较适合，使用 var theWebUrl = window.location.href.split('#')[0] 获取URL，noncestr就随意了。\n\nPPPS:遇到诡异的invalid signature的时候，首先检查url参数，然后检查noncestr，再不行重启一下程序获取一个新的token回来继续玩。\n","slug":"webchat_JS_SDK","published":1,"updated":"2018-05-17T12:52:47.979Z","comments":1,"photos":[],"link":"","_id":"cjhal1fwx002up631on2qpqn0","content":"<h1 id=\"ASP-NET-MVC-微信JS-SDK认证\"><a href=\"#ASP-NET-MVC-微信JS-SDK认证\" class=\"headerlink\" title=\"ASP.NET MVC 微信JS-SDK认证\"></a>ASP.NET MVC 微信JS-SDK认证</h1><h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>前阵子因为有个项目需要做微信自定义分享功能，因而去研究了下微信JS-SDK相关知识。</p>\n<p>此文做个简单的记(tu)录(cao)…</p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>所有的东西都从文档开始:<a href=\"http://mp.weixin.qq.com/wiki/11/74ad127cc054f6b80759c40f77ec03db.html\" target=\"_blank\" rel=\"noopener\">微信JSSDK说明文档</a></p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/44b1232e-9311-4abb-9200-6dd4936d7c47\" alt=\"分享接口\"></p>\n<p>项目需要用到的是<a href=\"http://mp.weixin.qq.com/wiki/11/74ad127cc054f6b80759c40f77ec03db.html#.E5.88.86.E4.BA.AB.E6.8E.A5.E5.8F.A3\" target=\"_blank\" rel=\"noopener\">分享接口</a> 不过使用微信JS-SDK之前，需要做JS接口认证。</p>\n<p>认证如下：</p>\n<p>步骤一：绑定域名</p>\n<p>步骤二：引入JS文件</p>\n<p>步骤三：通过config接口注入权限验证配置</p>\n<p>步骤四：通过ready接口处理成功验证</p>\n<p>步骤五：通过error接口处理失败验证</p>\n<p>步骤一中允许使用域名/子域名，只要xx.com/xxx.txt或者xx.com/mp/xxx.txt能访问就好。域名认证通过之后，此域名下的所有端口的网站都可以使用JS-SDK。</p>\n<p>步骤二没什么问题，略过。</p>\n<p>步骤三最磨人，下面单独讲解。</p>\n<h3 id=\"config接口注入权限验证配置\"><a href=\"#config接口注入权限验证配置\" class=\"headerlink\" title=\"config接口注入权限验证配置\"></a>config接口注入权限验证配置</h3><p>先来一段说明：</p>\n<p>所有需要使用JS-SDK的页面必须先注入配置信息，否则将无法调用<br>（同一个url仅需调用一次，对于变化url的SPA的web app可在每次url变化时进行调用,<br>目前Android微信客户端不支持pushState的H5新特性，<br>所以使用pushState来实现web app的页面会导致签名失败，此问题会在Android6.2中修复）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.config(&#123;</span><br><span class=\"line\">    debug: <span class=\"literal\">true</span>, <span class=\"comment\">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，</span></span><br><span class=\"line\">    <span class=\"comment\">//若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></span><br><span class=\"line\">    appId: <span class=\"string\">''</span>, <span class=\"comment\">// 必填，公众号的唯一标识</span></span><br><span class=\"line\">    timestamp: , <span class=\"comment\">// 必填，生成签名的时间戳</span></span><br><span class=\"line\">    nonceStr: <span class=\"string\">''</span>, <span class=\"comment\">// 必填，生成签名的随机串</span></span><br><span class=\"line\">    signature: <span class=\"string\">''</span>,<span class=\"comment\">// 必填，签名，见附录1</span></span><br><span class=\"line\">    jsApiList: [] <span class=\"comment\">// 必填，需要使用的JS接口列表，所有JS接口列表见附录2</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>看到这里肯定懵逼了，这是都什么鬼…怎么玩啊。</p>\n<p>提示我们去看附录1…看完之后总结如下：</p>\n<ol>\n<li>使用config接口注入权限验证配置，重点是生成合法的signatrue</li>\n<li>生成signature需要通过appid和secret获取token</li>\n<li>时间戳和调用接口URL必不可少</li>\n<li>此操作需要服务端完成，不能使用客户端实现</li>\n</ol>\n<p>整个过程变成：</p>\n<ol>\n<li><p>通过appid和secret获取access_token，接着使用token获取jsapi_ticket；</p>\n</li>\n<li><p>拿到jsapi_ticket之后，把jsapi_ticket、时间戳、随机字符串、接口调用页面URL 拼接成完整字符串，使用sha1算法加密得到signature。</p>\n</li>\n<li><p>最后返回至页面，在wx.config里面填入appid，上一步的时间戳timestamp，上一部的随机字符串、sha1拿到的signature，想要使用的JS接口。</p>\n</li>\n</ol>\n<p>废话少说，直接上代码吧。</p>\n<h3 id=\"代码时间\"><a href=\"#代码时间\" class=\"headerlink\" title=\"代码时间\"></a>代码时间</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">WeiXinController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">string</span> appid =</span><br><span class=\"line\">    System.Web.Configuration.WebConfigurationManager.AppSettings[<span class=\"string\">\"wxappid\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">string</span> secret =</span><br><span class=\"line\">    System.Web.Configuration.WebConfigurationManager.AppSettings[<span class=\"string\">\"wxsecret\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">bool</span> isDedug =</span><br><span class=\"line\">    System.Web.Configuration.WebConfigurationManager.AppSettings[<span class=\"string\">\"IsDebug\"</span>] ==<span class=\"string\">\"true\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> _ticket = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DateTime _lastTimestamp;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">Info</span>(<span class=\"params\"><span class=\"keyword\">string</span> url,<span class=\"keyword\">string</span> noncestr</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(_ticket) || </span><br><span class=\"line\">        _lastTimestamp == <span class=\"literal\">null</span> || (_lastTimestamp - DateTime.Now).Milliseconds &gt; <span class=\"number\">7200</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> resultString = HTTPHelper.GetHTMLByURL(<span class=\"string\">\"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=\"</span></span><br><span class=\"line\">                + appid + <span class=\"string\">\"&amp;secret=\"</span> + secret);</span><br><span class=\"line\">            <span class=\"keyword\">dynamic</span> resultValue = JsonConvert.DeserializeObject&lt;<span class=\"keyword\">dynamic</span>&gt;(resultString);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (resultValue == <span class=\"literal\">null</span> || resultValue.access_token == <span class=\"literal\">null</span> </span><br><span class=\"line\">            || resultValue.access_token.Value == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123; issuccess = <span class=\"literal\">false</span>, </span><br><span class=\"line\">                error = <span class=\"string\">\"获取token失败\"</span> &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> token = resultValue.access_token.Value;</span><br><span class=\"line\"></span><br><span class=\"line\">            resultString = HTTPHelper.GetHTMLByURL</span><br><span class=\"line\">            (<span class=\"string\">\"https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=\"</span> + </span><br><span class=\"line\">            token + <span class=\"string\">\"&amp;type=jsapi\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">dynamic</span> ticketValue = JsonConvert.DeserializeObject&lt;<span class=\"keyword\">dynamic</span>&gt;(resultString);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ticketValue == <span class=\"literal\">null</span> || ticketValue.errcode == <span class=\"literal\">null</span></span><br><span class=\"line\">            || ticketValue.errcode.Value != <span class=\"number\">0</span> || ticketValue.ticket == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123; issuccess = <span class=\"literal\">false</span>,</span><br><span class=\"line\">                error = <span class=\"string\">\"获取ticketValue失败\"</span> &#125;);</span><br><span class=\"line\">            _ticket = ticketValue.ticket.Value;</span><br><span class=\"line\">            _lastTimestamp = DateTime.Now;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> timestamp = GetTimeStamp();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> hexString = <span class=\"keyword\">string</span>.Format(<span class=\"string\">\"jsapi_ticket=&#123;0&#125;&amp;noncestr=&#123;3&#125;&amp;timestamp=&#123;1&#125;&amp;url=&#123;2&#125;\"</span>,</span><br><span class=\"line\">            _ticket, timestamp, url,noncestr);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123;</span><br><span class=\"line\">                issuccess = <span class=\"literal\">true</span>, </span><br><span class=\"line\">                sha1value = GetSHA1Value(hexString), </span><br><span class=\"line\">                timestamp = timestamp, </span><br><span class=\"line\">                url = url, </span><br><span class=\"line\">                appid = appid, </span><br><span class=\"line\">                debug=isDedug,</span><br><span class=\"line\">                tiket=_ticket</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> timestamp = GetTimeStamp();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> hexString = <span class=\"keyword\">string</span>.Format(<span class=\"string\">\"jsapi_ticket=&#123;0&#125;&amp;noncestr=1234567890123456&amp;timestamp=&#123;1&#125;&amp;url=&#123;2&#125;\"</span>,</span><br><span class=\"line\">               _ticket, timestamp, url);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123; </span><br><span class=\"line\">                issuccess = <span class=\"literal\">true</span>, sha1value = GetSHA1Value(hexString),</span><br><span class=\"line\">                timestamp = timestamp, url = url,</span><br><span class=\"line\">                appid = appid, debug = isDedug,tiket = _ticket</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">string</span> <span class=\"title\">GetSHA1Value</span>(<span class=\"params\"><span class=\"keyword\">string</span> sourceString</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> hash = SHA1.Create().ComputeHash(Encoding.UTF8.GetBytes(sourceString));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>.Join(<span class=\"string\">\"\"</span>, </span><br><span class=\"line\">        hash.Select(b =&gt; b.ToString(<span class=\"string\">\"x2\"</span>)).ToArray());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">GetTimeStamp</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        TimeSpan ts = DateTime.Now - <span class=\"keyword\">new</span> DateTime(<span class=\"number\">1970</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Convert.ToInt64(ts.TotalSeconds).ToString();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HTTPHelper</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">GetHTMLByURL</span>(<span class=\"params\"><span class=\"keyword\">string</span> url</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">string</span> htmlCode = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            HttpWebRequest webRequest = (System.Net.HttpWebRequest)System.Net.WebRequest.Create(url);</span><br><span class=\"line\">            webRequest.Timeout = <span class=\"number\">30000</span>;</span><br><span class=\"line\">            webRequest.Method = <span class=\"string\">\"GET\"</span>;</span><br><span class=\"line\">            webRequest.UserAgent = <span class=\"string\">\"Mozilla/4.0\"</span>;</span><br><span class=\"line\">            webRequest.Headers.Add(<span class=\"string\">\"Accept-Encoding\"</span>, <span class=\"string\">\"gzip, deflate\"</span>);</span><br><span class=\"line\">            HttpWebResponse webResponse = (System.Net.HttpWebResponse)webRequest.GetResponse();</span><br><span class=\"line\">            <span class=\"comment\">//获取目标网站的编码格式</span></span><br><span class=\"line\">            <span class=\"keyword\">string</span> contentype = webResponse.Headers[<span class=\"string\">\"Content-Type\"</span>];</span><br><span class=\"line\">            Regex regex = <span class=\"keyword\">new</span> Regex(<span class=\"string\">\"charset\\\\s*=\\\\s*[\\\\W]?\\\\s*([\\\\w-]+)\"</span>, RegexOptions.IgnoreCase);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (webResponse.ContentEncoding.ToLower() == <span class=\"string\">\"gzip\"</span>)<span class=\"comment\">//如果使用了GZip则先解压</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">using</span> (System.IO.Stream streamReceive = webResponse.GetResponseStream())</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> zipStream = <span class=\"keyword\">new</span> System.IO.Compression.GZipStream(streamReceive, System.IO.Compression.CompressionMode.Decompress))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//匹配编码格式</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (regex.IsMatch(contentype))</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            Encoding ending = Encoding.GetEncoding</span><br><span class=\"line\">                            (regex.Match(contentype).Groups[<span class=\"number\">1</span>].Value.Trim());</span><br><span class=\"line\">                            <span class=\"keyword\">using</span> (StreamReader sr = <span class=\"keyword\">new</span> System.IO.StreamReader(zipStream, ending))</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                htmlCode = sr.ReadToEnd();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span></span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">using</span> (StreamReader sr = <span class=\"keyword\">new</span> System.IO.StreamReader(zipStream, Encoding.UTF8))</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                htmlCode = sr.ReadToEnd();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">using</span> (System.IO.Stream streamReceive = webResponse.GetResponseStream())</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> encoding = Encoding.Default;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (contentype.Contains(<span class=\"string\">\"utf\"</span>))</span><br><span class=\"line\">                        encoding = Encoding.UTF8;</span><br><span class=\"line\">                    <span class=\"keyword\">using</span> (System.IO.StreamReader sr = <span class=\"keyword\">new</span> System.IO.StreamReader(streamReceive, encoding))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        htmlCode = sr.ReadToEnd();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> htmlCode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Exception ex)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>PS：这里要注意缓存一下_ticket（即access_token），照微信文档说的，access_token两个小时内有效，不需要频繁调用。而且获取access_token的接口有调用次数的限制，如果超过了次数，就不允许调用了。</p>\n<p>PPS:建议noncestr和URL由前台传入比较适合，使用 var theWebUrl = window.location.href.split(‘#’)[0] 获取URL，noncestr就随意了。</p>\n<p>PPPS:遇到诡异的invalid signature的时候，首先检查url参数，然后检查noncestr，再不行重启一下程序获取一个新的token回来继续玩。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ASP-NET-MVC-微信JS-SDK认证\"><a href=\"#ASP-NET-MVC-微信JS-SDK认证\" class=\"headerlink\" title=\"ASP.NET MVC 微信JS-SDK认证\"></a>ASP.NET MVC 微信JS-SDK认证</h1><h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>前阵子因为有个项目需要做微信自定义分享功能，因而去研究了下微信JS-SDK相关知识。</p>\n<p>此文做个简单的记(tu)录(cao)…</p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>所有的东西都从文档开始:<a href=\"http://mp.weixin.qq.com/wiki/11/74ad127cc054f6b80759c40f77ec03db.html\" target=\"_blank\" rel=\"noopener\">微信JSSDK说明文档</a></p>\n<p><img src=\"http://7xread.com1.z0.glb.clouddn.com/44b1232e-9311-4abb-9200-6dd4936d7c47\" alt=\"分享接口\"></p>\n<p>项目需要用到的是<a href=\"http://mp.weixin.qq.com/wiki/11/74ad127cc054f6b80759c40f77ec03db.html#.E5.88.86.E4.BA.AB.E6.8E.A5.E5.8F.A3\" target=\"_blank\" rel=\"noopener\">分享接口</a> 不过使用微信JS-SDK之前，需要做JS接口认证。</p>\n<p>认证如下：</p>\n<p>步骤一：绑定域名</p>\n<p>步骤二：引入JS文件</p>\n<p>步骤三：通过config接口注入权限验证配置</p>\n<p>步骤四：通过ready接口处理成功验证</p>\n<p>步骤五：通过error接口处理失败验证</p>\n<p>步骤一中允许使用域名/子域名，只要xx.com/xxx.txt或者xx.com/mp/xxx.txt能访问就好。域名认证通过之后，此域名下的所有端口的网站都可以使用JS-SDK。</p>\n<p>步骤二没什么问题，略过。</p>\n<p>步骤三最磨人，下面单独讲解。</p>\n<h3 id=\"config接口注入权限验证配置\"><a href=\"#config接口注入权限验证配置\" class=\"headerlink\" title=\"config接口注入权限验证配置\"></a>config接口注入权限验证配置</h3><p>先来一段说明：</p>\n<p>所有需要使用JS-SDK的页面必须先注入配置信息，否则将无法调用<br>（同一个url仅需调用一次，对于变化url的SPA的web app可在每次url变化时进行调用,<br>目前Android微信客户端不支持pushState的H5新特性，<br>所以使用pushState来实现web app的页面会导致签名失败，此问题会在Android6.2中修复）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.config(&#123;</span><br><span class=\"line\">    debug: <span class=\"literal\">true</span>, <span class=\"comment\">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，</span></span><br><span class=\"line\">    <span class=\"comment\">//若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></span><br><span class=\"line\">    appId: <span class=\"string\">''</span>, <span class=\"comment\">// 必填，公众号的唯一标识</span></span><br><span class=\"line\">    timestamp: , <span class=\"comment\">// 必填，生成签名的时间戳</span></span><br><span class=\"line\">    nonceStr: <span class=\"string\">''</span>, <span class=\"comment\">// 必填，生成签名的随机串</span></span><br><span class=\"line\">    signature: <span class=\"string\">''</span>,<span class=\"comment\">// 必填，签名，见附录1</span></span><br><span class=\"line\">    jsApiList: [] <span class=\"comment\">// 必填，需要使用的JS接口列表，所有JS接口列表见附录2</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>看到这里肯定懵逼了，这是都什么鬼…怎么玩啊。</p>\n<p>提示我们去看附录1…看完之后总结如下：</p>\n<ol>\n<li>使用config接口注入权限验证配置，重点是生成合法的signatrue</li>\n<li>生成signature需要通过appid和secret获取token</li>\n<li>时间戳和调用接口URL必不可少</li>\n<li>此操作需要服务端完成，不能使用客户端实现</li>\n</ol>\n<p>整个过程变成：</p>\n<ol>\n<li><p>通过appid和secret获取access_token，接着使用token获取jsapi_ticket；</p>\n</li>\n<li><p>拿到jsapi_ticket之后，把jsapi_ticket、时间戳、随机字符串、接口调用页面URL 拼接成完整字符串，使用sha1算法加密得到signature。</p>\n</li>\n<li><p>最后返回至页面，在wx.config里面填入appid，上一步的时间戳timestamp，上一部的随机字符串、sha1拿到的signature，想要使用的JS接口。</p>\n</li>\n</ol>\n<p>废话少说，直接上代码吧。</p>\n<h3 id=\"代码时间\"><a href=\"#代码时间\" class=\"headerlink\" title=\"代码时间\"></a>代码时间</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">WeiXinController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">string</span> appid =</span><br><span class=\"line\">    System.Web.Configuration.WebConfigurationManager.AppSettings[<span class=\"string\">\"wxappid\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">string</span> secret =</span><br><span class=\"line\">    System.Web.Configuration.WebConfigurationManager.AppSettings[<span class=\"string\">\"wxsecret\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">bool</span> isDedug =</span><br><span class=\"line\">    System.Web.Configuration.WebConfigurationManager.AppSettings[<span class=\"string\">\"IsDebug\"</span>] ==<span class=\"string\">\"true\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> _ticket = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DateTime _lastTimestamp;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">Info</span>(<span class=\"params\"><span class=\"keyword\">string</span> url,<span class=\"keyword\">string</span> noncestr</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(_ticket) || </span><br><span class=\"line\">        _lastTimestamp == <span class=\"literal\">null</span> || (_lastTimestamp - DateTime.Now).Milliseconds &gt; <span class=\"number\">7200</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> resultString = HTTPHelper.GetHTMLByURL(<span class=\"string\">\"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=\"</span></span><br><span class=\"line\">                + appid + <span class=\"string\">\"&amp;secret=\"</span> + secret);</span><br><span class=\"line\">            <span class=\"keyword\">dynamic</span> resultValue = JsonConvert.DeserializeObject&lt;<span class=\"keyword\">dynamic</span>&gt;(resultString);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (resultValue == <span class=\"literal\">null</span> || resultValue.access_token == <span class=\"literal\">null</span> </span><br><span class=\"line\">            || resultValue.access_token.Value == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123; issuccess = <span class=\"literal\">false</span>, </span><br><span class=\"line\">                error = <span class=\"string\">\"获取token失败\"</span> &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> token = resultValue.access_token.Value;</span><br><span class=\"line\"></span><br><span class=\"line\">            resultString = HTTPHelper.GetHTMLByURL</span><br><span class=\"line\">            (<span class=\"string\">\"https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=\"</span> + </span><br><span class=\"line\">            token + <span class=\"string\">\"&amp;type=jsapi\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">dynamic</span> ticketValue = JsonConvert.DeserializeObject&lt;<span class=\"keyword\">dynamic</span>&gt;(resultString);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ticketValue == <span class=\"literal\">null</span> || ticketValue.errcode == <span class=\"literal\">null</span></span><br><span class=\"line\">            || ticketValue.errcode.Value != <span class=\"number\">0</span> || ticketValue.ticket == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123; issuccess = <span class=\"literal\">false</span>,</span><br><span class=\"line\">                error = <span class=\"string\">\"获取ticketValue失败\"</span> &#125;);</span><br><span class=\"line\">            _ticket = ticketValue.ticket.Value;</span><br><span class=\"line\">            _lastTimestamp = DateTime.Now;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> timestamp = GetTimeStamp();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> hexString = <span class=\"keyword\">string</span>.Format(<span class=\"string\">\"jsapi_ticket=&#123;0&#125;&amp;noncestr=&#123;3&#125;&amp;timestamp=&#123;1&#125;&amp;url=&#123;2&#125;\"</span>,</span><br><span class=\"line\">            _ticket, timestamp, url,noncestr);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123;</span><br><span class=\"line\">                issuccess = <span class=\"literal\">true</span>, </span><br><span class=\"line\">                sha1value = GetSHA1Value(hexString), </span><br><span class=\"line\">                timestamp = timestamp, </span><br><span class=\"line\">                url = url, </span><br><span class=\"line\">                appid = appid, </span><br><span class=\"line\">                debug=isDedug,</span><br><span class=\"line\">                tiket=_ticket</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> timestamp = GetTimeStamp();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> hexString = <span class=\"keyword\">string</span>.Format(<span class=\"string\">\"jsapi_ticket=&#123;0&#125;&amp;noncestr=1234567890123456&amp;timestamp=&#123;1&#125;&amp;url=&#123;2&#125;\"</span>,</span><br><span class=\"line\">               _ticket, timestamp, url);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123; </span><br><span class=\"line\">                issuccess = <span class=\"literal\">true</span>, sha1value = GetSHA1Value(hexString),</span><br><span class=\"line\">                timestamp = timestamp, url = url,</span><br><span class=\"line\">                appid = appid, debug = isDedug,tiket = _ticket</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">string</span> <span class=\"title\">GetSHA1Value</span>(<span class=\"params\"><span class=\"keyword\">string</span> sourceString</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> hash = SHA1.Create().ComputeHash(Encoding.UTF8.GetBytes(sourceString));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>.Join(<span class=\"string\">\"\"</span>, </span><br><span class=\"line\">        hash.Select(b =&gt; b.ToString(<span class=\"string\">\"x2\"</span>)).ToArray());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">GetTimeStamp</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        TimeSpan ts = DateTime.Now - <span class=\"keyword\">new</span> DateTime(<span class=\"number\">1970</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Convert.ToInt64(ts.TotalSeconds).ToString();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HTTPHelper</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">GetHTMLByURL</span>(<span class=\"params\"><span class=\"keyword\">string</span> url</span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">string</span> htmlCode = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            HttpWebRequest webRequest = (System.Net.HttpWebRequest)System.Net.WebRequest.Create(url);</span><br><span class=\"line\">            webRequest.Timeout = <span class=\"number\">30000</span>;</span><br><span class=\"line\">            webRequest.Method = <span class=\"string\">\"GET\"</span>;</span><br><span class=\"line\">            webRequest.UserAgent = <span class=\"string\">\"Mozilla/4.0\"</span>;</span><br><span class=\"line\">            webRequest.Headers.Add(<span class=\"string\">\"Accept-Encoding\"</span>, <span class=\"string\">\"gzip, deflate\"</span>);</span><br><span class=\"line\">            HttpWebResponse webResponse = (System.Net.HttpWebResponse)webRequest.GetResponse();</span><br><span class=\"line\">            <span class=\"comment\">//获取目标网站的编码格式</span></span><br><span class=\"line\">            <span class=\"keyword\">string</span> contentype = webResponse.Headers[<span class=\"string\">\"Content-Type\"</span>];</span><br><span class=\"line\">            Regex regex = <span class=\"keyword\">new</span> Regex(<span class=\"string\">\"charset\\\\s*=\\\\s*[\\\\W]?\\\\s*([\\\\w-]+)\"</span>, RegexOptions.IgnoreCase);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (webResponse.ContentEncoding.ToLower() == <span class=\"string\">\"gzip\"</span>)<span class=\"comment\">//如果使用了GZip则先解压</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">using</span> (System.IO.Stream streamReceive = webResponse.GetResponseStream())</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> zipStream = <span class=\"keyword\">new</span> System.IO.Compression.GZipStream(streamReceive, System.IO.Compression.CompressionMode.Decompress))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//匹配编码格式</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (regex.IsMatch(contentype))</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            Encoding ending = Encoding.GetEncoding</span><br><span class=\"line\">                            (regex.Match(contentype).Groups[<span class=\"number\">1</span>].Value.Trim());</span><br><span class=\"line\">                            <span class=\"keyword\">using</span> (StreamReader sr = <span class=\"keyword\">new</span> System.IO.StreamReader(zipStream, ending))</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                htmlCode = sr.ReadToEnd();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span></span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">using</span> (StreamReader sr = <span class=\"keyword\">new</span> System.IO.StreamReader(zipStream, Encoding.UTF8))</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                htmlCode = sr.ReadToEnd();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">using</span> (System.IO.Stream streamReceive = webResponse.GetResponseStream())</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> encoding = Encoding.Default;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (contentype.Contains(<span class=\"string\">\"utf\"</span>))</span><br><span class=\"line\">                        encoding = Encoding.UTF8;</span><br><span class=\"line\">                    <span class=\"keyword\">using</span> (System.IO.StreamReader sr = <span class=\"keyword\">new</span> System.IO.StreamReader(streamReceive, encoding))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        htmlCode = sr.ReadToEnd();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> htmlCode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Exception ex)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>PS：这里要注意缓存一下_ticket（即access_token），照微信文档说的，access_token两个小时内有效，不需要频繁调用。而且获取access_token的接口有调用次数的限制，如果超过了次数，就不允许调用了。</p>\n<p>PPS:建议noncestr和URL由前台传入比较适合，使用 var theWebUrl = window.location.href.split(‘#’)[0] 获取URL，noncestr就随意了。</p>\n<p>PPPS:遇到诡异的invalid signature的时候，首先检查url参数，然后检查noncestr，再不行重启一下程序获取一个新的token回来继续玩。</p>\n"},{"layout":"post","title":"手把手教你用Docker搭建Hexo博客","date":"2018-05-17T16:00:00.000Z","_content":"\n# 手把手教你用Docker搭建Hexo博客\n\n## hexo\n\n- 快速、简洁且高效的博客框架,Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。\n\n- 只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。\n\n- Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。\n\n```sh\nnpm install hexo-cli -g\nhexo init blog\ncd blog\nnpm install\nhexo server\n```\n\n以上来自[Hexo官网](https://hexo.io/zh-cn/)\n\n到这里,你的hexo博客已经初始化好了, blog/public文件夹下面已经生成了对应的HTML文件.\n\n扩展阅读:\n\n- [hexo next主题](http://theme-next.iissnan.com/)\n\n- [hexo next主题配置](http://theme-next.iissnan.com/theme-settings.html)\n\n## docker 部署\n\n不BB这么多,先上Dockerfile\n\n```docker\n# node环境镜像\nFROM node:latest AS build-env\n# 创建hexo-blog文件夹且设置成工作文件夹\nRUN mkdir -p /usr/src/hexo-blog\nWORKDIR /usr/src/hexo-blog\n# 复制当前文件夹下面的所有文件到hexo-blog中\nCOPY . .\n# 安装 hexo-cli\nRUN npm --registry=https://registry.npm.taobao.org install hexo-cli -g && npm install\n# 生成静态文件\nRUN hexo clean && hexo g\n\n# 配置nginx\nFROM nginx:latest\nENV TZ=Asia/Shanghai\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\nWORKDIR /usr/share/nginx/html\n# 把上一部生成的HTML文件复制到Nginx中\nCOPY --from=build-env /usr/src/hexo-blog/public /usr/share/nginx/html\nEXPOSE 80\n\n```\n\n接着跑一下看看.\n\n```sh\ndocker build -t 镜像名:latest .;\ndocker run -p 80:80 -d 镜像名:latest;\n\n```\n\n好了,完事....\n\n## Nginx https证书配置\n\n最后Nginx配置https证书的步骤.\n\n首先,你要有个证书,哪来的我不管了.\n\nPS:良心推荐[https://freessl.org/](https://freessl.org/)直接生成免费证书\n\n然后nginx.conf如下:\n\n```config\n\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    server {\n            listen 443;\n            server_name  codelover.link;\n            root /usr/share/nginx/html;\n            index index.html index.htm;\n            ssl on;\n            ssl_certificate /etc/nginx/full_chain.pem;\n            ssl_certificate_key /etc/nginx/private.key;\n\n\n            include       /etc/nginx/mime.types;\n            default_type  application/octet-stream;\n            gzip on;\n            gzip_min_length 5k;\n            gzip_buffers 4 16k;\n            gzip_http_version 1.1;\n            gzip_comp_level 3;\n            gzip_types text/plain application/json application/javascript text/css application/xml text/javascript image/jpeg image/gif image/png;\n            gzip_vary on;\n    }\n    server {\n        listen 80;\n        server_name  codelover.link;\n        root /usr/share/nginx/html;\n        index index.html index.htm;\n        include  /etc/nginx/mime.types;\n        default_type  application/octet-stream;\n    }\n\n}\n```\n\n这时候用docker跑你的hexo-blog镜像的时候把对应的pem和key文件映射到对应路径记录.\n\n如下:\n\n```sh\n# codelover-blog 为配置文件路径,codelover-blog/ssl为证书路径\ndocker run -p 80:80 -p 443:443 \\\n--name codelover-blog \\\n-v ~/docker-data/codelover-blog/nginx.conf:/etc/nginx/nginx.conf \\\n-v ~/docker-data/codelover-blog/ssl/full_chain.pem:/etc/nginx/full_chain.pem \\\n-v ~/docker-data/codelover-blog/ssl/private.key:/etc/nginx/private.key \\\n--restart=always -d 你的hexo-blog博客镜像;\n```\n\n顺手也把非静态文件的nginx配置放一份,如下:\n\n```conf\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    upstream webservers {\n        #weigth参数表示权值，权值越高被分配到的几率越大\n        #本机上的Squid开启3128端口\n        server 10.31.160.197:8080 weight=5;\n        server 192.168.0.1:9090  weight=3;\n    }\n\n\n    server {\n            listen 443;\n            server_name  woyaozufang.live;\n            location / {\n                proxy_pass   http://webservers;\n            }\n            ssl on;\n            ssl_certificate /etc/nginx/full_chain.pem;\n            ssl_certificate_key /etc/nginx/private.key;\n            error_page   500 502 503 504  /50x.html;\n            location = /50x.html {\n            root   html;\n            }\n            gzip on;\n            gzip_min_length 5k;\n            gzip_buffers 4 16k;\n            gzip_http_version 1.1;\n            gzip_comp_level 3;\n            gzip_types text/plain application/json application/javascript text/css application/xml text/javascript image/jpeg image/gif image/png;\n            gzip_vary on;\n    }\n\n\n    server {\n        listen 8080;\n        server_name  woyaozufang.live;\n        location / {\n            proxy_pass   http://webservers;\n        }\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n\n    server {\n        listen 80;\n        server_name  woyaozufang.live;\n        location / {\n            proxy_pass   http://webservers;\n        }\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n\n}\n\n```","source":"_posts/hexo-docker.md","raw":"\n---\nlayout: post\ntitle: 手把手教你用Docker搭建Hexo博客\ncategory: docker\ndate: 2018-05-18\ntags:\n\n- hexo\n- docker\n\n---\n\n# 手把手教你用Docker搭建Hexo博客\n\n## hexo\n\n- 快速、简洁且高效的博客框架,Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。\n\n- 只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。\n\n- Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。\n\n```sh\nnpm install hexo-cli -g\nhexo init blog\ncd blog\nnpm install\nhexo server\n```\n\n以上来自[Hexo官网](https://hexo.io/zh-cn/)\n\n到这里,你的hexo博客已经初始化好了, blog/public文件夹下面已经生成了对应的HTML文件.\n\n扩展阅读:\n\n- [hexo next主题](http://theme-next.iissnan.com/)\n\n- [hexo next主题配置](http://theme-next.iissnan.com/theme-settings.html)\n\n## docker 部署\n\n不BB这么多,先上Dockerfile\n\n```docker\n# node环境镜像\nFROM node:latest AS build-env\n# 创建hexo-blog文件夹且设置成工作文件夹\nRUN mkdir -p /usr/src/hexo-blog\nWORKDIR /usr/src/hexo-blog\n# 复制当前文件夹下面的所有文件到hexo-blog中\nCOPY . .\n# 安装 hexo-cli\nRUN npm --registry=https://registry.npm.taobao.org install hexo-cli -g && npm install\n# 生成静态文件\nRUN hexo clean && hexo g\n\n# 配置nginx\nFROM nginx:latest\nENV TZ=Asia/Shanghai\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\nWORKDIR /usr/share/nginx/html\n# 把上一部生成的HTML文件复制到Nginx中\nCOPY --from=build-env /usr/src/hexo-blog/public /usr/share/nginx/html\nEXPOSE 80\n\n```\n\n接着跑一下看看.\n\n```sh\ndocker build -t 镜像名:latest .;\ndocker run -p 80:80 -d 镜像名:latest;\n\n```\n\n好了,完事....\n\n## Nginx https证书配置\n\n最后Nginx配置https证书的步骤.\n\n首先,你要有个证书,哪来的我不管了.\n\nPS:良心推荐[https://freessl.org/](https://freessl.org/)直接生成免费证书\n\n然后nginx.conf如下:\n\n```config\n\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    server {\n            listen 443;\n            server_name  codelover.link;\n            root /usr/share/nginx/html;\n            index index.html index.htm;\n            ssl on;\n            ssl_certificate /etc/nginx/full_chain.pem;\n            ssl_certificate_key /etc/nginx/private.key;\n\n\n            include       /etc/nginx/mime.types;\n            default_type  application/octet-stream;\n            gzip on;\n            gzip_min_length 5k;\n            gzip_buffers 4 16k;\n            gzip_http_version 1.1;\n            gzip_comp_level 3;\n            gzip_types text/plain application/json application/javascript text/css application/xml text/javascript image/jpeg image/gif image/png;\n            gzip_vary on;\n    }\n    server {\n        listen 80;\n        server_name  codelover.link;\n        root /usr/share/nginx/html;\n        index index.html index.htm;\n        include  /etc/nginx/mime.types;\n        default_type  application/octet-stream;\n    }\n\n}\n```\n\n这时候用docker跑你的hexo-blog镜像的时候把对应的pem和key文件映射到对应路径记录.\n\n如下:\n\n```sh\n# codelover-blog 为配置文件路径,codelover-blog/ssl为证书路径\ndocker run -p 80:80 -p 443:443 \\\n--name codelover-blog \\\n-v ~/docker-data/codelover-blog/nginx.conf:/etc/nginx/nginx.conf \\\n-v ~/docker-data/codelover-blog/ssl/full_chain.pem:/etc/nginx/full_chain.pem \\\n-v ~/docker-data/codelover-blog/ssl/private.key:/etc/nginx/private.key \\\n--restart=always -d 你的hexo-blog博客镜像;\n```\n\n顺手也把非静态文件的nginx配置放一份,如下:\n\n```conf\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    upstream webservers {\n        #weigth参数表示权值，权值越高被分配到的几率越大\n        #本机上的Squid开启3128端口\n        server 10.31.160.197:8080 weight=5;\n        server 192.168.0.1:9090  weight=3;\n    }\n\n\n    server {\n            listen 443;\n            server_name  woyaozufang.live;\n            location / {\n                proxy_pass   http://webservers;\n            }\n            ssl on;\n            ssl_certificate /etc/nginx/full_chain.pem;\n            ssl_certificate_key /etc/nginx/private.key;\n            error_page   500 502 503 504  /50x.html;\n            location = /50x.html {\n            root   html;\n            }\n            gzip on;\n            gzip_min_length 5k;\n            gzip_buffers 4 16k;\n            gzip_http_version 1.1;\n            gzip_comp_level 3;\n            gzip_types text/plain application/json application/javascript text/css application/xml text/javascript image/jpeg image/gif image/png;\n            gzip_vary on;\n    }\n\n\n    server {\n        listen 8080;\n        server_name  woyaozufang.live;\n        location / {\n            proxy_pass   http://webservers;\n        }\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n\n    server {\n        listen 80;\n        server_name  woyaozufang.live;\n        location / {\n            proxy_pass   http://webservers;\n        }\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n\n}\n\n```","slug":"hexo-docker","published":1,"updated":"2018-05-29T23:30:32.498Z","comments":1,"photos":[],"link":"","_id":"cji704skz0000el0rsem3zymo","content":"<h1 id=\"手把手教你用Docker搭建Hexo博客\"><a href=\"#手把手教你用Docker搭建Hexo博客\" class=\"headerlink\" title=\"手把手教你用Docker搭建Hexo博客\"></a>手把手教你用Docker搭建Hexo博客</h1><h2 id=\"hexo\"><a href=\"#hexo\" class=\"headerlink\" title=\"hexo\"></a>hexo</h2><ul>\n<li><p>快速、简洁且高效的博客框架,Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</p>\n</li>\n<li><p>只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。</p>\n</li>\n<li><p>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</p>\n</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\">hexo init blog</span><br><span class=\"line\"><span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">npm install</span><br><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p>以上来自<a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">Hexo官网</a></p>\n<p>到这里,你的hexo博客已经初始化好了, blog/public文件夹下面已经生成了对应的HTML文件.</p>\n<p>扩展阅读:</p>\n<ul>\n<li><p><a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">hexo next主题</a></p>\n</li>\n<li><p><a href=\"http://theme-next.iissnan.com/theme-settings.html\" target=\"_blank\" rel=\"noopener\">hexo next主题配置</a></p>\n</li>\n</ul>\n<h2 id=\"docker-部署\"><a href=\"#docker-部署\" class=\"headerlink\" title=\"docker 部署\"></a>docker 部署</h2><p>不BB这么多,先上Dockerfile</p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># node环境镜像</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> node:latest AS build-<span class=\"keyword\">env</span></span><br><span class=\"line\"><span class=\"comment\"># 创建hexo-blog文件夹且设置成工作文件夹</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> mkdir -p /usr/src/hexo-blog</span></span><br><span class=\"line\"><span class=\"bash\">WORKDIR /usr/src/hexo-blog</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># 复制当前文件夹下面的所有文件到hexo-blog中</span></span></span><br><span class=\"line\"><span class=\"bash\">COPY . .</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># 安装 hexo-cli</span></span></span><br><span class=\"line\"><span class=\"bash\">RUN npm --registry=https://registry.npm.taobao.org install hexo-cli -g &amp;&amp; npm install</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># 生成静态文件</span></span></span><br><span class=\"line\"><span class=\"bash\">RUN hexo clean &amp;&amp; hexo g</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># 配置nginx</span></span></span><br><span class=\"line\"><span class=\"bash\">FROM nginx:latest</span></span><br><span class=\"line\"><span class=\"bash\">ENV TZ=Asia/Shanghai</span></span><br><span class=\"line\"><span class=\"bash\">RUN ln -snf /usr/share/zoneinfo/<span class=\"variable\">$TZ</span> /etc/localtime &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"variable\">$TZ</span> &gt; /etc/timezone</span></span><br><span class=\"line\"><span class=\"bash\">WORKDIR /usr/share/nginx/html</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># 把上一部生成的HTML文件复制到Nginx中</span></span></span><br><span class=\"line\"><span class=\"bash\">COPY --from=build-env /usr/src/hexo-blog/public /usr/share/nginx/html</span></span><br><span class=\"line\"><span class=\"bash\">EXPOSE 80</span></span><br></pre></td></tr></table></figure>\n<p>接着跑一下看看.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t 镜像名:latest .;</span><br><span class=\"line\">docker run -p 80:80 -d 镜像名:latest;</span><br></pre></td></tr></table></figure>\n<p>好了,完事….</p>\n<h2 id=\"Nginx-https证书配置\"><a href=\"#Nginx-https证书配置\" class=\"headerlink\" title=\"Nginx https证书配置\"></a>Nginx https证书配置</h2><p>最后Nginx配置https证书的步骤.</p>\n<p>首先,你要有个证书,哪来的我不管了.</p>\n<p>PS:良心推荐<a href=\"https://freessl.org/\" target=\"_blank\" rel=\"noopener\">https://freessl.org/</a>直接生成免费证书</p>\n<p>然后nginx.conf如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections 1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">            listen 443;</span><br><span class=\"line\">            server_name  codelover.link;</span><br><span class=\"line\">            root /usr/share/nginx/html;</span><br><span class=\"line\">            index index.html index.htm;</span><br><span class=\"line\">            ssl on;</span><br><span class=\"line\">            ssl_certificate /etc/nginx/full_chain.pem;</span><br><span class=\"line\">            ssl_certificate_key /etc/nginx/private.key;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            include       /etc/nginx/mime.types;</span><br><span class=\"line\">            default_type  application/octet-stream;</span><br><span class=\"line\">            gzip on;</span><br><span class=\"line\">            gzip_min_length 5k;</span><br><span class=\"line\">            gzip_buffers 4 16k;</span><br><span class=\"line\">            gzip_http_version 1.1;</span><br><span class=\"line\">            gzip_comp_level 3;</span><br><span class=\"line\">            gzip_types text/plain application/json application/javascript text/css application/xml text/javascript image/jpeg image/gif image/png;</span><br><span class=\"line\">            gzip_vary on;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        server_name  codelover.link;</span><br><span class=\"line\">        root /usr/share/nginx/html;</span><br><span class=\"line\">        index index.html index.htm;</span><br><span class=\"line\">        include  /etc/nginx/mime.types;</span><br><span class=\"line\">        default_type  application/octet-stream;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时候用docker跑你的hexo-blog镜像的时候把对应的pem和key文件映射到对应路径记录.</p>\n<p>如下:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># codelover-blog 为配置文件路径,codelover-blog/ssl为证书路径</span></span><br><span class=\"line\">docker run -p 80:80 -p 443:443 \\</span><br><span class=\"line\">--name codelover-blog \\</span><br><span class=\"line\">-v ~/docker-data/codelover-blog/nginx.conf:/etc/nginx/nginx.conf \\</span><br><span class=\"line\">-v ~/docker-data/codelover-blog/ssl/full_chain.pem:/etc/nginx/full_chain.pem \\</span><br><span class=\"line\">-v ~/docker-data/codelover-blog/ssl/private.key:/etc/nginx/private.key \\</span><br><span class=\"line\">--restart=always -d 你的hexo-blog博客镜像;</span><br></pre></td></tr></table></figure>\n<p>顺手也把非静态文件的nginx配置放一份,如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections 1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    upstream webservers &#123;</span><br><span class=\"line\">        #weigth参数表示权值，权值越高被分配到的几率越大</span><br><span class=\"line\">        #本机上的Squid开启3128端口</span><br><span class=\"line\">        server 10.31.160.197:8080 weight=5;</span><br><span class=\"line\">        server 192.168.0.1:9090  weight=3;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">            listen 443;</span><br><span class=\"line\">            server_name  woyaozufang.live;</span><br><span class=\"line\">            location / &#123;</span><br><span class=\"line\">                proxy_pass   http://webservers;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ssl on;</span><br><span class=\"line\">            ssl_certificate /etc/nginx/full_chain.pem;</span><br><span class=\"line\">            ssl_certificate_key /etc/nginx/private.key;</span><br><span class=\"line\">            error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">            location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            gzip on;</span><br><span class=\"line\">            gzip_min_length 5k;</span><br><span class=\"line\">            gzip_buffers 4 16k;</span><br><span class=\"line\">            gzip_http_version 1.1;</span><br><span class=\"line\">            gzip_comp_level 3;</span><br><span class=\"line\">            gzip_types text/plain application/json application/javascript text/css application/xml text/javascript image/jpeg image/gif image/png;</span><br><span class=\"line\">            gzip_vary on;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen 8080;</span><br><span class=\"line\">        server_name  woyaozufang.live;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass   http://webservers;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        server_name  woyaozufang.live;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass   http://webservers;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"手把手教你用Docker搭建Hexo博客\"><a href=\"#手把手教你用Docker搭建Hexo博客\" class=\"headerlink\" title=\"手把手教你用Docker搭建Hexo博客\"></a>手把手教你用Docker搭建Hexo博客</h1><h2 id=\"hexo\"><a href=\"#hexo\" class=\"headerlink\" title=\"hexo\"></a>hexo</h2><ul>\n<li><p>快速、简洁且高效的博客框架,Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</p>\n</li>\n<li><p>只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。</p>\n</li>\n<li><p>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</p>\n</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\">hexo init blog</span><br><span class=\"line\"><span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">npm install</span><br><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p>以上来自<a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">Hexo官网</a></p>\n<p>到这里,你的hexo博客已经初始化好了, blog/public文件夹下面已经生成了对应的HTML文件.</p>\n<p>扩展阅读:</p>\n<ul>\n<li><p><a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">hexo next主题</a></p>\n</li>\n<li><p><a href=\"http://theme-next.iissnan.com/theme-settings.html\" target=\"_blank\" rel=\"noopener\">hexo next主题配置</a></p>\n</li>\n</ul>\n<h2 id=\"docker-部署\"><a href=\"#docker-部署\" class=\"headerlink\" title=\"docker 部署\"></a>docker 部署</h2><p>不BB这么多,先上Dockerfile</p>\n<figure class=\"highlight docker\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># node环境镜像</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> node:latest AS build-<span class=\"keyword\">env</span></span><br><span class=\"line\"><span class=\"comment\"># 创建hexo-blog文件夹且设置成工作文件夹</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> mkdir -p /usr/src/hexo-blog</span></span><br><span class=\"line\"><span class=\"bash\">WORKDIR /usr/src/hexo-blog</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># 复制当前文件夹下面的所有文件到hexo-blog中</span></span></span><br><span class=\"line\"><span class=\"bash\">COPY . .</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># 安装 hexo-cli</span></span></span><br><span class=\"line\"><span class=\"bash\">RUN npm --registry=https://registry.npm.taobao.org install hexo-cli -g &amp;&amp; npm install</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># 生成静态文件</span></span></span><br><span class=\"line\"><span class=\"bash\">RUN hexo clean &amp;&amp; hexo g</span></span><br><span class=\"line\"><span class=\"bash\"></span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># 配置nginx</span></span></span><br><span class=\"line\"><span class=\"bash\">FROM nginx:latest</span></span><br><span class=\"line\"><span class=\"bash\">ENV TZ=Asia/Shanghai</span></span><br><span class=\"line\"><span class=\"bash\">RUN ln -snf /usr/share/zoneinfo/<span class=\"variable\">$TZ</span> /etc/localtime &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"variable\">$TZ</span> &gt; /etc/timezone</span></span><br><span class=\"line\"><span class=\"bash\">WORKDIR /usr/share/nginx/html</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># 把上一部生成的HTML文件复制到Nginx中</span></span></span><br><span class=\"line\"><span class=\"bash\">COPY --from=build-env /usr/src/hexo-blog/public /usr/share/nginx/html</span></span><br><span class=\"line\"><span class=\"bash\">EXPOSE 80</span></span><br></pre></td></tr></table></figure>\n<p>接着跑一下看看.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t 镜像名:latest .;</span><br><span class=\"line\">docker run -p 80:80 -d 镜像名:latest;</span><br></pre></td></tr></table></figure>\n<p>好了,完事….</p>\n<h2 id=\"Nginx-https证书配置\"><a href=\"#Nginx-https证书配置\" class=\"headerlink\" title=\"Nginx https证书配置\"></a>Nginx https证书配置</h2><p>最后Nginx配置https证书的步骤.</p>\n<p>首先,你要有个证书,哪来的我不管了.</p>\n<p>PS:良心推荐<a href=\"https://freessl.org/\" target=\"_blank\" rel=\"noopener\">https://freessl.org/</a>直接生成免费证书</p>\n<p>然后nginx.conf如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections 1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">            listen 443;</span><br><span class=\"line\">            server_name  codelover.link;</span><br><span class=\"line\">            root /usr/share/nginx/html;</span><br><span class=\"line\">            index index.html index.htm;</span><br><span class=\"line\">            ssl on;</span><br><span class=\"line\">            ssl_certificate /etc/nginx/full_chain.pem;</span><br><span class=\"line\">            ssl_certificate_key /etc/nginx/private.key;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            include       /etc/nginx/mime.types;</span><br><span class=\"line\">            default_type  application/octet-stream;</span><br><span class=\"line\">            gzip on;</span><br><span class=\"line\">            gzip_min_length 5k;</span><br><span class=\"line\">            gzip_buffers 4 16k;</span><br><span class=\"line\">            gzip_http_version 1.1;</span><br><span class=\"line\">            gzip_comp_level 3;</span><br><span class=\"line\">            gzip_types text/plain application/json application/javascript text/css application/xml text/javascript image/jpeg image/gif image/png;</span><br><span class=\"line\">            gzip_vary on;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        server_name  codelover.link;</span><br><span class=\"line\">        root /usr/share/nginx/html;</span><br><span class=\"line\">        index index.html index.htm;</span><br><span class=\"line\">        include  /etc/nginx/mime.types;</span><br><span class=\"line\">        default_type  application/octet-stream;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时候用docker跑你的hexo-blog镜像的时候把对应的pem和key文件映射到对应路径记录.</p>\n<p>如下:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># codelover-blog 为配置文件路径,codelover-blog/ssl为证书路径</span></span><br><span class=\"line\">docker run -p 80:80 -p 443:443 \\</span><br><span class=\"line\">--name codelover-blog \\</span><br><span class=\"line\">-v ~/docker-data/codelover-blog/nginx.conf:/etc/nginx/nginx.conf \\</span><br><span class=\"line\">-v ~/docker-data/codelover-blog/ssl/full_chain.pem:/etc/nginx/full_chain.pem \\</span><br><span class=\"line\">-v ~/docker-data/codelover-blog/ssl/private.key:/etc/nginx/private.key \\</span><br><span class=\"line\">--restart=always -d 你的hexo-blog博客镜像;</span><br></pre></td></tr></table></figure>\n<p>顺手也把非静态文件的nginx配置放一份,如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections 1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    upstream webservers &#123;</span><br><span class=\"line\">        #weigth参数表示权值，权值越高被分配到的几率越大</span><br><span class=\"line\">        #本机上的Squid开启3128端口</span><br><span class=\"line\">        server 10.31.160.197:8080 weight=5;</span><br><span class=\"line\">        server 192.168.0.1:9090  weight=3;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">            listen 443;</span><br><span class=\"line\">            server_name  woyaozufang.live;</span><br><span class=\"line\">            location / &#123;</span><br><span class=\"line\">                proxy_pass   http://webservers;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ssl on;</span><br><span class=\"line\">            ssl_certificate /etc/nginx/full_chain.pem;</span><br><span class=\"line\">            ssl_certificate_key /etc/nginx/private.key;</span><br><span class=\"line\">            error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">            location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            gzip on;</span><br><span class=\"line\">            gzip_min_length 5k;</span><br><span class=\"line\">            gzip_buffers 4 16k;</span><br><span class=\"line\">            gzip_http_version 1.1;</span><br><span class=\"line\">            gzip_comp_level 3;</span><br><span class=\"line\">            gzip_types text/plain application/json application/javascript text/css application/xml text/javascript image/jpeg image/gif image/png;</span><br><span class=\"line\">            gzip_vary on;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen 8080;</span><br><span class=\"line\">        server_name  woyaozufang.live;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass   http://webservers;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        server_name  woyaozufang.live;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass   http://webservers;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"logstash grok配置规则","date":"2018-05-19T16:00:00.000Z","_content":"# logstash grok配置规则\n\n## [logstash.conf](https://www.elastic.co/guide/en/beats/metricbeat/current/logstash-output.html)\n\n这里主要需要配置grok match,把日志信息切分成索引数据(match本质是一个正则匹配)\n\n日志原文:\n\n```log\n2018-04-13 16:03:49.822 INFO  o.n.p.j.c.XXXXX - Star Calculator\n```\n\ngrok match:\n\n```json\n match => { \"message\" => \"%{DATA:log_date} %{TIME:log_localtime} %{WORD:log_type} %{JAVAFILE:log_file} - %{GREEDYDATA:log_content}\"}\n```\n\n切出来的数据\n\n``` json\n{\n  \"log_date\": [\n    [\n      \"2018-04-13\"\n    ]\n  ],\n  \"log_localtime\": [\n    [\n      \"16:03:49.822\"\n    ]\n  ],\n  \"HOUR\": [\n    [\n      \"16\"\n    ]\n  ],\n  \"MINUTE\": [\n    [\n      \"03\"\n    ]\n  ],\n  \"SECOND\": [\n    [\n      \"49.822\"\n    ]\n  ],\n  \"log_type\": [\n    [\n      \"INFO\"\n    ]\n  ],\n  \"log_file\": [\n    [\n      \"o.n.p.j.c.XXXX\"\n    ]\n  ],\n  \"log_content\": [\n    [\n      \"Star Calculator\"\n    ]\n  ]\n}\n\n```\n\n上面所有切出来的field都是\bes中mapping index,都可以在用来做条件查询.\n\n[grokdebug.herokuapp.com](http://grokdebug.herokuapp.com/ )里面可以做测试.\n\n[grokdebug.herokuapp.com/patterns](http://grokdebug.herokuapp.com/patterns) 所有可用的patterns都可以在这里查到.\n\n现在我们在用的配置见/logstash/logstash-k8s.conf\n\n## Q: 需要指定mapping index的数据类型怎么办?\n\nA: grok match本质是一个正则匹配,默认出来的数据都是String.\b有些时候我们知道某个值其实是个数据类型,这时候可以直接指定数据类型. 不过match中仅支持直接转换成int ,float,语法是 %{NUMBER:response_time:int}\n完整配置:\n\n``` json\nmatch => {\n            \"message\" => \"%{DATA:log_date} %{TIME:log_localtime} %{WORD:log_type}  %{JAVAFILE:log_file} - %{WORD:method} %{URIPATHPARAM:uri} %{NUMBER:status:int} %{NUMBER:size:int} %{NUMBER:response_time:int}\"}\n```\n\n## Q: 索引文件想需要按日期分别存放,怎么办?\n\nA:  out中指定index\b格式,如 index=> \"k8s-%{+YYYY.MM.dd}\"\n\n完整out如下:\n\n``` json\noutput {\n    elasticsearch {\n      hosts => \"${ES_URL}\"\n      manage_template => false\n      index => \"k8s-%{+YYYY.MM.dd}\"\n      }\n  }\n\n```\n\n完整logstash.conf\n\n```conf\ninput {\n    beats {\n      host => \"0.0.0.0\"\n      port => 5043\n    }\n  }\n  filter {\n    if [type] == \"kube-logs\" {\n      mutate {\n        rename => [\"log\", \"message\"]\n      }\n      date {\n        match => [\"time\", \"ISO8601\"]\n        remove_field => [\"time\"]\n      }\n      grok {\n          match => {\n            \"source\" => \"/var/log/containers/%{DATA:pod_name}_%{DATA:namespace}_%{GREEDYDATA:container_name}-%{DATA:container_id}.log\"}\n          match => {\n            \"message\" => \"%{DATA:log_date} %{TIME:log_localtime} %{WORD:log_type}  %{JAVAFILE:log_file} - %{WORD:method} %{URIPATHPARAM:uri} %{NUMBER:status:int} %{NUMBER:size:int} %{NUMBER:response_time:int}\"}\n          remove_field => [\"source\"]\n          break_on_match => false\n      }\n    }\n  }\n  output {\n    elasticsearch {\n      hosts => \"${ES_URL}\"\n      manage_template => false\n      index => \"k8s-%{+YYYY.MM.dd}\"\n      }\n  }\n```","source":"_posts/logstash-grok.md","raw":"---\nlayout: post\ntitle: logstash grok配置规则\ncategory: ELK\ndate: 2018-05-20\ntags:\n- ELK\n- logstash\n---\n# logstash grok配置规则\n\n## [logstash.conf](https://www.elastic.co/guide/en/beats/metricbeat/current/logstash-output.html)\n\n这里主要需要配置grok match,把日志信息切分成索引数据(match本质是一个正则匹配)\n\n日志原文:\n\n```log\n2018-04-13 16:03:49.822 INFO  o.n.p.j.c.XXXXX - Star Calculator\n```\n\ngrok match:\n\n```json\n match => { \"message\" => \"%{DATA:log_date} %{TIME:log_localtime} %{WORD:log_type} %{JAVAFILE:log_file} - %{GREEDYDATA:log_content}\"}\n```\n\n切出来的数据\n\n``` json\n{\n  \"log_date\": [\n    [\n      \"2018-04-13\"\n    ]\n  ],\n  \"log_localtime\": [\n    [\n      \"16:03:49.822\"\n    ]\n  ],\n  \"HOUR\": [\n    [\n      \"16\"\n    ]\n  ],\n  \"MINUTE\": [\n    [\n      \"03\"\n    ]\n  ],\n  \"SECOND\": [\n    [\n      \"49.822\"\n    ]\n  ],\n  \"log_type\": [\n    [\n      \"INFO\"\n    ]\n  ],\n  \"log_file\": [\n    [\n      \"o.n.p.j.c.XXXX\"\n    ]\n  ],\n  \"log_content\": [\n    [\n      \"Star Calculator\"\n    ]\n  ]\n}\n\n```\n\n上面所有切出来的field都是\bes中mapping index,都可以在用来做条件查询.\n\n[grokdebug.herokuapp.com](http://grokdebug.herokuapp.com/ )里面可以做测试.\n\n[grokdebug.herokuapp.com/patterns](http://grokdebug.herokuapp.com/patterns) 所有可用的patterns都可以在这里查到.\n\n现在我们在用的配置见/logstash/logstash-k8s.conf\n\n## Q: 需要指定mapping index的数据类型怎么办?\n\nA: grok match本质是一个正则匹配,默认出来的数据都是String.\b有些时候我们知道某个值其实是个数据类型,这时候可以直接指定数据类型. 不过match中仅支持直接转换成int ,float,语法是 %{NUMBER:response_time:int}\n完整配置:\n\n``` json\nmatch => {\n            \"message\" => \"%{DATA:log_date} %{TIME:log_localtime} %{WORD:log_type}  %{JAVAFILE:log_file} - %{WORD:method} %{URIPATHPARAM:uri} %{NUMBER:status:int} %{NUMBER:size:int} %{NUMBER:response_time:int}\"}\n```\n\n## Q: 索引文件想需要按日期分别存放,怎么办?\n\nA:  out中指定index\b格式,如 index=> \"k8s-%{+YYYY.MM.dd}\"\n\n完整out如下:\n\n``` json\noutput {\n    elasticsearch {\n      hosts => \"${ES_URL}\"\n      manage_template => false\n      index => \"k8s-%{+YYYY.MM.dd}\"\n      }\n  }\n\n```\n\n完整logstash.conf\n\n```conf\ninput {\n    beats {\n      host => \"0.0.0.0\"\n      port => 5043\n    }\n  }\n  filter {\n    if [type] == \"kube-logs\" {\n      mutate {\n        rename => [\"log\", \"message\"]\n      }\n      date {\n        match => [\"time\", \"ISO8601\"]\n        remove_field => [\"time\"]\n      }\n      grok {\n          match => {\n            \"source\" => \"/var/log/containers/%{DATA:pod_name}_%{DATA:namespace}_%{GREEDYDATA:container_name}-%{DATA:container_id}.log\"}\n          match => {\n            \"message\" => \"%{DATA:log_date} %{TIME:log_localtime} %{WORD:log_type}  %{JAVAFILE:log_file} - %{WORD:method} %{URIPATHPARAM:uri} %{NUMBER:status:int} %{NUMBER:size:int} %{NUMBER:response_time:int}\"}\n          remove_field => [\"source\"]\n          break_on_match => false\n      }\n    }\n  }\n  output {\n    elasticsearch {\n      hosts => \"${ES_URL}\"\n      manage_template => false\n      index => \"k8s-%{+YYYY.MM.dd}\"\n      }\n  }\n```","slug":"logstash-grok","published":1,"updated":"2018-05-20T04:04:28.060Z","comments":1,"photos":[],"link":"","_id":"cji704sl30001el0ru7q9bk2x","content":"<h1 id=\"logstash-grok配置规则\"><a href=\"#logstash-grok配置规则\" class=\"headerlink\" title=\"logstash grok配置规则\"></a>logstash grok配置规则</h1><h2 id=\"logstash-conf\"><a href=\"#logstash-conf\" class=\"headerlink\" title=\"logstash.conf\"></a><a href=\"https://www.elastic.co/guide/en/beats/metricbeat/current/logstash-output.html\" target=\"_blank\" rel=\"noopener\">logstash.conf</a></h2><p>这里主要需要配置grok match,把日志信息切分成索引数据(match本质是一个正则匹配)</p>\n<p>日志原文:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2018-04-13 16:03:49.822 INFO  o.n.p.j.c.XXXXX - Star Calculator</span><br></pre></td></tr></table></figure>\n<p>grok match:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">match =&gt; &#123; \"message\" =&gt; \"%&#123;DATA:log_date&#125; %&#123;TIME:log_localtime&#125; %&#123;WORD:log_type&#125; %&#123;JAVAFILE:log_file&#125; - %&#123;GREEDYDATA:log_content&#125;\"&#125;</span><br></pre></td></tr></table></figure>\n<p>切出来的数据</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"log_date\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"2018-04-13\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"log_localtime\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"16:03:49.822\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"HOUR\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"16\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"MINUTE\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"03\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"SECOND\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"49.822\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"log_type\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"INFO\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"log_file\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"o.n.p.j.c.XXXX\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"log_content\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"Star Calculator\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面所有切出来的field都是\bes中mapping index,都可以在用来做条件查询.</p>\n<p><a href=\"http://grokdebug.herokuapp.com/\" target=\"_blank\" rel=\"noopener\">grokdebug.herokuapp.com</a>里面可以做测试.</p>\n<p><a href=\"http://grokdebug.herokuapp.com/patterns\" target=\"_blank\" rel=\"noopener\">grokdebug.herokuapp.com/patterns</a> 所有可用的patterns都可以在这里查到.</p>\n<p>现在我们在用的配置见/logstash/logstash-k8s.conf</p>\n<h2 id=\"Q-需要指定mapping-index的数据类型怎么办\"><a href=\"#Q-需要指定mapping-index的数据类型怎么办\" class=\"headerlink\" title=\"Q: 需要指定mapping index的数据类型怎么办?\"></a>Q: 需要指定mapping index的数据类型怎么办?</h2><p>A: grok match本质是一个正则匹配,默认出来的数据都是String.\b有些时候我们知道某个值其实是个数据类型,这时候可以直接指定数据类型. 不过match中仅支持直接转换成int ,float,语法是 %{NUMBER:response_time:int}<br>完整配置:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">match =&gt; &#123;</span><br><span class=\"line\">            \"message\" =&gt; \"%&#123;DATA:log_date&#125; %&#123;TIME:log_localtime&#125; %&#123;WORD:log_type&#125;  %&#123;JAVAFILE:log_file&#125; - %&#123;WORD:method&#125; %&#123;URIPATHPARAM:uri&#125; %&#123;NUMBER:status:int&#125; %&#123;NUMBER:size:int&#125; %&#123;NUMBER:response_time:int&#125;\"&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Q-索引文件想需要按日期分别存放-怎么办\"><a href=\"#Q-索引文件想需要按日期分别存放-怎么办\" class=\"headerlink\" title=\"Q: 索引文件想需要按日期分别存放,怎么办?\"></a>Q: 索引文件想需要按日期分别存放,怎么办?</h2><p>A:  out中指定index\b格式,如 index=&gt; “k8s-%{+YYYY.MM.dd}”</p>\n<p>完整out如下:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output &#123;</span><br><span class=\"line\">    elasticsearch &#123;</span><br><span class=\"line\">      hosts =&gt; \"$&#123;ES_URL&#125;\"</span><br><span class=\"line\">      manage_template =&gt; false</span><br><span class=\"line\">      index =&gt; \"k8s-%&#123;+YYYY.MM.dd&#125;\"</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>完整logstash.conf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input &#123;</span><br><span class=\"line\">    beats &#123;</span><br><span class=\"line\">      host =&gt; &quot;0.0.0.0&quot;</span><br><span class=\"line\">      port =&gt; 5043</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  filter &#123;</span><br><span class=\"line\">    if [type] == &quot;kube-logs&quot; &#123;</span><br><span class=\"line\">      mutate &#123;</span><br><span class=\"line\">        rename =&gt; [&quot;log&quot;, &quot;message&quot;]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      date &#123;</span><br><span class=\"line\">        match =&gt; [&quot;time&quot;, &quot;ISO8601&quot;]</span><br><span class=\"line\">        remove_field =&gt; [&quot;time&quot;]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      grok &#123;</span><br><span class=\"line\">          match =&gt; &#123;</span><br><span class=\"line\">            &quot;source&quot; =&gt; &quot;/var/log/containers/%&#123;DATA:pod_name&#125;_%&#123;DATA:namespace&#125;_%&#123;GREEDYDATA:container_name&#125;-%&#123;DATA:container_id&#125;.log&quot;&#125;</span><br><span class=\"line\">          match =&gt; &#123;</span><br><span class=\"line\">            &quot;message&quot; =&gt; &quot;%&#123;DATA:log_date&#125; %&#123;TIME:log_localtime&#125; %&#123;WORD:log_type&#125;  %&#123;JAVAFILE:log_file&#125; - %&#123;WORD:method&#125; %&#123;URIPATHPARAM:uri&#125; %&#123;NUMBER:status:int&#125; %&#123;NUMBER:size:int&#125; %&#123;NUMBER:response_time:int&#125;&quot;&#125;</span><br><span class=\"line\">          remove_field =&gt; [&quot;source&quot;]</span><br><span class=\"line\">          break_on_match =&gt; false</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  output &#123;</span><br><span class=\"line\">    elasticsearch &#123;</span><br><span class=\"line\">      hosts =&gt; &quot;$&#123;ES_URL&#125;&quot;</span><br><span class=\"line\">      manage_template =&gt; false</span><br><span class=\"line\">      index =&gt; &quot;k8s-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"logstash-grok配置规则\"><a href=\"#logstash-grok配置规则\" class=\"headerlink\" title=\"logstash grok配置规则\"></a>logstash grok配置规则</h1><h2 id=\"logstash-conf\"><a href=\"#logstash-conf\" class=\"headerlink\" title=\"logstash.conf\"></a><a href=\"https://www.elastic.co/guide/en/beats/metricbeat/current/logstash-output.html\" target=\"_blank\" rel=\"noopener\">logstash.conf</a></h2><p>这里主要需要配置grok match,把日志信息切分成索引数据(match本质是一个正则匹配)</p>\n<p>日志原文:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2018-04-13 16:03:49.822 INFO  o.n.p.j.c.XXXXX - Star Calculator</span><br></pre></td></tr></table></figure>\n<p>grok match:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">match =&gt; &#123; \"message\" =&gt; \"%&#123;DATA:log_date&#125; %&#123;TIME:log_localtime&#125; %&#123;WORD:log_type&#125; %&#123;JAVAFILE:log_file&#125; - %&#123;GREEDYDATA:log_content&#125;\"&#125;</span><br></pre></td></tr></table></figure>\n<p>切出来的数据</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"log_date\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"2018-04-13\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"log_localtime\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"16:03:49.822\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"HOUR\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"16\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"MINUTE\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"03\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"SECOND\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"49.822\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"log_type\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"INFO\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"log_file\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"o.n.p.j.c.XXXX\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"log_content\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"Star Calculator\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面所有切出来的field都是\bes中mapping index,都可以在用来做条件查询.</p>\n<p><a href=\"http://grokdebug.herokuapp.com/\" target=\"_blank\" rel=\"noopener\">grokdebug.herokuapp.com</a>里面可以做测试.</p>\n<p><a href=\"http://grokdebug.herokuapp.com/patterns\" target=\"_blank\" rel=\"noopener\">grokdebug.herokuapp.com/patterns</a> 所有可用的patterns都可以在这里查到.</p>\n<p>现在我们在用的配置见/logstash/logstash-k8s.conf</p>\n<h2 id=\"Q-需要指定mapping-index的数据类型怎么办\"><a href=\"#Q-需要指定mapping-index的数据类型怎么办\" class=\"headerlink\" title=\"Q: 需要指定mapping index的数据类型怎么办?\"></a>Q: 需要指定mapping index的数据类型怎么办?</h2><p>A: grok match本质是一个正则匹配,默认出来的数据都是String.\b有些时候我们知道某个值其实是个数据类型,这时候可以直接指定数据类型. 不过match中仅支持直接转换成int ,float,语法是 %{NUMBER:response_time:int}<br>完整配置:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">match =&gt; &#123;</span><br><span class=\"line\">            \"message\" =&gt; \"%&#123;DATA:log_date&#125; %&#123;TIME:log_localtime&#125; %&#123;WORD:log_type&#125;  %&#123;JAVAFILE:log_file&#125; - %&#123;WORD:method&#125; %&#123;URIPATHPARAM:uri&#125; %&#123;NUMBER:status:int&#125; %&#123;NUMBER:size:int&#125; %&#123;NUMBER:response_time:int&#125;\"&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Q-索引文件想需要按日期分别存放-怎么办\"><a href=\"#Q-索引文件想需要按日期分别存放-怎么办\" class=\"headerlink\" title=\"Q: 索引文件想需要按日期分别存放,怎么办?\"></a>Q: 索引文件想需要按日期分别存放,怎么办?</h2><p>A:  out中指定index\b格式,如 index=&gt; “k8s-%{+YYYY.MM.dd}”</p>\n<p>完整out如下:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output &#123;</span><br><span class=\"line\">    elasticsearch &#123;</span><br><span class=\"line\">      hosts =&gt; \"$&#123;ES_URL&#125;\"</span><br><span class=\"line\">      manage_template =&gt; false</span><br><span class=\"line\">      index =&gt; \"k8s-%&#123;+YYYY.MM.dd&#125;\"</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>完整logstash.conf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input &#123;</span><br><span class=\"line\">    beats &#123;</span><br><span class=\"line\">      host =&gt; &quot;0.0.0.0&quot;</span><br><span class=\"line\">      port =&gt; 5043</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  filter &#123;</span><br><span class=\"line\">    if [type] == &quot;kube-logs&quot; &#123;</span><br><span class=\"line\">      mutate &#123;</span><br><span class=\"line\">        rename =&gt; [&quot;log&quot;, &quot;message&quot;]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      date &#123;</span><br><span class=\"line\">        match =&gt; [&quot;time&quot;, &quot;ISO8601&quot;]</span><br><span class=\"line\">        remove_field =&gt; [&quot;time&quot;]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      grok &#123;</span><br><span class=\"line\">          match =&gt; &#123;</span><br><span class=\"line\">            &quot;source&quot; =&gt; &quot;/var/log/containers/%&#123;DATA:pod_name&#125;_%&#123;DATA:namespace&#125;_%&#123;GREEDYDATA:container_name&#125;-%&#123;DATA:container_id&#125;.log&quot;&#125;</span><br><span class=\"line\">          match =&gt; &#123;</span><br><span class=\"line\">            &quot;message&quot; =&gt; &quot;%&#123;DATA:log_date&#125; %&#123;TIME:log_localtime&#125; %&#123;WORD:log_type&#125;  %&#123;JAVAFILE:log_file&#125; - %&#123;WORD:method&#125; %&#123;URIPATHPARAM:uri&#125; %&#123;NUMBER:status:int&#125; %&#123;NUMBER:size:int&#125; %&#123;NUMBER:response_time:int&#125;&quot;&#125;</span><br><span class=\"line\">          remove_field =&gt; [&quot;source&quot;]</span><br><span class=\"line\">          break_on_match =&gt; false</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  output &#123;</span><br><span class=\"line\">    elasticsearch &#123;</span><br><span class=\"line\">      hosts =&gt; &quot;$&#123;ES_URL&#125;&quot;</span><br><span class=\"line\">      manage_template =&gt; false</span><br><span class=\"line\">      index =&gt; &quot;k8s-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"同步博客到腾讯云社区声明","date":"2018-05-21T16:00:00.000Z","_content":"# 同步博客到腾讯云社区声明\n\n![头像](http://7xrayk.com1.z0.glb.clouddn.com/QQ20180522-0.jpg)\n我的博客即将搬运同步至腾讯云+社区，邀请大家一同入驻：[https://cloud.tencent.com/developer/support-plan?invite_code=2wlwxlkrybgg8](https://cloud.tencent.com/developer/support-plan?invite_code=2wlwxlkrybgg8)","source":"_posts/qcloud-move.md","raw":"---\nlayout: post\ntitle: 同步博客到腾讯云社区声明\ncategory: 其他\ndate: 2018-05-22\ntags:\n- 其他\n---\n# 同步博客到腾讯云社区声明\n\n![头像](http://7xrayk.com1.z0.glb.clouddn.com/QQ20180522-0.jpg)\n我的博客即将搬运同步至腾讯云+社区，邀请大家一同入驻：[https://cloud.tencent.com/developer/support-plan?invite_code=2wlwxlkrybgg8](https://cloud.tencent.com/developer/support-plan?invite_code=2wlwxlkrybgg8)","slug":"qcloud-move","published":1,"updated":"2018-05-22T08:45:53.163Z","comments":1,"photos":[],"link":"","_id":"cji704sld0004el0r83oc7run","content":"<h1 id=\"同步博客到腾讯云社区声明\"><a href=\"#同步博客到腾讯云社区声明\" class=\"headerlink\" title=\"同步博客到腾讯云社区声明\"></a>同步博客到腾讯云社区声明</h1><p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/QQ20180522-0.jpg\" alt=\"头像\"><br>我的博客即将搬运同步至腾讯云+社区，邀请大家一同入驻：<a href=\"https://cloud.tencent.com/developer/support-plan?invite_code=2wlwxlkrybgg8\" target=\"_blank\" rel=\"noopener\">https://cloud.tencent.com/developer/support-plan?invite_code=2wlwxlkrybgg8</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"同步博客到腾讯云社区声明\"><a href=\"#同步博客到腾讯云社区声明\" class=\"headerlink\" title=\"同步博客到腾讯云社区声明\"></a>同步博客到腾讯云社区声明</h1><p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/QQ20180522-0.jpg\" alt=\"头像\"><br>我的博客即将搬运同步至腾讯云+社区，邀请大家一同入驻：<a href=\"https://cloud.tencent.com/developer/support-plan?invite_code=2wlwxlkrybgg8\" target=\"_blank\" rel=\"noopener\">https://cloud.tencent.com/developer/support-plan?invite_code=2wlwxlkrybgg8</a></p>\n"},{"layout":"post","title":"用Visual Studio Code Debug世界上最好的语言(Mac篇)","date":"2018-05-20T16:00:00.000Z","_content":"# 用Visual Studio Code Debug世界上最好的语言(Mac篇)\n\n首先,你要有台Macbook Pro,接着才继续看这个教程.\n\nPS:Windows用户看这里[用Visual Studio Code Debug世界上最好的语言](https://zhuanlan.zhihu.com/p/25844268)\n\n## brew 环境准备\n\n见[brew.sh](https://brew.sh/index_zh-cn),或者\n\n```sh\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n## PHP7 + nginx + php-fpm + xdebug\n\n### \bPHP7\n\n```sh\n\nbrew install php@7.1\n\n```\n\n安装完了之后看下安装路径:\n\n```sh\n\nwhere php;\n\n##➜  ~ where php\n##   /usr/local/opt/php@7.1/bin/php\n##   /usr/bin/php\n\n```\n\n一般php.ini在/usr/local/etc/php/7.1\n\n```sh\nls /usr/local/etc/php/7.1\n#conf.d       pear.conf    php-fpm.conf php-fpm.d    php.ini\n```\n\n待会我们配置xdebug和php-fpm的时候会用到这个这些配置文件的,先跳过\n\n## xdebug安装\n\n本来其实一句brew install php71-xdebug --without-homebrew-php就完事的,谁知道homebrew-php最近被移除了,所以就尴尬了...\n\n手动去下载xdebug然后配置吧.下载页面:[https://xdebug.org/files/](https://xdebug.org/files/)\n\n选择自己要安装的版本,我这里选了2.6.\n\n```sh\n# 创建一个你喜欢的路径存放,我放在了~/tool/目录下;\nmkdir tool;\n\nwget https://xdebug.org/files/xdebug-2.6.0.tgz;\n\n# 解压\ntar xvzf xdebug-2.6.0.tgz;\n\ncd xdebug-2.6.0;\n\n# 初始化php模块\nphpize;\n\n# 生成对应的so文件\n# ./configure --enable-xdebug --with-php-config=PHP安装路径/bin/php-config;\n./configure --enable-xdebug --with-php-config=/usr/local/Cellar/php@7.1/7.1.17/bin/php-config;\n\nmake;\n\nmake test;\n\n# 上一步正常make执行完毕之后会在xdebug-2.6.0/modules/文件夹下生成xdebug.la和xdebug.so,待会我们在php.ini中配置xdebug会用到这个文件\n\n```\n\n[https://www.techflirt.com/install-configure-xdebug-on-xampp-windows-and-mac/](https://www.techflirt.com/install-configure-xdebug-on-xampp-windows-and-mac/)\n\n## 安装nginx\n\n```sh\n\nbrew install nginx\n\n```\n\n### 配置nginx.conf\n\n安装完成之后开始配置nginx,首先创建一堆需要用到的文件件.\n\n```sh\nmkdir -p /usr/local/var/logs/nginx\nmkdir -p /usr/local/etc/nginx/sites-available\nmkdir -p /usr/local/etc/nginx/sites-enabled\nmkdir -p /usr/local/etc/nginx/conf.d\nmkdir -p /usr/local/etc/nginx/ssl\nsudo mkdir -p /var/www\nsudo chown :staff /var/www\nsudo chmod 777 /var/www\n\n#作者：GQ1994\n#链接：https://www.jianshu.com/p/a642ee8eca9a\n#來源：简书\n#著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n```\n\n然后vim /usr/local/etc/nginx/nginx.conf 输入以下内容：\n\n```conf\nuser root wheel; #默认的是nobody会导致403\nworker_processes  1;\n\nerror_log   /usr/local/var/logs/nginx/error.log debug;\n\n\npid        /usr/local/var/run/nginx.pid;\n\n\nevents {\n    worker_connections  256;\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /usr/local/var/logs/access.log  main;\n\n    sendfile        on;\n    keepalive_timeout  65;\n    port_in_redirect off;\n\n    include /usr/local/etc/nginx/sites-enabled/*;\n}\n```\n\n### 设置nginx php-fpm配置文件\n\nvim /usr/local/etc/nginx/conf.d/php-fpm\n修改为(没有则创建)\n\n```conf\n#proxy the php scripts to php-fpm\nlocation ~ \\.php$ {\n    try_files                   $uri = 404;\n    fastcgi_pass                127.0.0.1:9000;\n    fastcgi_index               index.php;\n    fastcgi_intercept_errors    on;\n    include /usr/local/etc/nginx/fastcgi.conf;\n}\n\n```\n\n### 创建默认虚拟主机default\n\nvim /usr/local/etc/nginx/sites-available/default输入：\n\n```conf\nserver {\nlisten       80;#如果80被用了可以换成别的,随你开心\nserver_name  www.qilipet.com admin.qilipet.com;\nroot   /var/www/pet/public;\n\naccess_log  /usr/local/var/logs/nginx/default.access.log  main;\nindex index.php index.html index.htm;\n\nlocation / {\n            # First attempt to serve request as file, then\n            # as directory, then fall back to displaying a 404.\n            try_files $uri $uri/ /index.php?$query_string;\n            # Uncomment to enable naxsi on this location\n            # include /etc/nginx/naxsi.rules\n    }\n\nlocation ~ \\.php$ {\n            fastcgi_pass  127.0.0.1:9000;\n            fastcgi_index index.php;\n            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n            include    fastcgi_params;\n    }\n}\n```\n\n此部分内容基本来自[GQ1994:mac下配置php、nginx、mysql、redis](https://www.jianshu.com/p/a642ee8eca9a)\n\n## 配置php.ini\n\n回到我们的/usr/local/etc/php/7.1文件夹\n\n在php.ini中加入xdebug\b配置\n\n```\bini\n\n[xdebug]\n;zend_extension=\"刚刚的xdebug路径/modules/xdebug.so\"\nzend_extension=\"~/tool/xdebug-2.6.0/modules/xdebug.so\"\nxdebug.remote_enable = 1\nxdebug.remote_autostart = 1\nxdebug.remote_connect_back = 1\n;默认的9000已经被php-fpm占用了,切记换一个端口\nxdebug.remote_port = 9001\nxdebug.scream = 0\nxdebug.show_local_vars = 1\n```\n\n重启一下php-fpm和nginx,看一下php是不是都正常跑起来了.\n\n## VS Code配置\n\n### User Settings配置PHP目录\n\n```json\n  \"php.executablePath\": \"/usr/local/opt/php@7.1/bin/php\"\n```\n\n### 安装php debug插件\n\n安装完成之后配置一下launch.json\n\n```json\n{\n    // 使用 IntelliSense 了解相关属性。 \n    // 悬停以查看现有属性的描述。\n    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n\n        {\n            \"name\": \"Listen for XDebug\",\n            \"type\": \"php\",\n            \"request\": \"launch\",\n            \"port\": 9001 //默认是9000已经被php-fpm占用,上一步我们配置远程端口是9001\n        },\n        {\n            \"name\": \"Launch currently open script\",\n            \"type\": \"php\",\n            \"request\": \"launch\",\n            \"program\": \"${file}\",\n            \"cwd\": \"${fileDirname}\",\n            \"port\": 9001 //默认是9000已经被php-fpm占用,上一步我们配置远程端口是9001\n        }\n    ]\n}\n```\n\n然后就愉快debug最好的语言吧!\n\n![debug](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-21%20%E4%B8%8B%E5%8D%8810.16.58.png)\n\n## 其他部分\n\n- [macOS系统PHP7增加Xdebug](https://itony.net/post/osx-php-xdebug.html)\n\n- [Install PEAR and PECL on Mac OS X](https://www.tuicool.com/articles/bE77N3)\n\n- [Xdebug on macOS 10.13 with PHP 7](https://questionfocus.com/xdebug-on-macos-10-13-with-php-7.html)\n\n- [install-configure-xdebug-on-xampp-windows-and-mac](https://www.techflirt.com/install-configure-xdebug-on-xampp-windows-and-mac/)\n\n- [installing-pecl-and-pear-on-os-x-10-11-el-capitan-macos-10-12-sierra-macos-10](https://stackoverflow.com/questions/32893056/installing-pecl-and-pear-on-os-x-10-11-el-capitan-macos-10-12-sierra-macos-10)","source":"_posts/xdebug-macos.md","raw":"---\nlayout: post\ntitle: 用Visual Studio Code Debug世界上最好的语言(Mac篇)\ncategory: PHP\ndate: 2018-05-21\ntags:\n- Visual Studio Code\n- debug\n- PHP\n- xdebug\n---\n# 用Visual Studio Code Debug世界上最好的语言(Mac篇)\n\n首先,你要有台Macbook Pro,接着才继续看这个教程.\n\nPS:Windows用户看这里[用Visual Studio Code Debug世界上最好的语言](https://zhuanlan.zhihu.com/p/25844268)\n\n## brew 环境准备\n\n见[brew.sh](https://brew.sh/index_zh-cn),或者\n\n```sh\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n## PHP7 + nginx + php-fpm + xdebug\n\n### \bPHP7\n\n```sh\n\nbrew install php@7.1\n\n```\n\n安装完了之后看下安装路径:\n\n```sh\n\nwhere php;\n\n##➜  ~ where php\n##   /usr/local/opt/php@7.1/bin/php\n##   /usr/bin/php\n\n```\n\n一般php.ini在/usr/local/etc/php/7.1\n\n```sh\nls /usr/local/etc/php/7.1\n#conf.d       pear.conf    php-fpm.conf php-fpm.d    php.ini\n```\n\n待会我们配置xdebug和php-fpm的时候会用到这个这些配置文件的,先跳过\n\n## xdebug安装\n\n本来其实一句brew install php71-xdebug --without-homebrew-php就完事的,谁知道homebrew-php最近被移除了,所以就尴尬了...\n\n手动去下载xdebug然后配置吧.下载页面:[https://xdebug.org/files/](https://xdebug.org/files/)\n\n选择自己要安装的版本,我这里选了2.6.\n\n```sh\n# 创建一个你喜欢的路径存放,我放在了~/tool/目录下;\nmkdir tool;\n\nwget https://xdebug.org/files/xdebug-2.6.0.tgz;\n\n# 解压\ntar xvzf xdebug-2.6.0.tgz;\n\ncd xdebug-2.6.0;\n\n# 初始化php模块\nphpize;\n\n# 生成对应的so文件\n# ./configure --enable-xdebug --with-php-config=PHP安装路径/bin/php-config;\n./configure --enable-xdebug --with-php-config=/usr/local/Cellar/php@7.1/7.1.17/bin/php-config;\n\nmake;\n\nmake test;\n\n# 上一步正常make执行完毕之后会在xdebug-2.6.0/modules/文件夹下生成xdebug.la和xdebug.so,待会我们在php.ini中配置xdebug会用到这个文件\n\n```\n\n[https://www.techflirt.com/install-configure-xdebug-on-xampp-windows-and-mac/](https://www.techflirt.com/install-configure-xdebug-on-xampp-windows-and-mac/)\n\n## 安装nginx\n\n```sh\n\nbrew install nginx\n\n```\n\n### 配置nginx.conf\n\n安装完成之后开始配置nginx,首先创建一堆需要用到的文件件.\n\n```sh\nmkdir -p /usr/local/var/logs/nginx\nmkdir -p /usr/local/etc/nginx/sites-available\nmkdir -p /usr/local/etc/nginx/sites-enabled\nmkdir -p /usr/local/etc/nginx/conf.d\nmkdir -p /usr/local/etc/nginx/ssl\nsudo mkdir -p /var/www\nsudo chown :staff /var/www\nsudo chmod 777 /var/www\n\n#作者：GQ1994\n#链接：https://www.jianshu.com/p/a642ee8eca9a\n#來源：简书\n#著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n```\n\n然后vim /usr/local/etc/nginx/nginx.conf 输入以下内容：\n\n```conf\nuser root wheel; #默认的是nobody会导致403\nworker_processes  1;\n\nerror_log   /usr/local/var/logs/nginx/error.log debug;\n\n\npid        /usr/local/var/run/nginx.pid;\n\n\nevents {\n    worker_connections  256;\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /usr/local/var/logs/access.log  main;\n\n    sendfile        on;\n    keepalive_timeout  65;\n    port_in_redirect off;\n\n    include /usr/local/etc/nginx/sites-enabled/*;\n}\n```\n\n### 设置nginx php-fpm配置文件\n\nvim /usr/local/etc/nginx/conf.d/php-fpm\n修改为(没有则创建)\n\n```conf\n#proxy the php scripts to php-fpm\nlocation ~ \\.php$ {\n    try_files                   $uri = 404;\n    fastcgi_pass                127.0.0.1:9000;\n    fastcgi_index               index.php;\n    fastcgi_intercept_errors    on;\n    include /usr/local/etc/nginx/fastcgi.conf;\n}\n\n```\n\n### 创建默认虚拟主机default\n\nvim /usr/local/etc/nginx/sites-available/default输入：\n\n```conf\nserver {\nlisten       80;#如果80被用了可以换成别的,随你开心\nserver_name  www.qilipet.com admin.qilipet.com;\nroot   /var/www/pet/public;\n\naccess_log  /usr/local/var/logs/nginx/default.access.log  main;\nindex index.php index.html index.htm;\n\nlocation / {\n            # First attempt to serve request as file, then\n            # as directory, then fall back to displaying a 404.\n            try_files $uri $uri/ /index.php?$query_string;\n            # Uncomment to enable naxsi on this location\n            # include /etc/nginx/naxsi.rules\n    }\n\nlocation ~ \\.php$ {\n            fastcgi_pass  127.0.0.1:9000;\n            fastcgi_index index.php;\n            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n            include    fastcgi_params;\n    }\n}\n```\n\n此部分内容基本来自[GQ1994:mac下配置php、nginx、mysql、redis](https://www.jianshu.com/p/a642ee8eca9a)\n\n## 配置php.ini\n\n回到我们的/usr/local/etc/php/7.1文件夹\n\n在php.ini中加入xdebug\b配置\n\n```\bini\n\n[xdebug]\n;zend_extension=\"刚刚的xdebug路径/modules/xdebug.so\"\nzend_extension=\"~/tool/xdebug-2.6.0/modules/xdebug.so\"\nxdebug.remote_enable = 1\nxdebug.remote_autostart = 1\nxdebug.remote_connect_back = 1\n;默认的9000已经被php-fpm占用了,切记换一个端口\nxdebug.remote_port = 9001\nxdebug.scream = 0\nxdebug.show_local_vars = 1\n```\n\n重启一下php-fpm和nginx,看一下php是不是都正常跑起来了.\n\n## VS Code配置\n\n### User Settings配置PHP目录\n\n```json\n  \"php.executablePath\": \"/usr/local/opt/php@7.1/bin/php\"\n```\n\n### 安装php debug插件\n\n安装完成之后配置一下launch.json\n\n```json\n{\n    // 使用 IntelliSense 了解相关属性。 \n    // 悬停以查看现有属性的描述。\n    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n\n        {\n            \"name\": \"Listen for XDebug\",\n            \"type\": \"php\",\n            \"request\": \"launch\",\n            \"port\": 9001 //默认是9000已经被php-fpm占用,上一步我们配置远程端口是9001\n        },\n        {\n            \"name\": \"Launch currently open script\",\n            \"type\": \"php\",\n            \"request\": \"launch\",\n            \"program\": \"${file}\",\n            \"cwd\": \"${fileDirname}\",\n            \"port\": 9001 //默认是9000已经被php-fpm占用,上一步我们配置远程端口是9001\n        }\n    ]\n}\n```\n\n然后就愉快debug最好的语言吧!\n\n![debug](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-21%20%E4%B8%8B%E5%8D%8810.16.58.png)\n\n## 其他部分\n\n- [macOS系统PHP7增加Xdebug](https://itony.net/post/osx-php-xdebug.html)\n\n- [Install PEAR and PECL on Mac OS X](https://www.tuicool.com/articles/bE77N3)\n\n- [Xdebug on macOS 10.13 with PHP 7](https://questionfocus.com/xdebug-on-macos-10-13-with-php-7.html)\n\n- [install-configure-xdebug-on-xampp-windows-and-mac](https://www.techflirt.com/install-configure-xdebug-on-xampp-windows-and-mac/)\n\n- [installing-pecl-and-pear-on-os-x-10-11-el-capitan-macos-10-12-sierra-macos-10](https://stackoverflow.com/questions/32893056/installing-pecl-and-pear-on-os-x-10-11-el-capitan-macos-10-12-sierra-macos-10)","slug":"xdebug-macos","published":1,"updated":"2018-05-23T02:11:03.004Z","comments":1,"photos":[],"link":"","_id":"cji704sle0005el0rl2gdbf81","content":"<h1 id=\"用Visual-Studio-Code-Debug世界上最好的语言-Mac篇\"><a href=\"#用Visual-Studio-Code-Debug世界上最好的语言-Mac篇\" class=\"headerlink\" title=\"用Visual Studio Code Debug世界上最好的语言(Mac篇)\"></a>用Visual Studio Code Debug世界上最好的语言(Mac篇)</h1><p>首先,你要有台Macbook Pro,接着才继续看这个教程.</p>\n<p>PS:Windows用户看这里<a href=\"https://zhuanlan.zhihu.com/p/25844268\" target=\"_blank\" rel=\"noopener\">用Visual Studio Code Debug世界上最好的语言</a></p>\n<h2 id=\"brew-环境准备\"><a href=\"#brew-环境准备\" class=\"headerlink\" title=\"brew 环境准备\"></a>brew 环境准备</h2><p>见<a href=\"https://brew.sh/index_zh-cn\" target=\"_blank\" rel=\"noopener\">brew.sh</a>,或者</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/ruby -e <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"PHP7-nginx-php-fpm-xdebug\"><a href=\"#PHP7-nginx-php-fpm-xdebug\" class=\"headerlink\" title=\"PHP7 + nginx + php-fpm + xdebug\"></a>PHP7 + nginx + php-fpm + xdebug</h2><h3 id=\"PHP7\"><a href=\"#PHP7\" class=\"headerlink\" title=\"\bPHP7\"></a>\bPHP7</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">brew install php@7.1</span><br></pre></td></tr></table></figure>\n<p>安装完了之后看下安装路径:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">where</span> php;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##➜  ~ where php</span></span><br><span class=\"line\"><span class=\"comment\">##   /usr/local/opt/php@7.1/bin/php</span></span><br><span class=\"line\"><span class=\"comment\">##   /usr/bin/php</span></span><br></pre></td></tr></table></figure>\n<p>一般php.ini在/usr/local/etc/php/7.1</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls /usr/<span class=\"built_in\">local</span>/etc/php/7.1</span><br><span class=\"line\"><span class=\"comment\">#conf.d       pear.conf    php-fpm.conf php-fpm.d    php.ini</span></span><br></pre></td></tr></table></figure>\n<p>待会我们配置xdebug和php-fpm的时候会用到这个这些配置文件的,先跳过</p>\n<h2 id=\"xdebug安装\"><a href=\"#xdebug安装\" class=\"headerlink\" title=\"xdebug安装\"></a>xdebug安装</h2><p>本来其实一句brew install php71-xdebug –without-homebrew-php就完事的,谁知道homebrew-php最近被移除了,所以就尴尬了…</p>\n<p>手动去下载xdebug然后配置吧.下载页面:<a href=\"https://xdebug.org/files/\" target=\"_blank\" rel=\"noopener\">https://xdebug.org/files/</a></p>\n<p>选择自己要安装的版本,我这里选了2.6.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建一个你喜欢的路径存放,我放在了~/tool/目录下;</span></span><br><span class=\"line\">mkdir tool;</span><br><span class=\"line\"></span><br><span class=\"line\">wget https://xdebug.org/files/xdebug-2.6.0.tgz;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">tar xvzf xdebug-2.6.0.tgz;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> xdebug-2.6.0;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 初始化php模块</span></span><br><span class=\"line\">phpize;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成对应的so文件</span></span><br><span class=\"line\"><span class=\"comment\"># ./configure --enable-xdebug --with-php-config=PHP安装路径/bin/php-config;</span></span><br><span class=\"line\">./configure --<span class=\"built_in\">enable</span>-xdebug --with-php-config=/usr/<span class=\"built_in\">local</span>/Cellar/php@7.1/7.1.17/bin/php-config;</span><br><span class=\"line\"></span><br><span class=\"line\">make;</span><br><span class=\"line\"></span><br><span class=\"line\">make <span class=\"built_in\">test</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 上一步正常make执行完毕之后会在xdebug-2.6.0/modules/文件夹下生成xdebug.la和xdebug.so,待会我们在php.ini中配置xdebug会用到这个文件</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.techflirt.com/install-configure-xdebug-on-xampp-windows-and-mac/\" target=\"_blank\" rel=\"noopener\">https://www.techflirt.com/install-configure-xdebug-on-xampp-windows-and-mac/</a></p>\n<h2 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">brew install nginx</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置nginx-conf\"><a href=\"#配置nginx-conf\" class=\"headerlink\" title=\"配置nginx.conf\"></a>配置nginx.conf</h3><p>安装完成之后开始配置nginx,首先创建一堆需要用到的文件件.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /usr/<span class=\"built_in\">local</span>/var/logs/nginx</span><br><span class=\"line\">mkdir -p /usr/<span class=\"built_in\">local</span>/etc/nginx/sites-available</span><br><span class=\"line\">mkdir -p /usr/<span class=\"built_in\">local</span>/etc/nginx/sites-enabled</span><br><span class=\"line\">mkdir -p /usr/<span class=\"built_in\">local</span>/etc/nginx/conf.d</span><br><span class=\"line\">mkdir -p /usr/<span class=\"built_in\">local</span>/etc/nginx/ssl</span><br><span class=\"line\">sudo mkdir -p /var/www</span><br><span class=\"line\">sudo chown :staff /var/www</span><br><span class=\"line\">sudo chmod 777 /var/www</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#作者：GQ1994</span></span><br><span class=\"line\"><span class=\"comment\">#链接：https://www.jianshu.com/p/a642ee8eca9a</span></span><br><span class=\"line\"><span class=\"comment\">#來源：简书</span></span><br><span class=\"line\"><span class=\"comment\">#著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span></span><br></pre></td></tr></table></figure>\n<p>然后vim /usr/local/etc/nginx/nginx.conf 输入以下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user root wheel; #默认的是nobody会导致403</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">error_log   /usr/local/var/logs/nginx/error.log debug;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">pid        /usr/local/var/run/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  256;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  /usr/local/var/logs/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    port_in_redirect off;</span><br><span class=\"line\"></span><br><span class=\"line\">    include /usr/local/etc/nginx/sites-enabled/*;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置nginx-php-fpm配置文件\"><a href=\"#设置nginx-php-fpm配置文件\" class=\"headerlink\" title=\"设置nginx php-fpm配置文件\"></a>设置nginx php-fpm配置文件</h3><p>vim /usr/local/etc/nginx/conf.d/php-fpm<br>修改为(没有则创建)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#proxy the php scripts to php-fpm</span><br><span class=\"line\">location ~ \\.php$ &#123;</span><br><span class=\"line\">    try_files                   $uri = 404;</span><br><span class=\"line\">    fastcgi_pass                127.0.0.1:9000;</span><br><span class=\"line\">    fastcgi_index               index.php;</span><br><span class=\"line\">    fastcgi_intercept_errors    on;</span><br><span class=\"line\">    include /usr/local/etc/nginx/fastcgi.conf;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建默认虚拟主机default\"><a href=\"#创建默认虚拟主机default\" class=\"headerlink\" title=\"创建默认虚拟主机default\"></a>创建默认虚拟主机default</h3><p>vim /usr/local/etc/nginx/sites-available/default输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">listen       80;#如果80被用了可以换成别的,随你开心</span><br><span class=\"line\">server_name  www.qilipet.com admin.qilipet.com;</span><br><span class=\"line\">root   /var/www/pet/public;</span><br><span class=\"line\"></span><br><span class=\"line\">access_log  /usr/local/var/logs/nginx/default.access.log  main;</span><br><span class=\"line\">index index.php index.html index.htm;</span><br><span class=\"line\"></span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">            # First attempt to serve request as file, then</span><br><span class=\"line\">            # as directory, then fall back to displaying a 404.</span><br><span class=\"line\">            try_files $uri $uri/ /index.php?$query_string;</span><br><span class=\"line\">            # Uncomment to enable naxsi on this location</span><br><span class=\"line\">            # include /etc/nginx/naxsi.rules</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">location ~ \\.php$ &#123;</span><br><span class=\"line\">            fastcgi_pass  127.0.0.1:9000;</span><br><span class=\"line\">            fastcgi_index index.php;</span><br><span class=\"line\">            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class=\"line\">            include    fastcgi_params;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此部分内容基本来自<a href=\"https://www.jianshu.com/p/a642ee8eca9a\" target=\"_blank\" rel=\"noopener\">GQ1994:mac下配置php、nginx、mysql、redis</a></p>\n<h2 id=\"配置php-ini\"><a href=\"#配置php-ini\" class=\"headerlink\" title=\"配置php.ini\"></a>配置php.ini</h2><p>回到我们的/usr/local/etc/php/7.1文件夹</p>\n<p>在php.ini中加入xdebug\b配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[xdebug]</span><br><span class=\"line\">;zend_extension=&quot;刚刚的xdebug路径/modules/xdebug.so&quot;</span><br><span class=\"line\">zend_extension=&quot;~/tool/xdebug-2.6.0/modules/xdebug.so&quot;</span><br><span class=\"line\">xdebug.remote_enable = 1</span><br><span class=\"line\">xdebug.remote_autostart = 1</span><br><span class=\"line\">xdebug.remote_connect_back = 1</span><br><span class=\"line\">;默认的9000已经被php-fpm占用了,切记换一个端口</span><br><span class=\"line\">xdebug.remote_port = 9001</span><br><span class=\"line\">xdebug.scream = 0</span><br><span class=\"line\">xdebug.show_local_vars = 1</span><br></pre></td></tr></table></figure>\n<p>重启一下php-fpm和nginx,看一下php是不是都正常跑起来了.</p>\n<h2 id=\"VS-Code配置\"><a href=\"#VS-Code配置\" class=\"headerlink\" title=\"VS Code配置\"></a>VS Code配置</h2><h3 id=\"User-Settings配置PHP目录\"><a href=\"#User-Settings配置PHP目录\" class=\"headerlink\" title=\"User Settings配置PHP目录\"></a>User Settings配置PHP目录</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"php.executablePath\": \"/usr/local/opt/php@7.1/bin/php\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装php-debug插件\"><a href=\"#安装php-debug插件\" class=\"headerlink\" title=\"安装php debug插件\"></a>安装php debug插件</h3><p>安装完成之后配置一下launch.json</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    // 使用 IntelliSense 了解相关属性。 </span><br><span class=\"line\">    // 悬停以查看现有属性的描述。</span><br><span class=\"line\">    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class=\"line\">    \"version\": \"0.2.0\",</span><br><span class=\"line\">    \"configurations\": [</span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Listen for XDebug\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"php\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"request\"</span>: <span class=\"string\">\"launch\"</span>,</span><br><span class=\"line\">            \"port\": 9001 //默认是9000已经被php-fpm占用,上一步我们配置远程端口是9001</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Launch currently open script\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"php\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"request\"</span>: <span class=\"string\">\"launch\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"program\"</span>: <span class=\"string\">\"$&#123;file&#125;\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"cwd\"</span>: <span class=\"string\">\"$&#123;fileDirname&#125;\"</span>,</span><br><span class=\"line\">            \"port\": 9001 //默认是9000已经被php-fpm占用,上一步我们配置远程端口是9001</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后就愉快debug最好的语言吧!</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-21%20%E4%B8%8B%E5%8D%8810.16.58.png\" alt=\"debug\"></p>\n<h2 id=\"其他部分\"><a href=\"#其他部分\" class=\"headerlink\" title=\"其他部分\"></a>其他部分</h2><ul>\n<li><p><a href=\"https://itony.net/post/osx-php-xdebug.html\" target=\"_blank\" rel=\"noopener\">macOS系统PHP7增加Xdebug</a></p>\n</li>\n<li><p><a href=\"https://www.tuicool.com/articles/bE77N3\" target=\"_blank\" rel=\"noopener\">Install PEAR and PECL on Mac OS X</a></p>\n</li>\n<li><p><a href=\"https://questionfocus.com/xdebug-on-macos-10-13-with-php-7.html\" target=\"_blank\" rel=\"noopener\">Xdebug on macOS 10.13 with PHP 7</a></p>\n</li>\n<li><p><a href=\"https://www.techflirt.com/install-configure-xdebug-on-xampp-windows-and-mac/\" target=\"_blank\" rel=\"noopener\">install-configure-xdebug-on-xampp-windows-and-mac</a></p>\n</li>\n<li><p><a href=\"https://stackoverflow.com/questions/32893056/installing-pecl-and-pear-on-os-x-10-11-el-capitan-macos-10-12-sierra-macos-10\" target=\"_blank\" rel=\"noopener\">installing-pecl-and-pear-on-os-x-10-11-el-capitan-macos-10-12-sierra-macos-10</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"用Visual-Studio-Code-Debug世界上最好的语言-Mac篇\"><a href=\"#用Visual-Studio-Code-Debug世界上最好的语言-Mac篇\" class=\"headerlink\" title=\"用Visual Studio Code Debug世界上最好的语言(Mac篇)\"></a>用Visual Studio Code Debug世界上最好的语言(Mac篇)</h1><p>首先,你要有台Macbook Pro,接着才继续看这个教程.</p>\n<p>PS:Windows用户看这里<a href=\"https://zhuanlan.zhihu.com/p/25844268\" target=\"_blank\" rel=\"noopener\">用Visual Studio Code Debug世界上最好的语言</a></p>\n<h2 id=\"brew-环境准备\"><a href=\"#brew-环境准备\" class=\"headerlink\" title=\"brew 环境准备\"></a>brew 环境准备</h2><p>见<a href=\"https://brew.sh/index_zh-cn\" target=\"_blank\" rel=\"noopener\">brew.sh</a>,或者</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/ruby -e <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"PHP7-nginx-php-fpm-xdebug\"><a href=\"#PHP7-nginx-php-fpm-xdebug\" class=\"headerlink\" title=\"PHP7 + nginx + php-fpm + xdebug\"></a>PHP7 + nginx + php-fpm + xdebug</h2><h3 id=\"PHP7\"><a href=\"#PHP7\" class=\"headerlink\" title=\"\bPHP7\"></a>\bPHP7</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">brew install php@7.1</span><br></pre></td></tr></table></figure>\n<p>安装完了之后看下安装路径:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">where</span> php;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##➜  ~ where php</span></span><br><span class=\"line\"><span class=\"comment\">##   /usr/local/opt/php@7.1/bin/php</span></span><br><span class=\"line\"><span class=\"comment\">##   /usr/bin/php</span></span><br></pre></td></tr></table></figure>\n<p>一般php.ini在/usr/local/etc/php/7.1</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls /usr/<span class=\"built_in\">local</span>/etc/php/7.1</span><br><span class=\"line\"><span class=\"comment\">#conf.d       pear.conf    php-fpm.conf php-fpm.d    php.ini</span></span><br></pre></td></tr></table></figure>\n<p>待会我们配置xdebug和php-fpm的时候会用到这个这些配置文件的,先跳过</p>\n<h2 id=\"xdebug安装\"><a href=\"#xdebug安装\" class=\"headerlink\" title=\"xdebug安装\"></a>xdebug安装</h2><p>本来其实一句brew install php71-xdebug –without-homebrew-php就完事的,谁知道homebrew-php最近被移除了,所以就尴尬了…</p>\n<p>手动去下载xdebug然后配置吧.下载页面:<a href=\"https://xdebug.org/files/\" target=\"_blank\" rel=\"noopener\">https://xdebug.org/files/</a></p>\n<p>选择自己要安装的版本,我这里选了2.6.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建一个你喜欢的路径存放,我放在了~/tool/目录下;</span></span><br><span class=\"line\">mkdir tool;</span><br><span class=\"line\"></span><br><span class=\"line\">wget https://xdebug.org/files/xdebug-2.6.0.tgz;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">tar xvzf xdebug-2.6.0.tgz;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> xdebug-2.6.0;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 初始化php模块</span></span><br><span class=\"line\">phpize;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成对应的so文件</span></span><br><span class=\"line\"><span class=\"comment\"># ./configure --enable-xdebug --with-php-config=PHP安装路径/bin/php-config;</span></span><br><span class=\"line\">./configure --<span class=\"built_in\">enable</span>-xdebug --with-php-config=/usr/<span class=\"built_in\">local</span>/Cellar/php@7.1/7.1.17/bin/php-config;</span><br><span class=\"line\"></span><br><span class=\"line\">make;</span><br><span class=\"line\"></span><br><span class=\"line\">make <span class=\"built_in\">test</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 上一步正常make执行完毕之后会在xdebug-2.6.0/modules/文件夹下生成xdebug.la和xdebug.so,待会我们在php.ini中配置xdebug会用到这个文件</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.techflirt.com/install-configure-xdebug-on-xampp-windows-and-mac/\" target=\"_blank\" rel=\"noopener\">https://www.techflirt.com/install-configure-xdebug-on-xampp-windows-and-mac/</a></p>\n<h2 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">brew install nginx</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置nginx-conf\"><a href=\"#配置nginx-conf\" class=\"headerlink\" title=\"配置nginx.conf\"></a>配置nginx.conf</h3><p>安装完成之后开始配置nginx,首先创建一堆需要用到的文件件.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /usr/<span class=\"built_in\">local</span>/var/logs/nginx</span><br><span class=\"line\">mkdir -p /usr/<span class=\"built_in\">local</span>/etc/nginx/sites-available</span><br><span class=\"line\">mkdir -p /usr/<span class=\"built_in\">local</span>/etc/nginx/sites-enabled</span><br><span class=\"line\">mkdir -p /usr/<span class=\"built_in\">local</span>/etc/nginx/conf.d</span><br><span class=\"line\">mkdir -p /usr/<span class=\"built_in\">local</span>/etc/nginx/ssl</span><br><span class=\"line\">sudo mkdir -p /var/www</span><br><span class=\"line\">sudo chown :staff /var/www</span><br><span class=\"line\">sudo chmod 777 /var/www</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#作者：GQ1994</span></span><br><span class=\"line\"><span class=\"comment\">#链接：https://www.jianshu.com/p/a642ee8eca9a</span></span><br><span class=\"line\"><span class=\"comment\">#來源：简书</span></span><br><span class=\"line\"><span class=\"comment\">#著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span></span><br></pre></td></tr></table></figure>\n<p>然后vim /usr/local/etc/nginx/nginx.conf 输入以下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user root wheel; #默认的是nobody会导致403</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">error_log   /usr/local/var/logs/nginx/error.log debug;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">pid        /usr/local/var/run/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  256;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  /usr/local/var/logs/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    port_in_redirect off;</span><br><span class=\"line\"></span><br><span class=\"line\">    include /usr/local/etc/nginx/sites-enabled/*;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置nginx-php-fpm配置文件\"><a href=\"#设置nginx-php-fpm配置文件\" class=\"headerlink\" title=\"设置nginx php-fpm配置文件\"></a>设置nginx php-fpm配置文件</h3><p>vim /usr/local/etc/nginx/conf.d/php-fpm<br>修改为(没有则创建)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#proxy the php scripts to php-fpm</span><br><span class=\"line\">location ~ \\.php$ &#123;</span><br><span class=\"line\">    try_files                   $uri = 404;</span><br><span class=\"line\">    fastcgi_pass                127.0.0.1:9000;</span><br><span class=\"line\">    fastcgi_index               index.php;</span><br><span class=\"line\">    fastcgi_intercept_errors    on;</span><br><span class=\"line\">    include /usr/local/etc/nginx/fastcgi.conf;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建默认虚拟主机default\"><a href=\"#创建默认虚拟主机default\" class=\"headerlink\" title=\"创建默认虚拟主机default\"></a>创建默认虚拟主机default</h3><p>vim /usr/local/etc/nginx/sites-available/default输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">listen       80;#如果80被用了可以换成别的,随你开心</span><br><span class=\"line\">server_name  www.qilipet.com admin.qilipet.com;</span><br><span class=\"line\">root   /var/www/pet/public;</span><br><span class=\"line\"></span><br><span class=\"line\">access_log  /usr/local/var/logs/nginx/default.access.log  main;</span><br><span class=\"line\">index index.php index.html index.htm;</span><br><span class=\"line\"></span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">            # First attempt to serve request as file, then</span><br><span class=\"line\">            # as directory, then fall back to displaying a 404.</span><br><span class=\"line\">            try_files $uri $uri/ /index.php?$query_string;</span><br><span class=\"line\">            # Uncomment to enable naxsi on this location</span><br><span class=\"line\">            # include /etc/nginx/naxsi.rules</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">location ~ \\.php$ &#123;</span><br><span class=\"line\">            fastcgi_pass  127.0.0.1:9000;</span><br><span class=\"line\">            fastcgi_index index.php;</span><br><span class=\"line\">            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class=\"line\">            include    fastcgi_params;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此部分内容基本来自<a href=\"https://www.jianshu.com/p/a642ee8eca9a\" target=\"_blank\" rel=\"noopener\">GQ1994:mac下配置php、nginx、mysql、redis</a></p>\n<h2 id=\"配置php-ini\"><a href=\"#配置php-ini\" class=\"headerlink\" title=\"配置php.ini\"></a>配置php.ini</h2><p>回到我们的/usr/local/etc/php/7.1文件夹</p>\n<p>在php.ini中加入xdebug\b配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[xdebug]</span><br><span class=\"line\">;zend_extension=&quot;刚刚的xdebug路径/modules/xdebug.so&quot;</span><br><span class=\"line\">zend_extension=&quot;~/tool/xdebug-2.6.0/modules/xdebug.so&quot;</span><br><span class=\"line\">xdebug.remote_enable = 1</span><br><span class=\"line\">xdebug.remote_autostart = 1</span><br><span class=\"line\">xdebug.remote_connect_back = 1</span><br><span class=\"line\">;默认的9000已经被php-fpm占用了,切记换一个端口</span><br><span class=\"line\">xdebug.remote_port = 9001</span><br><span class=\"line\">xdebug.scream = 0</span><br><span class=\"line\">xdebug.show_local_vars = 1</span><br></pre></td></tr></table></figure>\n<p>重启一下php-fpm和nginx,看一下php是不是都正常跑起来了.</p>\n<h2 id=\"VS-Code配置\"><a href=\"#VS-Code配置\" class=\"headerlink\" title=\"VS Code配置\"></a>VS Code配置</h2><h3 id=\"User-Settings配置PHP目录\"><a href=\"#User-Settings配置PHP目录\" class=\"headerlink\" title=\"User Settings配置PHP目录\"></a>User Settings配置PHP目录</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"php.executablePath\": \"/usr/local/opt/php@7.1/bin/php\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装php-debug插件\"><a href=\"#安装php-debug插件\" class=\"headerlink\" title=\"安装php debug插件\"></a>安装php debug插件</h3><p>安装完成之后配置一下launch.json</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    // 使用 IntelliSense 了解相关属性。 </span><br><span class=\"line\">    // 悬停以查看现有属性的描述。</span><br><span class=\"line\">    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class=\"line\">    \"version\": \"0.2.0\",</span><br><span class=\"line\">    \"configurations\": [</span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Listen for XDebug\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"php\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"request\"</span>: <span class=\"string\">\"launch\"</span>,</span><br><span class=\"line\">            \"port\": 9001 //默认是9000已经被php-fpm占用,上一步我们配置远程端口是9001</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Launch currently open script\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"php\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"request\"</span>: <span class=\"string\">\"launch\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"program\"</span>: <span class=\"string\">\"$&#123;file&#125;\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"cwd\"</span>: <span class=\"string\">\"$&#123;fileDirname&#125;\"</span>,</span><br><span class=\"line\">            \"port\": 9001 //默认是9000已经被php-fpm占用,上一步我们配置远程端口是9001</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后就愉快debug最好的语言吧!</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-21%20%E4%B8%8B%E5%8D%8810.16.58.png\" alt=\"debug\"></p>\n<h2 id=\"其他部分\"><a href=\"#其他部分\" class=\"headerlink\" title=\"其他部分\"></a>其他部分</h2><ul>\n<li><p><a href=\"https://itony.net/post/osx-php-xdebug.html\" target=\"_blank\" rel=\"noopener\">macOS系统PHP7增加Xdebug</a></p>\n</li>\n<li><p><a href=\"https://www.tuicool.com/articles/bE77N3\" target=\"_blank\" rel=\"noopener\">Install PEAR and PECL on Mac OS X</a></p>\n</li>\n<li><p><a href=\"https://questionfocus.com/xdebug-on-macos-10-13-with-php-7.html\" target=\"_blank\" rel=\"noopener\">Xdebug on macOS 10.13 with PHP 7</a></p>\n</li>\n<li><p><a href=\"https://www.techflirt.com/install-configure-xdebug-on-xampp-windows-and-mac/\" target=\"_blank\" rel=\"noopener\">install-configure-xdebug-on-xampp-windows-and-mac</a></p>\n</li>\n<li><p><a href=\"https://stackoverflow.com/questions/32893056/installing-pecl-and-pear-on-os-x-10-11-el-capitan-macos-10-12-sierra-macos-10\" target=\"_blank\" rel=\"noopener\">installing-pecl-and-pear-on-os-x-10-11-el-capitan-macos-10-12-sierra-macos-10</a></p>\n</li>\n</ul>\n"},{"layout":"post","title":"半个小时教你写一个毕设之地图搜租房","date":"2018-05-22T16:00:00.000Z","_content":"# 半个小时教你写一个毕设之地图搜租房\n\n首先需要一个Python3环境,怎么准备我就不多说了,实在不会的出门右转看一下廖雪峰老师的博客.\n\n## HTML部分\n\n- 代码来自:[高德API+Python解决租房问题](https://www.shiyanlou.com/courses/599),简单改了下加载数据部分\n\n代码路径:/static/index.html\n\n```html\n<html>\n\n<head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"initial-scale=1.0, user-scalable=no, width=device-width\">\n    <title>毕业生租房</title>\n    <link rel=\"stylesheet\" href=\"http://cache.amap.com/lbs/static/main1119.css\" />\n    <link rel=\"stylesheet\" href=\"http://cache.amap.com/lbs/static/jquery.range.css\" />\n    <script src=\"http://cache.amap.com/lbs/static/jquery-1.9.1.js\"></script>\n    <script src=\"http://cache.amap.com/lbs/static/es5.min.js\"></script>\n    <script src=\"http://webapi.amap.com/maps?v=1.3&key=22d3816e107f199992666d6412fa0691&plugin=AMap.ArrivalRange,AMap.Scale,AMap.Geocoder,AMap.Transfer,AMap.Autocomplete\"></script>\n    <script src=\"http://cache.amap.com/lbs/static/jquery.range.js\"></script>\n    <style>\n    .control-panel {\n        position: absolute;\n        top: 30px;\n        right: 20px;\n    }\n    \n    .control-entry {\n        width: 280px;\n        background-color: rgba(119, 136, 153, 0.8);\n        font-family: fantasy, sans-serif;\n        text-align: left;\n        color: white;\n        overflow: auto;\n        padding: 10px;\n        margin-bottom: 10px;\n    }\n    \n    .control-input {\n        margin-left: 120px;\n    }\n    \n    .control-input input[type=\"text\"] {\n        width: 160px;\n    }\n    \n    .control-panel label {\n        float: left;\n        width: 120px;\n    }\n    \n    #transfer-panel {\n        position: absolute;\n        background-color: white;\n        max-height: 80%;\n        overflow-y: auto;\n        top: 30px;\n        left: 20px;\n        width: 250px;\n    }\n    </style>\n</head>\n\n<body>\n    <div id=\"container\"></div>\n    <div class=\"control-panel\">\n        <div class=\"control-entry\">\n            <label>选择工作地点：</label>\n            <div class=\"control-input\">\n                <input id=\"work-location\" type=\"text\">\n            </div>\n        </div>\n        <div class=\"control-entry\">\n            <label>选择通勤方式：</label>\n            <div class=\"control-input\">\n                <input type=\"radio\" name=\"vehicle\" value=\"SUBWAY,BUS\" onClick=\"takeBus(this)\" checked/> 公交+地铁\n                <input type=\"radio\" name=\"vehicle\" value=\"SUBWAY\" onClick=\"takeSubway(this)\" /> 地铁\n            </div>\n        </div>\n    </div>\n    <div id=\"transfer-panel\"></div>\n    <script>\n    var map = new AMap.Map(\"container\", {\n        resizeEnable: true,\n        zoomEnable: true,\n        center: [116.397428, 39.90923],\n        zoom: 11\n    });\n\n    var scale = new AMap.Scale();\n    map.addControl(scale);\n\n    var arrivalRange = new AMap.ArrivalRange();\n    var x, y, t, vehicle = \"SUBWAY,BUS\";\n    var workAddress, workMarker;\n    var rentMarkerArray = [];\n    var polygonArray = [];\n    var amapTransfer;\n\n    var infoWindow = new AMap.InfoWindow({\n        offset: new AMap.Pixel(0, -30)\n    });\n\n    var auto = new AMap.Autocomplete({\n        input: \"work-location\"\n    });\n    \n    AMap.event.addListener(auto, \"select\", workLocationSelected);\n\n\n    function takeBus(radio) {\n        vehicle = radio.value;\n        loadWorkLocation()\n    }\n\n    function takeSubway(radio) {\n        vehicle = radio.value;\n        loadWorkLocation()\n    }\n\n    function workLocationSelected(e) {\n        workAddress = e.poi.name;\n        loadWorkLocation();\n    }\n\n    function loadWorkMarker(x, y, locationName) {\n        workMarker = new AMap.Marker({\n            map: map,\n            title: locationName,\n            icon: 'http://webapi.amap.com/theme/v1.3/markers/n/mark_r.png',\n            position: [x, y]\n\n        });\n    }\n\n\n    function loadWorkRange(x, y, t, color, v) {\n        arrivalRange.search([x, y], t, function(status, result) {\n            if (result.bounds) {\n                for (var i = 0; i < result.bounds.length; i++) {\n                    var polygon = new AMap.Polygon({\n                        map: map,\n                        fillColor: color,\n                        fillOpacity: \"0.4\",\n                        strokeColor: color,\n                        strokeOpacity: \"0.8\",\n                        strokeWeight: 1\n                    });\n                    polygon.setPath(result.bounds[i]);\n                    polygonArray.push(polygon);\n                }\n            }\n        }, {\n            policy: v\n        });\n    }\n\n    function addMarkerByAddress(address, url) {\n        var geocoder = new AMap.Geocoder({\n            city: \"北京\",\n            radius: 1000\n        });\n        geocoder.getLocation(address, function(status, result) {\n            if (status === \"complete\" && result.info === 'OK') {\n                var geocode = result.geocodes[0];\n                rentMarker = new AMap.Marker({\n                    map: map,\n                    title: address,\n                    icon: 'http://webapi.amap.com/theme/v1.3/markers/n/mark_b.png',\n                    position: [geocode.location.getLng(), geocode.location.getLat()]\n                });\n                rentMarkerArray.push(rentMarker);\n\n                rentMarker.content = \"<div>房源：<a target = '_blank' href='\" + url + \"'>\" + address + \"</a><div>\"\n                rentMarker.on('click', function(e) {\n                    infoWindow.setContent(e.target.content);\n                    infoWindow.open(map, e.target.getPosition());\n                    if (amapTransfer) amapTransfer.clear();\n                    amapTransfer = new AMap.Transfer({\n                        map: map,\n                        policy: AMap.TransferPolicy.LEAST_TIME,\n                        city: \"北京市\",\n                        panel: 'transfer-panel'\n                    });\n                    amapTransfer.search([{\n                        keyword: workAddress\n                    }, {\n                        keyword: address\n                    }], function(status, result) {})\n                });\n            }\n        })\n    }\n\n    function delWorkLocation() {\n        if (polygonArray) map.remove(polygonArray);\n        if (workMarker) map.remove(workMarker);\n        polygonArray = [];\n    }\n\n    function delRentLocation() {\n        if (rentMarkerArray) map.remove(rentMarkerArray);\n        rentMarkerArray = [];\n    }\n\n    function loadWorkLocation() {\n        delWorkLocation();\n        var geocoder = new AMap.Geocoder({\n            city: \"北京\",\n            radius: 1000\n        });\n\n        geocoder.getLocation(workAddress, function(status, result) {\n            if (status === \"complete\" && result.info === 'OK') {\n                var geocode = result.geocodes[0];\n                x = geocode.location.getLng();\n                y = geocode.location.getLat();\n                loadWorkMarker(x, y);\n                loadWorkRange(x, y, 60, \"#3f67a5\", vehicle);\n                map.setZoomAndCenter(12, [x, y]);\n            }\n        })\n    }\n\n    $(function()\n    {\n        $.get(\"/get_houses\", function(data) {\n            data.forEach(function(element, index) {\n                addMarkerByAddress(element.address, element.url);\n            });\n        });\n    })\n    </script>\n</body>\n\n</html>\n```\n\n## Python flask部分\n\nPython3环境,使用安装Flask,pymysql,BeautifulSoup\n\n```sh\npip install Flask;\npip install pymysql;\npip install beautifulsoup4;\npip install requests;\n```\n\n然后直接上代码咯.\n\n路径:/app.py\n\n```python\n\nfrom flask import Flask, request\nfrom flask import jsonify\nfrom flask import render_template\nfrom flask import Response\nimport requests\nfrom bs4 import BeautifulSoup\nimport pymysql\napp = Flask(__name__)\n\n\n@app.route(\"/get_houses_db/\")\ndef get_houses_db():\n    # 从数据库读出来的数据,url为房源url,address为房源定位地址\n    houses = []\n    # Connect to the database\n    connection = pymysql.connect(host='127.0.0.1',\n                                 user='root',\n                                 password='123',\n                                 db='你的数据库名字',\n                                 charset='utf8mb4',\n                                 cursorclass=pymysql.cursors.DictCursor)\n    try:\n        with connection.cursor() as cursor:\n            # Read a single record\n            sql = \"SELECT 你的URL字段,你的地址字段 FROM 你的房源数据表 where 1=1;\"\n            keyword = request.args.get('keyword')\n            if keyword is not None:\n                sql = sql + \"查询字段 like %%s%\" % keyword\n            cursor.execute(sql)\n            houses = cursor.fetchall()\n    finally:\n        connection.close()\n    return jsonify(houses)\n\n\n@app.route(\"/get_houses\", methods=['POST', 'GET'])\ndef get_houses():\n    # 直接从网页获取数据,url为房源url,address为房源定位地址\n    houses = []\n    city = request.args.get('city')\n    if city is None:\n        city = 'bj'\n    city_url = 'http://%s.58.com' % city\n    for page_num in range(1, 10):\n        url = \"%s/pinpaigongyu/pn/%d/\" % (city_url, page_num)\n        headers = {\n            'connection': \"keep-alive\",\n            'upgrade-insecure-requests': \"1\",\n            'user-agent': \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.181 Safari/537.36\",\n            'accept': \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\n            'accept-encoding': \"gzip, deflate\",\n            'accept-language': \"zh-CN,zh;q=0.9,en;q=0.8,da;q=0.7\",\n            'cookie': \"f=n; f=n; id58=c5/njVsEqPqC7y9vB/RHAg==; 58tj_uuid=ac94c044-cbb8-451c-b6be-974f90197010; new_uv=1; utm_source=; spm=; init_refer=https%253A%252F%252Fcn.bing.com%252F; als=0; f=n; new_session=0; qz_gdt=; Hm_lvt_dcee4f66df28844222ef0479976aabf1=1527032264,1527032267,1527032270,1527032380; Hm_lpvt_dcee4f66df28844222ef0479976aabf1=1527032421; ppStore_fingerprint=3283C76981CCD1090B42ACBBF624A4C9613FE967CDC69C58%EF%BC%BF1527032420843\",\n            'cache-control': \"no-cache\",\n        }\n        response = requests.request(\"GET\", url, headers=headers)\n        htmlSoup = BeautifulSoup(response.text, \"html.parser\")\n        ul = htmlSoup.find(attrs={\"class\": \"list\"})\n        if ul is None:\n            continue\n        li_list = ul.find_all(\"li\")\n        if li_list is None:\n            continue\n        for li in li_list:\n            house = {}\n            house['url'] = '%s/%s' % (city_url, li.find(\"a\")['href'])\n            house['address'] = li.find(\"h2\").text\n            houses.append(house)\n    return jsonify(houses)\n\n\n@app.route('/')\ndef index():\n    return app.send_static_file('index.html')\n\n\nif __name__ == '__main__':\n    app.run(port=8888)\n\n\n# python3 安装flask之后,安装命令pip install Flask\n# 运行 python app.py\n\n```\n\n效果图:\n\n![1](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-23%20%E4%B8%8A%E5%8D%888.07.52.png)\n![2](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-23%20%E4%B8%8A%E5%8D%888.08.19.png)\n\n然后...\n\n写完了...\n\n下次见...","source":"_posts/house-python.md","raw":"---\nlayout: post\ntitle: 半个小时教你写一个毕设之地图搜租房\ncategory: 其他\ndate: 2018-05-23\ntags:\n- 其他\n---\n# 半个小时教你写一个毕设之地图搜租房\n\n首先需要一个Python3环境,怎么准备我就不多说了,实在不会的出门右转看一下廖雪峰老师的博客.\n\n## HTML部分\n\n- 代码来自:[高德API+Python解决租房问题](https://www.shiyanlou.com/courses/599),简单改了下加载数据部分\n\n代码路径:/static/index.html\n\n```html\n<html>\n\n<head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"initial-scale=1.0, user-scalable=no, width=device-width\">\n    <title>毕业生租房</title>\n    <link rel=\"stylesheet\" href=\"http://cache.amap.com/lbs/static/main1119.css\" />\n    <link rel=\"stylesheet\" href=\"http://cache.amap.com/lbs/static/jquery.range.css\" />\n    <script src=\"http://cache.amap.com/lbs/static/jquery-1.9.1.js\"></script>\n    <script src=\"http://cache.amap.com/lbs/static/es5.min.js\"></script>\n    <script src=\"http://webapi.amap.com/maps?v=1.3&key=22d3816e107f199992666d6412fa0691&plugin=AMap.ArrivalRange,AMap.Scale,AMap.Geocoder,AMap.Transfer,AMap.Autocomplete\"></script>\n    <script src=\"http://cache.amap.com/lbs/static/jquery.range.js\"></script>\n    <style>\n    .control-panel {\n        position: absolute;\n        top: 30px;\n        right: 20px;\n    }\n    \n    .control-entry {\n        width: 280px;\n        background-color: rgba(119, 136, 153, 0.8);\n        font-family: fantasy, sans-serif;\n        text-align: left;\n        color: white;\n        overflow: auto;\n        padding: 10px;\n        margin-bottom: 10px;\n    }\n    \n    .control-input {\n        margin-left: 120px;\n    }\n    \n    .control-input input[type=\"text\"] {\n        width: 160px;\n    }\n    \n    .control-panel label {\n        float: left;\n        width: 120px;\n    }\n    \n    #transfer-panel {\n        position: absolute;\n        background-color: white;\n        max-height: 80%;\n        overflow-y: auto;\n        top: 30px;\n        left: 20px;\n        width: 250px;\n    }\n    </style>\n</head>\n\n<body>\n    <div id=\"container\"></div>\n    <div class=\"control-panel\">\n        <div class=\"control-entry\">\n            <label>选择工作地点：</label>\n            <div class=\"control-input\">\n                <input id=\"work-location\" type=\"text\">\n            </div>\n        </div>\n        <div class=\"control-entry\">\n            <label>选择通勤方式：</label>\n            <div class=\"control-input\">\n                <input type=\"radio\" name=\"vehicle\" value=\"SUBWAY,BUS\" onClick=\"takeBus(this)\" checked/> 公交+地铁\n                <input type=\"radio\" name=\"vehicle\" value=\"SUBWAY\" onClick=\"takeSubway(this)\" /> 地铁\n            </div>\n        </div>\n    </div>\n    <div id=\"transfer-panel\"></div>\n    <script>\n    var map = new AMap.Map(\"container\", {\n        resizeEnable: true,\n        zoomEnable: true,\n        center: [116.397428, 39.90923],\n        zoom: 11\n    });\n\n    var scale = new AMap.Scale();\n    map.addControl(scale);\n\n    var arrivalRange = new AMap.ArrivalRange();\n    var x, y, t, vehicle = \"SUBWAY,BUS\";\n    var workAddress, workMarker;\n    var rentMarkerArray = [];\n    var polygonArray = [];\n    var amapTransfer;\n\n    var infoWindow = new AMap.InfoWindow({\n        offset: new AMap.Pixel(0, -30)\n    });\n\n    var auto = new AMap.Autocomplete({\n        input: \"work-location\"\n    });\n    \n    AMap.event.addListener(auto, \"select\", workLocationSelected);\n\n\n    function takeBus(radio) {\n        vehicle = radio.value;\n        loadWorkLocation()\n    }\n\n    function takeSubway(radio) {\n        vehicle = radio.value;\n        loadWorkLocation()\n    }\n\n    function workLocationSelected(e) {\n        workAddress = e.poi.name;\n        loadWorkLocation();\n    }\n\n    function loadWorkMarker(x, y, locationName) {\n        workMarker = new AMap.Marker({\n            map: map,\n            title: locationName,\n            icon: 'http://webapi.amap.com/theme/v1.3/markers/n/mark_r.png',\n            position: [x, y]\n\n        });\n    }\n\n\n    function loadWorkRange(x, y, t, color, v) {\n        arrivalRange.search([x, y], t, function(status, result) {\n            if (result.bounds) {\n                for (var i = 0; i < result.bounds.length; i++) {\n                    var polygon = new AMap.Polygon({\n                        map: map,\n                        fillColor: color,\n                        fillOpacity: \"0.4\",\n                        strokeColor: color,\n                        strokeOpacity: \"0.8\",\n                        strokeWeight: 1\n                    });\n                    polygon.setPath(result.bounds[i]);\n                    polygonArray.push(polygon);\n                }\n            }\n        }, {\n            policy: v\n        });\n    }\n\n    function addMarkerByAddress(address, url) {\n        var geocoder = new AMap.Geocoder({\n            city: \"北京\",\n            radius: 1000\n        });\n        geocoder.getLocation(address, function(status, result) {\n            if (status === \"complete\" && result.info === 'OK') {\n                var geocode = result.geocodes[0];\n                rentMarker = new AMap.Marker({\n                    map: map,\n                    title: address,\n                    icon: 'http://webapi.amap.com/theme/v1.3/markers/n/mark_b.png',\n                    position: [geocode.location.getLng(), geocode.location.getLat()]\n                });\n                rentMarkerArray.push(rentMarker);\n\n                rentMarker.content = \"<div>房源：<a target = '_blank' href='\" + url + \"'>\" + address + \"</a><div>\"\n                rentMarker.on('click', function(e) {\n                    infoWindow.setContent(e.target.content);\n                    infoWindow.open(map, e.target.getPosition());\n                    if (amapTransfer) amapTransfer.clear();\n                    amapTransfer = new AMap.Transfer({\n                        map: map,\n                        policy: AMap.TransferPolicy.LEAST_TIME,\n                        city: \"北京市\",\n                        panel: 'transfer-panel'\n                    });\n                    amapTransfer.search([{\n                        keyword: workAddress\n                    }, {\n                        keyword: address\n                    }], function(status, result) {})\n                });\n            }\n        })\n    }\n\n    function delWorkLocation() {\n        if (polygonArray) map.remove(polygonArray);\n        if (workMarker) map.remove(workMarker);\n        polygonArray = [];\n    }\n\n    function delRentLocation() {\n        if (rentMarkerArray) map.remove(rentMarkerArray);\n        rentMarkerArray = [];\n    }\n\n    function loadWorkLocation() {\n        delWorkLocation();\n        var geocoder = new AMap.Geocoder({\n            city: \"北京\",\n            radius: 1000\n        });\n\n        geocoder.getLocation(workAddress, function(status, result) {\n            if (status === \"complete\" && result.info === 'OK') {\n                var geocode = result.geocodes[0];\n                x = geocode.location.getLng();\n                y = geocode.location.getLat();\n                loadWorkMarker(x, y);\n                loadWorkRange(x, y, 60, \"#3f67a5\", vehicle);\n                map.setZoomAndCenter(12, [x, y]);\n            }\n        })\n    }\n\n    $(function()\n    {\n        $.get(\"/get_houses\", function(data) {\n            data.forEach(function(element, index) {\n                addMarkerByAddress(element.address, element.url);\n            });\n        });\n    })\n    </script>\n</body>\n\n</html>\n```\n\n## Python flask部分\n\nPython3环境,使用安装Flask,pymysql,BeautifulSoup\n\n```sh\npip install Flask;\npip install pymysql;\npip install beautifulsoup4;\npip install requests;\n```\n\n然后直接上代码咯.\n\n路径:/app.py\n\n```python\n\nfrom flask import Flask, request\nfrom flask import jsonify\nfrom flask import render_template\nfrom flask import Response\nimport requests\nfrom bs4 import BeautifulSoup\nimport pymysql\napp = Flask(__name__)\n\n\n@app.route(\"/get_houses_db/\")\ndef get_houses_db():\n    # 从数据库读出来的数据,url为房源url,address为房源定位地址\n    houses = []\n    # Connect to the database\n    connection = pymysql.connect(host='127.0.0.1',\n                                 user='root',\n                                 password='123',\n                                 db='你的数据库名字',\n                                 charset='utf8mb4',\n                                 cursorclass=pymysql.cursors.DictCursor)\n    try:\n        with connection.cursor() as cursor:\n            # Read a single record\n            sql = \"SELECT 你的URL字段,你的地址字段 FROM 你的房源数据表 where 1=1;\"\n            keyword = request.args.get('keyword')\n            if keyword is not None:\n                sql = sql + \"查询字段 like %%s%\" % keyword\n            cursor.execute(sql)\n            houses = cursor.fetchall()\n    finally:\n        connection.close()\n    return jsonify(houses)\n\n\n@app.route(\"/get_houses\", methods=['POST', 'GET'])\ndef get_houses():\n    # 直接从网页获取数据,url为房源url,address为房源定位地址\n    houses = []\n    city = request.args.get('city')\n    if city is None:\n        city = 'bj'\n    city_url = 'http://%s.58.com' % city\n    for page_num in range(1, 10):\n        url = \"%s/pinpaigongyu/pn/%d/\" % (city_url, page_num)\n        headers = {\n            'connection': \"keep-alive\",\n            'upgrade-insecure-requests': \"1\",\n            'user-agent': \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.181 Safari/537.36\",\n            'accept': \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\n            'accept-encoding': \"gzip, deflate\",\n            'accept-language': \"zh-CN,zh;q=0.9,en;q=0.8,da;q=0.7\",\n            'cookie': \"f=n; f=n; id58=c5/njVsEqPqC7y9vB/RHAg==; 58tj_uuid=ac94c044-cbb8-451c-b6be-974f90197010; new_uv=1; utm_source=; spm=; init_refer=https%253A%252F%252Fcn.bing.com%252F; als=0; f=n; new_session=0; qz_gdt=; Hm_lvt_dcee4f66df28844222ef0479976aabf1=1527032264,1527032267,1527032270,1527032380; Hm_lpvt_dcee4f66df28844222ef0479976aabf1=1527032421; ppStore_fingerprint=3283C76981CCD1090B42ACBBF624A4C9613FE967CDC69C58%EF%BC%BF1527032420843\",\n            'cache-control': \"no-cache\",\n        }\n        response = requests.request(\"GET\", url, headers=headers)\n        htmlSoup = BeautifulSoup(response.text, \"html.parser\")\n        ul = htmlSoup.find(attrs={\"class\": \"list\"})\n        if ul is None:\n            continue\n        li_list = ul.find_all(\"li\")\n        if li_list is None:\n            continue\n        for li in li_list:\n            house = {}\n            house['url'] = '%s/%s' % (city_url, li.find(\"a\")['href'])\n            house['address'] = li.find(\"h2\").text\n            houses.append(house)\n    return jsonify(houses)\n\n\n@app.route('/')\ndef index():\n    return app.send_static_file('index.html')\n\n\nif __name__ == '__main__':\n    app.run(port=8888)\n\n\n# python3 安装flask之后,安装命令pip install Flask\n# 运行 python app.py\n\n```\n\n效果图:\n\n![1](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-23%20%E4%B8%8A%E5%8D%888.07.52.png)\n![2](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-23%20%E4%B8%8A%E5%8D%888.08.19.png)\n\n然后...\n\n写完了...\n\n下次见...","slug":"house-python","published":1,"updated":"2018-05-23T00:15:40.804Z","comments":1,"photos":[],"link":"","_id":"cji704spt000sel0rjr9bj67m","content":"<h1 id=\"半个小时教你写一个毕设之地图搜租房\"><a href=\"#半个小时教你写一个毕设之地图搜租房\" class=\"headerlink\" title=\"半个小时教你写一个毕设之地图搜租房\"></a>半个小时教你写一个毕设之地图搜租房</h1><p>首先需要一个Python3环境,怎么准备我就不多说了,实在不会的出门右转看一下廖雪峰老师的博客.</p>\n<h2 id=\"HTML部分\"><a href=\"#HTML部分\" class=\"headerlink\" title=\"HTML部分\"></a>HTML部分</h2><ul>\n<li>代码来自:<a href=\"https://www.shiyanlou.com/courses/599\" target=\"_blank\" rel=\"noopener\">高德API+Python解决租房问题</a>,简单改了下加载数据部分</li>\n</ul>\n<p>代码路径:/static/index.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"initial-scale=1.0, user-scalable=no, width=device-width\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>毕业生租房<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://cache.amap.com/lbs/static/main1119.css\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://cache.amap.com/lbs/static/jquery.range.css\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://cache.amap.com/lbs/static/jquery-1.9.1.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://cache.amap.com/lbs/static/es5.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://webapi.amap.com/maps?v=1.3&amp;key=22d3816e107f199992666d6412fa0691&amp;plugin=AMap.ArrivalRange,AMap.Scale,AMap.Geocoder,AMap.Transfer,AMap.Autocomplete\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://cache.amap.com/lbs/static/jquery.range.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    .control-panel &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        position: absolute;</span></span><br><span class=\"line\"><span class=\"undefined\">        top: 30px;</span></span><br><span class=\"line\"><span class=\"undefined\">        right: 20px;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span></span><br><span class=\"line\"><span class=\"undefined\">    .control-entry &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 280px;</span></span><br><span class=\"line\"><span class=\"undefined\">        background-color: rgba(119, 136, 153, 0.8);</span></span><br><span class=\"line\"><span class=\"undefined\">        font-family: fantasy, sans-serif;</span></span><br><span class=\"line\"><span class=\"undefined\">        text-align: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        color: white;</span></span><br><span class=\"line\"><span class=\"undefined\">        overflow: auto;</span></span><br><span class=\"line\"><span class=\"undefined\">        padding: 10px;</span></span><br><span class=\"line\"><span class=\"undefined\">        margin-bottom: 10px;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span></span><br><span class=\"line\"><span class=\"undefined\">    .control-input &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        margin-left: 120px;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span></span><br><span class=\"line\"><span class=\"undefined\">    .control-input input[type=\"text\"] &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 160px;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span></span><br><span class=\"line\"><span class=\"undefined\">    .control-panel label &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 120px;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span></span><br><span class=\"line\"><span class=\"undefined\">    #transfer-panel &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        position: absolute;</span></span><br><span class=\"line\"><span class=\"undefined\">        background-color: white;</span></span><br><span class=\"line\"><span class=\"undefined\">        max-height: 80%;</span></span><br><span class=\"line\"><span class=\"undefined\">        overflow-y: auto;</span></span><br><span class=\"line\"><span class=\"undefined\">        top: 30px;</span></span><br><span class=\"line\"><span class=\"undefined\">        left: 20px;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 250px;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"container\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"control-panel\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"control-entry\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>选择工作地点：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"control-input\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"work-location\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"control-entry\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>选择通勤方式：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"control-input\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"vehicle\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"SUBWAY,BUS\"</span> <span class=\"attr\">onClick</span>=<span class=\"string\">\"takeBus(this)\"</span> <span class=\"attr\">checked</span>/&gt;</span> 公交+地铁</span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"vehicle\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"SUBWAY\"</span> <span class=\"attr\">onClick</span>=<span class=\"string\">\"takeSubway(this)\"</span> /&gt;</span> 地铁</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transfer-panel\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    var map = new AMap.Map(\"container\", &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        resizeEnable: true,</span></span><br><span class=\"line\"><span class=\"undefined\">        zoomEnable: true,</span></span><br><span class=\"line\"><span class=\"undefined\">        center: [116.397428, 39.90923],</span></span><br><span class=\"line\"><span class=\"undefined\">        zoom: 11</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    var scale = new AMap.Scale();</span></span><br><span class=\"line\"><span class=\"undefined\">    map.addControl(scale);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    var arrivalRange = new AMap.ArrivalRange();</span></span><br><span class=\"line\"><span class=\"undefined\">    var x, y, t, vehicle = \"SUBWAY,BUS\";</span></span><br><span class=\"line\"><span class=\"undefined\">    var workAddress, workMarker;</span></span><br><span class=\"line\"><span class=\"undefined\">    var rentMarkerArray = [];</span></span><br><span class=\"line\"><span class=\"undefined\">    var polygonArray = [];</span></span><br><span class=\"line\"><span class=\"undefined\">    var amapTransfer;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    var infoWindow = new AMap.InfoWindow(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        offset: new AMap.Pixel(0, -30)</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    var auto = new AMap.Autocomplete(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        input: \"work-location\"</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">    </span></span><br><span class=\"line\"><span class=\"undefined\">    AMap.event.addListener(auto, \"select\", workLocationSelected);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    function takeBus(radio) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        vehicle = radio.value;</span></span><br><span class=\"line\"><span class=\"undefined\">        loadWorkLocation()</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    function takeSubway(radio) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        vehicle = radio.value;</span></span><br><span class=\"line\"><span class=\"undefined\">        loadWorkLocation()</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    function workLocationSelected(e) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        workAddress = e.poi.name;</span></span><br><span class=\"line\"><span class=\"undefined\">        loadWorkLocation();</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    function loadWorkMarker(x, y, locationName) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        workMarker = new AMap.Marker(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            map: map,</span></span><br><span class=\"line\"><span class=\"undefined\">            title: locationName,</span></span><br><span class=\"line\"><span class=\"undefined\">            icon: 'http://webapi.amap.com/theme/v1.3/markers/n/mark_r.png',</span></span><br><span class=\"line\"><span class=\"undefined\">            position: [x, y]</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    function loadWorkRange(x, y, t, color, v) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        arrivalRange.search([x, y], t, function(status, result) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            if (result.bounds) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                for (var i = 0; i &lt; result.bounds.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    var polygon = new AMap.Polygon(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                        map: map,</span></span><br><span class=\"line\"><span class=\"undefined\">                        fillColor: color,</span></span><br><span class=\"line\"><span class=\"undefined\">                        fillOpacity: \"0.4\",</span></span><br><span class=\"line\"><span class=\"undefined\">                        strokeColor: color,</span></span><br><span class=\"line\"><span class=\"undefined\">                        strokeOpacity: \"0.8\",</span></span><br><span class=\"line\"><span class=\"undefined\">                        strokeWeight: 1</span></span><br><span class=\"line\"><span class=\"undefined\">                    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">                    polygon.setPath(result.bounds[i]);</span></span><br><span class=\"line\"><span class=\"undefined\">                    polygonArray.push(polygon);</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            policy: v</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    function addMarkerByAddress(address, url) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        var geocoder = new AMap.Geocoder(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            city: \"北京\",</span></span><br><span class=\"line\"><span class=\"undefined\">            radius: 1000</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">        geocoder.getLocation(address, function(status, result) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            if (status === \"complete\" &amp;&amp; result.info === 'OK') &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                var geocode = result.geocodes[0];</span></span><br><span class=\"line\"><span class=\"undefined\">                rentMarker = new AMap.Marker(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    map: map,</span></span><br><span class=\"line\"><span class=\"undefined\">                    title: address,</span></span><br><span class=\"line\"><span class=\"undefined\">                    icon: 'http://webapi.amap.com/theme/v1.3/markers/n/mark_b.png',</span></span><br><span class=\"line\"><span class=\"undefined\">                    position: [geocode.location.getLng(), geocode.location.getLat()]</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">                rentMarkerArray.push(rentMarker);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">                rentMarker.content = \"<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>房源：<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span> = <span class=\"string\">'_blank'</span> <span class=\"attr\">href</span>=<span class=\"string\">'\" + url + \"'</span>&gt;</span>\" + address + \"<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>\"</span></span><br><span class=\"line\"><span class=\"undefined\">                rentMarker.on('click', function(e) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    infoWindow.setContent(e.target.content);</span></span><br><span class=\"line\"><span class=\"undefined\">                    infoWindow.open(map, e.target.getPosition());</span></span><br><span class=\"line\"><span class=\"undefined\">                    if (amapTransfer) amapTransfer.clear();</span></span><br><span class=\"line\"><span class=\"undefined\">                    amapTransfer = new AMap.Transfer(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                        map: map,</span></span><br><span class=\"line\"><span class=\"undefined\">                        policy: AMap.TransferPolicy.LEAST_TIME,</span></span><br><span class=\"line\"><span class=\"undefined\">                        city: \"北京市\",</span></span><br><span class=\"line\"><span class=\"undefined\">                        panel: 'transfer-panel'</span></span><br><span class=\"line\"><span class=\"undefined\">                    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">                    amapTransfer.search([&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                        keyword: workAddress</span></span><br><span class=\"line\"><span class=\"undefined\">                    &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                        keyword: address</span></span><br><span class=\"line\"><span class=\"undefined\">                    &#125;], function(status, result) &#123;&#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    function delWorkLocation() &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        if (polygonArray) map.remove(polygonArray);</span></span><br><span class=\"line\"><span class=\"undefined\">        if (workMarker) map.remove(workMarker);</span></span><br><span class=\"line\"><span class=\"undefined\">        polygonArray = [];</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    function delRentLocation() &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        if (rentMarkerArray) map.remove(rentMarkerArray);</span></span><br><span class=\"line\"><span class=\"undefined\">        rentMarkerArray = [];</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    function loadWorkLocation() &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        delWorkLocation();</span></span><br><span class=\"line\"><span class=\"undefined\">        var geocoder = new AMap.Geocoder(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            city: \"北京\",</span></span><br><span class=\"line\"><span class=\"undefined\">            radius: 1000</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        geocoder.getLocation(workAddress, function(status, result) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            if (status === \"complete\" &amp;&amp; result.info === 'OK') &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                var geocode = result.geocodes[0];</span></span><br><span class=\"line\"><span class=\"undefined\">                x = geocode.location.getLng();</span></span><br><span class=\"line\"><span class=\"undefined\">                y = geocode.location.getLat();</span></span><br><span class=\"line\"><span class=\"undefined\">                loadWorkMarker(x, y);</span></span><br><span class=\"line\"><span class=\"undefined\">                loadWorkRange(x, y, 60, \"#3f67a5\", vehicle);</span></span><br><span class=\"line\"><span class=\"undefined\">                map.setZoomAndCenter(12, [x, y]);</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    $(function()</span></span><br><span class=\"line\"><span class=\"undefined\">    &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        $.get(\"/get_houses\", function(data) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            data.forEach(function(element, index) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                addMarkerByAddress(element.address, element.url);</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Python-flask部分\"><a href=\"#Python-flask部分\" class=\"headerlink\" title=\"Python flask部分\"></a>Python flask部分</h2><p>Python3环境,使用安装Flask,pymysql,BeautifulSoup</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install Flask;</span><br><span class=\"line\">pip install pymysql;</span><br><span class=\"line\">pip install beautifulsoup4;</span><br><span class=\"line\">pip install requests;</span><br></pre></td></tr></table></figure>\n<p>然后直接上代码咯.</p>\n<p>路径:/app.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, request</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> jsonify</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> render_template</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Response</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(\"/get_houses_db/\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_houses_db</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 从数据库读出来的数据,url为房源url,address为房源定位地址</span></span><br><span class=\"line\">    houses = []</span><br><span class=\"line\">    <span class=\"comment\"># Connect to the database</span></span><br><span class=\"line\">    connection = pymysql.connect(host=<span class=\"string\">'127.0.0.1'</span>,</span><br><span class=\"line\">                                 user=<span class=\"string\">'root'</span>,</span><br><span class=\"line\">                                 password=<span class=\"string\">'123'</span>,</span><br><span class=\"line\">                                 db=<span class=\"string\">'你的数据库名字'</span>,</span><br><span class=\"line\">                                 charset=<span class=\"string\">'utf8mb4'</span>,</span><br><span class=\"line\">                                 cursorclass=pymysql.cursors.DictCursor)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">with</span> connection.cursor() <span class=\"keyword\">as</span> cursor:</span><br><span class=\"line\">            <span class=\"comment\"># Read a single record</span></span><br><span class=\"line\">            sql = <span class=\"string\">\"SELECT 你的URL字段,你的地址字段 FROM 你的房源数据表 where 1=1;\"</span></span><br><span class=\"line\">            keyword = request.args.get(<span class=\"string\">'keyword'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> keyword <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">                sql = sql + <span class=\"string\">\"查询字段 like %%s%\"</span> % keyword</span><br><span class=\"line\">            cursor.execute(sql)</span><br><span class=\"line\">            houses = cursor.fetchall()</span><br><span class=\"line\">    <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">        connection.close()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> jsonify(houses)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(\"/get_houses\", methods=['POST', 'GET'])</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_houses</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 直接从网页获取数据,url为房源url,address为房源定位地址</span></span><br><span class=\"line\">    houses = []</span><br><span class=\"line\">    city = request.args.get(<span class=\"string\">'city'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> city <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">        city = <span class=\"string\">'bj'</span></span><br><span class=\"line\">    city_url = <span class=\"string\">'http://%s.58.com'</span> % city</span><br><span class=\"line\">    <span class=\"keyword\">for</span> page_num <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">10</span>):</span><br><span class=\"line\">        url = <span class=\"string\">\"%s/pinpaigongyu/pn/%d/\"</span> % (city_url, page_num)</span><br><span class=\"line\">        headers = &#123;</span><br><span class=\"line\">            <span class=\"string\">'connection'</span>: <span class=\"string\">\"keep-alive\"</span>,</span><br><span class=\"line\">            <span class=\"string\">'upgrade-insecure-requests'</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">            <span class=\"string\">'user-agent'</span>: <span class=\"string\">\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.181 Safari/537.36\"</span>,</span><br><span class=\"line\">            <span class=\"string\">'accept'</span>: <span class=\"string\">\"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\"</span>,</span><br><span class=\"line\">            <span class=\"string\">'accept-encoding'</span>: <span class=\"string\">\"gzip, deflate\"</span>,</span><br><span class=\"line\">            <span class=\"string\">'accept-language'</span>: <span class=\"string\">\"zh-CN,zh;q=0.9,en;q=0.8,da;q=0.7\"</span>,</span><br><span class=\"line\">            <span class=\"string\">'cookie'</span>: <span class=\"string\">\"f=n; f=n; id58=c5/njVsEqPqC7y9vB/RHAg==; 58tj_uuid=ac94c044-cbb8-451c-b6be-974f90197010; new_uv=1; utm_source=; spm=; init_refer=https%253A%252F%252Fcn.bing.com%252F; als=0; f=n; new_session=0; qz_gdt=; Hm_lvt_dcee4f66df28844222ef0479976aabf1=1527032264,1527032267,1527032270,1527032380; Hm_lpvt_dcee4f66df28844222ef0479976aabf1=1527032421; ppStore_fingerprint=3283C76981CCD1090B42ACBBF624A4C9613FE967CDC69C58%EF%BC%BF1527032420843\"</span>,</span><br><span class=\"line\">            <span class=\"string\">'cache-control'</span>: <span class=\"string\">\"no-cache\"</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        response = requests.request(<span class=\"string\">\"GET\"</span>, url, headers=headers)</span><br><span class=\"line\">        htmlSoup = BeautifulSoup(response.text, <span class=\"string\">\"html.parser\"</span>)</span><br><span class=\"line\">        ul = htmlSoup.find(attrs=&#123;<span class=\"string\">\"class\"</span>: <span class=\"string\">\"list\"</span>&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ul <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        li_list = ul.find_all(<span class=\"string\">\"li\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> li_list <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> li <span class=\"keyword\">in</span> li_list:</span><br><span class=\"line\">            house = &#123;&#125;</span><br><span class=\"line\">            house[<span class=\"string\">'url'</span>] = <span class=\"string\">'%s/%s'</span> % (city_url, li.find(<span class=\"string\">\"a\"</span>)[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">            house[<span class=\"string\">'address'</span>] = li.find(<span class=\"string\">\"h2\"</span>).text</span><br><span class=\"line\">            houses.append(house)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> jsonify(houses)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> app.send_static_file(<span class=\"string\">'index.html'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    app.run(port=<span class=\"number\">8888</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># python3 安装flask之后,安装命令pip install Flask</span></span><br><span class=\"line\"><span class=\"comment\"># 运行 python app.py</span></span><br></pre></td></tr></table></figure>\n<p>效果图:</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-23%20%E4%B8%8A%E5%8D%888.07.52.png\" alt=\"1\"><br><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-23%20%E4%B8%8A%E5%8D%888.08.19.png\" alt=\"2\"></p>\n<p>然后…</p>\n<p>写完了…</p>\n<p>下次见…</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"半个小时教你写一个毕设之地图搜租房\"><a href=\"#半个小时教你写一个毕设之地图搜租房\" class=\"headerlink\" title=\"半个小时教你写一个毕设之地图搜租房\"></a>半个小时教你写一个毕设之地图搜租房</h1><p>首先需要一个Python3环境,怎么准备我就不多说了,实在不会的出门右转看一下廖雪峰老师的博客.</p>\n<h2 id=\"HTML部分\"><a href=\"#HTML部分\" class=\"headerlink\" title=\"HTML部分\"></a>HTML部分</h2><ul>\n<li>代码来自:<a href=\"https://www.shiyanlou.com/courses/599\" target=\"_blank\" rel=\"noopener\">高德API+Python解决租房问题</a>,简单改了下加载数据部分</li>\n</ul>\n<p>代码路径:/static/index.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"initial-scale=1.0, user-scalable=no, width=device-width\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>毕业生租房<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://cache.amap.com/lbs/static/main1119.css\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://cache.amap.com/lbs/static/jquery.range.css\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://cache.amap.com/lbs/static/jquery-1.9.1.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://cache.amap.com/lbs/static/es5.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://webapi.amap.com/maps?v=1.3&amp;key=22d3816e107f199992666d6412fa0691&amp;plugin=AMap.ArrivalRange,AMap.Scale,AMap.Geocoder,AMap.Transfer,AMap.Autocomplete\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://cache.amap.com/lbs/static/jquery.range.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    .control-panel &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        position: absolute;</span></span><br><span class=\"line\"><span class=\"undefined\">        top: 30px;</span></span><br><span class=\"line\"><span class=\"undefined\">        right: 20px;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span></span><br><span class=\"line\"><span class=\"undefined\">    .control-entry &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 280px;</span></span><br><span class=\"line\"><span class=\"undefined\">        background-color: rgba(119, 136, 153, 0.8);</span></span><br><span class=\"line\"><span class=\"undefined\">        font-family: fantasy, sans-serif;</span></span><br><span class=\"line\"><span class=\"undefined\">        text-align: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        color: white;</span></span><br><span class=\"line\"><span class=\"undefined\">        overflow: auto;</span></span><br><span class=\"line\"><span class=\"undefined\">        padding: 10px;</span></span><br><span class=\"line\"><span class=\"undefined\">        margin-bottom: 10px;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span></span><br><span class=\"line\"><span class=\"undefined\">    .control-input &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        margin-left: 120px;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span></span><br><span class=\"line\"><span class=\"undefined\">    .control-input input[type=\"text\"] &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 160px;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span></span><br><span class=\"line\"><span class=\"undefined\">    .control-panel label &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        float: left;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 120px;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span></span><br><span class=\"line\"><span class=\"undefined\">    #transfer-panel &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        position: absolute;</span></span><br><span class=\"line\"><span class=\"undefined\">        background-color: white;</span></span><br><span class=\"line\"><span class=\"undefined\">        max-height: 80%;</span></span><br><span class=\"line\"><span class=\"undefined\">        overflow-y: auto;</span></span><br><span class=\"line\"><span class=\"undefined\">        top: 30px;</span></span><br><span class=\"line\"><span class=\"undefined\">        left: 20px;</span></span><br><span class=\"line\"><span class=\"undefined\">        width: 250px;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"container\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"control-panel\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"control-entry\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>选择工作地点：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"control-input\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"work-location\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"control-entry\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>选择通勤方式：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"control-input\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"vehicle\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"SUBWAY,BUS\"</span> <span class=\"attr\">onClick</span>=<span class=\"string\">\"takeBus(this)\"</span> <span class=\"attr\">checked</span>/&gt;</span> 公交+地铁</span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"vehicle\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"SUBWAY\"</span> <span class=\"attr\">onClick</span>=<span class=\"string\">\"takeSubway(this)\"</span> /&gt;</span> 地铁</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transfer-panel\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    var map = new AMap.Map(\"container\", &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        resizeEnable: true,</span></span><br><span class=\"line\"><span class=\"undefined\">        zoomEnable: true,</span></span><br><span class=\"line\"><span class=\"undefined\">        center: [116.397428, 39.90923],</span></span><br><span class=\"line\"><span class=\"undefined\">        zoom: 11</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    var scale = new AMap.Scale();</span></span><br><span class=\"line\"><span class=\"undefined\">    map.addControl(scale);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    var arrivalRange = new AMap.ArrivalRange();</span></span><br><span class=\"line\"><span class=\"undefined\">    var x, y, t, vehicle = \"SUBWAY,BUS\";</span></span><br><span class=\"line\"><span class=\"undefined\">    var workAddress, workMarker;</span></span><br><span class=\"line\"><span class=\"undefined\">    var rentMarkerArray = [];</span></span><br><span class=\"line\"><span class=\"undefined\">    var polygonArray = [];</span></span><br><span class=\"line\"><span class=\"undefined\">    var amapTransfer;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    var infoWindow = new AMap.InfoWindow(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        offset: new AMap.Pixel(0, -30)</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    var auto = new AMap.Autocomplete(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        input: \"work-location\"</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">    </span></span><br><span class=\"line\"><span class=\"undefined\">    AMap.event.addListener(auto, \"select\", workLocationSelected);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    function takeBus(radio) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        vehicle = radio.value;</span></span><br><span class=\"line\"><span class=\"undefined\">        loadWorkLocation()</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    function takeSubway(radio) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        vehicle = radio.value;</span></span><br><span class=\"line\"><span class=\"undefined\">        loadWorkLocation()</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    function workLocationSelected(e) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        workAddress = e.poi.name;</span></span><br><span class=\"line\"><span class=\"undefined\">        loadWorkLocation();</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    function loadWorkMarker(x, y, locationName) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        workMarker = new AMap.Marker(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            map: map,</span></span><br><span class=\"line\"><span class=\"undefined\">            title: locationName,</span></span><br><span class=\"line\"><span class=\"undefined\">            icon: 'http://webapi.amap.com/theme/v1.3/markers/n/mark_r.png',</span></span><br><span class=\"line\"><span class=\"undefined\">            position: [x, y]</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    function loadWorkRange(x, y, t, color, v) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        arrivalRange.search([x, y], t, function(status, result) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            if (result.bounds) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                for (var i = 0; i &lt; result.bounds.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    var polygon = new AMap.Polygon(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                        map: map,</span></span><br><span class=\"line\"><span class=\"undefined\">                        fillColor: color,</span></span><br><span class=\"line\"><span class=\"undefined\">                        fillOpacity: \"0.4\",</span></span><br><span class=\"line\"><span class=\"undefined\">                        strokeColor: color,</span></span><br><span class=\"line\"><span class=\"undefined\">                        strokeOpacity: \"0.8\",</span></span><br><span class=\"line\"><span class=\"undefined\">                        strokeWeight: 1</span></span><br><span class=\"line\"><span class=\"undefined\">                    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">                    polygon.setPath(result.bounds[i]);</span></span><br><span class=\"line\"><span class=\"undefined\">                    polygonArray.push(polygon);</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            policy: v</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    function addMarkerByAddress(address, url) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        var geocoder = new AMap.Geocoder(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            city: \"北京\",</span></span><br><span class=\"line\"><span class=\"undefined\">            radius: 1000</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">        geocoder.getLocation(address, function(status, result) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            if (status === \"complete\" &amp;&amp; result.info === 'OK') &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                var geocode = result.geocodes[0];</span></span><br><span class=\"line\"><span class=\"undefined\">                rentMarker = new AMap.Marker(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    map: map,</span></span><br><span class=\"line\"><span class=\"undefined\">                    title: address,</span></span><br><span class=\"line\"><span class=\"undefined\">                    icon: 'http://webapi.amap.com/theme/v1.3/markers/n/mark_b.png',</span></span><br><span class=\"line\"><span class=\"undefined\">                    position: [geocode.location.getLng(), geocode.location.getLat()]</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">                rentMarkerArray.push(rentMarker);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">                rentMarker.content = \"<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>房源：<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span> = <span class=\"string\">'_blank'</span> <span class=\"attr\">href</span>=<span class=\"string\">'\" + url + \"'</span>&gt;</span>\" + address + \"<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>\"</span></span><br><span class=\"line\"><span class=\"undefined\">                rentMarker.on('click', function(e) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                    infoWindow.setContent(e.target.content);</span></span><br><span class=\"line\"><span class=\"undefined\">                    infoWindow.open(map, e.target.getPosition());</span></span><br><span class=\"line\"><span class=\"undefined\">                    if (amapTransfer) amapTransfer.clear();</span></span><br><span class=\"line\"><span class=\"undefined\">                    amapTransfer = new AMap.Transfer(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                        map: map,</span></span><br><span class=\"line\"><span class=\"undefined\">                        policy: AMap.TransferPolicy.LEAST_TIME,</span></span><br><span class=\"line\"><span class=\"undefined\">                        city: \"北京市\",</span></span><br><span class=\"line\"><span class=\"undefined\">                        panel: 'transfer-panel'</span></span><br><span class=\"line\"><span class=\"undefined\">                    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">                    amapTransfer.search([&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                        keyword: workAddress</span></span><br><span class=\"line\"><span class=\"undefined\">                    &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                        keyword: address</span></span><br><span class=\"line\"><span class=\"undefined\">                    &#125;], function(status, result) &#123;&#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    function delWorkLocation() &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        if (polygonArray) map.remove(polygonArray);</span></span><br><span class=\"line\"><span class=\"undefined\">        if (workMarker) map.remove(workMarker);</span></span><br><span class=\"line\"><span class=\"undefined\">        polygonArray = [];</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    function delRentLocation() &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        if (rentMarkerArray) map.remove(rentMarkerArray);</span></span><br><span class=\"line\"><span class=\"undefined\">        rentMarkerArray = [];</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    function loadWorkLocation() &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        delWorkLocation();</span></span><br><span class=\"line\"><span class=\"undefined\">        var geocoder = new AMap.Geocoder(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            city: \"北京\",</span></span><br><span class=\"line\"><span class=\"undefined\">            radius: 1000</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        geocoder.getLocation(workAddress, function(status, result) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            if (status === \"complete\" &amp;&amp; result.info === 'OK') &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                var geocode = result.geocodes[0];</span></span><br><span class=\"line\"><span class=\"undefined\">                x = geocode.location.getLng();</span></span><br><span class=\"line\"><span class=\"undefined\">                y = geocode.location.getLat();</span></span><br><span class=\"line\"><span class=\"undefined\">                loadWorkMarker(x, y);</span></span><br><span class=\"line\"><span class=\"undefined\">                loadWorkRange(x, y, 60, \"#3f67a5\", vehicle);</span></span><br><span class=\"line\"><span class=\"undefined\">                map.setZoomAndCenter(12, [x, y]);</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    $(function()</span></span><br><span class=\"line\"><span class=\"undefined\">    &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        $.get(\"/get_houses\", function(data) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            data.forEach(function(element, index) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                addMarkerByAddress(element.address, element.url);</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Python-flask部分\"><a href=\"#Python-flask部分\" class=\"headerlink\" title=\"Python flask部分\"></a>Python flask部分</h2><p>Python3环境,使用安装Flask,pymysql,BeautifulSoup</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install Flask;</span><br><span class=\"line\">pip install pymysql;</span><br><span class=\"line\">pip install beautifulsoup4;</span><br><span class=\"line\">pip install requests;</span><br></pre></td></tr></table></figure>\n<p>然后直接上代码咯.</p>\n<p>路径:/app.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, request</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> jsonify</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> render_template</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Response</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(\"/get_houses_db/\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_houses_db</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 从数据库读出来的数据,url为房源url,address为房源定位地址</span></span><br><span class=\"line\">    houses = []</span><br><span class=\"line\">    <span class=\"comment\"># Connect to the database</span></span><br><span class=\"line\">    connection = pymysql.connect(host=<span class=\"string\">'127.0.0.1'</span>,</span><br><span class=\"line\">                                 user=<span class=\"string\">'root'</span>,</span><br><span class=\"line\">                                 password=<span class=\"string\">'123'</span>,</span><br><span class=\"line\">                                 db=<span class=\"string\">'你的数据库名字'</span>,</span><br><span class=\"line\">                                 charset=<span class=\"string\">'utf8mb4'</span>,</span><br><span class=\"line\">                                 cursorclass=pymysql.cursors.DictCursor)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">with</span> connection.cursor() <span class=\"keyword\">as</span> cursor:</span><br><span class=\"line\">            <span class=\"comment\"># Read a single record</span></span><br><span class=\"line\">            sql = <span class=\"string\">\"SELECT 你的URL字段,你的地址字段 FROM 你的房源数据表 where 1=1;\"</span></span><br><span class=\"line\">            keyword = request.args.get(<span class=\"string\">'keyword'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> keyword <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">                sql = sql + <span class=\"string\">\"查询字段 like %%s%\"</span> % keyword</span><br><span class=\"line\">            cursor.execute(sql)</span><br><span class=\"line\">            houses = cursor.fetchall()</span><br><span class=\"line\">    <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">        connection.close()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> jsonify(houses)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(\"/get_houses\", methods=['POST', 'GET'])</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_houses</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 直接从网页获取数据,url为房源url,address为房源定位地址</span></span><br><span class=\"line\">    houses = []</span><br><span class=\"line\">    city = request.args.get(<span class=\"string\">'city'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> city <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">        city = <span class=\"string\">'bj'</span></span><br><span class=\"line\">    city_url = <span class=\"string\">'http://%s.58.com'</span> % city</span><br><span class=\"line\">    <span class=\"keyword\">for</span> page_num <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">10</span>):</span><br><span class=\"line\">        url = <span class=\"string\">\"%s/pinpaigongyu/pn/%d/\"</span> % (city_url, page_num)</span><br><span class=\"line\">        headers = &#123;</span><br><span class=\"line\">            <span class=\"string\">'connection'</span>: <span class=\"string\">\"keep-alive\"</span>,</span><br><span class=\"line\">            <span class=\"string\">'upgrade-insecure-requests'</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">            <span class=\"string\">'user-agent'</span>: <span class=\"string\">\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.181 Safari/537.36\"</span>,</span><br><span class=\"line\">            <span class=\"string\">'accept'</span>: <span class=\"string\">\"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\"</span>,</span><br><span class=\"line\">            <span class=\"string\">'accept-encoding'</span>: <span class=\"string\">\"gzip, deflate\"</span>,</span><br><span class=\"line\">            <span class=\"string\">'accept-language'</span>: <span class=\"string\">\"zh-CN,zh;q=0.9,en;q=0.8,da;q=0.7\"</span>,</span><br><span class=\"line\">            <span class=\"string\">'cookie'</span>: <span class=\"string\">\"f=n; f=n; id58=c5/njVsEqPqC7y9vB/RHAg==; 58tj_uuid=ac94c044-cbb8-451c-b6be-974f90197010; new_uv=1; utm_source=; spm=; init_refer=https%253A%252F%252Fcn.bing.com%252F; als=0; f=n; new_session=0; qz_gdt=; Hm_lvt_dcee4f66df28844222ef0479976aabf1=1527032264,1527032267,1527032270,1527032380; Hm_lpvt_dcee4f66df28844222ef0479976aabf1=1527032421; ppStore_fingerprint=3283C76981CCD1090B42ACBBF624A4C9613FE967CDC69C58%EF%BC%BF1527032420843\"</span>,</span><br><span class=\"line\">            <span class=\"string\">'cache-control'</span>: <span class=\"string\">\"no-cache\"</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        response = requests.request(<span class=\"string\">\"GET\"</span>, url, headers=headers)</span><br><span class=\"line\">        htmlSoup = BeautifulSoup(response.text, <span class=\"string\">\"html.parser\"</span>)</span><br><span class=\"line\">        ul = htmlSoup.find(attrs=&#123;<span class=\"string\">\"class\"</span>: <span class=\"string\">\"list\"</span>&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ul <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        li_list = ul.find_all(<span class=\"string\">\"li\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> li_list <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> li <span class=\"keyword\">in</span> li_list:</span><br><span class=\"line\">            house = &#123;&#125;</span><br><span class=\"line\">            house[<span class=\"string\">'url'</span>] = <span class=\"string\">'%s/%s'</span> % (city_url, li.find(<span class=\"string\">\"a\"</span>)[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">            house[<span class=\"string\">'address'</span>] = li.find(<span class=\"string\">\"h2\"</span>).text</span><br><span class=\"line\">            houses.append(house)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> jsonify(houses)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> app.send_static_file(<span class=\"string\">'index.html'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    app.run(port=<span class=\"number\">8888</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># python3 安装flask之后,安装命令pip install Flask</span></span><br><span class=\"line\"><span class=\"comment\"># 运行 python app.py</span></span><br></pre></td></tr></table></figure>\n<p>效果图:</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-23%20%E4%B8%8A%E5%8D%888.07.52.png\" alt=\"1\"><br><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-23%20%E4%B8%8A%E5%8D%888.08.19.png\" alt=\"2\"></p>\n<p>然后…</p>\n<p>写完了…</p>\n<p>下次见…</p>\n"},{"layout":"post","title":"手把手教你写dotnet core(MVC)","date":"2018-05-29T16:00:00.000Z","_content":"# asp.net core篇\n\n上一篇[手把手教你写dotnet core(入门篇)](https://zhuanlan.zhihu.com/p/37460329)我们已经简单在dotnet core里面跑了个\"hello world!\"和累加程序.\n\n今天我们的步子迈大一点,直接上 ASP.NET Core了.\n\n- ASP.NET Core 是一个新的开源和跨平台的框架，用于构建如 Web 应用、物联网（IoT）应用和移动后端应用等连接到互联网的基于云的现代应用程序。ASP.NET Core 应用可运行于 .NET Core 和完整的 .NET Framework 之上。 构建它的目的是为那些部署在云端或者内部运行（on-premises）的应用提供一个优化的开发框架。它由最小开销的模块化的组件构成，因此在构建你的解决方案的同时可以保持灵活性。你可以在 Windows、Mac 和 Linux 上跨平台的开发和运行你的 ASP.NET Core 应用。 ASP.NET Core 开源在 [GitHub](https://github.com/aspnet/home) 上。\n\n## 创建ASP.NET Core程序\n\n- 开发环境: dotnet SDK + VS Code\n\n这里还是直接使用dotnet new命令来创建ASP.NET Core项目, 终端中输入\"dotnet new web -n FirsrMVC\".\n\n自动创建FirsrMVC文件夹并生成对应的csproj和CS文件,具体操作和输出信息如下:\n\n```log\n➜  codelover-blog git:(master) ✗ dotnet new web -n FirsrMVC\nThe template \"ASP.NET Core Empty\" was created successfully.\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/template-3pn for details.\n\nProcessing post-creation actions...\nRunning 'dotnet restore' on FirsrMVC/FirsrMVC.csproj...\n  Restoring packages for /Users/liguobao/code/codelover-blog/FirsrMVC/FirsrMVC.csproj...\n  Generating MSBuild file /Users/liguobao/code/codelover-blog/FirsrMVC/obj/FirsrMVC.csproj.nuget.g.props.\n  Generating MSBuild file /Users/liguobao/code/codelover-blog/FirsrMVC/obj/FirsrMVC.csproj.nuget.g.targets.\n  Restore completed in 1.97 sec for /Users/liguobao/code/codelover-blog/FirsrMVC/FirsrMVC.csproj.\n\nRestore succeeded.\n\n➜  codelover-blog git:(master) ✗ cd FirsrMVC\n➜  FirsrMVC git:(master) ✗ ls\nFirsrMVC.csproj  Program.cs  Startup.cs  obj/  wwwroot/\n```\n\n### Program.cs\n\n在VS Code中打开FirsrMVC文件夹,简单看一下文件和Program.cs的代码\n\n![文件列表](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-30%20%E4%B8%8A%E5%8D%887.42.08.png)\n\nProgram.cs依旧是Main主方法,然后调用了一下BuildWebHost方法,BuildWebHost返回一个IWebHost的实例,接着Run.\n\n先不管这里具体做了什么事情,我们从语义上理解一下.\n\n1. BuildWebHost构建一个Web的Host实例,然后把WebHost实例运行起来了\n\n2. 创建WebHost使用了一个Startup的类\n\n关于详细WebHost的详细解析见:[ASP.NET Core 运行原理解剖[1]:Hosting](http://www.cnblogs.com/RainingNight/p/hosting-in-asp-net-core.html)\n\n### Startup.cs\n\n先直接上一波代码\n\n```C#\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace FirsrMVC\n{\n    public class Startup\n    {\n        // This method gets called by the runtime. Use this method to add services to the container.\n        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940\n        public void ConfigureServices(IServiceCollection services)\n        {\n        }\n\n        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            //直接往HTTP Response中写入\"Hello World!\",即在页面直接显示此字符\n            app.Run(async (context) =>\n            {\n                await context.Response.WriteAsync(\"Hello World!\");\n            });\n        }\n    }\n}\n```\n\n1. ConfigureServices:运行时被调用,将服务(services)添加到容器(container)中\n\n2. Configure:运行时被调用, 配置HTTP request 的pipeline\n\n嗯,看不懂?没关系,待会一个个演示.\n\n我们这里还是直接先跑一下程序,FirsrMVC文件夹路径下执行:dotnet run\n输出如下:\n\n```log\n➜  FirsrMVC git:(master) ✗ dotnet run\nHosting environment: Production\nContent root path: /Users/liguobao/code/codelover-blog/FirsrMVC\nNow listening on: http://localhost:5000\nApplication started. Press Ctrl+C to shut down.\n```\n\n然后访问[http://localhost:5000](http://localhost:5000)看看.\n\n![localhost](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-30%20%E4%B8%8A%E5%8D%888.00.09.png)\n\n好了,第一个MVC程序已经跑起来了,本文结束.逃...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n这里应该还有人吧?那我们继续了.\n\n### wwwroot中的静态文件\n\n1. 在wwwroot文件夹新增first.html,随便写个能看见的HTML标签(我写的是p标签)\n\n2. 在 Configure 方法中添加一句 app.UseStaticFiles(); 然后再重新运行一下\n\n3. 访问[http://localhost:5000/first.html](http://localhost:5000/first.html)\n\n![first](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-30%20%E4%B8%8A%E5%8D%888.09.06.png)\n\n本步骤完成.\n\nUseStaticFiles()方法:调用一个读取wwwroot文件夹下面的静态文件输出的中间件注册到程序中,从而完成静态文件的输出.\n\n这里也告诉我们,ASP.NET Core的静态文件(JS+CSS+图片...)之类的都可以放这边来.\n\n甚至于如果简单做前后端分离的话,前端的vue/react项目都可以扔这里去.\n\n## 重头戏MVC\n\n终于要讲到MVC了.\n\n>MVC模式最早由Trygve Reenskaug在1978年提出[1]，是施乐帕罗奥多研究中心（Xerox PARC）在20世纪80年代为程序语言Smalltalk发明的一种软件架构。MVC模式的目的是实现一种动态的程式设计，使后续对程序的修改和扩展简化，并且使程序某一部分的重复利用成为可能。除此之外，此模式通过对复杂度的简化，使程序结构更加直观。软件系统通过对自身基本部分分离的同时也赋予了各个基本部分应有的功能。专业人员可以通过自身的专长分组：\n\n1. 控制器（Controller）- 负责转发请求，对请求进行处理。\n2. 视图（View） - 界面设计人员进行图形界面设计。\n3. 模型（Model） - 程序员编写程序应有的功能（实现算法等等）、数据库专家进行数据管理和数据库设计(可以实现具体的功能)。\n\n以上概念来自[维基百科:MVC](https://zh.wikipedia.org/zh-hans/MVC)\n\n在ASP.NET Core,MVC模型一般就对应着三个文件夹,Models/Views/Controllers.\n\n1. Models:存放一些业务实体类,如Student,Course等,表现上就是C#的.cs文件\n\n2. Views:存放CSHTML文件,ASP.NET Core的模板文件,类HTML,也可以写C#代码\n\n3. Controllers: cs文件,继承Controller类的XXXController,实现业务逻辑代码\n\n下面一起来写一个简单的MVC玩玩.\n\n### Startup\n\n修改 Startup.cs的代码,新增MVC中间件的引用,操作如下:\n\n1. Startup.cs中的ConfigureServices方法下新增:services.AddMvc();\n\n2. Configure方法下去掉之前的UseMvc,改成\n\n```C#\n app.UseMvc(routes =>\n            {\n                routes.MapRoute(\n                    name: \"default\",\n                    template: \"{controller=Home}/{action=Index}/{id?}\");\n            });\n```\n\n全部代码如下:\n\n```C#\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace FirsrMVC\n{\n    public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public IConfiguration Configuration { get; }\n\n        // This method gets called by the runtime. Use this method to add services to the container.\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddMvc();\n        }\n\n        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            else\n            {\n                app.UseExceptionHandler(\"/Home/Error\");\n            }\n\n            app.UseStaticFiles();\n\n            app.UseMvc(routes =>\n            {\n                routes.MapRoute(\n                    name: \"default\",\n                    template: \"{controller=Home}/{action=Index}/{id?}\");\n            });\n        }\n    }\n}\n```\n\n### Controllers\n\n新增Controllers文件夹,在此文件下新建HomeController.cs文件,然后填入一下代码:\n\n```C#\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace FirsrMVC.Controllers\n{\n    public class HomeController : Controller\n    {\n        public IActionResult Index()\n        {\n            return View();\n        }\n\n        public IActionResult About()\n        {\n\n            return Json(new { name = \"我的名字\", success = true });\n        }\n    }\n}\n\n```\n\n到这里,我们先运行一下代码.\n\n如无意外的话,\n\n访问[http://localhost:5000/](http://localhost:5000/) 空白一片,\n\n访问[http://localhost:5000/Home/About](http://localhost:5000/Home/About) 会输出\n\n```json\n{\n    \"name\": \"我的名字\",\n    \"success\": true\n}\n```\n\n#### [http://localhost:5000/](http://localhost:5000/)\n\n其实这里访问的是[http://localhost:5000/Home/Index](http://localhost:5000/Home/Index),对应方法是HomeController/Index\n\n我们看一下Log输出会发现这样的一句错误\"fail: The view 'Index' was not found. Searched locations: /Views/Home/Index.cshtml, /Views/Shared/Index.cshtml\"\n\n原因是HomeController中的Index返回的是View,\n\n程序默认就会去/Views/目录下寻找/Home/Index.cshtml文件来渲染然后返回给浏览器,但是这里我们并没有这个文件,所以直接GG.\n\n#### [http://localhost:5000/Home/About](http://localhost:5000/Home/About)\n\n对应方法是HomeController/About,返回为Json数据,不需要View.\n\n所以直接就往浏览器输出了{ name = \"我的名字\", success = true }的Json格式数据\n\n### Views\n\n上一步我们的的Controller已经建好了,但是缺View文件,我们这里来创建一下View文件\n\n新建Views/Home文件夹,然后再在此文件夹下新增Index.cshtml文件\n\n然后在Index.cshtml中输入:\n\n```cshtml\n<p>First View Page</p>>\n```\n\n刷新一下[http://localhost:5000/](http://localhost:5000/)页面.\n\n![View](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-30%20%E4%B8%8A%E5%8D%888.51.33.png)\n\nView文件也建立好了.\n\n### Models\n\n最后简单讲一下Model.\n\n同理,新建Models文件夹,在此文件夹下新增Student.cs文件.\n\n```C#\n\nnamespace FirsrMVC\n{\n    public class Student\n    {\n        public string Name { get; set; }\n\n        public int Age { get; set; }\n    }\n}\n```\n\n我们想做的要做的是把Student信息通过Controller返回给View,然后用View渲染出来.\n\n修改一下HomeController/Index方法:\n\n```C#\n        public IActionResult Index()\n        {\n            Models.Student student = new Models.Student() { Name = \"小明\", Age = 16 };\n            return View(student);\n        }\n```\n\n修改一下Views/Home/Index.cshtml\n\n```cshtml\n@model FirsrMVC.Models.Student\n@if(Model !=null)\n{\n    <p>@Model.Name<span>今年</span>@Model.Age<span>岁</span></p>\n}else\n{\n     <p>这里什么都没有.</p>\n}\n```\n\n重新运行一下程序,访问[http://localhost:5000/](http://localhost:5000/)\n\n![index](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-30%20%E4%B8%8A%E5%8D%889.10.25.png)\n\nMVC结束.\n\n本文完.\n\n下一节配置文件+DI依赖注入.\n","source":"_posts/start-dotnetcore-mvc.md","raw":"---\nlayout: post\ntitle: 手把手教你写dotnet core(MVC)\ncategory: dotnet core\ndate: 2018-05-30\ntags:\n- dotnet core\n- docker\n- asp.net core\n---\n# asp.net core篇\n\n上一篇[手把手教你写dotnet core(入门篇)](https://zhuanlan.zhihu.com/p/37460329)我们已经简单在dotnet core里面跑了个\"hello world!\"和累加程序.\n\n今天我们的步子迈大一点,直接上 ASP.NET Core了.\n\n- ASP.NET Core 是一个新的开源和跨平台的框架，用于构建如 Web 应用、物联网（IoT）应用和移动后端应用等连接到互联网的基于云的现代应用程序。ASP.NET Core 应用可运行于 .NET Core 和完整的 .NET Framework 之上。 构建它的目的是为那些部署在云端或者内部运行（on-premises）的应用提供一个优化的开发框架。它由最小开销的模块化的组件构成，因此在构建你的解决方案的同时可以保持灵活性。你可以在 Windows、Mac 和 Linux 上跨平台的开发和运行你的 ASP.NET Core 应用。 ASP.NET Core 开源在 [GitHub](https://github.com/aspnet/home) 上。\n\n## 创建ASP.NET Core程序\n\n- 开发环境: dotnet SDK + VS Code\n\n这里还是直接使用dotnet new命令来创建ASP.NET Core项目, 终端中输入\"dotnet new web -n FirsrMVC\".\n\n自动创建FirsrMVC文件夹并生成对应的csproj和CS文件,具体操作和输出信息如下:\n\n```log\n➜  codelover-blog git:(master) ✗ dotnet new web -n FirsrMVC\nThe template \"ASP.NET Core Empty\" was created successfully.\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/template-3pn for details.\n\nProcessing post-creation actions...\nRunning 'dotnet restore' on FirsrMVC/FirsrMVC.csproj...\n  Restoring packages for /Users/liguobao/code/codelover-blog/FirsrMVC/FirsrMVC.csproj...\n  Generating MSBuild file /Users/liguobao/code/codelover-blog/FirsrMVC/obj/FirsrMVC.csproj.nuget.g.props.\n  Generating MSBuild file /Users/liguobao/code/codelover-blog/FirsrMVC/obj/FirsrMVC.csproj.nuget.g.targets.\n  Restore completed in 1.97 sec for /Users/liguobao/code/codelover-blog/FirsrMVC/FirsrMVC.csproj.\n\nRestore succeeded.\n\n➜  codelover-blog git:(master) ✗ cd FirsrMVC\n➜  FirsrMVC git:(master) ✗ ls\nFirsrMVC.csproj  Program.cs  Startup.cs  obj/  wwwroot/\n```\n\n### Program.cs\n\n在VS Code中打开FirsrMVC文件夹,简单看一下文件和Program.cs的代码\n\n![文件列表](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-30%20%E4%B8%8A%E5%8D%887.42.08.png)\n\nProgram.cs依旧是Main主方法,然后调用了一下BuildWebHost方法,BuildWebHost返回一个IWebHost的实例,接着Run.\n\n先不管这里具体做了什么事情,我们从语义上理解一下.\n\n1. BuildWebHost构建一个Web的Host实例,然后把WebHost实例运行起来了\n\n2. 创建WebHost使用了一个Startup的类\n\n关于详细WebHost的详细解析见:[ASP.NET Core 运行原理解剖[1]:Hosting](http://www.cnblogs.com/RainingNight/p/hosting-in-asp-net-core.html)\n\n### Startup.cs\n\n先直接上一波代码\n\n```C#\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace FirsrMVC\n{\n    public class Startup\n    {\n        // This method gets called by the runtime. Use this method to add services to the container.\n        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940\n        public void ConfigureServices(IServiceCollection services)\n        {\n        }\n\n        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            //直接往HTTP Response中写入\"Hello World!\",即在页面直接显示此字符\n            app.Run(async (context) =>\n            {\n                await context.Response.WriteAsync(\"Hello World!\");\n            });\n        }\n    }\n}\n```\n\n1. ConfigureServices:运行时被调用,将服务(services)添加到容器(container)中\n\n2. Configure:运行时被调用, 配置HTTP request 的pipeline\n\n嗯,看不懂?没关系,待会一个个演示.\n\n我们这里还是直接先跑一下程序,FirsrMVC文件夹路径下执行:dotnet run\n输出如下:\n\n```log\n➜  FirsrMVC git:(master) ✗ dotnet run\nHosting environment: Production\nContent root path: /Users/liguobao/code/codelover-blog/FirsrMVC\nNow listening on: http://localhost:5000\nApplication started. Press Ctrl+C to shut down.\n```\n\n然后访问[http://localhost:5000](http://localhost:5000)看看.\n\n![localhost](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-30%20%E4%B8%8A%E5%8D%888.00.09.png)\n\n好了,第一个MVC程序已经跑起来了,本文结束.逃...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n这里应该还有人吧?那我们继续了.\n\n### wwwroot中的静态文件\n\n1. 在wwwroot文件夹新增first.html,随便写个能看见的HTML标签(我写的是p标签)\n\n2. 在 Configure 方法中添加一句 app.UseStaticFiles(); 然后再重新运行一下\n\n3. 访问[http://localhost:5000/first.html](http://localhost:5000/first.html)\n\n![first](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-30%20%E4%B8%8A%E5%8D%888.09.06.png)\n\n本步骤完成.\n\nUseStaticFiles()方法:调用一个读取wwwroot文件夹下面的静态文件输出的中间件注册到程序中,从而完成静态文件的输出.\n\n这里也告诉我们,ASP.NET Core的静态文件(JS+CSS+图片...)之类的都可以放这边来.\n\n甚至于如果简单做前后端分离的话,前端的vue/react项目都可以扔这里去.\n\n## 重头戏MVC\n\n终于要讲到MVC了.\n\n>MVC模式最早由Trygve Reenskaug在1978年提出[1]，是施乐帕罗奥多研究中心（Xerox PARC）在20世纪80年代为程序语言Smalltalk发明的一种软件架构。MVC模式的目的是实现一种动态的程式设计，使后续对程序的修改和扩展简化，并且使程序某一部分的重复利用成为可能。除此之外，此模式通过对复杂度的简化，使程序结构更加直观。软件系统通过对自身基本部分分离的同时也赋予了各个基本部分应有的功能。专业人员可以通过自身的专长分组：\n\n1. 控制器（Controller）- 负责转发请求，对请求进行处理。\n2. 视图（View） - 界面设计人员进行图形界面设计。\n3. 模型（Model） - 程序员编写程序应有的功能（实现算法等等）、数据库专家进行数据管理和数据库设计(可以实现具体的功能)。\n\n以上概念来自[维基百科:MVC](https://zh.wikipedia.org/zh-hans/MVC)\n\n在ASP.NET Core,MVC模型一般就对应着三个文件夹,Models/Views/Controllers.\n\n1. Models:存放一些业务实体类,如Student,Course等,表现上就是C#的.cs文件\n\n2. Views:存放CSHTML文件,ASP.NET Core的模板文件,类HTML,也可以写C#代码\n\n3. Controllers: cs文件,继承Controller类的XXXController,实现业务逻辑代码\n\n下面一起来写一个简单的MVC玩玩.\n\n### Startup\n\n修改 Startup.cs的代码,新增MVC中间件的引用,操作如下:\n\n1. Startup.cs中的ConfigureServices方法下新增:services.AddMvc();\n\n2. Configure方法下去掉之前的UseMvc,改成\n\n```C#\n app.UseMvc(routes =>\n            {\n                routes.MapRoute(\n                    name: \"default\",\n                    template: \"{controller=Home}/{action=Index}/{id?}\");\n            });\n```\n\n全部代码如下:\n\n```C#\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace FirsrMVC\n{\n    public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public IConfiguration Configuration { get; }\n\n        // This method gets called by the runtime. Use this method to add services to the container.\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddMvc();\n        }\n\n        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            else\n            {\n                app.UseExceptionHandler(\"/Home/Error\");\n            }\n\n            app.UseStaticFiles();\n\n            app.UseMvc(routes =>\n            {\n                routes.MapRoute(\n                    name: \"default\",\n                    template: \"{controller=Home}/{action=Index}/{id?}\");\n            });\n        }\n    }\n}\n```\n\n### Controllers\n\n新增Controllers文件夹,在此文件下新建HomeController.cs文件,然后填入一下代码:\n\n```C#\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace FirsrMVC.Controllers\n{\n    public class HomeController : Controller\n    {\n        public IActionResult Index()\n        {\n            return View();\n        }\n\n        public IActionResult About()\n        {\n\n            return Json(new { name = \"我的名字\", success = true });\n        }\n    }\n}\n\n```\n\n到这里,我们先运行一下代码.\n\n如无意外的话,\n\n访问[http://localhost:5000/](http://localhost:5000/) 空白一片,\n\n访问[http://localhost:5000/Home/About](http://localhost:5000/Home/About) 会输出\n\n```json\n{\n    \"name\": \"我的名字\",\n    \"success\": true\n}\n```\n\n#### [http://localhost:5000/](http://localhost:5000/)\n\n其实这里访问的是[http://localhost:5000/Home/Index](http://localhost:5000/Home/Index),对应方法是HomeController/Index\n\n我们看一下Log输出会发现这样的一句错误\"fail: The view 'Index' was not found. Searched locations: /Views/Home/Index.cshtml, /Views/Shared/Index.cshtml\"\n\n原因是HomeController中的Index返回的是View,\n\n程序默认就会去/Views/目录下寻找/Home/Index.cshtml文件来渲染然后返回给浏览器,但是这里我们并没有这个文件,所以直接GG.\n\n#### [http://localhost:5000/Home/About](http://localhost:5000/Home/About)\n\n对应方法是HomeController/About,返回为Json数据,不需要View.\n\n所以直接就往浏览器输出了{ name = \"我的名字\", success = true }的Json格式数据\n\n### Views\n\n上一步我们的的Controller已经建好了,但是缺View文件,我们这里来创建一下View文件\n\n新建Views/Home文件夹,然后再在此文件夹下新增Index.cshtml文件\n\n然后在Index.cshtml中输入:\n\n```cshtml\n<p>First View Page</p>>\n```\n\n刷新一下[http://localhost:5000/](http://localhost:5000/)页面.\n\n![View](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-30%20%E4%B8%8A%E5%8D%888.51.33.png)\n\nView文件也建立好了.\n\n### Models\n\n最后简单讲一下Model.\n\n同理,新建Models文件夹,在此文件夹下新增Student.cs文件.\n\n```C#\n\nnamespace FirsrMVC\n{\n    public class Student\n    {\n        public string Name { get; set; }\n\n        public int Age { get; set; }\n    }\n}\n```\n\n我们想做的要做的是把Student信息通过Controller返回给View,然后用View渲染出来.\n\n修改一下HomeController/Index方法:\n\n```C#\n        public IActionResult Index()\n        {\n            Models.Student student = new Models.Student() { Name = \"小明\", Age = 16 };\n            return View(student);\n        }\n```\n\n修改一下Views/Home/Index.cshtml\n\n```cshtml\n@model FirsrMVC.Models.Student\n@if(Model !=null)\n{\n    <p>@Model.Name<span>今年</span>@Model.Age<span>岁</span></p>\n}else\n{\n     <p>这里什么都没有.</p>\n}\n```\n\n重新运行一下程序,访问[http://localhost:5000/](http://localhost:5000/)\n\n![index](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-30%20%E4%B8%8A%E5%8D%889.10.25.png)\n\nMVC结束.\n\n本文完.\n\n下一节配置文件+DI依赖注入.\n","slug":"start-dotnetcore-mvc","published":1,"updated":"2018-05-30T01:12:01.784Z","comments":1,"photos":[],"link":"","_id":"cji704spy000tel0rf7mqh6sa","content":"<h1 id=\"asp-net-core篇\"><a href=\"#asp-net-core篇\" class=\"headerlink\" title=\"asp.net core篇\"></a>asp.net core篇</h1><p>上一篇<a href=\"https://zhuanlan.zhihu.com/p/37460329\" target=\"_blank\" rel=\"noopener\">手把手教你写dotnet core(入门篇)</a>我们已经简单在dotnet core里面跑了个”hello world!”和累加程序.</p>\n<p>今天我们的步子迈大一点,直接上 ASP.NET Core了.</p>\n<ul>\n<li>ASP.NET Core 是一个新的开源和跨平台的框架，用于构建如 Web 应用、物联网（IoT）应用和移动后端应用等连接到互联网的基于云的现代应用程序。ASP.NET Core 应用可运行于 .NET Core 和完整的 .NET Framework 之上。 构建它的目的是为那些部署在云端或者内部运行（on-premises）的应用提供一个优化的开发框架。它由最小开销的模块化的组件构成，因此在构建你的解决方案的同时可以保持灵活性。你可以在 Windows、Mac 和 Linux 上跨平台的开发和运行你的 ASP.NET Core 应用。 ASP.NET Core 开源在 <a href=\"https://github.com/aspnet/home\" target=\"_blank\" rel=\"noopener\">GitHub</a> 上。</li>\n</ul>\n<h2 id=\"创建ASP-NET-Core程序\"><a href=\"#创建ASP-NET-Core程序\" class=\"headerlink\" title=\"创建ASP.NET Core程序\"></a>创建ASP.NET Core程序</h2><ul>\n<li>开发环境: dotnet SDK + VS Code</li>\n</ul>\n<p>这里还是直接使用dotnet new命令来创建ASP.NET Core项目, 终端中输入”dotnet new web -n FirsrMVC”.</p>\n<p>自动创建FirsrMVC文件夹并生成对应的csproj和CS文件,具体操作和输出信息如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  codelover-blog git:(master) ✗ dotnet new web -n FirsrMVC</span><br><span class=\"line\">The template &quot;ASP.NET Core Empty&quot; was created successfully.</span><br><span class=\"line\">This template contains technologies from parties other than Microsoft, see https://aka.ms/template-3pn for details.</span><br><span class=\"line\"></span><br><span class=\"line\">Processing post-creation actions...</span><br><span class=\"line\">Running &apos;dotnet restore&apos; on FirsrMVC/FirsrMVC.csproj...</span><br><span class=\"line\">  Restoring packages for /Users/liguobao/code/codelover-blog/FirsrMVC/FirsrMVC.csproj...</span><br><span class=\"line\">  Generating MSBuild file /Users/liguobao/code/codelover-blog/FirsrMVC/obj/FirsrMVC.csproj.nuget.g.props.</span><br><span class=\"line\">  Generating MSBuild file /Users/liguobao/code/codelover-blog/FirsrMVC/obj/FirsrMVC.csproj.nuget.g.targets.</span><br><span class=\"line\">  Restore completed in 1.97 sec for /Users/liguobao/code/codelover-blog/FirsrMVC/FirsrMVC.csproj.</span><br><span class=\"line\"></span><br><span class=\"line\">Restore succeeded.</span><br><span class=\"line\"></span><br><span class=\"line\">➜  codelover-blog git:(master) ✗ cd FirsrMVC</span><br><span class=\"line\">➜  FirsrMVC git:(master) ✗ ls</span><br><span class=\"line\">FirsrMVC.csproj  Program.cs  Startup.cs  obj/  wwwroot/</span><br></pre></td></tr></table></figure>\n<h3 id=\"Program-cs\"><a href=\"#Program-cs\" class=\"headerlink\" title=\"Program.cs\"></a>Program.cs</h3><p>在VS Code中打开FirsrMVC文件夹,简单看一下文件和Program.cs的代码</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-30%20%E4%B8%8A%E5%8D%887.42.08.png\" alt=\"文件列表\"></p>\n<p>Program.cs依旧是Main主方法,然后调用了一下BuildWebHost方法,BuildWebHost返回一个IWebHost的实例,接着Run.</p>\n<p>先不管这里具体做了什么事情,我们从语义上理解一下.</p>\n<ol>\n<li><p>BuildWebHost构建一个Web的Host实例,然后把WebHost实例运行起来了</p>\n</li>\n<li><p>创建WebHost使用了一个Startup的类</p>\n</li>\n</ol>\n<p>关于详细WebHost的详细解析见:<a href=\"http://www.cnblogs.com/RainingNight/p/hosting-in-asp-net-core.html\" target=\"_blank\" rel=\"noopener\">ASP.NET Core 运行原理解剖[1]:Hosting</a></p>\n<h3 id=\"Startup-cs\"><a href=\"#Startup-cs\" class=\"headerlink\" title=\"Startup.cs\"></a>Startup.cs</h3><p>先直接上一波代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">using System;</span><br><span class=\"line\">using System.Collections.Generic;</span><br><span class=\"line\">using System.Linq;</span><br><span class=\"line\">using System.Threading.Tasks;</span><br><span class=\"line\">using Microsoft.AspNetCore.Builder;</span><br><span class=\"line\">using Microsoft.AspNetCore.Hosting;</span><br><span class=\"line\">using Microsoft.AspNetCore.Http;</span><br><span class=\"line\">using Microsoft.Extensions.DependencyInjection;</span><br><span class=\"line\"></span><br><span class=\"line\">namespace FirsrMVC</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public class Startup</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        // This method gets called by the runtime. Use this method to add services to the container.</span><br><span class=\"line\">        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940</span><br><span class=\"line\">        public void ConfigureServices(IServiceCollection services)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span><br><span class=\"line\">        public void Configure(IApplicationBuilder app, IHostingEnvironment env)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if (env.IsDevelopment())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                app.UseDeveloperExceptionPage();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            //直接往HTTP Response中写入&quot;Hello World!&quot;,即在页面直接显示此字符</span><br><span class=\"line\">            app.Run(async (context) =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                await context.Response.WriteAsync(&quot;Hello World!&quot;);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>ConfigureServices:运行时被调用,将服务(services)添加到容器(container)中</p>\n</li>\n<li><p>Configure:运行时被调用, 配置HTTP request 的pipeline</p>\n</li>\n</ol>\n<p>嗯,看不懂?没关系,待会一个个演示.</p>\n<p>我们这里还是直接先跑一下程序,FirsrMVC文件夹路径下执行:dotnet run<br>输出如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  FirsrMVC git:(master) ✗ dotnet run</span><br><span class=\"line\">Hosting environment: Production</span><br><span class=\"line\">Content root path: /Users/liguobao/code/codelover-blog/FirsrMVC</span><br><span class=\"line\">Now listening on: http://localhost:5000</span><br><span class=\"line\">Application started. Press Ctrl+C to shut down.</span><br></pre></td></tr></table></figure>\n<p>然后访问<a href=\"http://localhost:5000\" target=\"_blank\" rel=\"noopener\">http://localhost:5000</a>看看.</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-30%20%E4%B8%8A%E5%8D%888.00.09.png\" alt=\"localhost\"></p>\n<p>好了,第一个MVC程序已经跑起来了,本文结束.逃…</p>\n<p>这里应该还有人吧?那我们继续了.</p>\n<h3 id=\"wwwroot中的静态文件\"><a href=\"#wwwroot中的静态文件\" class=\"headerlink\" title=\"wwwroot中的静态文件\"></a>wwwroot中的静态文件</h3><ol>\n<li><p>在wwwroot文件夹新增first.html,随便写个能看见的HTML标签(我写的是p标签)</p>\n</li>\n<li><p>在 Configure 方法中添加一句 app.UseStaticFiles(); 然后再重新运行一下</p>\n</li>\n<li><p>访问<a href=\"http://localhost:5000/first.html\" target=\"_blank\" rel=\"noopener\">http://localhost:5000/first.html</a></p>\n</li>\n</ol>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-30%20%E4%B8%8A%E5%8D%888.09.06.png\" alt=\"first\"></p>\n<p>本步骤完成.</p>\n<p>UseStaticFiles()方法:调用一个读取wwwroot文件夹下面的静态文件输出的中间件注册到程序中,从而完成静态文件的输出.</p>\n<p>这里也告诉我们,ASP.NET Core的静态文件(JS+CSS+图片…)之类的都可以放这边来.</p>\n<p>甚至于如果简单做前后端分离的话,前端的vue/react项目都可以扔这里去.</p>\n<h2 id=\"重头戏MVC\"><a href=\"#重头戏MVC\" class=\"headerlink\" title=\"重头戏MVC\"></a>重头戏MVC</h2><p>终于要讲到MVC了.</p>\n<blockquote>\n<p>MVC模式最早由Trygve Reenskaug在1978年提出[1]，是施乐帕罗奥多研究中心（Xerox PARC）在20世纪80年代为程序语言Smalltalk发明的一种软件架构。MVC模式的目的是实现一种动态的程式设计，使后续对程序的修改和扩展简化，并且使程序某一部分的重复利用成为可能。除此之外，此模式通过对复杂度的简化，使程序结构更加直观。软件系统通过对自身基本部分分离的同时也赋予了各个基本部分应有的功能。专业人员可以通过自身的专长分组：</p>\n</blockquote>\n<ol>\n<li>控制器（Controller）- 负责转发请求，对请求进行处理。</li>\n<li>视图（View） - 界面设计人员进行图形界面设计。</li>\n<li>模型（Model） - 程序员编写程序应有的功能（实现算法等等）、数据库专家进行数据管理和数据库设计(可以实现具体的功能)。</li>\n</ol>\n<p>以上概念来自<a href=\"https://zh.wikipedia.org/zh-hans/MVC\" target=\"_blank\" rel=\"noopener\">维基百科:MVC</a></p>\n<p>在ASP.NET Core,MVC模型一般就对应着三个文件夹,Models/Views/Controllers.</p>\n<ol>\n<li><p>Models:存放一些业务实体类,如Student,Course等,表现上就是C#的.cs文件</p>\n</li>\n<li><p>Views:存放CSHTML文件,ASP.NET Core的模板文件,类HTML,也可以写C#代码</p>\n</li>\n<li><p>Controllers: cs文件,继承Controller类的XXXController,实现业务逻辑代码</p>\n</li>\n</ol>\n<p>下面一起来写一个简单的MVC玩玩.</p>\n<h3 id=\"Startup\"><a href=\"#Startup\" class=\"headerlink\" title=\"Startup\"></a>Startup</h3><p>修改 Startup.cs的代码,新增MVC中间件的引用,操作如下:</p>\n<ol>\n<li><p>Startup.cs中的ConfigureServices方法下新增:services.AddMvc();</p>\n</li>\n<li><p>Configure方法下去掉之前的UseMvc,改成</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.UseMvc(routes =&gt;</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               routes.MapRoute(</span><br><span class=\"line\">                   name: &quot;default&quot;,</span><br><span class=\"line\">                   template: &quot;&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;&quot;);</span><br><span class=\"line\">           &#125;);</span><br></pre></td></tr></table></figure>\n<p>全部代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">using System;</span><br><span class=\"line\">using System.Collections.Generic;</span><br><span class=\"line\">using System.Linq;</span><br><span class=\"line\">using System.Threading.Tasks;</span><br><span class=\"line\">using Microsoft.AspNetCore.Builder;</span><br><span class=\"line\">using Microsoft.AspNetCore.Hosting;</span><br><span class=\"line\">using Microsoft.Extensions.Configuration;</span><br><span class=\"line\">using Microsoft.Extensions.DependencyInjection;</span><br><span class=\"line\"></span><br><span class=\"line\">namespace FirsrMVC</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public class Startup</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        public Startup(IConfiguration configuration)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Configuration = configuration;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public IConfiguration Configuration &#123; get; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // This method gets called by the runtime. Use this method to add services to the container.</span><br><span class=\"line\">        public void ConfigureServices(IServiceCollection services)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            services.AddMvc();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span><br><span class=\"line\">        public void Configure(IApplicationBuilder app, IHostingEnvironment env)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if (env.IsDevelopment())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                app.UseDeveloperExceptionPage();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                app.UseExceptionHandler(&quot;/Home/Error&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            app.UseStaticFiles();</span><br><span class=\"line\"></span><br><span class=\"line\">            app.UseMvc(routes =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                routes.MapRoute(</span><br><span class=\"line\">                    name: &quot;default&quot;,</span><br><span class=\"line\">                    template: &quot;&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;&quot;);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Controllers\"><a href=\"#Controllers\" class=\"headerlink\" title=\"Controllers\"></a>Controllers</h3><p>新增Controllers文件夹,在此文件下新建HomeController.cs文件,然后填入一下代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">using System;</span><br><span class=\"line\">using System.Collections.Generic;</span><br><span class=\"line\">using System.Diagnostics;</span><br><span class=\"line\">using System.Linq;</span><br><span class=\"line\">using System.Threading.Tasks;</span><br><span class=\"line\">using Microsoft.AspNetCore.Mvc;</span><br><span class=\"line\"></span><br><span class=\"line\">namespace FirsrMVC.Controllers</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public class HomeController : Controller</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        public IActionResult Index()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return View();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public IActionResult About()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            return Json(new &#123; name = &quot;我的名字&quot;, success = true &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到这里,我们先运行一下代码.</p>\n<p>如无意外的话,</p>\n<p>访问<a href=\"http://localhost:5000/\" target=\"_blank\" rel=\"noopener\">http://localhost:5000/</a> 空白一片,</p>\n<p>访问<a href=\"http://localhost:5000/Home/About\" target=\"_blank\" rel=\"noopener\">http://localhost:5000/Home/About</a> 会输出</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"我的名字\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"success\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"http-localhost-5000\"><a href=\"#http-localhost-5000\" class=\"headerlink\" title=\"http://localhost:5000/\"></a><a href=\"http://localhost:5000/\" target=\"_blank\" rel=\"noopener\">http://localhost:5000/</a></h4><p>其实这里访问的是<a href=\"http://localhost:5000/Home/Index\" target=\"_blank\" rel=\"noopener\">http://localhost:5000/Home/Index</a>,对应方法是HomeController/Index</p>\n<p>我们看一下Log输出会发现这样的一句错误”fail: The view ‘Index’ was not found. Searched locations: /Views/Home/Index.cshtml, /Views/Shared/Index.cshtml”</p>\n<p>原因是HomeController中的Index返回的是View,</p>\n<p>程序默认就会去/Views/目录下寻找/Home/Index.cshtml文件来渲染然后返回给浏览器,但是这里我们并没有这个文件,所以直接GG.</p>\n<h4 id=\"http-localhost-5000-Home-About\"><a href=\"#http-localhost-5000-Home-About\" class=\"headerlink\" title=\"http://localhost:5000/Home/About\"></a><a href=\"http://localhost:5000/Home/About\" target=\"_blank\" rel=\"noopener\">http://localhost:5000/Home/About</a></h4><p>对应方法是HomeController/About,返回为Json数据,不需要View.</p>\n<p>所以直接就往浏览器输出了{ name = “我的名字”, success = true }的Json格式数据</p>\n<h3 id=\"Views\"><a href=\"#Views\" class=\"headerlink\" title=\"Views\"></a>Views</h3><p>上一步我们的的Controller已经建好了,但是缺View文件,我们这里来创建一下View文件</p>\n<p>新建Views/Home文件夹,然后再在此文件夹下新增Index.cshtml文件</p>\n<p>然后在Index.cshtml中输入:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;First View Page&lt;/p&gt;&gt;</span><br></pre></td></tr></table></figure>\n<p>刷新一下<a href=\"http://localhost:5000/\" target=\"_blank\" rel=\"noopener\">http://localhost:5000/</a>页面.</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-30%20%E4%B8%8A%E5%8D%888.51.33.png\" alt=\"View\"></p>\n<p>View文件也建立好了.</p>\n<h3 id=\"Models\"><a href=\"#Models\" class=\"headerlink\" title=\"Models\"></a>Models</h3><p>最后简单讲一下Model.</p>\n<p>同理,新建Models文件夹,在此文件夹下新增Student.cs文件.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">namespace FirsrMVC</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public class Student</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        public string Name &#123; get; set; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public int Age &#123; get; set; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们想做的要做的是把Student信息通过Controller返回给View,然后用View渲染出来.</p>\n<p>修改一下HomeController/Index方法:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public IActionResult Index()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Models.Student student = new Models.Student() &#123; Name = &quot;小明&quot;, Age = 16 &#125;;</span><br><span class=\"line\">    return View(student);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改一下Views/Home/Index.cshtml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@model FirsrMVC.Models.Student</span><br><span class=\"line\">@if(Model !=null)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &lt;p&gt;@Model.Name&lt;span&gt;今年&lt;/span&gt;@Model.Age&lt;span&gt;岁&lt;/span&gt;&lt;/p&gt;</span><br><span class=\"line\">&#125;else</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     &lt;p&gt;这里什么都没有.&lt;/p&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重新运行一下程序,访问<a href=\"http://localhost:5000/\" target=\"_blank\" rel=\"noopener\">http://localhost:5000/</a></p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-30%20%E4%B8%8A%E5%8D%889.10.25.png\" alt=\"index\"></p>\n<p>MVC结束.</p>\n<p>本文完.</p>\n<p>下一节配置文件+DI依赖注入.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"asp-net-core篇\"><a href=\"#asp-net-core篇\" class=\"headerlink\" title=\"asp.net core篇\"></a>asp.net core篇</h1><p>上一篇<a href=\"https://zhuanlan.zhihu.com/p/37460329\" target=\"_blank\" rel=\"noopener\">手把手教你写dotnet core(入门篇)</a>我们已经简单在dotnet core里面跑了个”hello world!”和累加程序.</p>\n<p>今天我们的步子迈大一点,直接上 ASP.NET Core了.</p>\n<ul>\n<li>ASP.NET Core 是一个新的开源和跨平台的框架，用于构建如 Web 应用、物联网（IoT）应用和移动后端应用等连接到互联网的基于云的现代应用程序。ASP.NET Core 应用可运行于 .NET Core 和完整的 .NET Framework 之上。 构建它的目的是为那些部署在云端或者内部运行（on-premises）的应用提供一个优化的开发框架。它由最小开销的模块化的组件构成，因此在构建你的解决方案的同时可以保持灵活性。你可以在 Windows、Mac 和 Linux 上跨平台的开发和运行你的 ASP.NET Core 应用。 ASP.NET Core 开源在 <a href=\"https://github.com/aspnet/home\" target=\"_blank\" rel=\"noopener\">GitHub</a> 上。</li>\n</ul>\n<h2 id=\"创建ASP-NET-Core程序\"><a href=\"#创建ASP-NET-Core程序\" class=\"headerlink\" title=\"创建ASP.NET Core程序\"></a>创建ASP.NET Core程序</h2><ul>\n<li>开发环境: dotnet SDK + VS Code</li>\n</ul>\n<p>这里还是直接使用dotnet new命令来创建ASP.NET Core项目, 终端中输入”dotnet new web -n FirsrMVC”.</p>\n<p>自动创建FirsrMVC文件夹并生成对应的csproj和CS文件,具体操作和输出信息如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  codelover-blog git:(master) ✗ dotnet new web -n FirsrMVC</span><br><span class=\"line\">The template &quot;ASP.NET Core Empty&quot; was created successfully.</span><br><span class=\"line\">This template contains technologies from parties other than Microsoft, see https://aka.ms/template-3pn for details.</span><br><span class=\"line\"></span><br><span class=\"line\">Processing post-creation actions...</span><br><span class=\"line\">Running &apos;dotnet restore&apos; on FirsrMVC/FirsrMVC.csproj...</span><br><span class=\"line\">  Restoring packages for /Users/liguobao/code/codelover-blog/FirsrMVC/FirsrMVC.csproj...</span><br><span class=\"line\">  Generating MSBuild file /Users/liguobao/code/codelover-blog/FirsrMVC/obj/FirsrMVC.csproj.nuget.g.props.</span><br><span class=\"line\">  Generating MSBuild file /Users/liguobao/code/codelover-blog/FirsrMVC/obj/FirsrMVC.csproj.nuget.g.targets.</span><br><span class=\"line\">  Restore completed in 1.97 sec for /Users/liguobao/code/codelover-blog/FirsrMVC/FirsrMVC.csproj.</span><br><span class=\"line\"></span><br><span class=\"line\">Restore succeeded.</span><br><span class=\"line\"></span><br><span class=\"line\">➜  codelover-blog git:(master) ✗ cd FirsrMVC</span><br><span class=\"line\">➜  FirsrMVC git:(master) ✗ ls</span><br><span class=\"line\">FirsrMVC.csproj  Program.cs  Startup.cs  obj/  wwwroot/</span><br></pre></td></tr></table></figure>\n<h3 id=\"Program-cs\"><a href=\"#Program-cs\" class=\"headerlink\" title=\"Program.cs\"></a>Program.cs</h3><p>在VS Code中打开FirsrMVC文件夹,简单看一下文件和Program.cs的代码</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-30%20%E4%B8%8A%E5%8D%887.42.08.png\" alt=\"文件列表\"></p>\n<p>Program.cs依旧是Main主方法,然后调用了一下BuildWebHost方法,BuildWebHost返回一个IWebHost的实例,接着Run.</p>\n<p>先不管这里具体做了什么事情,我们从语义上理解一下.</p>\n<ol>\n<li><p>BuildWebHost构建一个Web的Host实例,然后把WebHost实例运行起来了</p>\n</li>\n<li><p>创建WebHost使用了一个Startup的类</p>\n</li>\n</ol>\n<p>关于详细WebHost的详细解析见:<a href=\"http://www.cnblogs.com/RainingNight/p/hosting-in-asp-net-core.html\" target=\"_blank\" rel=\"noopener\">ASP.NET Core 运行原理解剖[1]:Hosting</a></p>\n<h3 id=\"Startup-cs\"><a href=\"#Startup-cs\" class=\"headerlink\" title=\"Startup.cs\"></a>Startup.cs</h3><p>先直接上一波代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">using System;</span><br><span class=\"line\">using System.Collections.Generic;</span><br><span class=\"line\">using System.Linq;</span><br><span class=\"line\">using System.Threading.Tasks;</span><br><span class=\"line\">using Microsoft.AspNetCore.Builder;</span><br><span class=\"line\">using Microsoft.AspNetCore.Hosting;</span><br><span class=\"line\">using Microsoft.AspNetCore.Http;</span><br><span class=\"line\">using Microsoft.Extensions.DependencyInjection;</span><br><span class=\"line\"></span><br><span class=\"line\">namespace FirsrMVC</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public class Startup</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        // This method gets called by the runtime. Use this method to add services to the container.</span><br><span class=\"line\">        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940</span><br><span class=\"line\">        public void ConfigureServices(IServiceCollection services)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span><br><span class=\"line\">        public void Configure(IApplicationBuilder app, IHostingEnvironment env)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if (env.IsDevelopment())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                app.UseDeveloperExceptionPage();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            //直接往HTTP Response中写入&quot;Hello World!&quot;,即在页面直接显示此字符</span><br><span class=\"line\">            app.Run(async (context) =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                await context.Response.WriteAsync(&quot;Hello World!&quot;);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>ConfigureServices:运行时被调用,将服务(services)添加到容器(container)中</p>\n</li>\n<li><p>Configure:运行时被调用, 配置HTTP request 的pipeline</p>\n</li>\n</ol>\n<p>嗯,看不懂?没关系,待会一个个演示.</p>\n<p>我们这里还是直接先跑一下程序,FirsrMVC文件夹路径下执行:dotnet run<br>输出如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  FirsrMVC git:(master) ✗ dotnet run</span><br><span class=\"line\">Hosting environment: Production</span><br><span class=\"line\">Content root path: /Users/liguobao/code/codelover-blog/FirsrMVC</span><br><span class=\"line\">Now listening on: http://localhost:5000</span><br><span class=\"line\">Application started. Press Ctrl+C to shut down.</span><br></pre></td></tr></table></figure>\n<p>然后访问<a href=\"http://localhost:5000\" target=\"_blank\" rel=\"noopener\">http://localhost:5000</a>看看.</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-30%20%E4%B8%8A%E5%8D%888.00.09.png\" alt=\"localhost\"></p>\n<p>好了,第一个MVC程序已经跑起来了,本文结束.逃…</p>\n<p>这里应该还有人吧?那我们继续了.</p>\n<h3 id=\"wwwroot中的静态文件\"><a href=\"#wwwroot中的静态文件\" class=\"headerlink\" title=\"wwwroot中的静态文件\"></a>wwwroot中的静态文件</h3><ol>\n<li><p>在wwwroot文件夹新增first.html,随便写个能看见的HTML标签(我写的是p标签)</p>\n</li>\n<li><p>在 Configure 方法中添加一句 app.UseStaticFiles(); 然后再重新运行一下</p>\n</li>\n<li><p>访问<a href=\"http://localhost:5000/first.html\" target=\"_blank\" rel=\"noopener\">http://localhost:5000/first.html</a></p>\n</li>\n</ol>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-30%20%E4%B8%8A%E5%8D%888.09.06.png\" alt=\"first\"></p>\n<p>本步骤完成.</p>\n<p>UseStaticFiles()方法:调用一个读取wwwroot文件夹下面的静态文件输出的中间件注册到程序中,从而完成静态文件的输出.</p>\n<p>这里也告诉我们,ASP.NET Core的静态文件(JS+CSS+图片…)之类的都可以放这边来.</p>\n<p>甚至于如果简单做前后端分离的话,前端的vue/react项目都可以扔这里去.</p>\n<h2 id=\"重头戏MVC\"><a href=\"#重头戏MVC\" class=\"headerlink\" title=\"重头戏MVC\"></a>重头戏MVC</h2><p>终于要讲到MVC了.</p>\n<blockquote>\n<p>MVC模式最早由Trygve Reenskaug在1978年提出[1]，是施乐帕罗奥多研究中心（Xerox PARC）在20世纪80年代为程序语言Smalltalk发明的一种软件架构。MVC模式的目的是实现一种动态的程式设计，使后续对程序的修改和扩展简化，并且使程序某一部分的重复利用成为可能。除此之外，此模式通过对复杂度的简化，使程序结构更加直观。软件系统通过对自身基本部分分离的同时也赋予了各个基本部分应有的功能。专业人员可以通过自身的专长分组：</p>\n</blockquote>\n<ol>\n<li>控制器（Controller）- 负责转发请求，对请求进行处理。</li>\n<li>视图（View） - 界面设计人员进行图形界面设计。</li>\n<li>模型（Model） - 程序员编写程序应有的功能（实现算法等等）、数据库专家进行数据管理和数据库设计(可以实现具体的功能)。</li>\n</ol>\n<p>以上概念来自<a href=\"https://zh.wikipedia.org/zh-hans/MVC\" target=\"_blank\" rel=\"noopener\">维基百科:MVC</a></p>\n<p>在ASP.NET Core,MVC模型一般就对应着三个文件夹,Models/Views/Controllers.</p>\n<ol>\n<li><p>Models:存放一些业务实体类,如Student,Course等,表现上就是C#的.cs文件</p>\n</li>\n<li><p>Views:存放CSHTML文件,ASP.NET Core的模板文件,类HTML,也可以写C#代码</p>\n</li>\n<li><p>Controllers: cs文件,继承Controller类的XXXController,实现业务逻辑代码</p>\n</li>\n</ol>\n<p>下面一起来写一个简单的MVC玩玩.</p>\n<h3 id=\"Startup\"><a href=\"#Startup\" class=\"headerlink\" title=\"Startup\"></a>Startup</h3><p>修改 Startup.cs的代码,新增MVC中间件的引用,操作如下:</p>\n<ol>\n<li><p>Startup.cs中的ConfigureServices方法下新增:services.AddMvc();</p>\n</li>\n<li><p>Configure方法下去掉之前的UseMvc,改成</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.UseMvc(routes =&gt;</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               routes.MapRoute(</span><br><span class=\"line\">                   name: &quot;default&quot;,</span><br><span class=\"line\">                   template: &quot;&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;&quot;);</span><br><span class=\"line\">           &#125;);</span><br></pre></td></tr></table></figure>\n<p>全部代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">using System;</span><br><span class=\"line\">using System.Collections.Generic;</span><br><span class=\"line\">using System.Linq;</span><br><span class=\"line\">using System.Threading.Tasks;</span><br><span class=\"line\">using Microsoft.AspNetCore.Builder;</span><br><span class=\"line\">using Microsoft.AspNetCore.Hosting;</span><br><span class=\"line\">using Microsoft.Extensions.Configuration;</span><br><span class=\"line\">using Microsoft.Extensions.DependencyInjection;</span><br><span class=\"line\"></span><br><span class=\"line\">namespace FirsrMVC</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public class Startup</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        public Startup(IConfiguration configuration)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Configuration = configuration;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public IConfiguration Configuration &#123; get; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // This method gets called by the runtime. Use this method to add services to the container.</span><br><span class=\"line\">        public void ConfigureServices(IServiceCollection services)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            services.AddMvc();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span><br><span class=\"line\">        public void Configure(IApplicationBuilder app, IHostingEnvironment env)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if (env.IsDevelopment())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                app.UseDeveloperExceptionPage();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                app.UseExceptionHandler(&quot;/Home/Error&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            app.UseStaticFiles();</span><br><span class=\"line\"></span><br><span class=\"line\">            app.UseMvc(routes =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                routes.MapRoute(</span><br><span class=\"line\">                    name: &quot;default&quot;,</span><br><span class=\"line\">                    template: &quot;&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;&quot;);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Controllers\"><a href=\"#Controllers\" class=\"headerlink\" title=\"Controllers\"></a>Controllers</h3><p>新增Controllers文件夹,在此文件下新建HomeController.cs文件,然后填入一下代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">using System;</span><br><span class=\"line\">using System.Collections.Generic;</span><br><span class=\"line\">using System.Diagnostics;</span><br><span class=\"line\">using System.Linq;</span><br><span class=\"line\">using System.Threading.Tasks;</span><br><span class=\"line\">using Microsoft.AspNetCore.Mvc;</span><br><span class=\"line\"></span><br><span class=\"line\">namespace FirsrMVC.Controllers</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public class HomeController : Controller</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        public IActionResult Index()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return View();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public IActionResult About()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            return Json(new &#123; name = &quot;我的名字&quot;, success = true &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到这里,我们先运行一下代码.</p>\n<p>如无意外的话,</p>\n<p>访问<a href=\"http://localhost:5000/\" target=\"_blank\" rel=\"noopener\">http://localhost:5000/</a> 空白一片,</p>\n<p>访问<a href=\"http://localhost:5000/Home/About\" target=\"_blank\" rel=\"noopener\">http://localhost:5000/Home/About</a> 会输出</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"我的名字\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"success\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"http-localhost-5000\"><a href=\"#http-localhost-5000\" class=\"headerlink\" title=\"http://localhost:5000/\"></a><a href=\"http://localhost:5000/\" target=\"_blank\" rel=\"noopener\">http://localhost:5000/</a></h4><p>其实这里访问的是<a href=\"http://localhost:5000/Home/Index\" target=\"_blank\" rel=\"noopener\">http://localhost:5000/Home/Index</a>,对应方法是HomeController/Index</p>\n<p>我们看一下Log输出会发现这样的一句错误”fail: The view ‘Index’ was not found. Searched locations: /Views/Home/Index.cshtml, /Views/Shared/Index.cshtml”</p>\n<p>原因是HomeController中的Index返回的是View,</p>\n<p>程序默认就会去/Views/目录下寻找/Home/Index.cshtml文件来渲染然后返回给浏览器,但是这里我们并没有这个文件,所以直接GG.</p>\n<h4 id=\"http-localhost-5000-Home-About\"><a href=\"#http-localhost-5000-Home-About\" class=\"headerlink\" title=\"http://localhost:5000/Home/About\"></a><a href=\"http://localhost:5000/Home/About\" target=\"_blank\" rel=\"noopener\">http://localhost:5000/Home/About</a></h4><p>对应方法是HomeController/About,返回为Json数据,不需要View.</p>\n<p>所以直接就往浏览器输出了{ name = “我的名字”, success = true }的Json格式数据</p>\n<h3 id=\"Views\"><a href=\"#Views\" class=\"headerlink\" title=\"Views\"></a>Views</h3><p>上一步我们的的Controller已经建好了,但是缺View文件,我们这里来创建一下View文件</p>\n<p>新建Views/Home文件夹,然后再在此文件夹下新增Index.cshtml文件</p>\n<p>然后在Index.cshtml中输入:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;First View Page&lt;/p&gt;&gt;</span><br></pre></td></tr></table></figure>\n<p>刷新一下<a href=\"http://localhost:5000/\" target=\"_blank\" rel=\"noopener\">http://localhost:5000/</a>页面.</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-30%20%E4%B8%8A%E5%8D%888.51.33.png\" alt=\"View\"></p>\n<p>View文件也建立好了.</p>\n<h3 id=\"Models\"><a href=\"#Models\" class=\"headerlink\" title=\"Models\"></a>Models</h3><p>最后简单讲一下Model.</p>\n<p>同理,新建Models文件夹,在此文件夹下新增Student.cs文件.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">namespace FirsrMVC</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public class Student</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        public string Name &#123; get; set; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public int Age &#123; get; set; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们想做的要做的是把Student信息通过Controller返回给View,然后用View渲染出来.</p>\n<p>修改一下HomeController/Index方法:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public IActionResult Index()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Models.Student student = new Models.Student() &#123; Name = &quot;小明&quot;, Age = 16 &#125;;</span><br><span class=\"line\">    return View(student);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改一下Views/Home/Index.cshtml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@model FirsrMVC.Models.Student</span><br><span class=\"line\">@if(Model !=null)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &lt;p&gt;@Model.Name&lt;span&gt;今年&lt;/span&gt;@Model.Age&lt;span&gt;岁&lt;/span&gt;&lt;/p&gt;</span><br><span class=\"line\">&#125;else</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     &lt;p&gt;这里什么都没有.&lt;/p&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重新运行一下程序,访问<a href=\"http://localhost:5000/\" target=\"_blank\" rel=\"noopener\">http://localhost:5000/</a></p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-30%20%E4%B8%8A%E5%8D%889.10.25.png\" alt=\"index\"></p>\n<p>MVC结束.</p>\n<p>本文完.</p>\n<p>下一节配置文件+DI依赖注入.</p>\n"},{"layout":"post","title":"手把手教你写dotnet core(入门篇)","date":"2018-05-28T16:00:00.000Z","_content":"# dotnet core(入门篇)\n\n## 开发环境准备\n\ndotnet core最低开发环境要求就是一个[.NET SDK](https://www.microsoft.com/net/learn/get-started/),在这里可以下载的到最新版本的SDK,各个平台都有.\n\n理论上有了SDK什么事都能做了.\n\n安装SDK的步骤参考上面的连接就OK,这部分我们跳过.\n\n简单讲一下不同操作系统的开发工具选择.\n\n- Windows平台下首选Visual Studio 2017,安装的时候选择 .NET Core部分即可,安装下来估计占用磁盘空间5G,同时会帮你装好SDK的,好用,很好用.\n\n- MacOS/Linux平台选择 SDK + Visual Studio Code + Debug插件 + Nuget插件,很不错,完全生产级别\n\n- 备选方案 Jetbrains家的rider,暂时没用过,resharper一直好评如潮\n\n今天我这边主要是是以VS Code + Debug插件 + 命令行来进来讲解.\n\n装好dotnet core SDK之后,打开命令行界面,输入dotnet看看.\n\n- Windows中为CMD或者Powershell,MacOS/Linux为终端\n\n```log\n\nUsage: dotnet [options]\nUsage: dotnet [path-to-application]\n\nOptions:\n  -h|--help            Display help.\n  --version         Display version.\n\npath-to-application:\n```\n\n再输入dotnet --version查看一下当前版本,我这边显示2.1.4.\n\n输入dotnet help\n\n```log\n.NET Command Line Tools (2.1.4)\nUsage: dotnet [runtime-options] [path-to-application]\nUsage: dotnet [sdk-options] [command] [arguments] [command-options]\n\npath-to-application:\n  The path to an application .dll file to execute.\n\nSDK commands:\n  new              Initialize .NET projects.\n  restore          Restore dependencies specified in the .NET project.\n  run              Compiles and immediately executes a .NET project.\n  build            Builds a .NET project.\n  publish          Publishes a .NET project for deployment (including the runtime).\n  test             Runs unit tests using the test runner specified in the project.\n  pack             Creates a NuGet package.\n  migrate          Migrates a project.json based project to a msbuild based project.\n  clean            Clean build output(s).\n  sln              Modify solution (SLN) files.\n  add              Add reference to the project.\n  remove           Remove reference from the project.\n  list             List reference in the project.\n  nuget            Provides additional NuGet commands.\n  msbuild          Runs Microsoft Build Engine (MSBuild).\n  vstest           Runs Microsoft Test Execution Command Line Tool.\n\nCommon options:\n  -v|--verbosity        Set the verbosity level of the command. Allowed values are q[uiet], m[inimal], n[ormal], d[etailed], and diag[nostic].\n  -h|--help             Show help.\n```\n\n有类似的这些信息,说明我们的SDK安装以及完成了.\n\nVisual Studio 和Visual Studio Code的安装就不多说了.\n\n## 创建 dotnet core程序\n\n我这边只有SDK + VS Code环境,创建程序直接使用命令行了.\n\ndotnet core SDK中已经有很多现成的APP模板,我们直接使用dotnet new命令就可以创建对应的程序.\n\n命令行输入 \" dotnet new \", 显示如下:\n\n```log\nUsage: new [options]\n\nOptions:\n  -h, --help          Displays help for this command.\n  -l, --list          Lists templates containing the specified name. If no name is specified, lists all templates.\n  -n, --name          The name for the output being created. If no name is specified, the name of the current directory is used.\n  -o, --output        Location to place the generated output.\n  -i, --install       Installs a source or a template pack.\n  -u, --uninstall     Uninstalls a source or a template pack.\n  --type              Filters templates based on available types. Predefined values are \"project\", \"item\" or \"other\".\n  --force             Forces content to be generated even if it would change existing files.\n  -lang, --language   Specifies the language of the template to create.\n\n\nTemplates                                         Short Name       Language          Tags\n--------------------------------------------------------------------------------------------------------\nConsole Application                               console          [C#], F#, VB      Common/Console\nClass library                                     classlib         [C#], F#, VB      Common/Library\nUnit Test Project                                 mstest           [C#], F#, VB      Test/MSTest\nxUnit Test Project                                xunit            [C#], F#, VB      Test/xUnit\nASP.NET Core Empty                                web              [C#], F#          Web/Empty\nASP.NET Core Web App (Model-View-Controller)      mvc              [C#], F#          Web/MVC\nASP.NET Core Web App                              razor            [C#]              Web/MVC/Razor Pages\nASP.NET Core with Angular                         angular          [C#]              Web/MVC/SPA\nASP.NET Core with React.js                        react            [C#]              Web/MVC/SPA\nASP.NET Core with React.js and Redux              reactredux       [C#]              Web/MVC/SPA\nASP.NET Core Web API                              webapi           [C#], F#          Web/WebAPI\nglobal.json file                                  globaljson                         Config\nNuGet Config                                      nugetconfig                        Config\nWeb Config                                        webconfig                          Config\nSolution File                                     sln                                Solution\nRazor Page                                        page                               Web/ASP.NET\nMVC ViewImports                                   viewimports                        Web/ASP.NET\nMVC ViewStart                                     viewstart                          Web/ASP.NET\n\nExamples:\n    dotnet new mvc --auth Individual\n    dotnet new viewimports --namespace\n    dotnet new --help\n```\n\n既然是手把手教程,肯定从最原始的Console Application 开始咯,在命令行中输入命令\"dotnet new console -n FirstApplication\",创建一个名为FirstApplication的命令行程序\n\n```sh\ndotnet new console -n FirstApplication;\n\bcd FirstApplication;\nls FirstApplication;\n#✗ cd FirstApplication\n# FirstApplication git:(master) ✗ ls\n# FirstApplication.csproj  Program.cs  obj/\n```\n\n我们切换到FirstApplication文件中,可以看到现在已经有三个文件.简单讲解一下:\n\n- FirstApplication.csproj .csproj为项目构建文件(C Sharp Project”),对应maven中的pom.xml或者是gradle中的build.gradle\n\n- Program.cs 为程序的主入口, 有一个静态的Main方法\n\n- obj用于存放编译过程中生成的中间临时文件,一般不用管\n\n我们使用VS Code打开这个文件夹看看.\n\n首次在VS Code中打开带有.csproj文件的文件夹,VS Code会提示是否需要安装相关插件,直接选择是即可.\n\n我们这里要用到的插件主要是\"C# for Visual Studio Code (powered by OmniSharp)\",直接在插件仓库搜C#基本就能看到.\n\n直接看下Program.cs的代码:\n\n![代码1](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-29%20%E4%B8%8B%E5%8D%8810.51.02.png)\n\n一句话输出\"Hello World!\"...\n\n我们试着运行一下看看.\n\n有两种方式:\n\n- 直接在对应项目文件夹位置的命令行中执行dotner run;\n\n- VS Code debug启动\n\n### dotnet run\n\n\"VS Code-查看-集成终端\"可以直接调出终端,并且切到当前项目文件路径,执行 dotnet run输出如下:\n\n```log\n➜  FirstApplication git:(master) ✗ dotnet run\nHello World!\n```\n\n### VS Code debug\n\nVS Code左侧切到debug(一只虫子的图标),点击调试旁边的绿色按钮开始启动.\n\n![debug](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-29%20%E4%B8%8B%E5%8D%8810.57.46.png)\n\n终端输出:\n\n![终端](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-29%20%E4%B8%8B%E5%8D%8810.59.51.png)\n\n调试控制台输出:\n\n![控制台](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-29%20%E4%B8%8B%E5%8D%8811.00.51.png)\n\n都说了Debug了,我们简单也做个debug断点调试.\n\n点击代码文件左侧黑色边栏,鼠标左键单击在第8,9行,对应位置出现断点(小红点),\b\n如下图:\n![断点](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-29%20%E4%B8%8B%E5%8D%8811.02.09.png)\n\n再次Debug运行程序.\n\n第8行位置出现黄色条纹,程序处于debug默认等待下一步操作.\n\n![debug](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-29%20%E4%B8%8B%E5%8D%8811.04.41.png)\n\n左侧可查看相关变量当前值,正上方有debug相关操作(F5继续,F10单步跳过,F11单步调试...)\n\nF5按一下,黄色条纹往下走一步到第9行(上一步也下了断点).此时尚未输出任何的信息.\n\nF5下一步执行Console.WriteLine(\"Hello World!\");输出\"Hello World!\"\n\n### 写个累加程序试试水\n\n```C#\nusing System;\n\nnamespace FirstApplication\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var sum = 0;\n            for (var i = 0; i < 10; i++)\n            {\n                sum = sum + i;\n                Console.WriteLine($\"当前i值为:{i},sum:{sum}\");\n            }\n        }\n    }\n}\n\n/*\nLoaded '/usr/local/share/dotnet/shared/Microsoft.NETCore.App/2.0.5/System.Runtime.Extensions.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n当前i值为:0,sum:0\n当前i值为:1,sum:1\n当前i值为:2,sum:3\n当前i值为:3,sum:6\n当前i值为:4,sum:10\n当前i值为:5,sum:15\n当前i值为:6,sum:21\n当前i值为:7,sum:28\n当前i值为:8,sum:36\n当前i值为:9,sum:45\nThe program '[32086] FirstApplication.dll' has exited with code 0 (0x0).\n*/\n```\n\n在循环里面打个断点看看i的值和sum的值.\n\n![i+sum](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-29%20%E4%B8%8B%E5%8D%8811.17.06.png)\n\n鼠标移动到对应变量上.\n![鼠标移上去](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-29%20%E4%B8%8B%E5%8D%8811.17.49.png)\n\n到这里,第一个dotnet core程序基本已经完成了,本教程结束....\n\n## 骗你的,这里还有\n\n还记得我们上面看到的FirstApplication.csproj吗?\n\n我们直接在VS Code中打开看看.(VS用户随便找个文件编辑器打开)\n\n```xml\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>netcoreapp2.0</TargetFramework>\n  </PropertyGroup>\n\n</Project>\n\n```\n\n这里就指定了SDK版本和程序版本,没有其他多余的东西了.\n\n暂时没什么看的,我们找个web项目的来看看.\n\n```xml\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\n  <PropertyGroup>\n    <TargetFramework>netcoreapp2.0</TargetFramework>\n  </PropertyGroup>\n  <ItemGroup>\n    <Folder Include=\"wwwroot\\\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <PackageReference Include=\"Dapper\" Version=\"1.50.4\"/>\n    <PackageReference Include=\"Microsoft.ApplicationInsights.AspNetCore\" Version=\"2.2.1\"/>\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"2.0.2\"/>\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"2.0.3\"/>\n    <PackageReference Include=\"Microsoft.AspNetCore.StaticFiles\" Version=\"2.0.2\"/>\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Design\" Version=\"2.0.2\"/>\n    <PackageReference Include=\"Microsoft.Extensions.Logging.Debug\" Version=\"2.0.1\"/>\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.BrowserLink\" Version=\"2.0.2\"/>\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.0.3\"/>\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"11.0.2\"/>\n    <PackageReference Include=\"StackExchange.Redis.StrongName\" Version=\"1.2.6\"/>\n    <PackageReference Include=\"System.Diagnostics.Tools\" Version=\"4.3.0\"/>\n    <PackageReference Include=\"System.Text.Encoding.CodePages\" Version=\"4.4.0\"/>\n    <PackageReference Include=\"System.ValueTuple\" Version=\"*\"/>\n    <PackageReference Include=\"Microsoft.Extensions.Configuration.Json\" Version=\"2.1.0-rc1-final\"/>\n    <PackageReference Include=\"Pomelo.AspNetCore.TimedJob\" Version=\"2.0.0-rtm-10046\"/>\n    <PackageReference Include=\"MySqlConnector\" Version=\"0.40.3\"/>\n    <PackageReference Include=\"MongoDB.Driver.Core\" Version=\"2.7.0-beta0001\"/>\n    <PackageReference Include=\"MongoDB.Driver\" Version=\"2.7.0-beta0001\"/>\n  </ItemGroup>\n</Project>\n```\n\n这边能看的东西就很多了.\n\n- Project Sdk=\"Microsoft.NET.Sdk.Web\" SDk为Web\n\n- \bFolder Include=\"wwwroot\\\" 包含 wwwroot静态文件\n\n- PackageReference Include=\"Dapper\" Version=\"1.50.4\" 引用了Dapper程序包(一个ORM框架)\n\n- PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"2.0.3\" 引用了MVC框架\n\n- PackageReference Include=\"Newtonsoft.Json\" Version=\"11.0.2\" 引用了Newtonsoft.Json Json库\n\n这里我们先看看,具体内容在下一讲asp.net core 入门我们会详细讲解.\n\n全文完....\n","source":"_posts/start-dotnetcore.md","raw":"---\nlayout: post\ntitle: 手把手教你写dotnet core(入门篇)\ncategory: dotnet core\ndate: 2018-05-29\ntags:\n- dotnet core\n- docker\n\n---\n# dotnet core(入门篇)\n\n## 开发环境准备\n\ndotnet core最低开发环境要求就是一个[.NET SDK](https://www.microsoft.com/net/learn/get-started/),在这里可以下载的到最新版本的SDK,各个平台都有.\n\n理论上有了SDK什么事都能做了.\n\n安装SDK的步骤参考上面的连接就OK,这部分我们跳过.\n\n简单讲一下不同操作系统的开发工具选择.\n\n- Windows平台下首选Visual Studio 2017,安装的时候选择 .NET Core部分即可,安装下来估计占用磁盘空间5G,同时会帮你装好SDK的,好用,很好用.\n\n- MacOS/Linux平台选择 SDK + Visual Studio Code + Debug插件 + Nuget插件,很不错,完全生产级别\n\n- 备选方案 Jetbrains家的rider,暂时没用过,resharper一直好评如潮\n\n今天我这边主要是是以VS Code + Debug插件 + 命令行来进来讲解.\n\n装好dotnet core SDK之后,打开命令行界面,输入dotnet看看.\n\n- Windows中为CMD或者Powershell,MacOS/Linux为终端\n\n```log\n\nUsage: dotnet [options]\nUsage: dotnet [path-to-application]\n\nOptions:\n  -h|--help            Display help.\n  --version         Display version.\n\npath-to-application:\n```\n\n再输入dotnet --version查看一下当前版本,我这边显示2.1.4.\n\n输入dotnet help\n\n```log\n.NET Command Line Tools (2.1.4)\nUsage: dotnet [runtime-options] [path-to-application]\nUsage: dotnet [sdk-options] [command] [arguments] [command-options]\n\npath-to-application:\n  The path to an application .dll file to execute.\n\nSDK commands:\n  new              Initialize .NET projects.\n  restore          Restore dependencies specified in the .NET project.\n  run              Compiles and immediately executes a .NET project.\n  build            Builds a .NET project.\n  publish          Publishes a .NET project for deployment (including the runtime).\n  test             Runs unit tests using the test runner specified in the project.\n  pack             Creates a NuGet package.\n  migrate          Migrates a project.json based project to a msbuild based project.\n  clean            Clean build output(s).\n  sln              Modify solution (SLN) files.\n  add              Add reference to the project.\n  remove           Remove reference from the project.\n  list             List reference in the project.\n  nuget            Provides additional NuGet commands.\n  msbuild          Runs Microsoft Build Engine (MSBuild).\n  vstest           Runs Microsoft Test Execution Command Line Tool.\n\nCommon options:\n  -v|--verbosity        Set the verbosity level of the command. Allowed values are q[uiet], m[inimal], n[ormal], d[etailed], and diag[nostic].\n  -h|--help             Show help.\n```\n\n有类似的这些信息,说明我们的SDK安装以及完成了.\n\nVisual Studio 和Visual Studio Code的安装就不多说了.\n\n## 创建 dotnet core程序\n\n我这边只有SDK + VS Code环境,创建程序直接使用命令行了.\n\ndotnet core SDK中已经有很多现成的APP模板,我们直接使用dotnet new命令就可以创建对应的程序.\n\n命令行输入 \" dotnet new \", 显示如下:\n\n```log\nUsage: new [options]\n\nOptions:\n  -h, --help          Displays help for this command.\n  -l, --list          Lists templates containing the specified name. If no name is specified, lists all templates.\n  -n, --name          The name for the output being created. If no name is specified, the name of the current directory is used.\n  -o, --output        Location to place the generated output.\n  -i, --install       Installs a source or a template pack.\n  -u, --uninstall     Uninstalls a source or a template pack.\n  --type              Filters templates based on available types. Predefined values are \"project\", \"item\" or \"other\".\n  --force             Forces content to be generated even if it would change existing files.\n  -lang, --language   Specifies the language of the template to create.\n\n\nTemplates                                         Short Name       Language          Tags\n--------------------------------------------------------------------------------------------------------\nConsole Application                               console          [C#], F#, VB      Common/Console\nClass library                                     classlib         [C#], F#, VB      Common/Library\nUnit Test Project                                 mstest           [C#], F#, VB      Test/MSTest\nxUnit Test Project                                xunit            [C#], F#, VB      Test/xUnit\nASP.NET Core Empty                                web              [C#], F#          Web/Empty\nASP.NET Core Web App (Model-View-Controller)      mvc              [C#], F#          Web/MVC\nASP.NET Core Web App                              razor            [C#]              Web/MVC/Razor Pages\nASP.NET Core with Angular                         angular          [C#]              Web/MVC/SPA\nASP.NET Core with React.js                        react            [C#]              Web/MVC/SPA\nASP.NET Core with React.js and Redux              reactredux       [C#]              Web/MVC/SPA\nASP.NET Core Web API                              webapi           [C#], F#          Web/WebAPI\nglobal.json file                                  globaljson                         Config\nNuGet Config                                      nugetconfig                        Config\nWeb Config                                        webconfig                          Config\nSolution File                                     sln                                Solution\nRazor Page                                        page                               Web/ASP.NET\nMVC ViewImports                                   viewimports                        Web/ASP.NET\nMVC ViewStart                                     viewstart                          Web/ASP.NET\n\nExamples:\n    dotnet new mvc --auth Individual\n    dotnet new viewimports --namespace\n    dotnet new --help\n```\n\n既然是手把手教程,肯定从最原始的Console Application 开始咯,在命令行中输入命令\"dotnet new console -n FirstApplication\",创建一个名为FirstApplication的命令行程序\n\n```sh\ndotnet new console -n FirstApplication;\n\bcd FirstApplication;\nls FirstApplication;\n#✗ cd FirstApplication\n# FirstApplication git:(master) ✗ ls\n# FirstApplication.csproj  Program.cs  obj/\n```\n\n我们切换到FirstApplication文件中,可以看到现在已经有三个文件.简单讲解一下:\n\n- FirstApplication.csproj .csproj为项目构建文件(C Sharp Project”),对应maven中的pom.xml或者是gradle中的build.gradle\n\n- Program.cs 为程序的主入口, 有一个静态的Main方法\n\n- obj用于存放编译过程中生成的中间临时文件,一般不用管\n\n我们使用VS Code打开这个文件夹看看.\n\n首次在VS Code中打开带有.csproj文件的文件夹,VS Code会提示是否需要安装相关插件,直接选择是即可.\n\n我们这里要用到的插件主要是\"C# for Visual Studio Code (powered by OmniSharp)\",直接在插件仓库搜C#基本就能看到.\n\n直接看下Program.cs的代码:\n\n![代码1](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-29%20%E4%B8%8B%E5%8D%8810.51.02.png)\n\n一句话输出\"Hello World!\"...\n\n我们试着运行一下看看.\n\n有两种方式:\n\n- 直接在对应项目文件夹位置的命令行中执行dotner run;\n\n- VS Code debug启动\n\n### dotnet run\n\n\"VS Code-查看-集成终端\"可以直接调出终端,并且切到当前项目文件路径,执行 dotnet run输出如下:\n\n```log\n➜  FirstApplication git:(master) ✗ dotnet run\nHello World!\n```\n\n### VS Code debug\n\nVS Code左侧切到debug(一只虫子的图标),点击调试旁边的绿色按钮开始启动.\n\n![debug](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-29%20%E4%B8%8B%E5%8D%8810.57.46.png)\n\n终端输出:\n\n![终端](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-29%20%E4%B8%8B%E5%8D%8810.59.51.png)\n\n调试控制台输出:\n\n![控制台](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-29%20%E4%B8%8B%E5%8D%8811.00.51.png)\n\n都说了Debug了,我们简单也做个debug断点调试.\n\n点击代码文件左侧黑色边栏,鼠标左键单击在第8,9行,对应位置出现断点(小红点),\b\n如下图:\n![断点](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-29%20%E4%B8%8B%E5%8D%8811.02.09.png)\n\n再次Debug运行程序.\n\n第8行位置出现黄色条纹,程序处于debug默认等待下一步操作.\n\n![debug](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-29%20%E4%B8%8B%E5%8D%8811.04.41.png)\n\n左侧可查看相关变量当前值,正上方有debug相关操作(F5继续,F10单步跳过,F11单步调试...)\n\nF5按一下,黄色条纹往下走一步到第9行(上一步也下了断点).此时尚未输出任何的信息.\n\nF5下一步执行Console.WriteLine(\"Hello World!\");输出\"Hello World!\"\n\n### 写个累加程序试试水\n\n```C#\nusing System;\n\nnamespace FirstApplication\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var sum = 0;\n            for (var i = 0; i < 10; i++)\n            {\n                sum = sum + i;\n                Console.WriteLine($\"当前i值为:{i},sum:{sum}\");\n            }\n        }\n    }\n}\n\n/*\nLoaded '/usr/local/share/dotnet/shared/Microsoft.NETCore.App/2.0.5/System.Runtime.Extensions.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n当前i值为:0,sum:0\n当前i值为:1,sum:1\n当前i值为:2,sum:3\n当前i值为:3,sum:6\n当前i值为:4,sum:10\n当前i值为:5,sum:15\n当前i值为:6,sum:21\n当前i值为:7,sum:28\n当前i值为:8,sum:36\n当前i值为:9,sum:45\nThe program '[32086] FirstApplication.dll' has exited with code 0 (0x0).\n*/\n```\n\n在循环里面打个断点看看i的值和sum的值.\n\n![i+sum](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-29%20%E4%B8%8B%E5%8D%8811.17.06.png)\n\n鼠标移动到对应变量上.\n![鼠标移上去](http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-29%20%E4%B8%8B%E5%8D%8811.17.49.png)\n\n到这里,第一个dotnet core程序基本已经完成了,本教程结束....\n\n## 骗你的,这里还有\n\n还记得我们上面看到的FirstApplication.csproj吗?\n\n我们直接在VS Code中打开看看.(VS用户随便找个文件编辑器打开)\n\n```xml\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>netcoreapp2.0</TargetFramework>\n  </PropertyGroup>\n\n</Project>\n\n```\n\n这里就指定了SDK版本和程序版本,没有其他多余的东西了.\n\n暂时没什么看的,我们找个web项目的来看看.\n\n```xml\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\n  <PropertyGroup>\n    <TargetFramework>netcoreapp2.0</TargetFramework>\n  </PropertyGroup>\n  <ItemGroup>\n    <Folder Include=\"wwwroot\\\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <PackageReference Include=\"Dapper\" Version=\"1.50.4\"/>\n    <PackageReference Include=\"Microsoft.ApplicationInsights.AspNetCore\" Version=\"2.2.1\"/>\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"2.0.2\"/>\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"2.0.3\"/>\n    <PackageReference Include=\"Microsoft.AspNetCore.StaticFiles\" Version=\"2.0.2\"/>\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Design\" Version=\"2.0.2\"/>\n    <PackageReference Include=\"Microsoft.Extensions.Logging.Debug\" Version=\"2.0.1\"/>\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.BrowserLink\" Version=\"2.0.2\"/>\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.0.3\"/>\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"11.0.2\"/>\n    <PackageReference Include=\"StackExchange.Redis.StrongName\" Version=\"1.2.6\"/>\n    <PackageReference Include=\"System.Diagnostics.Tools\" Version=\"4.3.0\"/>\n    <PackageReference Include=\"System.Text.Encoding.CodePages\" Version=\"4.4.0\"/>\n    <PackageReference Include=\"System.ValueTuple\" Version=\"*\"/>\n    <PackageReference Include=\"Microsoft.Extensions.Configuration.Json\" Version=\"2.1.0-rc1-final\"/>\n    <PackageReference Include=\"Pomelo.AspNetCore.TimedJob\" Version=\"2.0.0-rtm-10046\"/>\n    <PackageReference Include=\"MySqlConnector\" Version=\"0.40.3\"/>\n    <PackageReference Include=\"MongoDB.Driver.Core\" Version=\"2.7.0-beta0001\"/>\n    <PackageReference Include=\"MongoDB.Driver\" Version=\"2.7.0-beta0001\"/>\n  </ItemGroup>\n</Project>\n```\n\n这边能看的东西就很多了.\n\n- Project Sdk=\"Microsoft.NET.Sdk.Web\" SDk为Web\n\n- \bFolder Include=\"wwwroot\\\" 包含 wwwroot静态文件\n\n- PackageReference Include=\"Dapper\" Version=\"1.50.4\" 引用了Dapper程序包(一个ORM框架)\n\n- PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"2.0.3\" 引用了MVC框架\n\n- PackageReference Include=\"Newtonsoft.Json\" Version=\"11.0.2\" 引用了Newtonsoft.Json Json库\n\n这里我们先看看,具体内容在下一讲asp.net core 入门我们会详细讲解.\n\n全文完....\n","slug":"start-dotnetcore","published":1,"updated":"2018-05-29T23:30:50.868Z","comments":1,"photos":[],"link":"","_id":"cji704sq4000vel0rmewp3ebg","content":"<h1 id=\"dotnet-core-入门篇\"><a href=\"#dotnet-core-入门篇\" class=\"headerlink\" title=\"dotnet core(入门篇)\"></a>dotnet core(入门篇)</h1><h2 id=\"开发环境准备\"><a href=\"#开发环境准备\" class=\"headerlink\" title=\"开发环境准备\"></a>开发环境准备</h2><p>dotnet core最低开发环境要求就是一个<a href=\"https://www.microsoft.com/net/learn/get-started/\" target=\"_blank\" rel=\"noopener\">.NET SDK</a>,在这里可以下载的到最新版本的SDK,各个平台都有.</p>\n<p>理论上有了SDK什么事都能做了.</p>\n<p>安装SDK的步骤参考上面的连接就OK,这部分我们跳过.</p>\n<p>简单讲一下不同操作系统的开发工具选择.</p>\n<ul>\n<li><p>Windows平台下首选Visual Studio 2017,安装的时候选择 .NET Core部分即可,安装下来估计占用磁盘空间5G,同时会帮你装好SDK的,好用,很好用.</p>\n</li>\n<li><p>MacOS/Linux平台选择 SDK + Visual Studio Code + Debug插件 + Nuget插件,很不错,完全生产级别</p>\n</li>\n<li><p>备选方案 Jetbrains家的rider,暂时没用过,resharper一直好评如潮</p>\n</li>\n</ul>\n<p>今天我这边主要是是以VS Code + Debug插件 + 命令行来进来讲解.</p>\n<p>装好dotnet core SDK之后,打开命令行界面,输入dotnet看看.</p>\n<ul>\n<li>Windows中为CMD或者Powershell,MacOS/Linux为终端</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Usage: dotnet [options]</span><br><span class=\"line\">Usage: dotnet [path-to-application]</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -h|--help            Display help.</span><br><span class=\"line\">  --version         Display version.</span><br><span class=\"line\"></span><br><span class=\"line\">path-to-application:</span><br></pre></td></tr></table></figure>\n<p>再输入dotnet –version查看一下当前版本,我这边显示2.1.4.</p>\n<p>输入dotnet help</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.NET Command Line Tools (2.1.4)</span><br><span class=\"line\">Usage: dotnet [runtime-options] [path-to-application]</span><br><span class=\"line\">Usage: dotnet [sdk-options] [command] [arguments] [command-options]</span><br><span class=\"line\"></span><br><span class=\"line\">path-to-application:</span><br><span class=\"line\">  The path to an application .dll file to execute.</span><br><span class=\"line\"></span><br><span class=\"line\">SDK commands:</span><br><span class=\"line\">  new              Initialize .NET projects.</span><br><span class=\"line\">  restore          Restore dependencies specified in the .NET project.</span><br><span class=\"line\">  run              Compiles and immediately executes a .NET project.</span><br><span class=\"line\">  build            Builds a .NET project.</span><br><span class=\"line\">  publish          Publishes a .NET project for deployment (including the runtime).</span><br><span class=\"line\">  test             Runs unit tests using the test runner specified in the project.</span><br><span class=\"line\">  pack             Creates a NuGet package.</span><br><span class=\"line\">  migrate          Migrates a project.json based project to a msbuild based project.</span><br><span class=\"line\">  clean            Clean build output(s).</span><br><span class=\"line\">  sln              Modify solution (SLN) files.</span><br><span class=\"line\">  add              Add reference to the project.</span><br><span class=\"line\">  remove           Remove reference from the project.</span><br><span class=\"line\">  list             List reference in the project.</span><br><span class=\"line\">  nuget            Provides additional NuGet commands.</span><br><span class=\"line\">  msbuild          Runs Microsoft Build Engine (MSBuild).</span><br><span class=\"line\">  vstest           Runs Microsoft Test Execution Command Line Tool.</span><br><span class=\"line\"></span><br><span class=\"line\">Common options:</span><br><span class=\"line\">  -v|--verbosity        Set the verbosity level of the command. Allowed values are q[uiet], m[inimal], n[ormal], d[etailed], and diag[nostic].</span><br><span class=\"line\">  -h|--help             Show help.</span><br></pre></td></tr></table></figure>\n<p>有类似的这些信息,说明我们的SDK安装以及完成了.</p>\n<p>Visual Studio 和Visual Studio Code的安装就不多说了.</p>\n<h2 id=\"创建-dotnet-core程序\"><a href=\"#创建-dotnet-core程序\" class=\"headerlink\" title=\"创建 dotnet core程序\"></a>创建 dotnet core程序</h2><p>我这边只有SDK + VS Code环境,创建程序直接使用命令行了.</p>\n<p>dotnet core SDK中已经有很多现成的APP模板,我们直接使用dotnet new命令就可以创建对应的程序.</p>\n<p>命令行输入 “ dotnet new “, 显示如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage: new [options]</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -h, --help          Displays help for this command.</span><br><span class=\"line\">  -l, --list          Lists templates containing the specified name. If no name is specified, lists all templates.</span><br><span class=\"line\">  -n, --name          The name for the output being created. If no name is specified, the name of the current directory is used.</span><br><span class=\"line\">  -o, --output        Location to place the generated output.</span><br><span class=\"line\">  -i, --install       Installs a source or a template pack.</span><br><span class=\"line\">  -u, --uninstall     Uninstalls a source or a template pack.</span><br><span class=\"line\">  --type              Filters templates based on available types. Predefined values are &quot;project&quot;, &quot;item&quot; or &quot;other&quot;.</span><br><span class=\"line\">  --force             Forces content to be generated even if it would change existing files.</span><br><span class=\"line\">  -lang, --language   Specifies the language of the template to create.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Templates                                         Short Name       Language          Tags</span><br><span class=\"line\">--------------------------------------------------------------------------------------------------------</span><br><span class=\"line\">Console Application                               console          [C#], F#, VB      Common/Console</span><br><span class=\"line\">Class library                                     classlib         [C#], F#, VB      Common/Library</span><br><span class=\"line\">Unit Test Project                                 mstest           [C#], F#, VB      Test/MSTest</span><br><span class=\"line\">xUnit Test Project                                xunit            [C#], F#, VB      Test/xUnit</span><br><span class=\"line\">ASP.NET Core Empty                                web              [C#], F#          Web/Empty</span><br><span class=\"line\">ASP.NET Core Web App (Model-View-Controller)      mvc              [C#], F#          Web/MVC</span><br><span class=\"line\">ASP.NET Core Web App                              razor            [C#]              Web/MVC/Razor Pages</span><br><span class=\"line\">ASP.NET Core with Angular                         angular          [C#]              Web/MVC/SPA</span><br><span class=\"line\">ASP.NET Core with React.js                        react            [C#]              Web/MVC/SPA</span><br><span class=\"line\">ASP.NET Core with React.js and Redux              reactredux       [C#]              Web/MVC/SPA</span><br><span class=\"line\">ASP.NET Core Web API                              webapi           [C#], F#          Web/WebAPI</span><br><span class=\"line\">global.json file                                  globaljson                         Config</span><br><span class=\"line\">NuGet Config                                      nugetconfig                        Config</span><br><span class=\"line\">Web Config                                        webconfig                          Config</span><br><span class=\"line\">Solution File                                     sln                                Solution</span><br><span class=\"line\">Razor Page                                        page                               Web/ASP.NET</span><br><span class=\"line\">MVC ViewImports                                   viewimports                        Web/ASP.NET</span><br><span class=\"line\">MVC ViewStart                                     viewstart                          Web/ASP.NET</span><br><span class=\"line\"></span><br><span class=\"line\">Examples:</span><br><span class=\"line\">    dotnet new mvc --auth Individual</span><br><span class=\"line\">    dotnet new viewimports --namespace</span><br><span class=\"line\">    dotnet new --help</span><br></pre></td></tr></table></figure>\n<p>既然是手把手教程,肯定从最原始的Console Application 开始咯,在命令行中输入命令”dotnet new console -n FirstApplication”,创建一个名为FirstApplication的命令行程序</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotnet new console -n FirstApplication;</span><br><span class=\"line\">\b<span class=\"built_in\">cd</span> FirstApplication;</span><br><span class=\"line\">ls FirstApplication;</span><br><span class=\"line\"><span class=\"comment\">#✗ cd FirstApplication</span></span><br><span class=\"line\"><span class=\"comment\"># FirstApplication git:(master) ✗ ls</span></span><br><span class=\"line\"><span class=\"comment\"># FirstApplication.csproj  Program.cs  obj/</span></span><br></pre></td></tr></table></figure>\n<p>我们切换到FirstApplication文件中,可以看到现在已经有三个文件.简单讲解一下:</p>\n<ul>\n<li><p>FirstApplication.csproj .csproj为项目构建文件(C Sharp Project”),对应maven中的pom.xml或者是gradle中的build.gradle</p>\n</li>\n<li><p>Program.cs 为程序的主入口, 有一个静态的Main方法</p>\n</li>\n<li><p>obj用于存放编译过程中生成的中间临时文件,一般不用管</p>\n</li>\n</ul>\n<p>我们使用VS Code打开这个文件夹看看.</p>\n<p>首次在VS Code中打开带有.csproj文件的文件夹,VS Code会提示是否需要安装相关插件,直接选择是即可.</p>\n<p>我们这里要用到的插件主要是”C# for Visual Studio Code (powered by OmniSharp)”,直接在插件仓库搜C#基本就能看到.</p>\n<p>直接看下Program.cs的代码:</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-29%20%E4%B8%8B%E5%8D%8810.51.02.png\" alt=\"代码1\"></p>\n<p>一句话输出”Hello World!”…</p>\n<p>我们试着运行一下看看.</p>\n<p>有两种方式:</p>\n<ul>\n<li><p>直接在对应项目文件夹位置的命令行中执行dotner run;</p>\n</li>\n<li><p>VS Code debug启动</p>\n</li>\n</ul>\n<h3 id=\"dotnet-run\"><a href=\"#dotnet-run\" class=\"headerlink\" title=\"dotnet run\"></a>dotnet run</h3><p>“VS Code-查看-集成终端”可以直接调出终端,并且切到当前项目文件路径,执行 dotnet run输出如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  FirstApplication git:(master) ✗ dotnet run</span><br><span class=\"line\">Hello World!</span><br></pre></td></tr></table></figure>\n<h3 id=\"VS-Code-debug\"><a href=\"#VS-Code-debug\" class=\"headerlink\" title=\"VS Code debug\"></a>VS Code debug</h3><p>VS Code左侧切到debug(一只虫子的图标),点击调试旁边的绿色按钮开始启动.</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-29%20%E4%B8%8B%E5%8D%8810.57.46.png\" alt=\"debug\"></p>\n<p>终端输出:</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-29%20%E4%B8%8B%E5%8D%8810.59.51.png\" alt=\"终端\"></p>\n<p>调试控制台输出:</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-29%20%E4%B8%8B%E5%8D%8811.00.51.png\" alt=\"控制台\"></p>\n<p>都说了Debug了,我们简单也做个debug断点调试.</p>\n<p>点击代码文件左侧黑色边栏,鼠标左键单击在第8,9行,对应位置出现断点(小红点),\b<br>如下图:<br><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-29%20%E4%B8%8B%E5%8D%8811.02.09.png\" alt=\"断点\"></p>\n<p>再次Debug运行程序.</p>\n<p>第8行位置出现黄色条纹,程序处于debug默认等待下一步操作.</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-29%20%E4%B8%8B%E5%8D%8811.04.41.png\" alt=\"debug\"></p>\n<p>左侧可查看相关变量当前值,正上方有debug相关操作(F5继续,F10单步跳过,F11单步调试…)</p>\n<p>F5按一下,黄色条纹往下走一步到第9行(上一步也下了断点).此时尚未输出任何的信息.</p>\n<p>F5下一步执行Console.WriteLine(“Hello World!”);输出”Hello World!”</p>\n<h3 id=\"写个累加程序试试水\"><a href=\"#写个累加程序试试水\" class=\"headerlink\" title=\"写个累加程序试试水\"></a>写个累加程序试试水</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">using System;</span><br><span class=\"line\"></span><br><span class=\"line\">namespace FirstApplication</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    class Program</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        static void Main(string[] args)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            var sum = 0;</span><br><span class=\"line\">            for (var i = 0; i &lt; 10; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                sum = sum + i;</span><br><span class=\"line\">                Console.WriteLine($&quot;当前i值为:&#123;i&#125;,sum:&#123;sum&#125;&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\">Loaded &apos;/usr/local/share/dotnet/shared/Microsoft.NETCore.App/2.0.5/System.Runtime.Extensions.dll&apos;. Skipped loading symbols. Module is optimized and the debugger option &apos;Just My Code&apos; is enabled.</span><br><span class=\"line\">当前i值为:0,sum:0</span><br><span class=\"line\">当前i值为:1,sum:1</span><br><span class=\"line\">当前i值为:2,sum:3</span><br><span class=\"line\">当前i值为:3,sum:6</span><br><span class=\"line\">当前i值为:4,sum:10</span><br><span class=\"line\">当前i值为:5,sum:15</span><br><span class=\"line\">当前i值为:6,sum:21</span><br><span class=\"line\">当前i值为:7,sum:28</span><br><span class=\"line\">当前i值为:8,sum:36</span><br><span class=\"line\">当前i值为:9,sum:45</span><br><span class=\"line\">The program &apos;[32086] FirstApplication.dll&apos; has exited with code 0 (0x0).</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<p>在循环里面打个断点看看i的值和sum的值.</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-29%20%E4%B8%8B%E5%8D%8811.17.06.png\" alt=\"i+sum\"></p>\n<p>鼠标移动到对应变量上.<br><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-29%20%E4%B8%8B%E5%8D%8811.17.49.png\" alt=\"鼠标移上去\"></p>\n<p>到这里,第一个dotnet core程序基本已经完成了,本教程结束….</p>\n<h2 id=\"骗你的-这里还有\"><a href=\"#骗你的-这里还有\" class=\"headerlink\" title=\"骗你的,这里还有\"></a>骗你的,这里还有</h2><p>还记得我们上面看到的FirstApplication.csproj吗?</p>\n<p>我们直接在VS Code中打开看看.(VS用户随便找个文件编辑器打开)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Project</span> <span class=\"attr\">Sdk</span>=<span class=\"string\">\"Microsoft.NET.Sdk\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">PropertyGroup</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">OutputType</span>&gt;</span>Exe<span class=\"tag\">&lt;/<span class=\"name\">OutputType</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TargetFramework</span>&gt;</span>netcoreapp2.0<span class=\"tag\">&lt;/<span class=\"name\">TargetFramework</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">PropertyGroup</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里就指定了SDK版本和程序版本,没有其他多余的东西了.</p>\n<p>暂时没什么看的,我们找个web项目的来看看.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Project</span> <span class=\"attr\">Sdk</span>=<span class=\"string\">\"Microsoft.NET.Sdk.Web\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">PropertyGroup</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TargetFramework</span>&gt;</span>netcoreapp2.0<span class=\"tag\">&lt;/<span class=\"name\">TargetFramework</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">PropertyGroup</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ItemGroup</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Folder</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"wwwroot\\\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ItemGroup</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ItemGroup</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"Dapper\"</span> <span class=\"attr\">Version</span>=<span class=\"string\">\"1.50.4\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"Microsoft.ApplicationInsights.AspNetCore\"</span> <span class=\"attr\">Version</span>=<span class=\"string\">\"2.2.1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"Microsoft.AspNetCore\"</span> <span class=\"attr\">Version</span>=<span class=\"string\">\"2.0.2\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"Microsoft.AspNetCore.Mvc\"</span> <span class=\"attr\">Version</span>=<span class=\"string\">\"2.0.3\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"Microsoft.AspNetCore.StaticFiles\"</span> <span class=\"attr\">Version</span>=<span class=\"string\">\"2.0.2\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"Microsoft.EntityFrameworkCore.Design\"</span> <span class=\"attr\">Version</span>=<span class=\"string\">\"2.0.2\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"Microsoft.Extensions.Logging.Debug\"</span> <span class=\"attr\">Version</span>=<span class=\"string\">\"2.0.1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"Microsoft.VisualStudio.Web.BrowserLink\"</span> <span class=\"attr\">Version</span>=<span class=\"string\">\"2.0.2\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"Microsoft.VisualStudio.Web.CodeGeneration.Design\"</span> <span class=\"attr\">Version</span>=<span class=\"string\">\"2.0.3\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"Newtonsoft.Json\"</span> <span class=\"attr\">Version</span>=<span class=\"string\">\"11.0.2\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"StackExchange.Redis.StrongName\"</span> <span class=\"attr\">Version</span>=<span class=\"string\">\"1.2.6\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"System.Diagnostics.Tools\"</span> <span class=\"attr\">Version</span>=<span class=\"string\">\"4.3.0\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"System.Text.Encoding.CodePages\"</span> <span class=\"attr\">Version</span>=<span class=\"string\">\"4.4.0\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"System.ValueTuple\"</span> <span class=\"attr\">Version</span>=<span class=\"string\">\"*\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"Microsoft.Extensions.Configuration.Json\"</span> <span class=\"attr\">Version</span>=<span class=\"string\">\"2.1.0-rc1-final\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"Pomelo.AspNetCore.TimedJob\"</span> <span class=\"attr\">Version</span>=<span class=\"string\">\"2.0.0-rtm-10046\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"MySqlConnector\"</span> <span class=\"attr\">Version</span>=<span class=\"string\">\"0.40.3\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"MongoDB.Driver.Core\"</span> <span class=\"attr\">Version</span>=<span class=\"string\">\"2.7.0-beta0001\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"MongoDB.Driver\"</span> <span class=\"attr\">Version</span>=<span class=\"string\">\"2.7.0-beta0001\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ItemGroup</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这边能看的东西就很多了.</p>\n<ul>\n<li><p>Project Sdk=”Microsoft.NET.Sdk.Web” SDk为Web</p>\n</li>\n<li><p>\bFolder Include=”wwwroot\\” 包含 wwwroot静态文件</p>\n</li>\n<li><p>PackageReference Include=”Dapper” Version=”1.50.4” 引用了Dapper程序包(一个ORM框架)</p>\n</li>\n<li><p>PackageReference Include=”Microsoft.AspNetCore.Mvc” Version=”2.0.3” 引用了MVC框架</p>\n</li>\n<li><p>PackageReference Include=”Newtonsoft.Json” Version=”11.0.2” 引用了Newtonsoft.Json Json库</p>\n</li>\n</ul>\n<p>这里我们先看看,具体内容在下一讲asp.net core 入门我们会详细讲解.</p>\n<p>全文完….</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"dotnet-core-入门篇\"><a href=\"#dotnet-core-入门篇\" class=\"headerlink\" title=\"dotnet core(入门篇)\"></a>dotnet core(入门篇)</h1><h2 id=\"开发环境准备\"><a href=\"#开发环境准备\" class=\"headerlink\" title=\"开发环境准备\"></a>开发环境准备</h2><p>dotnet core最低开发环境要求就是一个<a href=\"https://www.microsoft.com/net/learn/get-started/\" target=\"_blank\" rel=\"noopener\">.NET SDK</a>,在这里可以下载的到最新版本的SDK,各个平台都有.</p>\n<p>理论上有了SDK什么事都能做了.</p>\n<p>安装SDK的步骤参考上面的连接就OK,这部分我们跳过.</p>\n<p>简单讲一下不同操作系统的开发工具选择.</p>\n<ul>\n<li><p>Windows平台下首选Visual Studio 2017,安装的时候选择 .NET Core部分即可,安装下来估计占用磁盘空间5G,同时会帮你装好SDK的,好用,很好用.</p>\n</li>\n<li><p>MacOS/Linux平台选择 SDK + Visual Studio Code + Debug插件 + Nuget插件,很不错,完全生产级别</p>\n</li>\n<li><p>备选方案 Jetbrains家的rider,暂时没用过,resharper一直好评如潮</p>\n</li>\n</ul>\n<p>今天我这边主要是是以VS Code + Debug插件 + 命令行来进来讲解.</p>\n<p>装好dotnet core SDK之后,打开命令行界面,输入dotnet看看.</p>\n<ul>\n<li>Windows中为CMD或者Powershell,MacOS/Linux为终端</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Usage: dotnet [options]</span><br><span class=\"line\">Usage: dotnet [path-to-application]</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -h|--help            Display help.</span><br><span class=\"line\">  --version         Display version.</span><br><span class=\"line\"></span><br><span class=\"line\">path-to-application:</span><br></pre></td></tr></table></figure>\n<p>再输入dotnet –version查看一下当前版本,我这边显示2.1.4.</p>\n<p>输入dotnet help</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.NET Command Line Tools (2.1.4)</span><br><span class=\"line\">Usage: dotnet [runtime-options] [path-to-application]</span><br><span class=\"line\">Usage: dotnet [sdk-options] [command] [arguments] [command-options]</span><br><span class=\"line\"></span><br><span class=\"line\">path-to-application:</span><br><span class=\"line\">  The path to an application .dll file to execute.</span><br><span class=\"line\"></span><br><span class=\"line\">SDK commands:</span><br><span class=\"line\">  new              Initialize .NET projects.</span><br><span class=\"line\">  restore          Restore dependencies specified in the .NET project.</span><br><span class=\"line\">  run              Compiles and immediately executes a .NET project.</span><br><span class=\"line\">  build            Builds a .NET project.</span><br><span class=\"line\">  publish          Publishes a .NET project for deployment (including the runtime).</span><br><span class=\"line\">  test             Runs unit tests using the test runner specified in the project.</span><br><span class=\"line\">  pack             Creates a NuGet package.</span><br><span class=\"line\">  migrate          Migrates a project.json based project to a msbuild based project.</span><br><span class=\"line\">  clean            Clean build output(s).</span><br><span class=\"line\">  sln              Modify solution (SLN) files.</span><br><span class=\"line\">  add              Add reference to the project.</span><br><span class=\"line\">  remove           Remove reference from the project.</span><br><span class=\"line\">  list             List reference in the project.</span><br><span class=\"line\">  nuget            Provides additional NuGet commands.</span><br><span class=\"line\">  msbuild          Runs Microsoft Build Engine (MSBuild).</span><br><span class=\"line\">  vstest           Runs Microsoft Test Execution Command Line Tool.</span><br><span class=\"line\"></span><br><span class=\"line\">Common options:</span><br><span class=\"line\">  -v|--verbosity        Set the verbosity level of the command. Allowed values are q[uiet], m[inimal], n[ormal], d[etailed], and diag[nostic].</span><br><span class=\"line\">  -h|--help             Show help.</span><br></pre></td></tr></table></figure>\n<p>有类似的这些信息,说明我们的SDK安装以及完成了.</p>\n<p>Visual Studio 和Visual Studio Code的安装就不多说了.</p>\n<h2 id=\"创建-dotnet-core程序\"><a href=\"#创建-dotnet-core程序\" class=\"headerlink\" title=\"创建 dotnet core程序\"></a>创建 dotnet core程序</h2><p>我这边只有SDK + VS Code环境,创建程序直接使用命令行了.</p>\n<p>dotnet core SDK中已经有很多现成的APP模板,我们直接使用dotnet new命令就可以创建对应的程序.</p>\n<p>命令行输入 “ dotnet new “, 显示如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage: new [options]</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -h, --help          Displays help for this command.</span><br><span class=\"line\">  -l, --list          Lists templates containing the specified name. If no name is specified, lists all templates.</span><br><span class=\"line\">  -n, --name          The name for the output being created. If no name is specified, the name of the current directory is used.</span><br><span class=\"line\">  -o, --output        Location to place the generated output.</span><br><span class=\"line\">  -i, --install       Installs a source or a template pack.</span><br><span class=\"line\">  -u, --uninstall     Uninstalls a source or a template pack.</span><br><span class=\"line\">  --type              Filters templates based on available types. Predefined values are &quot;project&quot;, &quot;item&quot; or &quot;other&quot;.</span><br><span class=\"line\">  --force             Forces content to be generated even if it would change existing files.</span><br><span class=\"line\">  -lang, --language   Specifies the language of the template to create.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Templates                                         Short Name       Language          Tags</span><br><span class=\"line\">--------------------------------------------------------------------------------------------------------</span><br><span class=\"line\">Console Application                               console          [C#], F#, VB      Common/Console</span><br><span class=\"line\">Class library                                     classlib         [C#], F#, VB      Common/Library</span><br><span class=\"line\">Unit Test Project                                 mstest           [C#], F#, VB      Test/MSTest</span><br><span class=\"line\">xUnit Test Project                                xunit            [C#], F#, VB      Test/xUnit</span><br><span class=\"line\">ASP.NET Core Empty                                web              [C#], F#          Web/Empty</span><br><span class=\"line\">ASP.NET Core Web App (Model-View-Controller)      mvc              [C#], F#          Web/MVC</span><br><span class=\"line\">ASP.NET Core Web App                              razor            [C#]              Web/MVC/Razor Pages</span><br><span class=\"line\">ASP.NET Core with Angular                         angular          [C#]              Web/MVC/SPA</span><br><span class=\"line\">ASP.NET Core with React.js                        react            [C#]              Web/MVC/SPA</span><br><span class=\"line\">ASP.NET Core with React.js and Redux              reactredux       [C#]              Web/MVC/SPA</span><br><span class=\"line\">ASP.NET Core Web API                              webapi           [C#], F#          Web/WebAPI</span><br><span class=\"line\">global.json file                                  globaljson                         Config</span><br><span class=\"line\">NuGet Config                                      nugetconfig                        Config</span><br><span class=\"line\">Web Config                                        webconfig                          Config</span><br><span class=\"line\">Solution File                                     sln                                Solution</span><br><span class=\"line\">Razor Page                                        page                               Web/ASP.NET</span><br><span class=\"line\">MVC ViewImports                                   viewimports                        Web/ASP.NET</span><br><span class=\"line\">MVC ViewStart                                     viewstart                          Web/ASP.NET</span><br><span class=\"line\"></span><br><span class=\"line\">Examples:</span><br><span class=\"line\">    dotnet new mvc --auth Individual</span><br><span class=\"line\">    dotnet new viewimports --namespace</span><br><span class=\"line\">    dotnet new --help</span><br></pre></td></tr></table></figure>\n<p>既然是手把手教程,肯定从最原始的Console Application 开始咯,在命令行中输入命令”dotnet new console -n FirstApplication”,创建一个名为FirstApplication的命令行程序</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotnet new console -n FirstApplication;</span><br><span class=\"line\">\b<span class=\"built_in\">cd</span> FirstApplication;</span><br><span class=\"line\">ls FirstApplication;</span><br><span class=\"line\"><span class=\"comment\">#✗ cd FirstApplication</span></span><br><span class=\"line\"><span class=\"comment\"># FirstApplication git:(master) ✗ ls</span></span><br><span class=\"line\"><span class=\"comment\"># FirstApplication.csproj  Program.cs  obj/</span></span><br></pre></td></tr></table></figure>\n<p>我们切换到FirstApplication文件中,可以看到现在已经有三个文件.简单讲解一下:</p>\n<ul>\n<li><p>FirstApplication.csproj .csproj为项目构建文件(C Sharp Project”),对应maven中的pom.xml或者是gradle中的build.gradle</p>\n</li>\n<li><p>Program.cs 为程序的主入口, 有一个静态的Main方法</p>\n</li>\n<li><p>obj用于存放编译过程中生成的中间临时文件,一般不用管</p>\n</li>\n</ul>\n<p>我们使用VS Code打开这个文件夹看看.</p>\n<p>首次在VS Code中打开带有.csproj文件的文件夹,VS Code会提示是否需要安装相关插件,直接选择是即可.</p>\n<p>我们这里要用到的插件主要是”C# for Visual Studio Code (powered by OmniSharp)”,直接在插件仓库搜C#基本就能看到.</p>\n<p>直接看下Program.cs的代码:</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-29%20%E4%B8%8B%E5%8D%8810.51.02.png\" alt=\"代码1\"></p>\n<p>一句话输出”Hello World!”…</p>\n<p>我们试着运行一下看看.</p>\n<p>有两种方式:</p>\n<ul>\n<li><p>直接在对应项目文件夹位置的命令行中执行dotner run;</p>\n</li>\n<li><p>VS Code debug启动</p>\n</li>\n</ul>\n<h3 id=\"dotnet-run\"><a href=\"#dotnet-run\" class=\"headerlink\" title=\"dotnet run\"></a>dotnet run</h3><p>“VS Code-查看-集成终端”可以直接调出终端,并且切到当前项目文件路径,执行 dotnet run输出如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  FirstApplication git:(master) ✗ dotnet run</span><br><span class=\"line\">Hello World!</span><br></pre></td></tr></table></figure>\n<h3 id=\"VS-Code-debug\"><a href=\"#VS-Code-debug\" class=\"headerlink\" title=\"VS Code debug\"></a>VS Code debug</h3><p>VS Code左侧切到debug(一只虫子的图标),点击调试旁边的绿色按钮开始启动.</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-29%20%E4%B8%8B%E5%8D%8810.57.46.png\" alt=\"debug\"></p>\n<p>终端输出:</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-29%20%E4%B8%8B%E5%8D%8810.59.51.png\" alt=\"终端\"></p>\n<p>调试控制台输出:</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-29%20%E4%B8%8B%E5%8D%8811.00.51.png\" alt=\"控制台\"></p>\n<p>都说了Debug了,我们简单也做个debug断点调试.</p>\n<p>点击代码文件左侧黑色边栏,鼠标左键单击在第8,9行,对应位置出现断点(小红点),\b<br>如下图:<br><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-29%20%E4%B8%8B%E5%8D%8811.02.09.png\" alt=\"断点\"></p>\n<p>再次Debug运行程序.</p>\n<p>第8行位置出现黄色条纹,程序处于debug默认等待下一步操作.</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-29%20%E4%B8%8B%E5%8D%8811.04.41.png\" alt=\"debug\"></p>\n<p>左侧可查看相关变量当前值,正上方有debug相关操作(F5继续,F10单步跳过,F11单步调试…)</p>\n<p>F5按一下,黄色条纹往下走一步到第9行(上一步也下了断点).此时尚未输出任何的信息.</p>\n<p>F5下一步执行Console.WriteLine(“Hello World!”);输出”Hello World!”</p>\n<h3 id=\"写个累加程序试试水\"><a href=\"#写个累加程序试试水\" class=\"headerlink\" title=\"写个累加程序试试水\"></a>写个累加程序试试水</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">using System;</span><br><span class=\"line\"></span><br><span class=\"line\">namespace FirstApplication</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    class Program</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        static void Main(string[] args)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            var sum = 0;</span><br><span class=\"line\">            for (var i = 0; i &lt; 10; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                sum = sum + i;</span><br><span class=\"line\">                Console.WriteLine($&quot;当前i值为:&#123;i&#125;,sum:&#123;sum&#125;&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\">Loaded &apos;/usr/local/share/dotnet/shared/Microsoft.NETCore.App/2.0.5/System.Runtime.Extensions.dll&apos;. Skipped loading symbols. Module is optimized and the debugger option &apos;Just My Code&apos; is enabled.</span><br><span class=\"line\">当前i值为:0,sum:0</span><br><span class=\"line\">当前i值为:1,sum:1</span><br><span class=\"line\">当前i值为:2,sum:3</span><br><span class=\"line\">当前i值为:3,sum:6</span><br><span class=\"line\">当前i值为:4,sum:10</span><br><span class=\"line\">当前i值为:5,sum:15</span><br><span class=\"line\">当前i值为:6,sum:21</span><br><span class=\"line\">当前i值为:7,sum:28</span><br><span class=\"line\">当前i值为:8,sum:36</span><br><span class=\"line\">当前i值为:9,sum:45</span><br><span class=\"line\">The program &apos;[32086] FirstApplication.dll&apos; has exited with code 0 (0x0).</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<p>在循环里面打个断点看看i的值和sum的值.</p>\n<p><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-29%20%E4%B8%8B%E5%8D%8811.17.06.png\" alt=\"i+sum\"></p>\n<p>鼠标移动到对应变量上.<br><img src=\"http://7xrayk.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-29%20%E4%B8%8B%E5%8D%8811.17.49.png\" alt=\"鼠标移上去\"></p>\n<p>到这里,第一个dotnet core程序基本已经完成了,本教程结束….</p>\n<h2 id=\"骗你的-这里还有\"><a href=\"#骗你的-这里还有\" class=\"headerlink\" title=\"骗你的,这里还有\"></a>骗你的,这里还有</h2><p>还记得我们上面看到的FirstApplication.csproj吗?</p>\n<p>我们直接在VS Code中打开看看.(VS用户随便找个文件编辑器打开)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Project</span> <span class=\"attr\">Sdk</span>=<span class=\"string\">\"Microsoft.NET.Sdk\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">PropertyGroup</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">OutputType</span>&gt;</span>Exe<span class=\"tag\">&lt;/<span class=\"name\">OutputType</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TargetFramework</span>&gt;</span>netcoreapp2.0<span class=\"tag\">&lt;/<span class=\"name\">TargetFramework</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">PropertyGroup</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里就指定了SDK版本和程序版本,没有其他多余的东西了.</p>\n<p>暂时没什么看的,我们找个web项目的来看看.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Project</span> <span class=\"attr\">Sdk</span>=<span class=\"string\">\"Microsoft.NET.Sdk.Web\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">PropertyGroup</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TargetFramework</span>&gt;</span>netcoreapp2.0<span class=\"tag\">&lt;/<span class=\"name\">TargetFramework</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">PropertyGroup</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ItemGroup</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Folder</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"wwwroot\\\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ItemGroup</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ItemGroup</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"Dapper\"</span> <span class=\"attr\">Version</span>=<span class=\"string\">\"1.50.4\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"Microsoft.ApplicationInsights.AspNetCore\"</span> <span class=\"attr\">Version</span>=<span class=\"string\">\"2.2.1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"Microsoft.AspNetCore\"</span> <span class=\"attr\">Version</span>=<span class=\"string\">\"2.0.2\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"Microsoft.AspNetCore.Mvc\"</span> <span class=\"attr\">Version</span>=<span class=\"string\">\"2.0.3\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"Microsoft.AspNetCore.StaticFiles\"</span> <span class=\"attr\">Version</span>=<span class=\"string\">\"2.0.2\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"Microsoft.EntityFrameworkCore.Design\"</span> <span class=\"attr\">Version</span>=<span class=\"string\">\"2.0.2\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"Microsoft.Extensions.Logging.Debug\"</span> <span class=\"attr\">Version</span>=<span class=\"string\">\"2.0.1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"Microsoft.VisualStudio.Web.BrowserLink\"</span> <span class=\"attr\">Version</span>=<span class=\"string\">\"2.0.2\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"Microsoft.VisualStudio.Web.CodeGeneration.Design\"</span> <span class=\"attr\">Version</span>=<span class=\"string\">\"2.0.3\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"Newtonsoft.Json\"</span> <span class=\"attr\">Version</span>=<span class=\"string\">\"11.0.2\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"StackExchange.Redis.StrongName\"</span> <span class=\"attr\">Version</span>=<span class=\"string\">\"1.2.6\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"System.Diagnostics.Tools\"</span> <span class=\"attr\">Version</span>=<span class=\"string\">\"4.3.0\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"System.Text.Encoding.CodePages\"</span> <span class=\"attr\">Version</span>=<span class=\"string\">\"4.4.0\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"System.ValueTuple\"</span> <span class=\"attr\">Version</span>=<span class=\"string\">\"*\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"Microsoft.Extensions.Configuration.Json\"</span> <span class=\"attr\">Version</span>=<span class=\"string\">\"2.1.0-rc1-final\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"Pomelo.AspNetCore.TimedJob\"</span> <span class=\"attr\">Version</span>=<span class=\"string\">\"2.0.0-rtm-10046\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"MySqlConnector\"</span> <span class=\"attr\">Version</span>=<span class=\"string\">\"0.40.3\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"MongoDB.Driver.Core\"</span> <span class=\"attr\">Version</span>=<span class=\"string\">\"2.7.0-beta0001\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">\"MongoDB.Driver\"</span> <span class=\"attr\">Version</span>=<span class=\"string\">\"2.7.0-beta0001\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ItemGroup</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这边能看的东西就很多了.</p>\n<ul>\n<li><p>Project Sdk=”Microsoft.NET.Sdk.Web” SDk为Web</p>\n</li>\n<li><p>\bFolder Include=”wwwroot\\” 包含 wwwroot静态文件</p>\n</li>\n<li><p>PackageReference Include=”Dapper” Version=”1.50.4” 引用了Dapper程序包(一个ORM框架)</p>\n</li>\n<li><p>PackageReference Include=”Microsoft.AspNetCore.Mvc” Version=”2.0.3” 引用了MVC框架</p>\n</li>\n<li><p>PackageReference Include=”Newtonsoft.Json” Version=”11.0.2” 引用了Newtonsoft.Json Json库</p>\n</li>\n</ul>\n<p>这里我们先看看,具体内容在下一讲asp.net core 入门我们会详细讲解.</p>\n<p>全文完….</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjhal1fve0002p631kiz8ix2e","category_id":"cjhal1fvj0005p6310wafhucp","_id":"cjhal1fvx000ep631vsazak38"},{"post_id":"cjhal1fvh0004p631royy1bff","category_id":"cjhal1fvo000ap631p9qqavm4","_id":"cjhal1fw2000lp6312ojpady8"},{"post_id":"cjhal1fvl0007p63131f85cqi","category_id":"cjhal1fvy000fp6313m3f2h14","_id":"cjhal1fw4000rp6314zqcydbl"},{"post_id":"cjhal1fw2000op6316iy2n2hc","category_id":"cjhal1fw2000np631hgicgn1o","_id":"cjhal1fw6000wp6311s2izu3o"},{"post_id":"cjhal1fvn0008p631cyow3m24","category_id":"cjhal1fw2000np631hgicgn1o","_id":"cjhal1fw80011p6313ocz98vi"},{"post_id":"cjhal1fw3000pp6314ovhohb8","category_id":"cjhal1fw2000np631hgicgn1o","_id":"cjhal1fw90014p63122yd95mf"},{"post_id":"cjhal1fw5000tp631qcms0dky","category_id":"cjhal1fw2000np631hgicgn1o","_id":"cjhal1fwa0018p6311bl3elh0"},{"post_id":"cjhal1fvo0009p631d3wzzohd","category_id":"cjhal1fvy000fp6313m3f2h14","_id":"cjhal1fwc001bp631lz5rb6bm"},{"post_id":"cjhal1fw6000vp631qtj0tdy9","category_id":"cjhal1fw2000np631hgicgn1o","_id":"cjhal1fwd001fp631wpor2t0m"},{"post_id":"cjhal1fw70010p631t1ot1bv2","category_id":"cjhal1fw2000np631hgicgn1o","_id":"cjhal1fwe001ip63168rs0g6t"},{"post_id":"cjhal1fvv000cp631j90gyfm1","category_id":"cjhal1fw2000np631hgicgn1o","_id":"cjhal1fwg001np6310ujd44ni"},{"post_id":"cjhal1fw80013p631i5yev9j2","category_id":"cjhal1fvy000fp6313m3f2h14","_id":"cjhal1fwh001qp631a10lxh3u"},{"post_id":"cjhal1fvw000dp6318n6z1fdd","category_id":"cjhal1fvy000fp6313m3f2h14","_id":"cjhal1fwj001vp63129106mzj"},{"post_id":"cjhal1fvz000hp6310v2rio06","category_id":"cjhal1fw2000np631hgicgn1o","_id":"cjhal1fwl001yp631mvluq26t"},{"post_id":"cjhal1fwd001hp631j9o47a8n","category_id":"cjhal1fvy000fp6313m3f2h14","_id":"cjhal1fwn0021p631uz1sj2zw"},{"post_id":"cjhal1fw1000jp631xlk43wr3","category_id":"cjhal1fw2000np631hgicgn1o","_id":"cjhal1fwo0025p631k4flnvbm"},{"post_id":"cjhal1fwg001pp631udgibqc6","category_id":"cjhal1fvo000ap631p9qqavm4","_id":"cjhal1fwp0028p6313kxiwt24"},{"post_id":"cjhal1fwa0017p631sd6lsm72","category_id":"cjhal1fwi001tp63126e2m82e","_id":"cjhal1fwr002cp631l8vn5l9o"},{"post_id":"cjhal1fwm0020p631yytq8nq1","category_id":"cjhal1fvy000fp6313m3f2h14","_id":"cjhal1fws002fp631b22j3w0n"},{"post_id":"cjhal1fwb001ap631tc5bas2c","category_id":"cjhal1fwn0022p631is183sep","_id":"cjhal1fwu002jp631kiejul0i"},{"post_id":"cjhal1fwq002bp631pjyz7pop","category_id":"cjhal1fw2000np631hgicgn1o","_id":"cjhal1fwv002np631vttezspk"},{"post_id":"cjhal1fwc001ep631g50w9wen","category_id":"cjhal1fwq0029p631na6kzzi0","_id":"cjhal1fww002rp631et76lt7y"},{"post_id":"cjhal1fws002ip631vr4bwzm0","category_id":"cjhal1fvy000fp6313m3f2h14","_id":"cjhal1fwy002vp631ppwknvjl"},{"post_id":"cjhal1fwf001mp6310jvgi4x1","category_id":"cjhal1fws002gp631s44z1lxz","_id":"cjhal1fwy002xp631sf1biwwg"},{"post_id":"cjhal1fwx002up631on2qpqn0","category_id":"cjhal1fvy000fp6313m3f2h14","_id":"cjhal1fwz0031p631qq7dw9cc"},{"post_id":"cjhal1fwi001up63113t9rzsd","category_id":"cjhal1fwv002pp631qs7e6gyw","_id":"cjhal1fx00035p631qc2prl39"},{"post_id":"cjhal1fwk001xp631134yq8jd","category_id":"cjhal1fwy002yp631x7z5ptev","_id":"cjhal1fx00037p63124om2q5g"},{"post_id":"cjhal1fwn0024p631wdz1k9is","category_id":"cjhal1fwz0032p6318ijial5z","_id":"cjhal1fx1003cp631i9efv1th"},{"post_id":"cjhal1fwo0027p631xtluo050","category_id":"cjhal1fx00038p631oxveyc53","_id":"cjhal1fx2003hp6319mpbawsk"},{"post_id":"cjhal1fwr002ep631aho7mvao","category_id":"cjhal1fx1003ep631re7u9bln","_id":"cjhal1fx3003mp6314gsgb47n"},{"post_id":"cjhal1fwu002mp631bievxin7","category_id":"cjhal1fx00038p631oxveyc53","_id":"cjhal1fx3003op631t5nnz7j6"},{"post_id":"cjhal1fwv002qp631echwdufc","category_id":"cjhal1fx3003lp631ms9d8ona","_id":"cjhal1fx4003sp6315yc5k8ne"},{"post_id":"cji704skz0000el0rsem3zymo","category_id":"cji704sl50002el0r681ne79k","_id":"cji704slh000ael0r9w2ehpo8"},{"post_id":"cji704sl30001el0ru7q9bk2x","category_id":"cji704slf0006el0r8a4fh69v","_id":"cji704slj000del0rff425l1f"},{"post_id":"cji704sld0004el0r83oc7run","category_id":"cji704slh000bel0rop0a28sh","_id":"cji704slk000iel0rpuezsfxv"},{"post_id":"cji704sle0005el0rl2gdbf81","category_id":"cji704slj000eel0rrjku0whh","_id":"cji704slk000lel0rckkqqa9i"},{"post_id":"cji704spt000sel0rjr9bj67m","category_id":"cji704slh000bel0rop0a28sh","_id":"cji704sq7000xel0ru0yejefm"},{"post_id":"cji704spy000tel0rf7mqh6sa","category_id":"cjhal1fvy000fp6313m3f2h14","_id":"cji704sq8000zel0rpycgnqub"},{"post_id":"cji704sq4000vel0rmewp3ebg","category_id":"cjhal1fvy000fp6313m3f2h14","_id":"cji704sq90011el0rpzg7tukl"}],"PostTag":[{"post_id":"cjhal1fve0002p631kiz8ix2e","tag_id":"cjhal1fvl0006p6317pgs71bv","_id":"cjhal1fw1000ip631x9fz26qs"},{"post_id":"cjhal1fve0002p631kiz8ix2e","tag_id":"cjhal1fvp000bp6315ciivo0m","_id":"cjhal1fw1000kp631ij8ningf"},{"post_id":"cjhal1fvh0004p631royy1bff","tag_id":"cjhal1fvl0006p6317pgs71bv","_id":"cjhal1fw5000up631y69zu86h"},{"post_id":"cjhal1fvh0004p631royy1bff","tag_id":"cjhal1fvp000bp6315ciivo0m","_id":"cjhal1fw6000xp631tsdsh1tg"},{"post_id":"cjhal1fvl0007p63131f85cqi","tag_id":"cjhal1fw4000qp6310vbq9xli","_id":"cjhal1fw80012p6314aecq94t"},{"post_id":"cjhal1fvn0008p631cyow3m24","tag_id":"cjhal1fw4000qp6310vbq9xli","_id":"cjhal1fwb0019p631d04wiwqm"},{"post_id":"cjhal1fvo0009p631d3wzzohd","tag_id":"cjhal1fw4000qp6310vbq9xli","_id":"cjhal1fwd001gp631gcvot92c"},{"post_id":"cjhal1fwc001ep631g50w9wen","tag_id":"cjhal1fw4000qp6310vbq9xli","_id":"cjhal1fwf001kp63195ttr5kg"},{"post_id":"cjhal1fvv000cp631j90gyfm1","tag_id":"cjhal1fw4000qp6310vbq9xli","_id":"cjhal1fwg001op631s52omhol"},{"post_id":"cjhal1fwd001hp631j9o47a8n","tag_id":"cjhal1fw4000qp6310vbq9xli","_id":"cjhal1fwh001sp6319w12zuu3"},{"post_id":"cjhal1fvw000dp6318n6z1fdd","tag_id":"cjhal1fw4000qp6310vbq9xli","_id":"cjhal1fwk001wp631hcza0zj3"},{"post_id":"cjhal1fvz000hp6310v2rio06","tag_id":"cjhal1fw4000qp6310vbq9xli","_id":"cjhal1fwn0023p631xa70n45s"},{"post_id":"cjhal1fw1000jp631xlk43wr3","tag_id":"cjhal1fwm001zp631z4tnlm2m","_id":"cjhal1fwq002ap6310eoftue4"},{"post_id":"cjhal1fw2000op6316iy2n2hc","tag_id":"cjhal1fw4000qp6310vbq9xli","_id":"cjhal1fws002hp631062durih"},{"post_id":"cjhal1fwq002bp631pjyz7pop","tag_id":"cjhal1fwm001zp631z4tnlm2m","_id":"cjhal1fwu002kp631tpese1kg"},{"post_id":"cjhal1fw3000pp6314ovhohb8","tag_id":"cjhal1fwm001zp631z4tnlm2m","_id":"cjhal1fwv002op631nt0qmua1"},{"post_id":"cjhal1fws002ip631vr4bwzm0","tag_id":"cjhal1fw4000qp6310vbq9xli","_id":"cjhal1fwx002sp631o7dqz75a"},{"post_id":"cjhal1fw5000tp631qcms0dky","tag_id":"cjhal1fwm001zp631z4tnlm2m","_id":"cjhal1fwy002wp63197ogem9y"},{"post_id":"cjhal1fw6000vp631qtj0tdy9","tag_id":"cjhal1fw4000qp6310vbq9xli","_id":"cjhal1fwz0030p631b487n5io"},{"post_id":"cjhal1fw6000vp631qtj0tdy9","tag_id":"cjhal1fwm001zp631z4tnlm2m","_id":"cjhal1fwz0033p6317yzjjnn1"},{"post_id":"cjhal1fw70010p631t1ot1bv2","tag_id":"cjhal1fw4000qp6310vbq9xli","_id":"cjhal1fx00036p631gg3h8qi7"},{"post_id":"cjhal1fw70010p631t1ot1bv2","tag_id":"cjhal1fwm001zp631z4tnlm2m","_id":"cjhal1fx00039p63144bi4tau"},{"post_id":"cjhal1fw80013p631i5yev9j2","tag_id":"cjhal1fw4000qp6310vbq9xli","_id":"cjhal1fx1003bp631lnfroyej"},{"post_id":"cjhal1fw80013p631i5yev9j2","tag_id":"cjhal1fwm001zp631z4tnlm2m","_id":"cjhal1fx1003dp631qov4eg6b"},{"post_id":"cjhal1fwa0017p631sd6lsm72","tag_id":"cjhal1fwm001zp631z4tnlm2m","_id":"cjhal1fx2003gp6312q8jt928"},{"post_id":"cjhal1fwb001ap631tc5bas2c","tag_id":"cjhal1fwm001zp631z4tnlm2m","_id":"cjhal1fx3003kp631ae3vtiao"},{"post_id":"cjhal1fwf001mp6310jvgi4x1","tag_id":"cjhal1fx2003ip631ldxme6gb","_id":"cjhal1fx3003qp631ihudjq7v"},{"post_id":"cjhal1fwf001mp6310jvgi4x1","tag_id":"cjhal1fx3003np631ocgued6u","_id":"cjhal1fx4003rp631y7jzkzg7"},{"post_id":"cjhal1fwg001pp631udgibqc6","tag_id":"cjhal1fvl0006p6317pgs71bv","_id":"cjhal1fx4003up631k3nc6xue"},{"post_id":"cjhal1fwg001pp631udgibqc6","tag_id":"cjhal1fx3003pp631sfzbpazn","_id":"cjhal1fx4003vp631rl7g3gqb"},{"post_id":"cjhal1fwi001up63113t9rzsd","tag_id":"cjhal1fx4003tp631z3eypq4x","_id":"cjhal1fx4003yp631thqeek4q"},{"post_id":"cjhal1fwi001up63113t9rzsd","tag_id":"cjhal1fx4003wp631jtmjdndm","_id":"cjhal1fx4003zp631eztmrx64"},{"post_id":"cjhal1fwk001xp631134yq8jd","tag_id":"cjhal1fx4003xp631495s0bwq","_id":"cjhal1fx50042p6317opth30w"},{"post_id":"cjhal1fwk001xp631134yq8jd","tag_id":"cjhal1fx50040p631k30ehncg","_id":"cjhal1fx50043p631wpa50i51"},{"post_id":"cjhal1fwm0020p631yytq8nq1","tag_id":"cjhal1fw4000qp6310vbq9xli","_id":"cjhal1fx60046p631d4rttpvw"},{"post_id":"cjhal1fwm0020p631yytq8nq1","tag_id":"cjhal1fx50041p631nbf2w7gm","_id":"cjhal1fx60047p6310430sckc"},{"post_id":"cjhal1fwm0020p631yytq8nq1","tag_id":"cjhal1fx50044p631x8o8fc5y","_id":"cjhal1fx60049p631ckpb1g9o"},{"post_id":"cjhal1fwn0024p631wdz1k9is","tag_id":"cjhal1fx50045p6314vlkifqf","_id":"cjhal1fx6004bp631312hx579"},{"post_id":"cjhal1fwn0024p631wdz1k9is","tag_id":"cjhal1fx60048p6319zj8nz33","_id":"cjhal1fx6004cp631aibe19k9"},{"post_id":"cjhal1fwo0027p631xtluo050","tag_id":"cjhal1fx6004ap631x28rwtzk","_id":"cjhal1fx7004ep631co86ym15"},{"post_id":"cjhal1fwr002ep631aho7mvao","tag_id":"cjhal1fx6004dp631yyojxtp1","_id":"cjhal1fx7004gp6317r21rd32"},{"post_id":"cjhal1fwu002mp631bievxin7","tag_id":"cjhal1fx7004fp631mp7c5m1x","_id":"cjhal1fx8004ip631umksolt3"},{"post_id":"cjhal1fwv002qp631echwdufc","tag_id":"cjhal1fx7004fp631mp7c5m1x","_id":"cjhal1fx9004mp631pujjrgia"},{"post_id":"cjhal1fwv002qp631echwdufc","tag_id":"cjhal1fx8004jp631nwr0aejc","_id":"cjhal1fx9004np63114mmrz1r"},{"post_id":"cjhal1fwv002qp631echwdufc","tag_id":"cjhal1fx8004kp6318zeboze0","_id":"cjhal1fx9004pp631djueyujt"},{"post_id":"cjhal1fwx002up631on2qpqn0","tag_id":"cjhal1fx9004lp6315f91im1t","_id":"cjhal1fxa004qp631oyw7ulh9"},{"post_id":"cjhal1fwx002up631on2qpqn0","tag_id":"cjhal1fx4003xp631495s0bwq","_id":"cjhal1fxa004rp631tmcrl00g"},{"post_id":"cji704skz0000el0rsem3zymo","tag_id":"cji704slc0003el0rz8yh8vwl","_id":"cji704slg0008el0ruw957qan"},{"post_id":"cji704skz0000el0rsem3zymo","tag_id":"cjhal1fx50044p631x8o8fc5y","_id":"cji704slh0009el0rm0v75epz"},{"post_id":"cji704sl30001el0ru7q9bk2x","tag_id":"cji704slg0007el0rlwvqzpks","_id":"cji704slk000gel0rydv8lc45"},{"post_id":"cji704sl30001el0ru7q9bk2x","tag_id":"cji704slh000cel0rr0abs68y","_id":"cji704slk000hel0rtui0gyoo"},{"post_id":"cji704sld0004el0r83oc7run","tag_id":"cji704slj000fel0rom51wsnc","_id":"cji704slk000kel0rxmsx7vt9"},{"post_id":"cji704sle0005el0rl2gdbf81","tag_id":"cji704slk000jel0r8le313ze","_id":"cji704sll000oel0rpkt8l4v4"},{"post_id":"cji704sle0005el0rl2gdbf81","tag_id":"cji704sll000mel0rma8nfla4","_id":"cji704sll000pel0rwmpkdrr2"},{"post_id":"cji704sle0005el0rl2gdbf81","tag_id":"cjhal1fx8004jp631nwr0aejc","_id":"cji704sll000qel0rgx6s1dy3"},{"post_id":"cji704sle0005el0rl2gdbf81","tag_id":"cji704sll000nel0ruv7a6bpe","_id":"cji704sll000rel0rg5fmatrd"},{"post_id":"cji704spt000sel0rjr9bj67m","tag_id":"cji704slj000fel0rom51wsnc","_id":"cji704sq3000uel0rtoard8fh"},{"post_id":"cji704spy000tel0rf7mqh6sa","tag_id":"cjhal1fw4000qp6310vbq9xli","_id":"cji704sq5000wel0rqo73l58y"},{"post_id":"cji704spy000tel0rf7mqh6sa","tag_id":"cjhal1fx50044p631x8o8fc5y","_id":"cji704sq8000yel0rda6r0v94"},{"post_id":"cji704spy000tel0rf7mqh6sa","tag_id":"cjhal1fvl0006p6317pgs71bv","_id":"cji704sq90010el0rv419aoht"},{"post_id":"cji704sq4000vel0rmewp3ebg","tag_id":"cjhal1fw4000qp6310vbq9xli","_id":"cji704sq90012el0ru9h3hqa8"},{"post_id":"cji704sq4000vel0rmewp3ebg","tag_id":"cjhal1fx50044p631x8o8fc5y","_id":"cji704sq90013el0rz4jyye62"}],"Tag":[{"name":"asp.net core","_id":"cjhal1fvl0006p6317pgs71bv"},{"name":"58City","_id":"cjhal1fvp000bp6315ciivo0m"},{"name":"dotnet core","_id":"cjhal1fw4000qp6310vbq9xli"},{"name":"dotnet","_id":"cjhal1fwm001zp631z4tnlm2m"},{"name":"shell","_id":"cjhal1fx2003ip631ldxme6gb"},{"name":"git","_id":"cjhal1fx3003np631ocgued6u"},{"name":"crawler","_id":"cjhal1fx3003pp631sfzbpazn"},{"name":"Java","_id":"cjhal1fx4003tp631z3eypq4x"},{"name":"开源","_id":"cjhal1fx4003wp631jtmjdndm"},{"name":"javascript","_id":"cjhal1fx4003xp631495s0bwq"},{"name":"requirejs","_id":"cjhal1fx50040p631k30ehncg"},{"name":"Jenkins","_id":"cjhal1fx50041p631nbf2w7gm"},{"name":"docker","_id":"cjhal1fx50044p631x8o8fc5y"},{"name":"linux","_id":"cjhal1fx50045p6314vlkifqf"},{"name":"Shell","_id":"cjhal1fx60048p6319zj8nz33"},{"name":"memorandum","_id":"cjhal1fx6004ap631x28rwtzk"},{"name":"sctripts","_id":"cjhal1fx6004dp631yyojxtp1"},{"name":"Visual Studio","_id":"cjhal1fx7004fp631mp7c5m1x"},{"name":"PHP","_id":"cjhal1fx8004jp631nwr0aejc"},{"name":"Debug","_id":"cjhal1fx8004kp6318zeboze0"},{"name":".net","_id":"cjhal1fx9004lp6315f91im1t"},{"name":"hexo","_id":"cji704slc0003el0rz8yh8vwl"},{"name":"ELK","_id":"cji704slg0007el0rlwvqzpks"},{"name":"logstash","_id":"cji704slh000cel0rr0abs68y"},{"name":"其他","_id":"cji704slj000fel0rom51wsnc"},{"name":"Visual Studio Code","_id":"cji704slk000jel0r8le313ze"},{"name":"debug","_id":"cji704sll000mel0rma8nfla4"},{"name":"xdebug","_id":"cji704sll000nel0ruv7a6bpe"}]}}